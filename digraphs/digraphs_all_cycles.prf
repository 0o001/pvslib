(digraphs_all_cycles
 (VCList_TCC1 0
  (VCList_TCC1-1 nil 3659207357 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (CyclesAt type-eq-decl nil digraphs_all_cycles nil)
    (VertCycles type-eq-decl nil digraphs_all_cycles nil))
   nil))
 (vertsl?_is_vertlist 0
  (vertsl?_is_vertlist-1 nil 3659367212
   ("" (skeep)
    (("" (split 1)
      (("1" (typepred "x")
        (("1" (expand "vertsl?")
          (("1" (expand "vert?")
            (("1" (expand "digraph_verts")
              (("1" (use "every_nth[T]")
                (("1" (replace -1 :hide? t)
                  (("1" (skeep)
                    (("1" (inst -1 "nth(x, i)")
                      (("1" (assert)
                        (("1" (expand "member" -1 2)
                          (("1" (use "nth_member[T]") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "x")
        (("2" (skeep)
          (("2" (expand "vertsl?")
            (("2" (flatten)
              (("2" (inst -1 "v")
                (("2" (assert)
                  (("2" (typepred "v")
                    (("2" (expand "vert?")
                      (("2" (expand "digraph_verts")
                        (("2" (expand "member" -2 2)
                          (("2" (assert)
                            (("2" (use "member_nth[T]")
                              (("2"
                                (assert)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst 1 "i")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use "no_rep_vertsl")
                                        (("2"
                                          (expand "no_repetitions?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst -1 "j")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (PRED type-eq-decl nil defined_types nil)
    (every_nth formula-decl nil list_props nil)
    (vert? const-decl "bool" digraphs_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" c_digraphs_digraphs nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (no_rep_vertsl formula-decl nil c_digraphs_digraphs nil)
    (vert type-eq-decl nil digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_type type-eq-decl nil digraphs_imp nil))
   nil))
 (walk_eq_TCC1 0
  (walk_eq_TCC1-1 nil 3659295519 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil))
 (walk_eq_TCC2 0
  (walk_eq_TCC2-1 nil 3659295519 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (C!1 skolem-const-decl "cdigraph_eq[T](G!1)" digraphs_all_cycles
     nil)
    (length def-decl "nat" list_props nil)
    (i!1 skolem-const-decl "below(length(w1!1))" digraphs_all_cycles
     nil)
    (w1!1 skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_make](G!1)"
     digraphs_all_cycles nil)
    (G!1 skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (edge? const-decl "bool" digraphs_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (verts_in? const-decl "bool" walks_ nil)
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil))
 (walki2walk_TCC1 0
  (walki2walk_TCC1-1 nil 3659286530 ("" (existence-tcc) nil nil) nil
   nil))
 (walki2walk_TCC2 0
  (walki2walk_TCC2-1 nil 3659292745 ("" (existence-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (C!1 skolem-const-decl "(cdigraph[T])" digraphs_all_cycles nil)
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (walki2walk_TCC3 0
  (walki2walk_TCC3-1 nil 3659300598
   ("" (skeep)
    (("" (typepred "cw")
      (("" (expand "walk?" -3)
        (("" (flatten)
          (("" (split 2)
            (("1" (grind) nil nil)
             ("2" (expand "walk?")
              (("2" (expand "finseq_appl")
                (("2" (expand "verts_in?")
                  (("2" (expand "digraph_verts")
                    (("2" (typepred "G")
                      (("2" (expand "eq")
                        (("2" (flatten)
                          (("2" (split 1)
                            (("1" (skeep)
                              (("1"
                                (replace -2 :hide? t :dir rl)
                                (("1"
                                  (typepred "list2set(data(C))")
                                  (("1"
                                    (replace -2 :hide? t)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use "nth_member[T]")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "edge?")
                                (("2"
                                  (expand "digraph_edges")
                                  (("2"
                                    (expand "member" -4 2)
                                    (("2"
                                      (inst? -4 :where 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst? -6 :where 2)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" c_digraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil)
    (walk? const-decl "bool" walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (digraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (nth_member formula-decl nil more_list_props "structures/")
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (walk2walki_rec_TCC1 0
  (walk2walki_rec_TCC1-1 nil 3659302045 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil))
   nil))
 (walk2walki_rec_TCC2 0
  (walk2walki_rec_TCC2-1 nil 3659302045 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (G!1 skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (C!1 skolem-const-decl "cdigraph_eq[T](G!1)" digraphs_all_cycles
     nil)
    (wi!1 skolem-const-decl "(walk?[T](C!1))" digraphs_all_cycles nil)
    (i!1 skolem-const-decl "below(length[nat](wi!1))"
     digraphs_all_cycles nil)
    (w!1 skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_make](G!1)"
     digraphs_all_cycles nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil))
   nil))
 (walk2walki_rec_TCC3 0
  (walk2walki_rec_TCC3-1 nil 3659302045 ("" (subtype-tcc) nil nil) nil
   nil))
 (walk2walki_rec_TCC4 0
  (walk2walki_rec_TCC4-1 nil 3659302045
   ("" (skeep)
    (("" (expand "finseq_appl")
      (("" (typepred "C")
        (("" (typepred "w")
          (("" (expand "walk?")
            (("" (flatten)
              (("" (expand "verts_in?")
                (("" (expand "digraph_verts")
                  (("" (expand "eq")
                    (("" (flatten)
                      (("" (inst -2 "offset")
                        (("" (replace -5 -2 :dir rl)
                          ((""
                            (typepred
                             "list2set(data(C::ComputableDigraph[T]))")
                            (("" (replace -2 :hide? t)
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (verts_in? const-decl "bool" walks_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil))
   nil))
 (walk2walki_rec_TCC5 0
  (walk2walki_rec_TCC5-1 nil 3659302045 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (walk2walki_rec_TCC6 0
  (walk2walki_rec_TCC6-1 nil 3659302045 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (walk2walki_rec_TCC7 0
  (walk2walki_rec_TCC7-1 nil 3659302045 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (walk2walki_rec_TCC8 0
  (walk2walki_rec_TCC8-1 nil 3659302045
   ("" (skeep)
    (("" (lift-if 1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (split 1)
            (("1" (expand "list_of_idxs") (("1" (grind) nil nil)) nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (expand "finseq_appl")
              (("4" (skeep)
                (("4" (typepred "i")
                  (("4" (assert)
                    (("4" (case "i=0")
                      (("1" (replace -1 :hide? t)
                        (("1" (replace -2 :hide? t)
                          (("1" (expand "nth" 1 2)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (typepred "v(G, C) (w, offset + 1)")
            (("1" (hide -1)
              (("1" (expand "finseq_appl")
                (("1" (split 2)
                  (("1" (expand "list_of_idxs")
                    (("1" (skeep)
                      (("1" (case "i=0")
                        (("1" (replace -1 :hide? t)
                          (("1" (expand "nth" 1)
                            (("1" (expand "size")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 2)
                          (("2" (assert)
                            (("2" (inst -1 "i-1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "walk?")
                    (("2" (skeep 1)
                      (("2" (case "i=0")
                        (("1" (replace -1 :hide? t)
                          (("1" (expand "nth" 1 3)
                            (("1" (expand "nth" 1 1)
                              (("1"
                                (typepred "w")
                                (("1"
                                  (expand "walk?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -3 "offset")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst -7 "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -7 :hide? t)
                                                (("1"
                                                  (typepred "C")
                                                  (("1"
                                                    (expand "eq")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         -3
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "verts_in?")
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "offset")
                                                            (("1"
                                                              (expand
                                                               "digraph_verts")
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (typepred
                                                                   "list2set(data(C::ComputableDigraph))")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         "member_nth[T]")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (expand
                                                                                 "edge?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "digraph_edges")
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -3
                                                                                     :where
                                                                                     -6)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-5
                                                                                          1))
                                                                                        (("1"
                                                                                          (use
                                                                                           "idx_nth_no_rep")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "C")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "cdigraph")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 2 3)
                          (("2" (assert)
                            (("2" (expand "nth" 2 1)
                              (("2"
                                (inst -2 "i-1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "i")
                                  (("2"
                                    (expand "length" -1 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "length" 1 1) (("3" (assert) nil nil))
                    nil)
                   ("4" (skeep)
                    (("4" (case "i=0")
                      (("1" (replace -1 :hide? t)
                        (("1" (expand "nth" 1 2)
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (expand "nth" 2 2)
                        (("2" (assert)
                          (("2" (inst -4 "i-1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_make](G)"
     digraphs_all_cycles nil)
    (offset skolem-const-decl "below(length(w))" digraphs_all_cycles
            nil)
    (v skolem-const-decl "[d11: [G: digraph[T], cdigraph_eq[T](G)] ->
   [d1:
      {z:
         [w:
            Walk
                [T, digraph_type[T], digraph_verts, digraph_edges,
                 digraph_make](d11`1),
          below(length(w))] |
               length(z`1) - z`2 < length(w) - offset} ->
      {wi: (walk?(d11`2)) |
               length(wi) + d1`2 = length(d1`1) AND
                (FORALL (i: below(length(wi))):
                   finseq_appl[T](d1`1)(i + d1`2) =
                    nth(data(d11`2), nth(wi, i)))}]]"
     digraphs_all_cycles nil)
    (i skolem-const-decl "below(length(cons[nat]
                 (idx[T](data(C), w`seq(offset)), v(G, C)(w, 1 + offset)))
       - 1)" digraphs_all_cycles nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (verts_in? const-decl "bool" walks_ nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (idx_nth_no_rep formula-decl nil more_list_props "structures/")
    (C skolem-const-decl "cdigraph_eq[T](G)" digraphs_all_cycles nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (edge? const-decl "bool" digraphs_ nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (walk2walki_TCC1 0
  (walk2walki_TCC1-1 nil 3659302045 ("" (subtype-tcc) nil nil) nil
   nil))
 (walk2walki_TCC2 0
  (walk2walki_TCC2-1 nil 3659302045
   ("" (skeep)
    (("" (typepred "walk2walki_rec(G, C)(w, 0)")
      (("" (expand "walk_eq")
        (("" (assert) (("" (skeep) (("" (inst -5 "i") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((walk2walki_rec def-decl "{wi: (walk?(C)) |
         length(wi) + offset = length(w) AND
          (FORALL (i: below(length(wi))):
             finseq_appl[T](w)(i + offset) = nth(data(C), nth(wi, i)))}"
     digraphs_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (Walk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil))
   nil))
 (w2wi_circuit 0
  (w2wi_circuit-1 nil 3659348443
   ("" (skeep)
    (("" (typepred "walk2walki(G,C)(w)")
      (("" (hide -1)
        (("" (expand "circuit?")
          (("" (flatten)
            (("" (split 1)
              (("1" (expand "pre_circuit?")
                (("1" (expand "finseq_appl")
                  (("1" (expand "walk_eq")
                    (("1" (flatten)
                      (("1" (expand "finseq_appl")
                        (("1" (inst? :copy? t)
                          (("1" (expand "last")
                            (("1" (inst -4 "length(w)-1")
                              (("1"
                                (replace -4 :hide? t)
                                (("1"
                                  (replace -3 :hide? t)
                                  (("1"
                                    (replace -3 :hide? t)
                                    (("1"
                                      (hide-all-but (-3 1))
                                      (("1"
                                        (expand "nth" -1 2)
                                        (("1"
                                          (typepred "C")
                                          (("1"
                                            (expand "cdigraph")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (-6 1 -3))
                                                (("1"
                                                  (expand
                                                   "no_repetitions?")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "car(walk2walki(G, C)(w))"
                                                     "nth(walk2walki(G, C)(w), length(walk2walki(G, C)(w)) - 1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "walk2walki(G, C)(w)")
                                                      (("2"
                                                        (expand
                                                         "walk?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "walk2walki(G, C)(w)")
                (("2" (expand "walk_eq")
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk2walki const-decl "{wi: (walk?(C)) | walk_eq(G, C)(w, wi)}"
     digraphs_all_cycles nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" circuits_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_make](G)"
     digraphs_all_cycles nil)
    (C skolem-const-decl "cdigraph_eq[T](G)" digraphs_all_cycles nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props "structures/")
    (pre_circuit? const-decl "bool" circuits_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (w2wi_cycle_TCC1 0
  (w2wi_cycle_TCC1-1 nil 3659348801
   ("" (skeep)
    (("" (use "w2wi_circuit")
      (("" (assert)
        (("" (expand "cycle?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((w2wi_circuit formula-decl nil digraphs_all_cycles nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (cycle? const-decl "bool" cycles_ nil))
   nil))
 (w2wi_cycle 0
  (w2wi_cycle-1 nil 3659348880
   ("" (skeep)
    (("" (typepred "walk2walki(G,C)(w)")
      (("" (hide -1)
        (("" (expand "cycle?")
          (("" (flatten)
            (("" (expand "finseq_appl")
              (("" (expand "no_repetitions?")
                (("" (skeep :preds? t)
                  (("" (expand "walk_eq")
                    (("" (flatten)
                      (("" (expand "finseq_appl")
                        (("" (expand "length" -5)
                          (("" (lift-if -5)
                            (("" (split -5)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "walk?")
                                  (("1" (flatten) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case "i < length(w) -1")
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (case "j<length(w)-1")
                                      (("1"
                                        (hide -4)
                                        (("1"
                                          (case "i+1=length(w)-1")
                                          (("1"
                                            (expand "circuit?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "pre_circuit?")
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (inst
                                                     -10
                                                     "0"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst-cp
                                                         -7
                                                         "j+1")
                                                        (("1"
                                                          (replace
                                                           -8
                                                           2
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             2
                                                             2)
                                                            (("1"
                                                              (replace
                                                               -10
                                                               :dir
                                                               rl
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "length(w)-1")
                                                                  (("1"
                                                                    (replace
                                                                     -7
                                                                     -8
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -6
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "j+1=length(w)-1")
                                            (("1"
                                              (expand "circuit?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "pre_circuit?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst
                                                       -10
                                                       "0"
                                                       "i+1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "i+1")
                                                          (("1"
                                                            (replace
                                                             -8
                                                             3
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               3
                                                               2)
                                                              (("1"
                                                                (replace
                                                                 -10
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "length(w)-1")
                                                                  (("1"
                                                                    (replace
                                                                     -7
                                                                     -8
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -6
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst-cp -6 "i+1")
                                              (("1"
                                                (expand "nth" -7 2)
                                                (("1"
                                                  (inst -6 "j+1")
                                                  (("1"
                                                    (expand "nth" -6 2)
                                                    (("1"
                                                      (inst
                                                       -9
                                                       "i+1"
                                                       "j+1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk2walki const-decl "{wi: (walk?(C)) | walk_eq(G, C)(w, wi)}"
     digraphs_all_cycles nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" cycles_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (j skolem-const-decl "below(length(cdr(walk2walki(G, C)(w))))"
     digraphs_all_cycles nil)
    (C skolem-const-decl "cdigraph_eq[T](G)" digraphs_all_cycles nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_make](G)"
     digraphs_all_cycles nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil)
    (i skolem-const-decl "below(length(cdr(walk2walki(G, C)(w))))"
     digraphs_all_cycles nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/"))
   shostak))
 (circuit_walk_eq 0
  (circuit_walk_eq-1 nil 3659352769
   ("" (skeep)
    (("" (typepred "ci")
      (("" (hide -1)
        (("" (expand "circuit?")
          (("" (flatten)
            (("" (expand "walk_eq")
              (("" (flatten)
                (("" (assert)
                  (("" (expand "finseq_appl")
                    (("" (expand "pre_circuit?")
                      (("" (expand "finseq_appl")
                        (("" (inst-cp -6 "0")
                          (("" (inst -6 "length(ci)-1")
                            (("" (replace -5 :dir rl)
                              ((""
                                (replace -6 :hide? t)
                                ((""
                                  (replace -6 :hide? t)
                                  ((""
                                    (expand "last")
                                    ((""
                                      (assert)
                                      (("" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((circuit? const-decl "bool" c_digraph_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (circuit? const-decl "bool" circuits_ nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (last const-decl "T" more_list_props "structures/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (cycle_walk_eq 0
  (cycle_walk_eq-1 nil 3659352396
   ("" (skeep)
    (("" (typepred "ci")
      (("" (hide -1)
        (("" (expand "cycle?")
          (("" (split 1)
            (("1" (use "circuit_walk_eq") (("1" (assert) nil nil)) nil)
             ("2" (expand "finseq_appl")
              (("2" (skeep)
                (("2" (case "i=0")
                  (("1" (expand "circuit?")
                    (("1" (flatten)
                      (("1" (expand "no_repetitions?")
                        (("1" (expand "last")
                          (("1" (expand "nth" -5)
                            (("1" (lift-if -5)
                              (("1"
                                (split -5)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "length" -1)
                                    (("2"
                                      (lift-if -1)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "length")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -7
                                               "length(cdr(ci))-1"
                                               "j-1")
                                              (("1"
                                                (split -7)
                                                (("1"
                                                  (expand "/=")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :dir
                                                     rl
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (expand
                                                       "walk_eq")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "0")
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "j")
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -8
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -7
                                                                   2)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (replace
                                                                       -7
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (replace
                                                                         -7
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1
                                                                              4))
                                                                            (("1"
                                                                              (typepred
                                                                               "C")
                                                                              (("1"
                                                                                (expand
                                                                                 "cdigraph")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-3
                                                                                      -6
                                                                                      1
                                                                                      2))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "no_repetitions?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "car(ci)"
                                                                                         "nth(cdr(ci),j-1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "/=")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3"
                                                (expand "length" -6)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "j=0")
                    (("1" (expand "circuit?")
                      (("1" (flatten)
                        (("1" (expand "no_repetitions?")
                          (("1" (expand "last")
                            (("1" (expand "nth" -5)
                              (("1"
                                (lift-if -5)
                                (("1"
                                  (split -5)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "length" -1)
                                      (("2"
                                        (lift-if -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "length")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -7
                                                 "i-1"
                                                 "length(cdr(ci))-1")
                                                (("1"
                                                  (split -7)
                                                  (("1"
                                                    (expand "/=")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (expand
                                                         "walk_eq")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "0")
                                                            (("1"
                                                              (inst
                                                               -7
                                                               "i")
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -8
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -7
                                                                     2)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -7
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1
                                                                                4))
                                                                              (("1"
                                                                                (typepred
                                                                                 "C")
                                                                                (("1"
                                                                                  (expand
                                                                                   "cdigraph")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-3
                                                                                        -6
                                                                                        1
                                                                                        2))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "no_repetitions?")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "car(ci)"
                                                                                           "nth(cdr(ci),i-1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "/=")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" -6)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "no_repetitions?")
                      (("2" (expand "walk_eq")
                        (("2" (flatten)
                          (("2" (inst-cp -7 "i")
                            (("2" (expand "finseq_appl")
                              (("2"
                                (expand "nth" -8 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -7 "j")
                                    (("2"
                                      (expand "nth" -7 2)
                                      (("2"
                                        (replace -7 :hide? t)
                                        (("2"
                                          (replace -7 :hide? t)
                                          (("2"
                                            (inst -5 "i-1" "j-1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (-1 -5))
                                                (("2"
                                                  (typepred "C")
                                                  (("2"
                                                    (expand "cdigraph")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide-all-but
                                                         (-3 -6 1))
                                                        (("2"
                                                          (expand
                                                           "no_repetitions?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "nth(cdr(ci), i - 1)"
                                                             "nth(cdr(ci), j - 1)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cycle? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cycle? const-decl "bool" cycles_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (last const-decl "T" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (C skolem-const-decl "cdigraph_eq[T](G)" digraphs_all_cycles nil)
    (ci skolem-const-decl "(cycle?(C))" digraphs_all_cycles nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_make](G)"
     digraphs_all_cycles nil)
    (j skolem-const-decl "below(length(w) - 1)" digraphs_all_cycles
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (i skolem-const-decl "below(length(w) - 1)" digraphs_all_cycles
     nil)
    (circuit_walk_eq formula-decl nil digraphs_all_cycles nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil))
   shostak))
 (walk_eq_inj_1 0
  (walk_eq_inj_1-1 nil 3659301267
   ("" (skeep)
    (("" (expand "walk_eq")
      (("" (apply-extensionality)
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (apply-extensionality)
          (("2" (flatten)
            (("2" (inst?)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (expand "finseq_appl") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_eq const-decl "bool" digraphs_all_cycles nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (cyclesi2cycles_TCC1 0
  (cyclesi2cycles_TCC1-1 nil 3659286530
   ("" (skeep)
    (("" (typepred "nth(cycles,i)")
      (("" (expand "circuit?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cyclesi2cycles_TCC2 0
  (cyclesi2cycles_TCC2-1 nil 3659286530 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil))
   nil))
 (cyclesi2cycles_TCC3 0
  (cyclesi2cycles_TCC3-2 "" 3659299637 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (C!1 skolem-const-decl "cdigraph_eq[T](G!1)" digraphs_all_cycles
     nil)
    (G!1 skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (last const-decl "T" more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil))
   shostak)
  (cyclesi2cycles_TCC3-1 nil 3659286530
   ("" (skeep)
    (("" (expand "vert?")
      (("" (expand "digraph_verts")
        (("" (typepred "C")
          (("" (expand "eq")
            (("" (flatten)
              (("" (replace -2 :hide? t :dir rl)
                ((""
                  (typepred
                   "list2set[T](data(C::ComputableDigraph[T]))")
                  (("" (replace -2 :hide? t)
                    (("" (assert) (("" (use "nth_member[T]") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (last const-decl "T" more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/"))
   nil))
 (cyclesi2cycles_TCC4 0
  (cyclesi2cycles_TCC4-1 nil 3659286530 ("" (subtype-tcc) nil nil) nil
   nil))
 (cyclesi2cycles_TCC5 0
  (cyclesi2cycles_TCC5-1 nil 3659286530
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "cycles")
        (("" (hide -1)
          (("" (replace -2)
            (("" (inst -1 "i+1")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cycles skolem-const-decl "{cycles: list[(cycle?(C))] |
         FORALL (i: below(length(cycles))): nth(nth(cycles, i), 0) = v_idx}"
     digraphs_all_cycles nil)
    (v_idx skolem-const-decl "below(size[T](C))" digraphs_all_cycles
     nil)
    (i skolem-const-decl "below(length(cycles_))" digraphs_all_cycles
     nil)
    (cycles_ skolem-const-decl "list[(cycle?(C))]" digraphs_all_cycles
     nil)
    (C skolem-const-decl "cdigraph_eq[T](G)" digraphs_all_cycles nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (cyclesi2cycles_TCC6 0
  (cyclesi2cycles_TCC6-1 nil 3659292745 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (last const-decl "T" more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (cyclesi2cycles_TCC7 0
  (cyclesi2cycles_TCC7-1 nil 3659292745
   ("" (skeep)
    (("" (split 1)
      (("1" (replace -1 :hide? t) (("1" (grind) nil nil)) nil)
       ("2" (skeep :preds? t)
        (("2" (expand "length" -1)
          (("2" (typepred "v(G, C)(v_idx, cycles_)")
            (("1" (hide -1)
              (("1" (case "i=0")
                (("1" (replace -1 :hide? t)
                  (("1" (expand "nth" 1)
                    (("1" (replace -4 :hide? t)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2)
                  (("2" (assert)
                    (("2" (inst -2 "i-1")
                      (("2" (assert)
                        (("2" (replace -4 :hide? t)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "cycles")
                (("2" (hide -1)
                  (("2" (skeep)
                    (("2" (replace -3)
                      (("2" (inst -1 "i!1+1")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (walki2walk const-decl "{w: Walk(G) | walk_eq(G, C)(w, cw)}"
     digraphs_all_cycles nil)
    (cycles skolem-const-decl "{cycles: list[(cycle?(C))] |
         FORALL (i: below(length(cycles))): nth(nth(cycles, i), 0) = v_idx}"
     digraphs_all_cycles nil)
    (v_idx skolem-const-decl "below(size[T](C))" digraphs_all_cycles
     nil)
    (i!1 skolem-const-decl "below(length(cycles_))" digraphs_all_cycles
     nil)
    (cycles_ skolem-const-decl "list[(cycle?(C))]" digraphs_all_cycles
     nil)
    (C skolem-const-decl "cdigraph_eq[T](G)" digraphs_all_cycles nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (digraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil))
   nil))
 (cac2dac_rec_TCC1 0
  (cac2dac_rec_TCC1-1 nil 3659281098 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (last const-decl "T" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (cac2dac_rec_TCC2 0
  (cac2dac_rec_TCC2-1 nil 3659281098
   ("" (skeep)
    (("" (typepred "C")
      (("" (skeep :preds? t)
        (("" (replace -4 1 :dir rl)
          (("" (typepred "cs")
            (("" (use "eq_same_size")
              (("" (assert)
                (("" (expand "size") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VertList type-eq-decl nil digraphs_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (eq_same_size formula-decl nil c_digraphs_digraphs nil)
    (size const-decl "nat" digraphs_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (size const-decl "nat" c_digraphs_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil))
 (cac2dac_rec_TCC3 0
  (cac2dac_rec_TCC3-1 nil 3659281098 ("" (existence-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (size const-decl "nat" c_digraphs_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VertCycles type-eq-decl nil digraphs_all_cycles nil)
    (CyclesAt type-eq-decl nil digraphs_all_cycles nil)
    (C!1 skolem-const-decl "{C: cdigraph_eq(G!1) | data(C) = vl!1}"
     digraphs_all_cycles nil)
    (vl!1 skolem-const-decl "VertList(G!1)" digraphs_all_cycles nil)
    (G!1 skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last const-decl "T" more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_null formula-decl nil more_list_props "structures/"))
   nil))
 (cac2dac_rec_TCC4 0
  (cac2dac_rec_TCC4-1 nil 3659286530
   ("" (skeep)
    (("" (typepred "cs")
      (("" (hide -1)
        (("" (expand "size")
          (("" (replace -1 :dir rl :hide? t) (("" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" c_digraphs_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cac2dac_rec_TCC5 0
  (cac2dac_rec_TCC5-1 nil 3659286530
   ("" (skeep)
    (("" (typepred "C")
      (("" (expand "eq")
        (("" (expand "vert?")
          (("" (expand "digraph_verts")
            (("" (flatten)
              (("" (replace -2 :dir rl :hide? t)
                ((""
                  (typepred
                   "list2set[T]((C::{C: cdigraph_eq(G) | data(C) = vl})`data)")
                  (("" (replace -2 :hide? t)
                    (("" (assert) (("" (use "nth_member[T]") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VertList type-eq-decl nil digraphs_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (nth_member formula-decl nil more_list_props "structures/"))
   nil))
 (cac2dac_rec_TCC6 0
  (cac2dac_rec_TCC6-1 nil 3659286530
   ("" (skeep) (("" (typepred "cs") (("" (grind) nil nil)) nil)) nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" c_digraphs_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (last const-decl "T" more_list_props "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cac2dac_rec_TCC7 0
  (cac2dac_rec_TCC7-1 nil 3659286530
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "cs")
        (("" (hide -1)
          (("" (replace -3 :hide? t)
            (("" (inst -2 "0")
              (("1" (expand "nth" -2)
                (("1" (expand "nth" 1 1)
                  (("1" (inst -2 "nth(cycles,i)")
                    (("1" (assert)
                      (("1" (use "nth_member[(cycle?(C))]") nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (reveal -2)
                (("2" (replace -1 :hide? t) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cs skolem-const-decl "{cs: list[list[(cycle?(C))]] |
         length(cs) + offset = size(C) AND
          (FORALL (i: below(length(cs))):
             FORALL (cycle: (cycle?(C))):
               member(cycle, nth(cs, i)) IFF car(cycle) = i + offset)}"
     digraphs_all_cycles nil)
    (offset skolem-const-decl "nat" digraphs_all_cycles nil)
    (C skolem-const-decl "{C: cdigraph_eq(G) | data(C) = vl}"
     digraphs_all_cycles nil)
    (vl skolem-const-decl "VertList(G)" digraphs_all_cycles nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (size const-decl "nat" c_digraphs_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil))
 (cac2dac_rec_TCC8 0
  (cac2dac_rec_TCC8-1 nil 3659286530
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "cs")
        (("" (hide -1)
          (("" (replace -3 :hide? t)
            (("" (inst -2 "0")
              (("1" (expand "nth" -2)
                (("1" (typepred "cyclesi2cycles(G, C)(offset, cycles)")
                  (("1" (hide -1)
                    (("1" (expand "cycle_at?")
                      (("1" (expand "finseq_appl")
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (use "member_nth[Walk(G)]")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (skeep -1)
                                    (("1"
                                      (inst -3 "i")
                                      (("1"
                                        (inst -5 "nth(cycles,i)")
                                        (("1"
                                          (use
                                           "nth_member[(cycle?(C))]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "walk_eq")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (replace
                                                     -2
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (inst -4 "0")
                                                      (("1"
                                                        (replace
                                                         -4
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           2)
                                                          (("1"
                                                            (use
                                                             "cycle_walk_eq")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (case "EXISTS(cc: (cycle?(C))): walk_eq(G,C)(walk,cc)")
                              (("1"
                                (skeep -1)
                                (("1"
                                  (inst -7 "cc")
                                  (("1"
                                    (flatten -7)
                                    (("1"
                                      (hide -7)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (use
                                           "member_nth[(cycle?(C))]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst -7 "i")
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (lemma
                                                     "walk_eq_inj_1")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       -3)
                                                      (("1"
                                                        (inst?
                                                         -1
                                                         :where
                                                         -7)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "nth_member[Walk(G)]")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "walk_eq" -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -2 "0")
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (replace -2 :hide? t)
                                                  (("2"
                                                    (hide-all-but
                                                     (-3 1))
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       -1
                                                       2)
                                                      (("2"
                                                        (typepred "C")
                                                        (("2"
                                                          (expand
                                                           "cdigraph")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "no_repetitions?"
                                                               -3)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "car(cc)"
                                                                 "offset")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "walk2walki(G,C)(walk)")
                                (("1"
                                  (typepred "walk2walki(G,C)(walk)")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (use "w2wi_cycle")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "cycle?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use "w2wi_circuit")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (reveal -2)
                (("2" (replace -1 :hide? t) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cs skolem-const-decl "{cs: list[list[(cycle?(C))]] |
         length(cs) + offset = size(C) AND
          (FORALL (i: below(length(cs))):
             FORALL (cycle: (cycle?(C))):
               member(cycle, nth(cs, i)) IFF car(cycle) = i + offset)}"
     digraphs_all_cycles nil)
    (offset skolem-const-decl "nat" digraphs_all_cycles nil)
    (C skolem-const-decl "{C: cdigraph_eq(G) | data(C) = vl}"
     digraphs_all_cycles nil)
    (vl skolem-const-decl "VertList(G)" digraphs_all_cycles nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil)
    (cyclesi2cycles def-decl "{cs: list[Walk(G)] |
         length(cs) = length(cycles) AND
          (FORALL (i: below(length(cs))):
             walk_eq(G, C)(nth(cs, i), nth(cycles, i)))}"
     digraphs_all_cycles nil)
    (cycle_at? const-decl "bool" cycles_ nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (nth_member formula-decl nil more_list_props "structures/")
    (cycle_walk_eq formula-decl nil digraphs_all_cycles nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (walk_eq_inj_1 formula-decl nil digraphs_all_cycles nil)
    (w2wi_cycle formula-decl nil digraphs_all_cycles nil)
    (cycle? const-decl "bool" cycles_ nil)
    (w2wi_circuit formula-decl nil digraphs_all_cycles nil)
    (walk skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_make](G)"
     digraphs_all_cycles nil)
    (walk2walki const-decl "{wi: (walk?(C)) | walk_eq(G, C)(w, wi)}"
     digraphs_all_cycles nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (size const-decl "nat" c_digraphs_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil))
 (cac2dac_rec_TCC9 0
  (cac2dac_rec_TCC9-1 nil 3659286530
   ("" (skeep)
    (("" (typepred "cs")
      (("" (hide -1)
        (("" (replace -1 :dir rl)
          (("" (assert)
            (("" (replace -3)
              (("" (expand "length" 1 2)
                (("" (skeep :preds? t)
                  (("" (inst -3 "i+1")
                    (("1" (skeep)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (replace -3 :dir rl)
                            (("1" (expand "nth" 1 2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" c_digraphs_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (vl skolem-const-decl "VertList(G)" digraphs_all_cycles nil)
    (C skolem-const-decl "{C: cdigraph_eq(G) | data(C) = vl}"
     digraphs_all_cycles nil)
    (cs_ skolem-const-decl "list[list[(cycle?(C))]]"
     digraphs_all_cycles nil)
    (i skolem-const-decl "below(length(cs_))" digraphs_all_cycles nil)
    (offset skolem-const-decl "nat" digraphs_all_cycles nil)
    (cs skolem-const-decl "{cs: list[list[(cycle?(C))]] |
         length(cs) + offset = size(C) AND
          (FORALL (i: below(length(cs))):
             FORALL (cycle: (cycle?(C))):
               member(cycle, nth(cs, i)) IFF car(cycle) = i + offset)}"
     digraphs_all_cycles nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (cac2dac_rec_TCC10 0
  (cac2dac_rec_TCC10-1 nil 3659286530 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (size const-decl "nat" c_digraphs_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last const-decl "T" more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (cac2dac_rec_TCC11 0
  (cac2dac_rec_TCC11-1 nil 3659293896
   ("" (skeep)
    (("" (typepred "v(G, vl, C)(offset + 1, cs_)")
      (("1" (split 1)
        (("1" (replace -3 :hide? t)
          (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep :preds? t)
          (("2" (expand "length" -1)
            (("2" (case "n=0")
              (("1" (replace -1 :hide? t)
                (("1" (expand "nth" 1 2)
                  (("1" (typepred "C") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (inst -3 "n-1")
                (("1" (assert)
                  (("1" (expand "nth" 2 2) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil)
       ("3" (hide 2)
        (("3" (typepred "cs")
          (("3" (replace -2 :dir rl)
            (("3" (assert)
              (("3" (replace -4)
                (("3" (expand "length" 1 2)
                  (("3" (skeep :preds? t)
                    (("3" (skeep)
                      (("3" (inst -4 "i+1")
                        (("1" (inst?)
                          (("1" (replace -4 :dir rl)
                            (("1" (expand "nth" 1 2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" c_digraphs_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vert? const-decl "bool" digraphs_ nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (VertCycles type-eq-decl nil digraphs_all_cycles nil)
    (CyclesAt type-eq-decl nil digraphs_all_cycles nil)
    (vert type-eq-decl nil digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cyclesi2cycles def-decl "{cs: list[Walk(G)] |
         length(cs) = length(cycles) AND
          (FORALL (i: below(length(cs))):
             walk_eq(G, C)(nth(cs, i), nth(cycles, i)))}"
     digraphs_all_cycles nil)
    (walk_eq const-decl "bool" digraphs_all_cycles nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (G skolem-const-decl "digraph[T]" digraphs_all_cycles nil)
    (vl skolem-const-decl "VertList(G)" digraphs_all_cycles nil)
    (C skolem-const-decl "{C: cdigraph_eq(G) | data(C) = vl}"
     digraphs_all_cycles nil)
    (offset skolem-const-decl "nat" digraphs_all_cycles nil)
    (cycles skolem-const-decl "list[(cycle?(C))]" digraphs_all_cycles
     nil)
    (cs skolem-const-decl "{cs: list[list[(cycle?(C))]] |
         length(cs) + offset = size(C) AND
          (FORALL (i: below(length(cs))):
             FORALL (cycle: (cycle?(C))):
               member(cycle, nth(cs, i)) IFF car(cycle) = i + offset)}"
     digraphs_all_cycles nil)
    (v skolem-const-decl "[d11:
   [G: digraph[T], vl: VertList(G), {C: cdigraph_eq(G) | data(C) = vl}] ->
   [d1:
      {z:
         [offset: nat,
          {cs: list[list[(cycle?(d11`3))]] |
                   offset + length(cs) = size(d11`3) AND
                    (FORALL (i: below(length(cs))):
                       FORALL (cycle: (cycle?(d11`3))):
                         member(cycle, nth(cs, i)) IFF
                          car(cycle) = i + offset)}] |
               length(z`2) < length(cs)} ->
      {l: list[VertCycles(d11`1)] |
               length(l) = length(d1`2) AND
                (FORALL (n: below(length(l))):
                   nth[T](d11`2, n + d1`1) = vert(nth(l, n)))}]]"
     digraphs_all_cycles nil)
    (cs_ skolem-const-decl "list[list[(cycle?(C))]]"
     digraphs_all_cycles nil)
    (n skolem-const-decl
     "below(length(cons((# vert := nth(data(C), offset),
                     cycles := cyclesi2cycles(G, C)(offset, cycles) #),
                  v(G, vl, C)(1 + offset, cs_))))" digraphs_all_cycles
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (last const-decl "T" more_list_props "structures/")
    (i skolem-const-decl "below(length(cs_))" digraphs_all_cycles nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (cac2dac_TCC1 0
  (cac2dac_TCC1-1 nil 3659271042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (last const-decl "T" more_list_props "structures/")
    (T formal-type-decl nil digraphs_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (cac2dac_TCC2 0
  (cac2dac_TCC2-1 nil 3659271042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (last const-decl "T" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (cac2dac_TCC3 0
  (cac2dac_TCC3-1 nil 3659271042
   ("" (skeep)
    (("" (typepred "all_cycles(C)")
      (("" (assert) (("" (skeep*) (("" (inst? -3) nil nil)) nil)) nil))
      nil))
    nil)
   ((all_cycles const-decl "{cs: list[list[(cycle?(C))]] |
         length(cs) = size(C) AND
          (FORALL (i: below(size(C))):
             FORALL (cycle: (cycle?(C))):
               member(cycle, nth(cs, i)) IFF car(cycle) = i)}"
     c_digraph_all_cycles nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" c_digraphs_def nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cac2dac_TCC4 0
  (cac2dac_TCC4-1 nil 3659281169
   ("" (skeep)
    (("" (typepred "all_cycles(C)")
      (("" (typepred "cac2dac_rec(G, vl, C)(0, all_cycles[T](C))")
        (("1" (split 1)
          (("1" (replace -1 :hide? t)
            (("1" (typepred "C")
              (("1" (replace -3 1 :dir rl :hide? t)
                (("1" (assert)
                  (("1" (use "eq_same_size")
                    (("1" (expand "size") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (hide 2)
          (("2" (assert) (("2" (skeep*) (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_cycles const-decl "{cs: list[list[(cycle?(C))]] |
         length(cs) = size(C) AND
          (FORALL (i: below(size(C))):
             FORALL (cycle: (cycle?(C))):
               member(cycle, nth(cs, i)) IFF car(cycle) = i)}"
     c_digraph_all_cycles nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "nat" c_digraphs_def nil)
    (cycle? const-decl "bool" c_digraph_all_cycles nil)
    (circuit? const-decl "bool" c_digraph_all_cycles nil)
    (walk? const-decl "bool" c_digraph_all_cycles nil)
    (VertList type-eq-decl nil digraphs_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (eq const-decl "bool" c_digraphs_digraphs nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" digraphs_ nil)
    (eq_same_size formula-decl nil c_digraphs_digraphs nil)
    (CyclesAt type-eq-decl nil digraphs_all_cycles nil)
    (VertCycles type-eq-decl nil digraphs_all_cycles nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cac2dac_rec def-decl "{l: list[VertCycles(G)] |
         length(l) = length(cs) AND
          (FORALL (n: below(length(l))):
             nth[T](vl, n + offset) = vert(nth(l, n)))}"
     digraphs_all_cycles nil))
   nil))
 (digraph_all_cycles_TCC1 0
  (digraph_all_cycles_TCC1-1 nil 3659368121
   ("" (skeep)
    (("" (use "vertsl?_is_vertlist") (("" (flatten) nil nil)) nil))
    nil)
   ((vertsl?_is_vertlist judgement-tcc nil digraphs_all_cycles nil)
    (vertsl const-decl "(vertsl?(G))" c_digraphs_digraphs nil)
    (vertsl? const-decl "bool" c_digraphs_digraphs nil)
    (list type-decl nil list_adt nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraphs_all_cycles nil))
   nil))
 (digraph_all_cycles_TCC2 0
  (digraph_all_cycles_TCC2-1 nil 3659368121
   ("" (skeep) (("" (use "vertsl?_is_vertlist") nil nil)) nil)
   ((vertsl const-decl "(vertsl?(G))" c_digraphs_digraphs nil)
    (vertsl? const-decl "bool" c_digraphs_digraphs nil)
    (list type-decl nil list_adt nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraphs_all_cycles nil)
    (vertsl?_is_vertlist judgement-tcc nil digraphs_all_cycles nil))
   nil)))

