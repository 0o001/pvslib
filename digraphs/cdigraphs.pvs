% Computable representation of digraphs
cdigraphs[T: TYPE]: THEORY 
BEGIN

  ComputableDigraph: TYPE = [# data: list[T],
  	    	               adjs: list[list[nat]] #]  

  size(cd:ComputableDigraph): nat = length(data(cd))

  list_of_idxs(C:ComputableDigraph)(l:list[nat]): bool = 
    FORALL(i:below(length(l))):nth(l,i)<size(C)

  IMPORTING structures@more_list_props,
	    structures@permutations_list

  loi_append: LEMMA FORALL(C:ComputableDigraph, l1,l2: list[nat]):
   list_of_idxs(C)(l1) AND 
   list_of_idxs(C)(l2) 
   IMPLIES list_of_idxs(C)(append(l1,l2)) 

  loi_permutation: LEMMA
   FORALL(C:ComputableDigraph, l1: list[nat], l2: (permutation_list(l1))):
    list_of_idxs(C)(l1) IMPLIES list_of_idxs(C)(l2)

  cdigraph(g: ComputableDigraph): bool = 
    (length(data(g)) = length(adjs(g))) AND
    (FORALL(i:below(length(adjs(g)))): list_of_idxs(g)(nth(adjs(g),i))) AND
    no_repetitions?[T](data(g))

  cd,cd_: VAR (cdigraph)

  empty?(cd): bool = length(data(cd)) = 0

  IMPORTING digraphs[T]

  G: VAR digraph

  % --------------------------------------------------------------------------- %
  % Equivalence between computable and non-computable digraphs.                 %
  % --------------------------------------------------------------------------- %
  IMPORTING structures@set_as_list[T]
  % Equivalence predicate
  eq(G,cd): bool = 
    set_as_list.list2set(data(cd)) = vert(G) AND
    FORALL(i,j:below(length(data(cd)))): 
       member(j, nth(adjs(cd),i)) 
       IFF LET vi = nth(data(cd),i), vj = nth(data(cd),j) IN member((vi,vj), edges(G))
  
  cdigraph_eq(G): TYPE = {C: (cdigraph)|eq(G,C)}
  digraph_eq(cd): TYPE = {G: digraph | eq(G,cd)}

  IMPORTING finite_sets@finite_cross
  % Conversion functions
  to_digraph(cd): digraph_eq(cd) =
    (# vert := {v:T|EXISTS(i:below(size(cd))):nth(data(cd),i)=v},
       edges := {u,v:T|EXISTS(i,j:below(size(cd))):
	                nth(data(cd),i)=u AND 
			nth(data(cd),j)=v AND 
			member(j,nth(adjs(cd),i))}  #)

  % Conversion completeness properties
  eq_digraph: LEMMA
    eq(G,cd) IMPLIES to_digraph(cd) = G

END cdigraphs
