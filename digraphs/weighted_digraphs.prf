(weighted_digraphs
 (IMP_weighted_digraphs__TCC1 0
  (IMP_weighted_digraphs__TCC1-1 nil 3657385250 ("" (grind) nil nil)
   ((0 formal-const-decl "{zero: Weight | identity?(+)(zero)}"
     weighted_digraphs nil)
    (identity? const-decl "bool" operator_defs nil)
    (+ formal-const-decl
       "{f: [[Weight, Weight] -> Weight] | associative?(f)}"
       weighted_digraphs nil)
    (associative? const-decl "bool" operator_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Weight formal-type-decl nil weighted_digraphs nil)
    (T formal-type-decl nil weighted_digraphs nil)
    (wgd_dg const-decl "[wdg -> digraph_type]" weighted_digraphs_def
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil))
   nil))
 (IMP_weighted_digraphs__TCC2 0
  (IMP_weighted_digraphs__TCC2-1 nil 3657995113
   ("" (assuming-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil weighted_digraphs nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (make const-decl "digraph" digraph_def nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil)
    (correct_implementation const-decl "bool" digraphs_abs nil))
   nil))
 (IMP_weighted_digraphs__TCC3 0
  (IMP_weighted_digraphs__TCC3-1 nil 3658661713
   ("" (assuming-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (0 formal-const-decl "{zero: Weight | identity?(+)(zero)}"
     weighted_digraphs nil)
    (identity? const-decl "bool" operator_defs nil)
    (+ formal-const-decl
       "{f: [[Weight, Weight] -> Weight] | associative?(f)}"
       weighted_digraphs nil)
    (associative? const-decl "bool" operator_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Weight formal-type-decl nil weighted_digraphs nil)
    (map_key? const-decl "[wgt_map -> [[T, T] -> bool]]"
     weighted_digraphs_def nil)
    (map4dg? const-decl "[digraph_type -> [wgt_map -> bool]]"
     weighted_digraphs_def nil)
    (map_val const-decl "[map: wgt_map, (map_key?(map)) -> Weight]"
     weighted_digraphs_def nil)
    (make_wdg const-decl "[dg: digraph_type, (map4dg?(dg)) -> wdg]"
     weighted_digraphs_def nil)
    (wgd_dg const-decl "[wdg -> digraph_type]" weighted_digraphs_def
     nil)
    (get_wgt const-decl "[W: wdg, (edges(dg(W))) -> Weight]"
     weighted_digraphs_def nil)
    (wgt_map type-eq-decl nil weighted_digraphs_def nil)
    (Maybe type-decl nil Maybe "structures/")
    (wdg type-eq-decl nil weighted_digraphs_def nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (correct_implementation const-decl "bool" weighted_digraphs_abs
     nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (T formal-type-decl nil weighted_digraphs nil))
   nil)))

