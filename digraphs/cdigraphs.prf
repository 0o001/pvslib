(cdigraphs
 (loi_append 0
  (loi_append-1 nil 3656092044
   ("" (skeep)
    (("" (expand "list_of_idxs")
      (("" (skeep :preds? t)
        (("" (use "nth_append[nat]")
          (("" (split -1)
            (("1" (replace -1 :hide? t)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten) (("1" (inst?) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (inst -3 "i-length(l1)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "length_append[nat]") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_of_idxs const-decl "bool" cdigraphs nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (i skolem-const-decl "below(length(append(l1, l2)))" cdigraphs nil)
    (l2 skolem-const-decl "list[nat]" cdigraphs nil)
    (l1 skolem-const-decl "list[nat]" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (loi_permutation 0
  (loi_permutation-1 nil 3656092299
   ("" (skeep)
    (("" (expand "list_of_idxs")
      (("" (skeep)
        (("" (typepred "l2")
          (("" (hide -1)
            (("" (expand "permutation_list")
              (("" (expand "permutation?")
                (("" (flatten)
                  (("" (expand "includes?")
                    (("" (inst -1 "nth(l2, i)")
                      (("" (case "count(nth(l2, i))(l2)>0")
                        (("1" (case "member(nth(l2, i), l1)")
                          (("1" (use "member_nth[nat]")
                            (("1" (assert)
                              (("1"
                                (skeep -1)
                                (("1"
                                  (inst -6 "i_1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 -1 -2))
                            (("2" (use "count_member[nat]")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "count_member[nat]")
                                  (("2"
                                    (inst? -1 :where 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "count_nth[nat]") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_of_idxs const-decl "bool" cdigraphs nil)
    (permutation_list const-decl "bool" permutations_list
     "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (count_nth formula-decl nil permutations_list "structures/")
    (member def-decl "bool" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (count_member formula-decl nil permutations_list "structures/")
    (count def-decl "nat" permutations_list "structures/")
    (> const-decl "bool" reals nil)
    (includes? const-decl "bool" permutations_list "structures/")
    (permutation? const-decl "bool" permutations_list "structures/"))
   shostak))
 (sem_eq_TCC1 0
  (sem_eq_TCC1-1 nil 3656438703 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" cdigraphs nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (includes? const-decl "bool" permutations_list "structures/")
    (permutation? const-decl "bool" permutations_list "structures/"))
   nil))
 (sem_eq_TCC2 0
  (sem_eq_TCC2-1 nil 3656438703
   ("" (skeep*)
    (("" (use "count_member[T]")
      (("" (assert)
        (("" (hide 2)
          (("" (expand "permutation?")
            (("" (flatten)
              (("" (expand "includes?" -2)
                (("" (inst -2 "nth[T](data(cd1), i)")
                  (("" (lemma "count_nth[T]")
                    (("" (inst -1 "data(cd1)" "i")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_member formula-decl nil permutations_list "structures/")
    (T formal-type-decl nil cdigraphs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (count_nth formula-decl nil permutations_list "structures/")
    (includes? const-decl "bool" permutations_list "structures/")
    (permutation? const-decl "bool" permutations_list "structures/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sem_eq_TCC3 0
  (sem_eq_TCC3-1 nil 3656438703 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" cdigraphs nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (includes? const-decl "bool" permutations_list "structures/")
    (permutation? const-decl "bool" permutations_list "structures/"))
   nil))
 (sem_eq_TCC4 0
  (sem_eq_TCC4-1 nil 3656501990 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (size const-decl "nat" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (includes? const-decl "bool" permutations_list "structures/")
    (permutation? const-decl "bool" permutations_list "structures/"))
   nil))
 (sem_eq_TCC5 0
  (sem_eq_TCC5-1 nil 3656501990 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (adjs_i_cd2!1 skolem-const-decl "list[nat]" cdigraphs nil)
    (i!2 skolem-const-decl "below(length(adjs_i_cd2!1))" cdigraphs nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cd1!1 skolem-const-decl "(cdigraph)" cdigraphs nil)
    (i!1 skolem-const-decl "below(length[T](data(cd1!1)))" cdigraphs
     nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props "structures/")
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (size const-decl "nat" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (includes? const-decl "bool" permutations_list "structures/")
    (permutation? const-decl "bool" permutations_list "structures/"))
   nil))
 (eq_TCC1 0
  (eq_TCC1-1 nil 3654690301 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" cdigraphs nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil))
 (to_digraph_TCC1 0
  (to_digraph_TCC1-1 nil 3655633029 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" cdigraphs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" cdigraphs nil))
   nil))
 (to_digraph_TCC2 0
  (to_digraph_TCC2-1 nil 3655633029 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" cdigraphs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (to_digraph_TCC3 0
  (to_digraph_TCC3-2 nil 3656089073 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" cdigraphs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (length def-decl "nat" list_props nil))
   nil)
  (to_digraph_TCC3-1 nil 3655633029 ("" (grind) nil nil) nil nil))
 (to_digraph_TCC4 0
  (to_digraph_TCC4-2 nil 3656096882
   ("" (skeep*)
    (("" (lemma "finite_subset[[T,T]]")
      ((""
        (inst -1 "{u: T, v: T |
                  (EXISTS (i: below(size(cd))): nth[T](data(cd), i) = u) AND
                  (EXISTS (j: below(size(cd))): nth[T](data(cd), j) = v)}"
         "{u: T, v: T |
                  EXISTS (i, j: below(size(cd))):
                    nth[T](data(cd), i) = u AND
                     nth[T](data(cd), j) = v AND
                      member[nat](j, nth[list[nat]](adjs(cd), i))}")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (expand "subset?")
              (("1" (skeep)
                (("1" (expand "member")
                  (("1" (skeep)
                    (("1" (split 1)
                      (("1" (inst?) nil nil) ("2" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (grind)
            (("2" (typepred "cd") (("2" (grind) nil nil)) nil)) nil))
          nil)
         ("3" (hide 2)
          (("3" (typepred "cd") (("3" (grind) nil nil)) nil)) nil)
         ("4" (hide 2)
          (("4" (typepred "cd") (("4" (grind) nil nil)) nil)) nil)
         ("5" (hide 2)
          (("5"
            (lemma "finite_full[({u: [T,T] |
                      (EXISTS (i: below(size(cd))): nth[T](data(cd), i) = u`1) AND
                       (EXISTS (j: below(size(cd))): nth[T](data(cd), j) = u`2)})]")
            (("5" (assert)
              (("5" (flatten)
                (("5" (hide -2)
                  (("5" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma
                         "is_finite_cross[({u1:T|EXISTS (i: below(size(cd))):
                                          nth[T](data(cd), i) = u1}),({u2:T|EXISTS (j: below(size(cd))):
                                          nth[T](data(cd), j) = u2})]")
                        (("2" (split -1)
                          (("1" (expand "is_finite_type")
                            (("1" (skeep -1)
                              (("1"
                                (inst
                                 1
                                 "N"
                                 "LAMBDA(u:[T,T]|
                                           (EXISTS (i: below(size(cd))):
                                              nth[T](data(cd), i) = u`1)
                                            AND
                                            (EXISTS (j: below(size(cd))):
                                               nth[T](data(cd), j) = u`2)): g(u)")
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "is_finite_type")
                              (("2"
                                (case "size(cd)=0")
                                (("1"
                                  (inst
                                   1
                                   "1"
                                   "LAMBDA(u:({u1: T |
                                     EXISTS (i: below(size(cd))):
                                       nth[T](data(cd), i) = u1})): 0")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (inst
                                   2
                                   "size(cd)"
                                   "LAMBDA(u1:
                                           [{u1: T |
                                                     EXISTS (i: below(size(cd))):
                                                       nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                       nth[T](data(cd), i) = u1})")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (lemma
                                         "epsilon_ax[below(size(cd))]")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (replace
                                               -1
                                               2
                                               :hide?
                                               t
                                               :dir
                                               rl)
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     2
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (name-replace
                                                       "e1"
                                                       "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                                                      (("1"
                                                        (name-replace
                                                         "e2"
                                                         "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                                        (("1"
                                                          (typepred
                                                           "cd")
                                                          (("1"
                                                            (expand
                                                             "cdigraph")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "no_repetitions?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "e1"
                                                                   "e2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x1")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (inst 1 "0")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil)
                                   ("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (expand "is_finite_type")
                              (("3"
                                (case "size(cd)=0")
                                (("1"
                                  (inst
                                   1
                                   "1"
                                   "LAMBDA(u:({u1: T |
                                               EXISTS (i: below(size(cd))):
                                                 nth[T](data(cd), i) = u1})): 0")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (inst
                                   2
                                   "size(cd)"
                                   "LAMBDA(u1:
                                                     [{u1: T |
                                                               EXISTS (i: below(size(cd))):
                                                                 nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                                 nth[T](data(cd), i) = u1})")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (lemma
                                         "epsilon_ax[below(size(cd))]")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (replace
                                               -1
                                               2
                                               :hide?
                                               t
                                               :dir
                                               rl)
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     2
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (name-replace
                                                       "e1"
                                                       "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                                                      (("1"
                                                        (name-replace
                                                         "e2"
                                                         "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                                        (("1"
                                                          (typepred
                                                           "cd")
                                                          (("1"
                                                            (expand
                                                             "cdigraph")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "no_repetitions?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "e1"
                                                                   "e2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x1")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (inst 1 "0")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil)
                                   ("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (hide 2) (("6" (grind) nil nil)) nil)
         ("7" (grind) nil nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil cdigraphs nil)
    (finite_subset formula-decl nil finite_sets nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (is_finite_cross formula-decl nil finite_cross "finite_sets/")
    (fullset const-decl "set" sets nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_full formula-decl nil finite_sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (size const-decl "nat" cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (cd skolem-const-decl "(cdigraph)" cdigraphs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   nil)
  (to_digraph_TCC4-1 nil 3655633029 ("" (grind) nil nil)
   ((no_repetitions? const-decl "bool" more_list_props "structures/"))
   nil))
 (to_digraph_TCC5 0
  (to_digraph_TCC5-1 nil 3656086108 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" cdigraphs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" cdigraphs nil))
   nil))
 (to_digraph_TCC6 0
  (to_digraph_TCC6-2 nil 3656096938
   ("" (skeep)
    (("" (expand "is_finite")
      (("" (case "size(cd)=0")
        (("1"
          (inst 1 "1" "LAMBDA(u:({u1: T |
                                         EXISTS (i: below(size(cd))):
                                           nth[T](data(cd), i) = u1})): 0")
          (("1" (grind) nil nil)) nil)
         ("2"
          (inst 2 "size(cd)" "LAMBDA(u1:
                                               [{u1: T |
                                                         EXISTS (i: below(size(cd))):
                                                           nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                           nth[T](data(cd), i) = u1})")
          (("1" (expand "injective?")
            (("1" (skeep)
              (("1" (lemma "epsilon_ax[below(size(cd))]")
                (("1"
                  (inst-cp -1
                   "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                  (("1" (split -2)
                    (("1" (replace -1 2 :hide? t :dir rl)
                      (("1"
                        (inst -1
                         "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                        (("1" (split -1)
                          (("1" (replace -1 2 :hide? t :dir rl)
                            (("1"
                              (name-replace "e1"
                               "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                              (("1"
                                (name-replace
                                 "e2"
                                 "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                (("1"
                                  (typepred "cd")
                                  (("1"
                                    (expand "cdigraph")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "no_repetitions?")
                                        (("1"
                                          (inst -3 "e1" "e2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (typepred "x2")
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (typepred "x1") (("2" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (inst 1 "0") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil)
           ("4" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (cd skolem-const-decl "(cdigraph)" cdigraphs nil)
    (TRUE const-decl "bool" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (epsilon_ax formula-decl nil epsilons nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (size const-decl "nat" cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil))
   nil)
  (to_digraph_TCC6-1 nil 3656086488
   ("" (skeep*)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (expand "eq")
        (("2" (split 1)
          (("1" (typepred "set_as_list.list2set(data(cd))")
            (("1" (replace -2 :hide? t)
              (("1" (apply-extensionality 1)
                (("1" (hide 2)
                  (("1" (iff)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (use "member_nth[T]")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "i")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep)
                          (("2" (use "nth_member[T]")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (split 1)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten)
                (("2" (expand "member" -1 1)
                  (("2" (skeep)
                    (("2" (case "j=j_1")
                      (("1" (case "i=i_1")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but (-2 1))
                          (("2" (typepred "cd")
                            (("2" (expand "cdigraph")
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "no_repetitions?")
                                  (("2"
                                    (inst -3 "i" "i_1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -2))
                        (("2" (typepred "cd")
                          (("2" (expand "cdigraph")
                            (("2" (flatten)
                              (("2"
                                (expand "no_repetitions?")
                                (("2"
                                  (inst -3 "j" "j_1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_nth formula-decl nil more_list_props "structures/")
    (nth_member formula-decl nil more_list_props "structures/")
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (no_repetitions? const-decl "bool" more_list_props "structures/"))
   nil))
 (to_digraph_TCC7 0
  (to_digraph_TCC7-3 nil 3656096919
   ("" (skeep*)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (expand "eq")
        (("2" (split 1)
          (("1" (typepred "set_as_list.list2set(data(cd))")
            (("1" (replace -2 :hide? t)
              (("1" (apply-extensionality 1)
                (("1" (hide 2)
                  (("1" (iff)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (use "member_nth[T]")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "i")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep)
                          (("2" (use "nth_member[T]")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (skeep*)
            (("2" (split 1)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten)
                (("2" (expand "member" -1 1)
                  (("2" (skeep)
                    (("2" (case "j=j_1")
                      (("1" (case "i=i_1")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but (-2 1))
                          (("2" (typepred "cd")
                            (("2" (expand "cdigraph")
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "no_repetitions?")
                                  (("2"
                                    (inst -3 "i" "i_1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -2))
                        (("2" (typepred "cd")
                          (("2" (expand "cdigraph")
                            (("2" (flatten)
                              (("2"
                                (expand "no_repetitions?")
                                (("2"
                                  (inst -3 "j" "j_1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (size const-decl "nat" cdigraphs nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (T formal-type-decl nil cdigraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (i skolem-const-decl "below(length(data(cd)))" cdigraphs nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (cd skolem-const-decl "(cdigraph)" cdigraphs nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member const-decl "bool" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (eq const-decl "bool" cdigraphs nil))
   nil)
  (to_digraph_TCC7-2 nil 3656096769
   ("" (skeep*)
    (("" (lemma "finite_subset[[T,T]]")
      ((""
        (inst -1 "{u: T, v: T |
                  (EXISTS (i: below(size(cd))): nth[T](data(cd), i) = u) AND
                  (EXISTS (j: below(size(cd))): nth[T](data(cd), j) = v)}"
         "{u: T, v: T |
                  EXISTS (i, j: below(size(cd))):
                    nth[T](data(cd), i) = u AND
                     nth[T](data(cd), j) = v AND
                      member[nat](j, nth[list[nat]](adjs(cd), i))}")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (expand "subset?")
              (("1" (skeep)
                (("1" (expand "member")
                  (("1" (skeep)
                    (("1" (split 1)
                      (("1" (inst?) nil)
                       ("2" (inst?) nil)))))))))))))))
         ("2" (hide 2)
          (("2" (grind) (("2" (typepred "cd") (("2" (grind) nil)))))))
         ("3" (hide 2) (("3" (typepred "cd") (("3" (grind) nil)))))
         ("4" (hide 2) (("4" (typepred "cd") (("4" (grind) nil)))))
         ("5" (hide 2)
          (("5"
            (lemma "finite_full[({u: [T,T] |
                      (EXISTS (i: below(size(cd))): nth[T](data(cd), i) = u`1) AND
                       (EXISTS (j: below(size(cd))): nth[T](data(cd), j) = u`2)})]")
            (("5" (assert)
              (("5" (flatten)
                (("5" (hide -2)
                  (("5" (split -1)
                    (("1" (grind) nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma
                         "is_finite_cross[({u1:T|EXISTS (i: below(size(cd))):
                                          nth[T](data(cd), i) = u1}),({u2:T|EXISTS (j: below(size(cd))):
                                          nth[T](data(cd), j) = u2})]")
                        (("2" (split -1)
                          (("1" (expand "is_finite_type")
                            (("1" (skeep -1)
                              (("1"
                                (inst
                                 1
                                 "N"
                                 "LAMBDA(u:[T,T]|
                                           (EXISTS (i: below(size(cd))):
                                              nth[T](data(cd), i) = u`1)
                                            AND
                                            (EXISTS (j: below(size(cd))):
                                               nth[T](data(cd), j) = u`2)): g(u)")
                                (("1" (grind) nil)
                                 ("2" (grind) nil)
                                 ("3" (grind) nil)
                                 ("4" (grind) nil)))))))
                           ("2" (hide 2)
                            (("2" (expand "is_finite_type")
                              (("2"
                                (case "size(cd)=0")
                                (("1"
                                  (inst
                                   1
                                   "1"
                                   "LAMBDA(u:({u1: T |
                                     EXISTS (i: below(size(cd))):
                                       nth[T](data(cd), i) = u1})): 0")
                                  (("1" (grind) nil)))
                                 ("2"
                                  (inst
                                   2
                                   "size(cd)"
                                   "LAMBDA(u1:
                                           [{u1: T |
                                                     EXISTS (i: below(size(cd))):
                                                       nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                       nth[T](data(cd), i) = u1})")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (lemma
                                         "epsilon_ax[below(size(cd))]")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (replace
                                               -1
                                               2
                                               :hide?
                                               t
                                               :dir
                                               rl)
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     2
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (name-replace
                                                       "e1"
                                                       "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                                                      (("1"
                                                        (name-replace
                                                         "e2"
                                                         "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                                        (("1"
                                                          (typepred
                                                           "cd")
                                                          (("1"
                                                            (expand
                                                             "cdigraph")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "no_repetitions?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "e1"
                                                                   "e2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (grind)
                                                          nil)))
                                                       ("2"
                                                        (grind)
                                                        nil)))))
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2"
                                                      (propax)
                                                      nil)))))
                                                 ("2" (grind) nil)))))
                                             ("2"
                                              (typepred "x1")
                                              (("2" (propax) nil)))))
                                           ("2" (grind) nil)))
                                         ("2"
                                          (inst 1 "0")
                                          (("2" (grind) nil)))))))))
                                   ("2" (grind) nil)
                                   ("3" (grind) nil)
                                   ("4" (grind) nil)))))))))
                           ("3" (hide 2)
                            (("3" (expand "is_finite_type")
                              (("3"
                                (case "size(cd)=0")
                                (("1"
                                  (inst
                                   1
                                   "1"
                                   "LAMBDA(u:({u1: T |
                                               EXISTS (i: below(size(cd))):
                                                 nth[T](data(cd), i) = u1})): 0")
                                  (("1" (grind) nil)))
                                 ("2"
                                  (inst
                                   2
                                   "size(cd)"
                                   "LAMBDA(u1:
                                                     [{u1: T |
                                                               EXISTS (i: below(size(cd))):
                                                                 nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                                 nth[T](data(cd), i) = u1})")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (lemma
                                         "epsilon_ax[below(size(cd))]")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (replace
                                               -1
                                               2
                                               :hide?
                                               t
                                               :dir
                                               rl)
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     2
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (name-replace
                                                       "e1"
                                                       "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                                                      (("1"
                                                        (name-replace
                                                         "e2"
                                                         "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                                        (("1"
                                                          (typepred
                                                           "cd")
                                                          (("1"
                                                            (expand
                                                             "cdigraph")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "no_repetitions?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "e1"
                                                                   "e2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (grind)
                                                          nil)))
                                                       ("2"
                                                        (grind)
                                                        nil)))))
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2"
                                                      (propax)
                                                      nil)))))
                                                 ("2" (grind) nil)))))
                                             ("2"
                                              (typepred "x1")
                                              (("2" (propax) nil)))))
                                           ("2" (grind) nil)))
                                         ("2"
                                          (inst 1 "0")
                                          (("2" (grind) nil)))))))))
                                   ("2" (grind) nil)
                                   ("3" (grind) nil)
                                   ("4"
                                    (grind)
                                    nil)))))))))))))))))))))))))))
         ("6" (hide 2) (("6" (grind) nil))) ("7" (grind) nil))))))
    nil)
   nil nil)
  (to_digraph_TCC7-1 nil 3656096457 ("" (subtype-tcc) nil nil) nil
   nil))
 (no_rep_vertsl 0
  (no_rep_vertsl-2 "" 3656768292
   ("" (skeep)
    (("" (typepred "l")
      (("" (expand "vertsl?")
        (("" (flatten)
          (("" (use "same_size_eq_no_rep")
            (("" (assert)
              (("" (hide 2)
                (("" (expand "size")
                  (("" (inst 1 "vert(G)") (("" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertsl? const-decl "bool" cdigraphs nil)
    (list type-decl nil list_adt nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil cdigraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (size const-decl "nat" digraphs nil)
    (member const-decl "bool" sets nil)
    (set_list_eq const-decl "bool" set_as_list "structures/")
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (same_size_eq_no_rep formula-decl nil set_as_list_props
     "structures/"))
   shostak)
  (no_rep_vertsl-1 nil 3656331295
   ("" (skeep)
    (("" (typepred "l")
      (("" (expand "vertsl?")
        (("" (flatten)
          (("" (use "same_size_eq_no_rep")
            (("" (assert)
              (("" (hide 2)
                (("" (skeep)
                  (("" (expand "set_list_eq")
                    (("" (expand "size")
                      (("" (case "vert(G)=A")
                        (("1" (assert) nil nil)
                         ("2" (hide 2 -3)
                          (("2" (apply-extensionality 1)
                            (("2" (hide 2)
                              (("2"
                                (inst -1 "x!1")
                                (("2"
                                  (replace -1 :dir rl :hide? t)
                                  (("2"
                                    (inst -1 "x!1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph type-eq-decl nil digraphs nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (size const-decl "nat" digraphs nil)
    (set_list_eq const-decl "bool" set_as_list "structures/")
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (filter_edges_for_TCC1 0
  (filter_edges_for_TCC1-1 nil 3656321919 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member def-decl "bool" list_props nil)
    (T formal-type-decl nil cdigraphs nil)
    (size const-decl "nat" digraphs nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/"))
   nil))
 (filter_edges_for_TCC2 0
  (filter_edges_for_TCC2-1 nil 3656327799
   ("" (skeep*)
    (("" (typepred "E")
      (("" (typepred "G")
        (("" (typepred "vertsl")
          (("" (expand "vertsl?")
            (("" (inst -2 "(v1,v2)")
              (("" (split -2)
                (("1" (inst -2 "v2") (("1" (grind) nil nil)) nil)
                 ("2" (expand "subset?")
                  (("2" (inst -3 "(v1,v2)")
                    (("2" (expand "member" -3)
                      (("2" (assert)
                        (("2" (hide-all-but (-4 -5 2))
                          (("2" (typepred "choose(E)")
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (case
                                   "choose(E) = (choose(E)`1,choose(E)`2)")
                                  (("1"
                                    (replace -1 -2 :hide? t)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (subset? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil cdigraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (size const-decl "nat" digraphs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   nil))
 (filter_edges_for_TCC3 0
  (filter_edges_for_TCC3-1 nil 3656327799 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (member def-decl "bool" list_props nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (injective? const-decl "bool" functions nil)
    (size const-decl "nat" digraphs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (rest const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil))
   nil))
 (filter_edges_for_TCC4 0
  (filter_edges_for_TCC4-1 nil 3656327799
   ("" (skeep*)
    (("" (use "card_rest[edgetype[T]]") (("" (assert) nil nil)) nil))
    nil)
   ((card_rest formula-decl nil finite_sets nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (subset? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (filter_edges_for_TCC5 0
  (filter_edges_for_TCC5-1 nil 3656327799
   ("" (skeep*)
    (("" (split 2)
      (("1" (skeep*)
        (("1" (expand "member" 1 1)
          (("1" (ground)
            (("1" (case "w = v2")
              (("1" (replace -1 :dir rl :hide? t)
                (("1" (replace -2 :hide? t)
                  (("1" (replace -2 :hide? t)
                    (("1" (replace -2 :hide? t)
                      (("1" (hide-all-but 1)
                        (("1"
                          (case "choose(E) = (choose(E)`1,choose(E)`2)")
                          (("1" (replace -1 :dir rl :hide? t)
                            (("1" (typepred "choose(E)")
                              (("1"
                                (expand "member")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-1 1))
                (("2" (typepred "vertsl")
                  (("2" (use "no_rep_vertsl")
                    (("2" (use "idx_inj[T]") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "v3(G, vertsl, v, rest[edgetype[T]](E))")
              (("1" (hide -1)
                (("1" (inst -1 "w")
                  (("1" (assert)
                    (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "E")
                (("2" (hide-all-but (-2 1))
                  (("2" (lemma "subset_transitive[edgetype[T]]")
                    (("2" (inst? -1 :where 1)
                      (("2" (inst? -1 :where -2)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (use "choose_rest_or[edgetype]")
              (("3" (assert)
                (("3" (hide -2)
                  (("3"
                    (typepred "v3(G, vertsl, v, rest[edgetype[T]](E))")
                    (("1" (hide -1)
                      (("1" (inst -1 "w") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (typepred "E")
                        (("2" (hide -1)
                          (("2"
                            (lemma "subset_transitive[edgetype[T]]")
                            (("2" (inst? -1 :where 1)
                              (("2"
                                (inst? -1 :where -2)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (case "i=0")
          (("1" (replace -1 :hide? t)
            (("1" (expand "nth" 1)
              (("1" (typepred "idx[T](vertsl, v2)")
                (("1" (typepred "vertsl")
                  (("1" (expand "vertsl?")
                    (("1" (flatten) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nth" 2)
            (("2" (assert)
              (("2" (typepred "v3(G, vertsl, v, rest[edgetype[T]](E))")
                (("1" (inst -3 "i-1") nil nil)
                 ("2" (use "rest_subset[edgetype]")
                  (("2" (typepred "E")
                    (("2" (lemma "subset_transitive[edgetype]")
                      (("2" (inst -1 "rest(E)" "E" "edges(G)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma "no_repetitions_append[nat]")
        (("3"
          (inst -1 "(: idx[T](vertsl, v2) :)"
           "v3(G, vertsl, v, rest[edgetype[T]](E))")
          (("1" (expand "append" -1)
            (("1" (expand "append" -1)
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (split 1)
                    (("1" (grind) nil nil)
                     ("2" (skeep)
                      (("2" (expand "member" -1)
                        (("2" (expand "member" -1)
                          (("2" (replace -1 :hide? t)
                            (("2"
                              (typepred
                               "v3(G, vertsl, v, rest[edgetype[T]](E))")
                              (("1"
                                (inst -2 "v2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (expand "member" -1)
                                      (("1"
                                        (replace -6 :hide? t)
                                        (("1"
                                          (hide-all-but (-1 -6 -7 1))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "vertsl")
                                      (("2"
                                        (expand "vertsl?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "v2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but
                                                 (1 -7 -8))
                                                (("2"
                                                  (typepred "E")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (typepred "G")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "choose(E)")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (typepred "E")
                                  (("2"
                                    (hide-all-but (-2 1))
                                    (("2"
                                      (lemma
                                       "subset_transitive[edgetype[T]]")
                                      (("2"
                                        (inst? -1 :where 1)
                                        (("2"
                                          (inst? -1 :where -2)
                                          (("2"
                                            (assert)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "E")
            (("2" (hide-all-but (-2 1))
              (("2" (lemma "subset_transitive[edgetype[T]]")
                (("2" (inst? -1 :where 1)
                  (("2" (inst? -1 :where -2)
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (rest const-decl "set" sets nil)
    (size const-decl "nat" digraphs nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (subset_transitive formula-decl nil sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil cdigraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (subset? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (edgetype type-eq-decl nil digraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (list type-decl nil list_adt nil)
    (idx_inj formula-decl nil more_list_props "structures/")
    (vertsl skolem-const-decl "(vertsl?(G))" cdigraphs nil)
    (G skolem-const-decl "digraph[T]" cdigraphs nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (no_rep_vertsl formula-decl nil cdigraphs nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest_subset formula-decl nil sets_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (E skolem-const-decl
     "{E: finite_set[edgetype] | subset?(E, edges(G))}" cdigraphs nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (empty? const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (no_repetitions_append formula-decl nil more_list_props
     "structures/"))
   nil))
 (filter_edges_for_TCC6 0
  (filter_edges_for_TCC6-1 nil 3656327799
   ("" (skeep*)
    (("" (typepred "E")
      (("" (hide-all-but (3 -2))
        (("" (lemma "subset_transitive[edgetype[T]]")
          (("" (inst? -1 :where 1)
            (("" (inst? -1 :where -2)
              (("" (assert) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (subset? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil cdigraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_transitive formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (remove const-decl "set" sets nil)
    (choose const-decl "(p)" sets nil)
    (E skolem-const-decl
     "{E: finite_set[edgetype] | subset?(E, edges(G))}" cdigraphs nil)
    (G skolem-const-decl "digraph[T]" cdigraphs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (rest const-decl "set" sets nil))
   nil))
 (filter_edges_for_TCC7 0
  (filter_edges_for_TCC7-1 nil 3656327799
   ("" (skeep*)
    (("" (use "card_rest[edgetype[T]]") (("" (grind) nil nil)) nil))
    nil)
   ((card_rest formula-decl nil finite_sets nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (subset? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (rest const-decl "set" sets nil))
   nil))
 (filter_edges_for_TCC8 0
  (filter_edges_for_TCC8-1 nil 3656327799
   ("" (skeep*)
    (("" (split 3)
      (("1" (skeep*)
        (("1" (typepred "v3(G, vertsl, v, rest[edgetype[T]](E))")
          (("1" (hide -1)
            (("1" (inst -1 "w")
              (("1" (assert)
                (("1" (replace -1 :hide? t)
                  (("1" (ground)
                    (("1" (grind) nil nil)
                     ("2" (use "choose_rest_or[edgetype]")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "E")
            (("2" (hide-all-but (1 -2))
              (("2" (lemma "subset_transitive[edgetype[T]]")
                (("2" (inst? -1 :where 1)
                  (("2" (inst? -1 :where -2)
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "v3(G, vertsl, v, rest[edgetype[T]](E))")
          (("1" (inst -3 "i") nil nil)
           ("2" (typepred "E")
            (("2" (hide-all-but (1 -2))
              (("2" (lemma "subset_transitive[edgetype[T]]")
                (("2" (inst? -1 :where 1)
                  (("2" (inst? -1 :where -2)
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "v3(G, vertsl, v, rest[edgetype[T]](E))")
        (("1" (propax) nil nil)
         ("2" (typepred "E")
          (("2" (hide-all-but (-2 1))
            (("2" (lemma "subset_transitive[edgetype[T]]")
              (("2" (inst? -1 :where 1)
                (("2" (inst? -1 :where -2)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest const-decl "set" sets nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (size const-decl "nat" digraphs nil)
    (member const-decl "bool" sets nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (member def-decl "bool" list_props nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil cdigraphs nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (remove const-decl "set" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (G skolem-const-decl "digraph[T]" cdigraphs nil)
    (E skolem-const-decl
     "{E: finite_set[edgetype] | subset?(E, edges(G))}" cdigraphs nil)
    (choose const-decl "(p)" sets nil)
    (/= const-decl "boolean" notequal nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset_transitive formula-decl nil sets_lemmas nil))
   nil))
 (filter_edges_for_TCC9 0
  (filter_edges_for_TCC9-1 nil 3656327799 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (member def-decl "bool" list_props nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (filter_edges_rec_TCC1 0
  (filter_edges_rec_TCC1-1 nil 3656322524 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil))
   nil))
 (filter_edges_rec_TCC2 0
  (filter_edges_rec_TCC2-1 nil 3656322524
   ("" (skeep*)
    (("" (typepred "vs")
      (("" (use "suffix_length[T]") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((vertsl? const-decl "bool" cdigraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil cdigraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix_length formula-decl nil more_list_props "structures/"))
   nil))
 (filter_edges_rec_TCC3 0
  (filter_edges_rec_TCC3-1 nil 3656322524 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (member const-decl "bool" sets nil)
    (T formal-type-decl nil cdigraphs nil)
    (size const-decl "nat" digraphs nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (filter_edges_rec_TCC4 0
  (filter_edges_rec_TCC4-1 nil 3656325232
   ("" (skeep*)
    (("" (typepred "vs")
      (("" (replace -2 :hide? t)
        (("" (use "suffix_member[T]")
          (("" (assert)
            (("" (hide -2)
              (("" (inst -1 "v")
                (("" (assert)
                  (("" (hide 2)
                    (("" (expand "member") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertsl? const-decl "bool" cdigraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil cdigraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (suffix_member formula-decl nil more_list_props "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (member def-decl "bool" list_props nil))
   nil))
 (filter_edges_rec_TCC5 0
  (filter_edges_rec_TCC5-1 nil 3656325232 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil))
 (filter_edges_rec_TCC6 0
  (filter_edges_rec_TCC6-1 nil 3656325232
   ("" (skeep*)
    (("" (typepred "vs")
      (("" (replace -2 :hide? t)
        (("" (use "suffix_end[T]") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((vertsl? const-decl "bool" cdigraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil cdigraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (suffix_end formula-decl nil more_list_props "structures/"))
   nil))
 (filter_edges_rec_TCC7 0
  (filter_edges_rec_TCC7-1 nil 3656325232
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" digraphs nil)
    (member const-decl "bool" sets nil))
   nil))
 (filter_edges_rec_TCC8 0
  (filter_edges_rec_TCC8-1 nil 3656325232
   ("" (skeep*)
    (("" (typepred "v1(G, vertsl)(vs_)")
      (("1" (hide -1)
        (("1" (split 1)
          (("1" (expand "length" 1 2)
            (("1" (replace -5 :hide? t)
              (("1" (expand "length" 1 1) (("1" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (skeep :preds? t)
            (("2" (case "i=0")
              (("1" (hide -6)
                (("1" (replace -1 :hide? t)
                  (("1" (expand "nth" 1 1)
                    (("1"
                      (typepred
                       "filter_edges_for(G, vertsl, v, edges(G))")
                      (("1" (hide -1)
                        (("1" (inst -1 "nth(vertsl,j)")
                          (("1" (split -1)
                            (("1"
                              (case "idx(vertsl, nth(vertsl, j)) = j")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1"
                                    (case
                                     "nth[T](vertsl, length[T](vertsl) - length[T](vs))=v")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-8 1))
                                      (("2"
                                        (use "suffix_first_elem[T]")
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (typepred "vs")
                                        (("3"
                                          (use "suffix_length[T]")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (use "no_rep_vertsl")
                                  (("2"
                                    (use "idx_nth_no_rep[T]")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (use "nth_member[T]") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2 1)
                (("2" (assert)
                  (("2" (inst -4 "i-1" "j")
                    (("1" (assert)
                      (("1" (replace -4 :hide? t)
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (case "i=0")
              (("1" (replace -1)
                (("1" (expand "nth" 1 2)
                  (("1"
                    (typepred
                     "filter_edges_for(G, vertsl, v, edges(G))")
                    (("1" (inst -3 "j") nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "nth" 2 2)
                (("2" (assert) (("2" (inst -3 "i-1" "j") nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (case "i=0")
              (("1" (replace -1 :hide? t)
                (("1" (expand "nth" 1) (("1" (propax) nil nil)) nil))
                nil)
               ("2" (expand "nth" 2)
                (("2" (assert) (("2" (inst -4 "i-1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (split 1)
          (("1" (typepred "vs")
            (("1" (replace -2 :hide? t)
              (("1" (use "suffix_end[T]") (("1" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (typepred "vs")
            (("2" (replace -2 :hide? t)
              (("2" (expand "length" 1 2) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_repetitions? const-decl "bool" more_list_props "structures/")
    (size const-decl "nat" digraphs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (vertsl? const-decl "bool" cdigraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil cdigraphs nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props "structures/")
    (filter_edges_for def-decl "{adj_v: list[nat] |
         (FORALL (w: T):
            member(w, vertsl) IMPLIES
             (member(idx(vertsl, w), adj_v) IFF member((v, w), E)))
          AND
          (FORALL (i: below(length(adj_v))): nth(adj_v, i) < size(G)) AND
           no_repetitions?(adj_v)}" cdigraphs nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (suffix_length formula-decl nil more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (G skolem-const-decl "digraph[T]" cdigraphs nil)
    (vertsl skolem-const-decl "(vertsl?(G))" cdigraphs nil)
    (vs skolem-const-decl "{vs: list[T] | suffix?(vs, vertsl)}"
     cdigraphs nil)
    (suffix_first_elem formula-decl nil more_list_props "structures/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (no_rep_vertsl formula-decl nil cdigraphs nil)
    (idx_nth_no_rep formula-decl nil more_list_props "structures/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (vs_ skolem-const-decl "list[T]" cdigraphs nil)
    (i skolem-const-decl "below(length(vs))" cdigraphs nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (suffix_end formula-decl nil more_list_props "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (filter_edges_TCC1 0
  (filter_edges_TCC1-1 nil 3656324007 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (list type-decl nil list_adt nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil))
   nil))
 (filter_edges_TCC2 0
  (filter_edges_TCC2-1 nil 3656324007
   ("" (skeep) (("" (use "suffix_reflexive[T]") nil nil)) nil)
   ((vertsl? const-decl "bool" cdigraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (list type-decl nil list_adt nil)
    (suffix_reflexive formula-decl nil more_list_props "structures/")
    (T formal-type-decl nil cdigraphs nil))
   nil))
 (filter_edges_TCC3 0
  (filter_edges_TCC3-1 nil 3656324073
   ("" (skeep*)
    (("" (typepred "filter_edges_rec(G, vertsl)(vertsl)")
      (("1" (hide -1)
        (("1" (assert)
          (("1" (split 1)
            (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (use "suffix_reflexive[T]") nil nil))
      nil))
    nil)
   ((filter_edges_rec def-decl "{adjs: list[list[nat]] |
         length(vs) = length(adjs) AND
          (FORALL (i: below(length(vs)), j: below(length(vertsl))):
             member(j, nth(adjs, i)) IFF
              LET vi = nth(vertsl, i + length(vertsl) - length(vs)),
                  vj = nth(vertsl, j)
                IN member((vi, vj), edges(G)))
           AND
           (FORALL (i: below(length(adjs)),
                    j: below(length(nth(adjs, i)))):
              nth(nth(adjs, i), j) < size(G))
            AND
            (FORALL (i: below(length(adjs))):
               no_repetitions?(nth(adjs, i)))}" cdigraphs nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (size const-decl "nat" digraphs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (vertsl? const-decl "bool" cdigraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil cdigraphs nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (suffix_reflexive formula-decl nil more_list_props "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (vertsl_TCC1 0
  (vertsl_TCC1-1 nil 3656324415
   ("" (skeep)
    (("" (expand "vertsl?")
      (("" (typepred "set2list[T](vert(G))")
        (("" (expand "size")
          (("" (assert)
            (("" (skeep) (("" (inst?) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertsl? const-decl "bool" cdigraphs nil)
    (size const-decl "nat" digraphs nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil cdigraphs nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (set2list def-decl "{l: list[T] |
         length(l) = card(s) AND (FORALL (x: T): s(x) IFF member(x, l))}"
     set_as_list "structures/")
    (edgetype type-eq-decl nil digraphs nil)
    (predigraph type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil))
   nil))
 (to_cdigraph_TCC1 0
  (to_cdigraph_TCC1-1 nil 3656418783
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "cdigraph")
        (("1" (split 1)
          (("1" (typepred "filter_edges(G, vertsl(G))")
            (("1" (assert) nil nil)) nil)
           ("2" (expand "list_of_idxs")
            (("2" (expand "size")
              (("2" (typepred "filter_edges(G, vertsl(G))")
                (("2" (skeep* 1)
                  (("2" (inst -4 "i" "i_1")
                    (("2" (expand "size")
                      (("2" (typepred "vertsl(G)")
                        (("2" (expand "vertsl?")
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "size")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (use "no_rep_vertsl") nil nil)
           ("4" (skeep)
            (("4" (typepred "filter_edges(G, vertsl(G))")
              (("4" (inst? -5) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "eq")
        (("2" (split 1)
          (("1" (typepred "vertsl(G)")
            (("1" (expand "vertsl?")
              (("1" (flatten)
                (("1" (typepred "list2set(vertsl(G))")
                  (("1" (replace -2 :hide? t)
                    (("1" (apply-extensionality 1)
                      (("1" (hide 2)
                        (("1" (inst -2 "x!1")
                          (("1" (replace -2 :hide? t)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "filter_edges(G, vertsl(G))")
            (("2" (skeep*) (("2" (inst -3 "i" "j") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-type-decl nil cdigraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (set type-eq-decl nil sets nil)
    (member const-decl "bool" sets nil)
    (size const-decl "nat" digraphs nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (filter_edges const-decl "{adjs: list[list[nat]] |
         length(adjs) = length(vertsl) AND
          (FORALL (i, j: below(length(vertsl))):
             member(j, nth(adjs, i)) IFF
              LET vi = nth(vertsl, i), vj = nth(vertsl, j) IN
                member((vi, vj), edges(G)))
           AND
           (FORALL (i: below(length(adjs)),
                    j: below(length(nth(adjs, i)))):
              nth(nth(adjs, i), j) < size(G))
            AND
            (FORALL (i: below(length(adjs))):
               no_repetitions?(nth(adjs, i)))}" cdigraphs nil)
    (vertsl const-decl "(vertsl?(G))" cdigraphs nil)
    (size const-decl "nat" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (no_rep_vertsl formula-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (is_finite const-decl "bool" finite_sets nil)
    (eq const-decl "bool" cdigraphs nil))
   nil))
 (eq_digraph 0
  (eq_digraph-1 nil 3656097016
   ("" (skeep)
    (("" (expand "eq")
      (("" (flatten)
        (("" (expand "to_digraph")
          (("" (decompose-equality 1)
            (("1" (typepred "set_as_list.list2set(data(cd))")
              (("1" (replace -2 :hide? t)
                (("1" (apply-extensionality 1)
                  (("1" (hide 2)
                    (("1" (decompose-equality -2)
                      (("1" (iff)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (skeep)
                              (("1"
                                (inst -6 "i" "j")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "member")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (typepred "G")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst-cp -4 "x!1")
                                      (("2"
                                        (inst-cp -4 "x!2")
                                        (("2"
                                          (lemma "member_nth[T]")
                                          (("2"
                                            (inst-cp
                                             -1
                                             "data(cd)"
                                             "x!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -1
                                                 "data(cd)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep -1)
                                                    (("2"
                                                      (skeep -2)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "i!1"
                                                         "i")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -10
                                                             "i!1"
                                                             "i")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "cd") (("2" (grind) nil nil)) nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "set_as_list.list2set(data(cd))")
              (("2" (replace -2 :hide? t)
                (("2" (decompose-equality -2)
                  (("2" (apply-extensionality 1)
                    (("1" (hide 2)
                      (("1" (inst -1 "x!1")
                        (("1" (iff)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (skeep -1)
                                (("1"
                                  (use "nth_member[T]")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (use "member_nth[T]")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 1 "i")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "cd") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil)
             ("4" (hide-all-but 1)
              (("4" (skeep :preds? t)
                (("4" (typepred "cd") (("4" (grind) nil nil)) nil))
                nil))
              nil)
             ("5" (typepred "cd") (("5" (grind) nil nil)) nil)
             ("6" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eq const-decl "bool" cdigraphs nil)
    (to_digraph const-decl "digraph_eq(cd)" cdigraphs nil)
    (i skolem-const-decl "below(length(data(cd)))" cdigraphs nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member const-decl "bool" sets nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (i skolem-const-decl "below(length(data(cd)))" cdigraphs nil)
    (i!1 skolem-const-decl "below(length(data(cd)))" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" cdigraphs nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-type-decl nil cdigraphs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (size const-decl "nat" cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (cd skolem-const-decl "(cdigraph)" cdigraphs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (eq_cdigraph 0
  (eq_cdigraph-1 nil 3656427878
   ("" (skeep)
    (("" (expand "eq")
      (("" (with-labels (flatten) (("eq verts" "eq edges")))
        (("" (expand "sem_eq")
          ((""
            (with-labels
             (case "permutation?(data(to_cdigraph(G)), data(cd))")
             "perm data")
            (("1" (assert)
              (("1" (skeep)
                (("1" (expand "to_cdigraph")
                  (("1" (expand "permutation?" 1)
                    (("1" (split 1)
                      (("1" (expand "includes?")
                        (("1" (skolem 1 "v")
                          (("1" (invoke (case "%1 = 0") (! 1 1))
                            (("1" (use "count_member[T]")
                              (("1" (assert) nil nil)) nil)
                             ("2" (invoke (case "%1 = 1") (! 1 1))
                              (("1"
                                (hide 1)
                                (("1"
                                  (invoke (case "%1 = 1") (! 1 2))
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide-all-but (1 -1))
                                      (("2"
                                        (case
                                         "member(idx(data(cd),v),nth(adjs(cd),idx(data(cd),nth(vertsl(G),i))))")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (case
                                             "member(( nth(data(cd),idx(data(cd),nth(vertsl(G),i))) , nth(data(cd),idx(data(cd),v)) ), edges(G))")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (typepred
                                                 "idx(data(cd), nth(vertsl(G), i))")
                                                (("1"
                                                  (replace -2 :hide? t)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (typepred
                                                       "idx(data(cd), v)")
                                                      (("1"
                                                        (replace
                                                         -2
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (case
                                                             "EXISTS(j:below(length(vertsl(G)))): nth(vertsl(G),j) = v")
                                                            (("1"
                                                              (skeep
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (with-labels
                                                                   (typepred
                                                                    "filter_edges(G, vertsl(G))")
                                                                   (("fe every"
                                                                     "fe length"
                                                                     "fe edges"
                                                                     "fe adj size"
                                                                     "fe adj no rep"
                                                                     "UNKNOWN")))
                                                                  (("1"
                                                                    (hide
                                                                     "fe every")
                                                                    (("1"
                                                                      (inst?
                                                                       "fe edges"
                                                                       :where
                                                                       -6)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           ("fe edges"
                                                                            1
                                                                            -5))
                                                                          (("1"
                                                                            (case
                                                                             "member(nth(vertsl(G),j),filter_idxs(vertsl(G),nth(filter_edges(G,vertsl(G)),i)))")
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (hide
                                                                                 "fe edges")
                                                                                (("1"
                                                                                  (use
                                                                                   "no_repetitions_count[T]")
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "no_rep_vertsl")
                                                                                        (("2"
                                                                                          (use
                                                                                           "no_rep_filter[T]")
                                                                                          (("2"
                                                                                            (reveal
                                                                                             "fe adj no rep")
                                                                                            (("2"
                                                                                              (inst
                                                                                               "fe adj no rep"
                                                                                               "i")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "no_repetitions?"
                                                                                                 "fe adj no rep")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               ("fe edges"
                                                                                1))
                                                                              (("2"
                                                                                (use
                                                                                 "member_nth[nat]")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     "fe edges")
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "filter_idxs(vertsl(G), nth(filter_edges(G, vertsl(G)), i))")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "filtered_from")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3
                                                                                                 1
                                                                                                 :dir
                                                                                                 rl
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "nth_member[T]")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (typepred
                                                                 "vertsl(G)")
                                                                (("2"
                                                                  (expand
                                                                   "vertsl?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "v")
                                                                      (("2"
                                                                        (typepred
                                                                         "G")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (expand
                                                                             "member"
                                                                             -4)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "member"
                                                                                 -2
                                                                                 2)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-4
                                                                                        1))
                                                                                      (("2"
                                                                                        (use
                                                                                         "member_nth[T]")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (reveal "eq edges")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "count_member[T]")
                                          (("2"
                                            (inst? -1 :where -2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -2 2)
                                                (("2"
                                                  (use "member_nth[T]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (skolem
                                                         -1
                                                         "i_v")
                                                        (("2"
                                                          (typepred
                                                           "filter_idxs(data(cd),
                                       nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))")
                                                          (("2"
                                                            (expand
                                                             "filtered_from")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst?)
                                                                (("1"
                                                                  (typepred
                                                                   "idx(data(cd),v)")
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     -4
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (use
                                                                         "idx_nth_no_rep[T]")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("1"
                                                                              (use
                                                                               "nth_member[nat]")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (typepred
                                                                             "cd")
                                                                            (("2"
                                                                              (expand
                                                                               "cdigraph")
                                                                              (("2"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "i_v")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (use "count_member[T]")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide -2)
                                                (("3"
                                                  (use "member_nth[T]")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (hide -2)
                                                      (("3"
                                                        (skolem
                                                         -1
                                                         "i_v")
                                                        (("3"
                                                          (typepred
                                                           "filter_idxs(data(cd),
                                       nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))")
                                                          (("3"
                                                            (expand
                                                             "filtered_from")
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (inst?)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -2
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (use
                                                                       "nth_member[T]")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "i_v")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (use "no_repetitions_count[T]")
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "count_member[T]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "cd")
                                      (("2"
                                        (expand "cdigraph")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 -4))
                                            (("2"
                                              (inst
                                               -2
                                               "idx(data(cd), nth(vertsl(G), i))")
                                              (("2"
                                                (expand
                                                 "no_repetitions?"
                                                 -2)
                                                (("2"
                                                  (use
                                                   "no_rep_filter[T]")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "includes?")
                        (("2" (skolem 1 "v")
                          (("2" (invoke (case "%1 = 0") (! 1 1))
                            (("1" (use "count_member[T]")
                              (("1" (assert) nil nil)) nil)
                             ("2" (invoke (case "%1 = 1") (! 1 1))
                              (("1"
                                (hide 1)
                                (("1"
                                  (invoke (case "%1 = 1") (! 1 2))
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide-all-but (1 -1))
                                      (("2"
                                        (case
                                         "member(v, filter_idxs(vertsl(G), nth(filter_edges(G, vertsl(G)), i)))")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (use "member_nth[T]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 "i_v")
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (typepred
                                                     "filter_idxs(vertsl(G), nth(filter_edges(G, vertsl(G)), i))")
                                                    (("1"
                                                      (expand
                                                       "filtered_from")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "i_v")
                                                          (("1"
                                                            (name
                                                             "j"
                                                             "nth(nth(filter_edges(G, vertsl(G)), i), i_v)")
                                                            (("1"
                                                              (use
                                                               "nth_member[nat]")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "filter_edges(G, vertsl(G))")
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "i"
                                                                           "j")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-3
                                                                                1
                                                                                -7))
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 :hide?
                                                                                 t
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "idx(data(cd),nth(vertsl(G),i))")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     -3
                                                                                     :hide?
                                                                                     t
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "idx(data(cd),v)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           -3
                                                                                           :hide?
                                                                                           t
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               "eq edges")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "member_nth[nat]")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           "eq edges")
                                                                                                          (("1"
                                                                                                            (skolem
                                                                                                             -1
                                                                                                             "i__")
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "filter_idxs(data(cd),
                                        nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "filtered_from")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         -1
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "nth(data(cd), idx(data(cd), v)) = v")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "no_repetitions_count[T]")
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "v")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "nth_member[T]")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (use
                                                                                                                                     "no_rep_filter[T]")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "cd")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "cdigraph")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -4
                                                                                                                                                 "idx(data(cd), nth(vertsl(G), i))")
                                                                                                                                                (("1"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   (-4
                                                                                                                                                    1))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "no_repetitions?")
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "idx[T](data(cd), nth[T](vertsl(G), i))")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (typepred
                                                                                                                                                   "vertsl(G)")
                                                                                                                                                  (("3"
                                                                                                                                                    (expand
                                                                                                                                                     "vertsl?")
                                                                                                                                                    (("3"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("3"
                                                                                                                                                        (reveal
                                                                                                                                                         "eq verts")
                                                                                                                                                        (("3"
                                                                                                                                                          (replace
                                                                                                                                                           "eq verts"
                                                                                                                                                           :dir
                                                                                                                                                           rl
                                                                                                                                                           :hide?
                                                                                                                                                           t)
                                                                                                                                                          (("3"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "nth[T](vertsl(G), i)")
                                                                                                                                                            (("3"
                                                                                                                                                              (typepred
                                                                                                                                                               "list2set(data(cd))")
                                                                                                                                                              (("3"
                                                                                                                                                                (replace
                                                                                                                                                                 -2
                                                                                                                                                                 :hide?
                                                                                                                                                                 t)
                                                                                                                                                                (("3"
                                                                                                                                                                  (expand
                                                                                                                                                                   "member"
                                                                                                                                                                   -2
                                                                                                                                                                   2)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (use
                                                                                                                                                                       "nth_member[T]")
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("4"
                                                                                                                                                  (typepred
                                                                                                                                                   "i")
                                                                                                                                                  (("4"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "cd")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "cdigraph")
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "idx(data(cd),v)")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (reveal
                                                                                           -3
                                                                                           "perm data")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "permutation?")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "includes?"
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -3
                                                                                                   "v")
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -3
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "count_nth[T]")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "vertsl(G)"
                                                                                                         "j")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "count_member[T]")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "v"
                                                                                                             "data(cd)")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "i_v")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (use "count_member[T]")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (use "no_repetitions_count[T]")
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "count_member[T]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (use "no_rep_filter[T]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (typepred
                                               "filter_edges(G, vertsl(G))")
                                              (("1"
                                                (inst -5 "i")
                                                (("1"
                                                  (hide-all-but (1 -5))
                                                  (("1"
                                                    (expand
                                                     "no_repetitions?")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "no_rep_vertsl")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "to_cdigraph")
                (("2" (typepred "vertsl(G)")
                  (("2" (expand "vertsl?")
                    (("2" (flatten)
                      (("2" (expand "permutation?")
                        (("2" (split "perm data")
                          (("1" (expand "includes?")
                            (("1" (skeep)
                              (("1"
                                (case "count(t)(data(cd)) = 0")
                                (("1"
                                  (use "count_member[T]")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (use "count_member[T]")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "list2set(data(cd))")
                                      (("2"
                                        (replace -2 :hide? t)
                                        (("2"
                                          (replace
                                           "eq verts"
                                           :dir
                                           rl
                                           :hide?
                                           t)
                                          (("2"
                                            (inst -3 "t")
                                            (("2"
                                              (expand "member" -3 2)
                                              (("2"
                                                (lemma
                                                 "count_member[T]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "t"
                                                   "vertsl(G)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "count(t)(data(cd)) = 1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (typepred
                                                           "cd")
                                                          (("2"
                                                            (expand
                                                             "cdigraph")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -3))
                                                                (("2"
                                                                  (use
                                                                   "no_repetitions_count[T]")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "includes?")
                            (("2" (skeep)
                              (("2"
                                (case "count(t)(vertsl(G)) = 0")
                                (("1"
                                  (use "count_member[T]")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (use "count_member[T]")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "list2set(data(cd))")
                                      (("2"
                                        (replace -2 :hide? t)
                                        (("2"
                                          (replace
                                           "eq verts"
                                           :dir
                                           rl
                                           :hide?
                                           t)
                                          (("2"
                                            (inst -3 "t")
                                            (("2"
                                              (expand "member" -3 2)
                                              (("2"
                                                (lemma
                                                 "count_member[T]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "t"
                                                   "data(cd)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "count(t)(vertsl(G)) = 1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "no_rep_vertsl")
                                                        (("2"
                                                          (use
                                                           "no_repetitions_count[T]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eq const-decl "bool" cdigraphs nil)
    (sem_eq const-decl "bool" cdigraphs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (size const-decl "nat" digraphs nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (filter_edges const-decl "{adjs: list[list[nat]] |
         length(adjs) = length(vertsl) AND
          (FORALL (i, j: below(length(vertsl))):
             member(j, nth(adjs, i)) IFF
              LET vi = nth(vertsl, i), vj = nth(vertsl, j) IN
                member((vi, vj), edges(G)))
           AND
           (FORALL (i: below(length(adjs)),
                    j: below(length(nth(adjs, i)))):
              nth(nth(adjs, i), j) < size(G))
            AND
            (FORALL (i: below(length(adjs))):
               no_repetitions?(nth(adjs, i)))}" cdigraphs nil)
    (i_v skolem-const-decl "below(length(filter_idxs(data(cd),
                         nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))))"
     cdigraphs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (idx_nth_no_rep formula-decl nil more_list_props "structures/")
    (i_v skolem-const-decl "below(length(filter_idxs(data(cd),
                         nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))))"
     cdigraphs nil)
    (i skolem-const-decl "below(length(data(to_cdigraph(G))))"
     cdigraphs nil)
    (cd skolem-const-decl "(cdigraph)" cdigraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (member_nth formula-decl nil more_list_props "structures/")
    (no_repetitions_count formula-decl nil permutations_list
     "structures/")
    (no_rep_filter formula-decl nil more_list_props "structures/")
    (G skolem-const-decl "digraph[T]" cdigraphs nil)
    (no_rep_vertsl formula-decl nil cdigraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (count_member formula-decl nil permutations_list "structures/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vertsl const-decl "(vertsl?(G))" cdigraphs nil)
    (vertsl? const-decl "bool" cdigraphs nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props "structures/")
    (member def-decl "bool" list_props nil)
    (filter_idxs def-decl "(filtered_from(l, idxs))" more_list_props
     "structures/")
    (filtered_from const-decl "bool" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (count def-decl "nat" permutations_list "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (includes? const-decl "bool" permutations_list "structures/")
    (i_v skolem-const-decl
     "below(length(filter_idxs(vertsl(G), nth(filter_edges(G, vertsl(G)), i))))"
     cdigraphs nil)
    (count_nth formula-decl nil permutations_list "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (T formal-type-decl nil cdigraphs nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (permutation? const-decl "bool" permutations_list "structures/")
    (edgetype type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil cdigraphs nil)
    (cdigraph const-decl "bool" cdigraphs nil)
    (cdigraph_eq type-eq-decl nil cdigraphs nil)
    (to_cdigraph const-decl "cdigraph_eq(G)" cdigraphs nil))
   shostak)))

