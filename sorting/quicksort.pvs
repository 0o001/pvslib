%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Computational Logic A & D / PROJECT SECOND SEMESTER 2014 
%%%%% Based on the poof techniques applied to formalize correctness
%%%%% of searching and sorting by switching and reversals, and 
%%%%% insertion sort, you should be able to formalize correctness 
%%%%% merge sort algorithm as specified below. 
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% Thiago M.F. Ramos, Ariane A. Almeida & 
%%% Ana C. R. Oliveira Valverde & M. Ayala-Rincon
%%% Last modification:  September 25, 2014
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

quicksort [T : TYPE, <= : (total_order?[T]) ]: THEORY

BEGIN

IMPORTING sorting [T, <=]
l,l1,l2 : VAR list[T]
x,p: VAR T

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% The functions below select, respectively, the 
%%%%% elelments smaller or equal and bigger than a given pivot
%%%%% creating new lists.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 leq_elements (l,p): RECURSIVE list[T] = 
    CASES l OF 
      null: null,
      cons (x, r): if x<= p then 
                    cons (x, leq_elements (r, p))
                   else
                    leq_elements (r, p)
                   endif
    ENDCASES
  MEASURE length (l)

 g_elements (l,p): RECURSIVE list[T] = 
    CASES l OF 
      null: null,
      cons (x, r): if x > p then 
                    cons (x, g_elements (r, p))
                   else
                    g_elements (r, p)
                   endif
    ENDCASES
  MEASURE length (l)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Question 1. Prove that the length of the sublist with the 
%%%%% elements smaller or equal than an element x of a
%%%%% list l1 has at most the same lenght than l1. Also, prove 
%%%%% the same property holds for the sublist of elements greater
%%%%% than x.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

leq_elements_size : CONJECTURE 
FORALL (l1 : list[T], x:T) : 
  length(leq_elements(l1,x)) <= length(l1)

g_elements_size : CONJECTURE 
FORALL (l1 : list[T], x:T) : 
  length(g_elements(l1,x)) <= length(l1)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Question 2. Prove that the sublist of elements  
%%%%% smaller or equal than a pivot p of a list l1 have the same 
%%%%% amount of elements x as the original list l1 whenever x 
%%%%% is smaller or equal than p and zero occurrences if x is 
%%%%% greater than the pivot p.  
%%%%% Analogously, the sublist of elements greater than the pivot
%%%%% p have the same number of occurrences of all x greater than 
%%%%% p and zero occurrences of all elements x smaller or equal
%%%%% than p. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


same_occurrence_leq: CONJECTURE
FORALL (l1:list[T], x,p:T):
  x <= p IMPLIES 
  ((occurrences(l1)(x) = occurrences(leq_elements(l1,p))(x))
  AND 
  (occurrences(g_elements(l1,p))(x) = 0))

same_occurrence_g: CONJECTURE
FORALL (l1:list[T], x,p:T):
  x > p IMPLIES 
  ((occurrences(l1)(x) = occurrences(g_elements(l1,p))(x))
  AND 
  (occurrences(leq_elements(l1,p))(x) = 0))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Question 3. Prove the conjecture quick_sort_works; that 
%%%%% is, prove that quick_sort of list l, gives as result a 
%%%%% permutation of l that is sorted. 
%%%%% To obtain the main correcteness result, quick_sort_works, 
%%%%% you must prove the sequence of auxiliary conjectures below. 
%%%%% You can also use the auxiliary lemmas given below, as well 
%%%%% as any other in this theory and even extra ones you create 
%%%%% by yourself and believe are necessary.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

quick_sort (l): RECURSIVE list[T] = 
     CASES l OF 
       null: null,
       cons (x, r): append 
        (quick_sort (leq_elements (r,x)), 
          cons (x, quick_sort (g_elements (r, x))))
     ENDCASES
  MEASURE length (l)


g_leq_car_size:  LEMMA 
FORALL (l1: list[T]): 
  NOT (l1=null) IMPLIES
       (length(g_elements(cdr(l1), car(l1))) +
       length(leq_elements(cdr(l1), car(l1))) + 1
       = length(l1))

quick_sort_size: CONJECTURE
FORALL (l : list[T]) :
  length(quick_sort(l)) = length(l)

leq_elements_works: CONJECTURE
FORALL(l:list[T], x,i: T):
  member(i,leq_elements(l,x)) IMPLIES i<=x

g_elements_works: CONJECTURE
FORALL(l:list[T], x,i: T):
  member(i,g_elements(l,x)) IMPLIES i>x

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% CHALLENGE 1: Prove that quick_sort produces a permutation
%%%%% of its input 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


quick_sort_is_permutation: CONJECTURE
FORALL (l : list[T]):
  permutations(quick_sort(l),l)

append_null_in_sorted_is_sorted: LEMMA
  FORALL (l1, l2: list[T]):
  	 ((is_sorted?(l1) AND is_sorted?(l2)) AND (null?(l1) OR null(l2))) IMPLIES 
	 is_sorted?(append(l1,l2))

cons_in_sorted: LEMMA
 FORALL ((l1: list[T] | NOT null?(l1)), x:T):
 	is_sorted?(l1) AND x <= car(l1) IMPLIES is_sorted?(cons(x,l1))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% CHALLENGE 2: Prove that quick_sort gives a sorted list as
%%%%% its result
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

quick_sort_is_sorted: CONJECTURE
FORALL (l : list[T]):
  is_sorted?(quick_sort(l))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Final result to be proved
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

quick_sort_works: LEMMA
FORALL (l : list[T]):
  is_sorted?(quick_sort(l)) AND permutations(quick_sort(l), l)

END quicksort
