%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% Ariane A. Almeida & M. Ayala-Rincon
%%% Last modification:  September 25, 2013
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%
%%%%% In the sequel correctness of insertion sort is proved. 
%%%%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

insertionsort [T : TYPE, (IMPORTING total_preorder) <= : (total_preorder?[T]) ]: THEORY

BEGIN

	IMPORTING sorting[T, <=]
	l,l1,l2 : VAR list[T]
	x: VAR T

%%%%% This function correctly inserts an element in a non decreasing 
%%%%% sorted list.
%%%%% It looks for the right position recursively.
insert (x, l): RECURSIVE list[T] =
	IF null?(l) THEN cons(x,null)
	ELSIF x<= car(l) THEN cons(x,l) 
	ELSE cons(car(l), insert(x,cdr(l)))
ENDIF
MEASURE length(l)

occ_in_insert : LEMMA
FORALL (l : list[T], x,y:T) :
IF x=y THEN occurrences(insert(y,l))(x) = 1 + occurrences(l)(x)
ELSE  occurrences(insert(y,l))(x) = occurrences(l)(x)
ENDIF

%%%%% This function sorts a list recursively using the 
%%%%% insert function defined above
insertion_sort(l): RECURSIVE list[T] = 
IF null?(l) THEN null ELSE
insert(car(l), insertion_sort(cdr(l)))
ENDIF
MEASURE length(l)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Based on the poof techniques applied to formalize 
%%%%% correctness of searching and sorting by switching and 
%%%%% reversals, correctness of the insertion sort function 
%%%%% is proved below.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% insert increases the length of lists by one:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
insert_size: LEMMA
FORALL (l: list[T], x: T):
       insert(x,l)`length = l`length + 1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Inserting an element in a sorted list in non decreasing 
%%%%% order gives as output a correctly sorted list; that is: 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
insert_in_sorted_preserves_sort : LEMMA
FORALL (l: list[T], x: T):
   is_sorted?(l) IMPLIES is_sorted?(insert(x,l))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% insertion_sort in fact sorts lists; that is, 
%%%%% the output list has exactly the same number of
%%%%% ocurrences of each element in the original list
%%%%% and is sorted as stated by insertion_sort_works
%%%%% lemma below.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% A few lemmas are added to simplify the proof

insertionsort_is_sorted: LEMMA
FORALL (l : list[T]) : is_sorted?(insertion_sort(l))

ins_and_cons_in_perm_is_perm : LEMMA
FORALL (l1 : list[T], 
        (l2: list[T] | permutations(l1,l2)),  
        x: T) : permutations(cons(x,l1), insert(x,l2))

insertion_sort_is_permutations: LEMMA	   
FORALL (l : list[T]) : permutations(l, insertion_sort(l))

insertion_sort_works : LEMMA		 
FORALL (l: list[T]):
     is_sorted?(insertion_sort(l)) AND permutations(l, insertion_sort(l)) 

END insertionsort
