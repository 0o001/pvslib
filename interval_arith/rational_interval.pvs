rational_interval: THEORY
BEGIN

  IMPORTING interval

  r: VAR real
  pr,ps: VAR posreal
  n: VAR posnat
  m : VAR nat
  epsil: VAR posreal
  q: VAR rat

  posrat_approx_lb(epsil)(pr): posreal =
    IF epsil>=pr THEN 1/ceiling(1/pr)
    ELSE
      LET
        denom = ceiling(1/epsil),
        num = floor(denom*pr)
      IN
        num/denom
    ENDIF

  posrat_approx_lb_increasing: LEMMA
    pr<=ps IMPLIES posrat_approx_lb(epsil)(pr)<=posrat_approx_lb(epsil)(ps)

  posrat_approx_lb_def: LEMMA
    LET pa = posrat_approx_lb(epsil)(pr) IN
    pa<=pr AND pa>=pr-epsil

  posrat_approx(epsil)(pr): (Pos?) =
    [| posrat_approx_lb(epsil)(pr),posrat_approx_lb(epsil)(pr+epsil) |]

  posrat_approx_def: LEMMA
    LET pa = posrat_approx(epsil)(pr) IN
    pa`lb <= pr AND pr<=pa`ub AND
    pr-pa`lb <= epsil AND pa`ub-pr <= epsil

  rat_interval(epsil)(I:Interval): {J:Interval|
    (lb(I)>0 IFF lb(J)>0) AND (lb(I)<0 IFF lb(J)<0) AND (lb(I)=0 IFF lb(J)=0) AND
    (ub(I)>0 IFF ub(J)>0) AND (ub(I)<0 IFF ub(J)<0) AND (ub(I)=0 IFF ub(J)=0) AND
    I<<J AND lb(J)<=lb(I) AND ub(I)<=ub(J) AND 
    lb(I)-lb(J)<=epsil AND ub(J)-ub(I)<=epsil} =
    LET newlb = IF lb(I)=0 THEN 0 ELSIF lb(I)<0 
    	      	THEN -ub(posrat_approx(epsil)(-lb(I)))
		ELSE lb(posrat_approx(epsil)(lb(I))) ENDIF,
        newub = IF ub(I)=0 THEN 0 ELSIF ub(I)<0
	      	THEN -lb(posrat_approx(epsil)(-ub(I)))
		ELSE ub(posrat_approx(epsil)(ub(I))) ENDIF
    IN [| newlb,newub |]

  rat_interval_fundamental: LEMMA
    FORALL (X,Y:Interval): Proper?(X) AND X<<Y IMPLIES
    rat_interval(epsil)(X) << rat_interval(epsil)(Y)

END rational_interval
