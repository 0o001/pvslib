rational_interval: THEORY

BEGIN

  IMPORTING interval

r: VAR real

pr: VAR posreal

n: VAR posnat

m : VAR nat

epsil: VAR posreal

q: VAR rat


% dir is whether you want the approximation
% above or below

posrat_approx(epsil)(pr): (Pos?) =
  LET
    newep = min(pr/2,epsil),
    denom = ceiling(1/newep),
    num = ceiling(denom*pr)
  IN
    [| (num-1)/denom, num/denom |] 

posrat_approx_def: LEMMA
  LET pa = posrat_approx(epsil)(pr) IN
  pa`lb <= pr AND pr<=pa`ub AND
  pr-pa`lb <= epsil AND pa`ub-pr <= epsil

rat_interval(epsil)(I:Interval): {J:Interval|
  (lb(I)>0 IFF lb(J)>0) AND (lb(I)<0 IFF lb(J)<0) AND (lb(I)=0 IFF lb(J)=0) AND
  (ub(I)>0 IFF ub(J)>0) AND (ub(I)<0 IFF ub(J)<0) AND (ub(I)=0 IFF ub(J)=0) AND
  I<<J AND lb(J)<=lb(I) AND ub(I)<=ub(J) AND 
  lb(I)-lb(J)<=epsil AND ub(J)-ub(I)<=epsil} =
    LET newlb = IF lb(I)=0 THEN 0 ELSIF lb(I)<0 
    	      	THEN -ub(posrat_approx(epsil)(-lb(I)))
		ELSE lb(posrat_approx(epsil)(lb(I))) ENDIF,
        newub = IF ub(I)=0 THEN 0 ELSIF ub(I)<0
	      	THEN -lb(posrat_approx(epsil)(-ub(I)))
		ELSE ub(posrat_approx(epsil)(ub(I))) ENDIF
    IN [| newlb,newub |]
	

ratprod(m): RECURSIVE real =
	    IF m=0 THEN 1 ELSE
	    ((2*m+1)/(2*m))*ratprod(m-1) ENDIF MEASURE m


ratprodint(epsil:posreal,bb:bool)(m): RECURSIVE Interval =
	    IF m=0 THEN [| 1,1 |] ELSE
	    LET int1:Interval = ([| (2*m+1)/(2*m),(2*m+1)/(2*m) |]),
	    	int2:Interval = ratprodint(epsil,bb)(m-1),
		int3:Interval = Mult(int1,int2),
		int4:Interval = IF bb THEN rat_interval(epsil)(int3) ELSE int3 ENDIF
            IN int4 ENDIF MEASURE m

END rational_interval
