(interval_ulp
 (Ulp_sp_inclusion 0
  (Ulp_sp_inclusion-1 nil 3680550603
   ("" (skeep)
    (("" (expand "Ulp_sp")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "NonNeg?")
              (("1" (expand "Ge")
                (("1" (flatten)
                  (("1" (expand "ulp_sp")
                    (("1" (expand "##")
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (hide -4)
                            (("1" (expand "[||]")
                              (("1"
                                (use "ulp_monotone")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "[||]")
                            (("2" (use "ulp_monotone")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (hide 2)
                  (("1" (expand "Neg?")
                    (("1" (expand "Lt")
                      (("1" (flatten)
                        (("1" (expand "ulp_sp")
                          (("1" (expand "##")
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "[||]")
                                  (("1"
                                    (use "ulp_abs")
                                    (("1"
                                      (replace -1 :hide? t :dir rl)
                                      (("1"
                                        (lemma "ulp_abs")
                                        (("1"
                                          (inst? -1 ("x" "x"))
                                          (("1"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             rl)
                                            (("1"
                                              (use "ulp_monotone")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but
                                                   (1 -2 -4))
                                                  (("1"
                                                    (expand "abs")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "[||]")
                                  (("2"
                                    (use "ulp_abs")
                                    (("2"
                                      (replace -1 :hide? t :dir rl)
                                      (("2"
                                        (lemma "ulp_abs")
                                        (("2"
                                          (inst? -1 ("x" "lb(X)"))
                                          (("2"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             rl)
                                            (("2"
                                              (use "ulp_monotone")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but
                                                   (1 -1 -3))
                                                  (("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "NonNeg?")
                  (("2" (expand "Neg?")
                    (("2" (expand "Ge")
                      (("2" (expand "Lt")
                        (("2" (case "lb(X)<0 AND ub(X) >=0")
                          (("1" (hide 1 3)
                            (("1" (expand "ulp_sp")
                              (("1"
                                (expand "##")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "[||]")
                                      (("1"
                                        (expand "ulp")
                                        (("1"
                                          (use "FulpCanonic")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (use "FcanonicBounded")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "Fbounded?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (use
                                                         "both_sides_expt_gt1_le")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "[||]")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "max")
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case "0<=x")
                                                (("1"
                                                  (lemma
                                                   "ulp_monotone")
                                                  (("1"
                                                    (inst?
                                                     -1
                                                     ("y"
                                                      "ub(X)"
                                                      "x"
                                                      "x"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (use "ulp_abs")
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (lemma
                                                         "ulp_abs")
                                                        (("2"
                                                          (inst?
                                                           -1
                                                           ("x"
                                                            "lb(X)"))
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (use
                                                               "ulp_monotone")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (case "0 <= x")
                                                (("1"
                                                  (use "ulp_monotone")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use "ulp_abs")
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (lemma "ulp_abs")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         ("x" "lb(X)"))
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (lemma
                                                             "ulp_abs")
                                                            (("2"
                                                              (inst?
                                                               -1
                                                               ("x"
                                                                "x"))
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (lemma
                                                                   "ulp_monotone")
                                                                  (("2"
                                                                    (inst?
                                                                     -1
                                                                     ("y"
                                                                      "abs(lb(X))"
                                                                      "x"
                                                                      "abs(x)"))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "abs")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 3) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Ulp_sp const-decl "Interval" interval_ulp nil)
    (NonNeg? const-decl "bool" interval nil)
    (|##| const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](single_precision_format, sp_closest?)"
     ieee754sp "float/")
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
         rounded_mode?(single_precision_format)(round)}" ieee754sp
     "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float "float/")
    (Rounding type-eq-decl nil float "float/")
    (rounded_mode? const-decl "bool" float "float/")
    (sp_closest? const-decl "bool" ieee754sp "float/")
    (RNDF type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (ulp_monotone formula-decl nil float "float/")
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (Ge const-decl "bool" interval nil)
    (Lt const-decl "bool" interval nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (EvenClosest? const-decl "bool" float "float/")
    (RestrictedRounding type-eq-decl nil float "float/")
    (CanonicRoundingFun type-eq-decl nil float "float/")
    (ulp_abs formula-decl nil float "float/")
    (Neg? const-decl "bool" interval nil)
    (< const-decl "bool" reals nil)
    (FulpCanonic formula-decl nil float "float/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (FcanonicBounded formula-decl nil float "float/")
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (Fulp_posreal_j application-judgement "posreal" ieee754sp "float/")
    (ulp const-decl "posreal" float "float/")
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (Ulp_sp_fundamental 0
  (Ulp_sp_fundamental-1 nil 3680625771
   ("" (skeep)
    (("" (case "NonNeg?(Y)")
      (("1" (case "NonNeg?(X)")
        (("1" (expand "Ulp_sp")
          (("1" (assert)
            (("1" (expand "<<")
              (("1" (expand "[||]")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (expand "NonNeg?")
                      (("1" (expand "Ge")
                        (("1" (flatten)
                          (("1" (expand "ulp_sp")
                            (("1" (use "ulp_monotone")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "NonNeg?")
                      (("2" (expand "Ge")
                        (("2" (flatten)
                          (("2" (expand "ulp_sp")
                            (("2" (use "ulp_monotone")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (-1 -3 -2 1)) (("2" (grind) nil nil)) nil))
        nil)
       ("2" (case "Neg?(Y)")
        (("1" (case "Neg?(X)")
          (("1" (expand "Ulp_sp")
            (("1" (assert)
              (("1" (lift-if 2)
                (("1" (split 2)
                  (("1" (flatten)
                    (("1" (hide-all-but (-1 -2))
                      (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "ulp_sp")
                      (("2" (expand "[||]")
                        (("2" (expand "<<")
                          (("2" (expand "Neg?")
                            (("2" (expand "Lt")
                              (("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (lemma "ulp_abs")
                                    (("1"
                                      (inst? -1 :where 1)
                                      (("1"
                                        (replace -1 :hide? t :dir rl)
                                        (("1"
                                          (lemma "ulp_abs")
                                          (("1"
                                            (inst? -1 ("x" "ub(X)"))
                                            (("1"
                                              (replace
                                               -1
                                               :hide?
                                               t
                                               :dir
                                               rl)
                                              (("1"
                                                (use "ulp_monotone")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "abs")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "ulp_abs")
                                    (("2"
                                      (inst? -1 :where 1)
                                      (("2"
                                        (replace -1 :hide? t :dir rl)
                                        (("2"
                                          (lemma "ulp_abs")
                                          (("2"
                                            (inst? -1 ("x" "lb(Y)"))
                                            (("2"
                                              (replace
                                               -1
                                               :hide?
                                               t
                                               :dir
                                               rl)
                                              (("2"
                                                (use "ulp_monotone")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (-1 -2 -3 1)) (("2" (grind) nil nil))
            nil))
          nil)
         ("2" (expand "Ulp_sp")
          (("2" (assert)
            (("2" (lift-if 3)
              (("2" (split 3)
                (("1" (flatten)
                  (("1" (expand "max")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (expand "ulp_sp")
                            (("1" (expand "<<")
                              (("1"
                                (expand "[||]")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (expand "ulp")
                                    (("1"
                                      (use "FulpCanonic")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (use "FcanonicBounded")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "Fbounded?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "both_sides_expt_gt1_le")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lemma "ulp_monotone")
                                      (("2"
                                        (inst?
                                         -1
                                         ("x" "ub(X)" "y" "ub(Y)"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "NonNeg?")
                                            (("2"
                                              (expand "Ge")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "ulp_sp")
                            (("2" (expand "<<")
                              (("2"
                                (expand "[||]")
                                (("2"
                                  (split 2)
                                  (("1"
                                    (expand "ulp")
                                    (("1"
                                      (use "FulpCanonic")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (use "FcanonicBounded")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "Fbounded?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "both_sides_expt_gt1_le")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (use "ulp_monotone")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "NonNeg?")
                                          (("2"
                                            (expand "Ge")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "<<")
                        (("1" (expand "[||]")
                          (("1" (expand "ulp_sp")
                            (("1" (split 1)
                              (("1"
                                (expand "ulp")
                                (("1"
                                  (use "FulpCanonic")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (use "FcanonicBounded")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "Fbounded?")
                                            (("1"
                                              (use
                                               "both_sides_expt_gt1_le")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "max")
                                (("2"
                                  (lift-if 1)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma "ulp_abs")
                                        (("1"
                                          (inst? -1 ("x" "lb(X)"))
                                          (("1"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             rl)
                                            (("1"
                                              (lemma "ulp_abs")
                                              (("1"
                                                (inst?
                                                 -1
                                                 ("x" "lb(Y)"))
                                                (("1"
                                                  (replace
                                                   -1
                                                   :hide?
                                                   t
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (case
                                                     "abs(lb(X)) <= abs(lb(Y))")
                                                    (("1"
                                                      (use
                                                       "ulp_monotone")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -4 -2))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma "ulp_abs")
                                        (("2"
                                          (inst? -1 ("x" "ub(Y)"))
                                          (("2"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             rl)
                                            (("2"
                                              (lemma "ulp_abs")
                                              (("2"
                                                (inst?
                                                 -1
                                                 ("x" "lb(Y)"))
                                                (("2"
                                                  (replace
                                                   -1
                                                   :hide?
                                                   t
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (lemma "ulp_abs")
                                                    (("2"
                                                      (inst?
                                                       -1
                                                       ("x" "lb(X)"))
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (lemma
                                                           "ulp_monotone")
                                                          (("2"
                                                            (inst?
                                                             -1
                                                             ("x"
                                                              "abs(lb(X))"
                                                              "y"
                                                              "abs(lb(Y))"))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide-all-but
                                                                 (1
                                                                  -1
                                                                  -3))
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "<<")
                        (("2" (expand "[||]")
                          (("2" (expand "max")
                            (("2" (lift-if 2)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (case "NOT Proper?(Y)")
                                      (("1"
                                        (hide-all-but (1 -2 -3 -4))
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case
                                             "ulp_sp(lb(X)) <= ulp_sp(lb(Y))")
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "ulp_sp")
                                                (("2"
                                                  (lemma "ulp_abs")
                                                  (("2"
                                                    (inst?
                                                     -1
                                                     ("x" "lb(X)"))
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (lemma
                                                         "ulp_abs")
                                                        (("2"
                                                          (inst?
                                                           -1
                                                           ("x"
                                                            "ub(X)"))
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (lemma
                                                               "ulp_abs")
                                                              (("2"
                                                                (inst?
                                                                 -1
                                                                 ("x"
                                                                  "lb(Y)"))
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (lemma
                                                                     "ulp_monotone")
                                                                    (("2"
                                                                      (inst?
                                                                       -1
                                                                       ("x"
                                                                        "abs(lb(X))"
                                                                        "y"
                                                                        "abs(lb(Y))"))
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            3
                                                                            4
                                                                            5
                                                                            6
                                                                            -6
                                                                            -2
                                                                            -4))
                                                                          (("2"
                                                                            (case
                                                                             "NOT lb(Y) <= 0")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT lb(X) <= 0")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (case
                                             "ulp_sp(lb(X)) <= ulp_sp(lb(Y))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2 3 -5)
                                              (("2"
                                                (expand "ulp_sp")
                                                (("2"
                                                  (lemma "ulp_abs")
                                                  (("2"
                                                    (inst?
                                                     -1
                                                     ("x" "lb(X)"))
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (lemma
                                                         "ulp_abs")
                                                        (("2"
                                                          (inst?
                                                           -1
                                                           ("x"
                                                            "ub(X)"))
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (lemma
                                                               "ulp_abs")
                                                              (("2"
                                                                (inst?
                                                                 -1
                                                                 ("x"
                                                                  "lb(Y)"))
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (lemma
                                                                     "ulp_monotone")
                                                                    (("2"
                                                                      (inst?
                                                                       -1
                                                                       ("x"
                                                                        "abs(lb(X))"
                                                                        "y"
                                                                        "abs(lb(Y))"))
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            3
                                                                            4
                                                                            5
                                                                            6
                                                                            -4
                                                                            -1
                                                                            -3))
                                                                          (("2"
                                                                            (case
                                                                             "NOT lb(Y) <= 0")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT lb(X) <= 0")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if 2)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case
                                           "ulp_sp(ub(X)) <= ulp_sp(ub(Y))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2 3 -1)
                                            (("2"
                                              (expand "ulp_sp")
                                              (("2"
                                                (use "ulp_monotone")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 -1 3))
                                                    (("2"
                                                      (expand "Neg?")
                                                      (("2"
                                                        (expand "Lt")
                                                        (("2"
                                                          (expand
                                                           "Proper?")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 1 3)
                                          (("2"
                                            (expand "ulp_sp")
                                            (("2"
                                              (use "ulp_monotone")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "Neg?")
                                                  (("2"
                                                    (expand "Lt")
                                                    (("2"
                                                      (expand
                                                       "Proper?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Neg? const-decl "bool" interval nil)
    (ulp_abs formula-decl nil float "float/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (CanonicRoundingFun type-eq-decl nil float "float/")
    (RestrictedRounding type-eq-decl nil float "float/")
    (EvenClosest? const-decl "bool" float "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (Lt const-decl "bool" interval nil)
    (Neg_Precondition name-judgement "(Precondition?)" interval nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (ulp const-decl "posreal" float "float/")
    (Fulp_posreal_j application-judgement "posreal" ieee754sp "float/")
    (FcanonicBounded formula-decl nil float "float/")
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (FulpCanonic formula-decl nil float "float/")
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (Ge const-decl "bool" interval nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](single_precision_format, sp_closest?)"
     ieee754sp "float/")
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
         rounded_mode?(single_precision_format)(round)}" ieee754sp
     "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (Fbounded? const-decl "bool" float "float/")
    (Rounding type-eq-decl nil float "float/")
    (rounded_mode? const-decl "bool" float "float/")
    (sp_closest? const-decl "bool" ieee754sp "float/")
    (RNDF type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (ulp_monotone formula-decl nil float "float/")
    (<< const-decl "bool" interval nil)
    (Ulp_sp const-decl "Interval" interval_ulp nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (Proper? const-decl "bool" interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NonNeg? const-decl "bool" interval nil))
   shostak))
 (Ulp_sp_Inclusion 0
  (Ulp_sp_Inclusion-1 nil 3680537612
   ("" (expand "Inclusion?")
    (("" (skeep)
      (("" (use "Ulp_sp_inclusion") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval nil)
    (PreTrue const-decl "(Precondition?)" interval_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Ulp_sp_inclusion formula-decl nil interval_ulp nil)
    (Inclusion? const-decl "bool" interval nil))
   nil))
 (Ulp_sp_Fundamental 0
  (Ulp_sp_Fundamental-1 nil 3680537612
   ("" (lemma "Ulp_sp_fundamental")
    (("" (expand "Fundamental?")
      (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Fundamental? const-decl "bool" interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Proper? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval nil)
    (PreTrue const-decl "(Precondition?)" interval_expr nil)
    (Ulp_sp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_sp))"
     interval_ulp nil)
    (Ulp_sp_fundamental formula-decl nil interval_ulp nil))
   nil))
 (ULP_TCC1 0
  (ULP_TCC1-1 nil 3680532741 ("" (subtype-tcc) nil nil)
   ((Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp nil)
    (Ulp_sp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_sp))"
     interval_ulp nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))

