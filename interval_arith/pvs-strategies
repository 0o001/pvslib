(defparameter *interval-strategies* "
%  decimalize: Decimalizes relational formulas involving rational numbers.
%  decimalize-expr: Decimalizes rational expressions.
%  numerical: Computes bounds to minimum and maximum values of real-valued expressions.
%  interval: Checks whether or not properties on real-valued formulas hold.
%  Supported operations include: +,-,*,/,^,sq,abs,sqrt,pi,sin,cos,tan,atan,ln,exp,e")

;; The parameter intervl is a list of 2 lisp numbers (ratios), over is a boolean,
;; and n is the number of decimals in the output. The output is a string representing
;; a decimal interval, where the bounds are exact to the original one up to the n-1 decimal.
;; Furthermore, if over is t, then the output is an over-approximation. Otherwise, the
;; output is an under-approximation.
(defun ia-interval2decimal (intervl over n)
  (when (and intervl
	     (numberp (nth 0 intervl))
	     (numberp (nth 1 intervl)))
    (format nil "[|~a,~a|]"
	    (ratio2decimal (nth 0 intervl) (not over) n)
	    (ratio2decimal (nth 1 intervl) over n))))

(defun ia-concrete-interval (expr)
  (let ((val (extra-add-evalexpr expr)))
    (when (record-expr? val)
      (let ((lb (extra-get-number-from-expr (get-expr-from-obj val 'lb)))
	    (ub (extra-get-number-from-expr (get-expr-from-obj val 'ub))))
	(when (and lb ub) (list lb ub))))))

(defstep decimalize (fnum &optional (precision 3) (side r) (tccs? t))
  (let ((initeqs (extra-reset-evalexprs))
	(fnum    (extra-get-fnum fnum)))
    (when fnum
      (with-fresh-labels
       ((!dec fnum :tccs? tccs?))
       (let ((expr  (extra-get-formula !dec))
	     (castr (if (is-function-expr expr "##")
			(let ((int2dec (ia-interval2decimal (ia-concrete-interval (args2 expr))
							    (< fnum 0) precision)))
			  (when int2dec
			    (format nil "~a ## ~a" (args1 expr) int2dec)))
		      (let* ((rel (car (is-relation expr)))
			     (num (when rel (extra-get-number-from-expr 
					     (extra-add-evalexpr
					      (if (member side '(r R))
						  (args2 expr)
						(args1 expr)))))))
			(when num
			  (if (and (equal rel '=) (< fnum 0))
			      (format nil "~a ## [| ~a, ~a |]" (if (member side '(r R))
								   (args1 expr)
								 (args2 expr))
				      (ratio2decimal num nil precision)
				      (ratio2decimal num t precision))
			    (unless (equal rel '=)
			      (if (member side '(r R))
				  (format nil "~a ~a ~a" (args1 expr) rel
					  (ratio2decimal num	
							 (iff (< fnum 0) (member rel '(< <=)))
							 precision))
				(format nil "~a ~a ~a" 
					(ratio2decimal num	
						       (iff (> fnum 0) (member rel '(< <=)))
						       precision)
					rel (args2 expr)))))))))
	     (eqs   (when castr (extra-evalexprs))))
	 (if castr
	     (then
	      (extra-evalexprs$ eqs)
	      (branch (case castr)
		      ((if (< fnum 0)
			   (hide !dec)
			 (then
			  (hide-all-but (!dec -1))
			  (expand "##")
			  (flatten)
			  (assert)))
		       (if (> fnum 0)
			   (hide !dec)
			 (then
			  (hide-all-but (!dec 1))
			  (expand "##")
			  (flatten)
			  (assert)))
		       (assert))))
	   (printf "Formula ~a is not suitable for decimalization" fnum))))))
  "[Interval] Decimalizes a rational number in one side of relational formula FNUM
by a decimal number that is exact to the rational number up to the PRECISION-1 decimal.
SIDE can be either r (right) or l (left). If TCCs? is set to nil, the strategy doesn't try
to prove possible TCCs generated during its execution."
  "Decimalizing ~2@*~ahs of relational formula ~@*~a to precision ~1@*~a")

(defstep decimalize-expr (expr &optional (precision 3))
  (let ((initeqs (extra-reset-evalexprs))
	(exprat  (extra-get-expr expr))
	(num     (extra-get-number-from-expr (extra-add-evalexpr exprat)))
	(castr   (when num
		   (format nil "~a ## [| ~a, ~a |]"
		 	  exprat
			  (ratio2decimal num nil precision)
			  (ratio2decimal num t precision))))
	(eqs    (when castr (extra-evalexprs))))
    (if castr
	(spread (case castr)
		((skip)
		 (then
		  (hide-all-but 1)
		  (extra-evalexprs$ eqs)
		  (expand "##")
		  (flatten)
		  (assert))))
      (printf "Expression ~a is not suitable for decimalization" expr)))
  "[Interval] Decimalizes a rational number by a decimal number that is exact to the
rational number up to the PRECISION-1 decimal."
  "Decimalizing expression ~a to the precision ~a")

;; The following strategy is provided for didactic purposes only.
;; The most sophisticated strategy numerical should be used in proofs instead of simple-numerical
(defstep simple-numerical (expr &optional (precision 3) (maxdepth 5))
  (let ((subs    *ia-builtin*)
	(ia-expr (extra-get-expr expr))
	(ia-estr (expr2str ia-expr))
	(fms     (mapcar #'(lambda (fn) (extra-get-formula-from-fnum fn)) (extra-get-fnums '-)))
	(vars    (ia-get-vars-from-expr ia-expr subs))
	(ia-vars (extra-get-var-ranges fms vars))
	(unvars  (ia-find-unbound-vars ia-vars))
	(msg     (cond (unvars
			(format nil "Variable~:[~;s~] ~{~a~^, ~} ~:[is~;are~] unbounded."
				(cdr unvars) unvars (cdr unvars)))
		       ((null ia-expr)
			(format nil "Do not understand argument ~a." expr))
		       ((not (is-number-expr ia-expr))
			(format nil "Expresion ~a is not a real number expression." ia-expr))))
	(ia-box    (unless msg (ia-box ia-vars)))
	(ia-iexpr  (unless msg (ia-interval-expr ia-expr precision ia-vars subs)))
	(maxdepth  (if (null ia-vars) 0 maxdepth))
	(msg       (or msg (when (listp ia-iexpr) (car ia-iexpr)))))
    (if msg
	(printf msg)
      (with-fresh-names
       ((sia ia-iexpr))
       (let ((ia-eval  (format nil "simple_bandb.simple_interval(~a,~a,~a)" maxdepth sia ia-box))
	     (ia-lvars (format nil "list2array(0)((:~{~a~^, ~}:))" ia-vars)))
	 (then
	  (eval-expr ia-eval :safe? nil)
	  (lemma "simple_bandb.simple_interval_soundness")
	  (inst? -1)
	  (replaces -2)
	  (beta -1)
	  (expand "sound?" -1)
	  (branch (split -1)
		  ((spread (inst -1 ia-lvars)
			   ((branch (invoke (case "%1 = %2") (! -1 1) ia-estr)
				    ((then (replaces -1)
					   (decimalize -1 precision))
				     (interval-eq__$ sia 1 subs)
				     (then (hide -1)(vars-sharp__))))
			    (if (null ia-vars)
				(eval-formula)
			      (vars-in-box__))))
		   (eval-formula))))))))
  "[Interval] Computes a simple estimation of the minimum and maximum
values of EXPR using a branch and bound algorithm based on interval
arithmetic.  PRECISION is the number of decimals in the output
interval. PRECISION also indicates an accuracy of 10^-PRECISION in
every atomic computation. However, this accuracy is not guaranteed in
the final result.

MAXDEPTH is a maximum recursion depth for the branch and bound
algorithm.

This strategy is a simplified version of the more elaborated strategy
NUMERICAL."
  "Computing estimates to the minmax of expression ~a,~%using interval arithmetic")

;; *** Concrete instantiations of branch and bound strategies (interval and numerical) 
;; *** for interval arithmetic by Mariano Moscato

(defstep interval (&optional 
		   (fnums 1) (precision 3) maxdepth sat?
		   vars 
		   subs 
		   dirvar
		   verbose?
		   label
		   (equiv? t)
		   (tccs? t))
  (let ((subs (append subs *ia-builtin*)))
    (gbandb_interval__$
     "interval_arith@strategies4Q.IntervalStrategies4Q__" ;;; required-constant
     ia-interval-expr                                     ;;; pvsexpr-to-strobj
     "interval_bandb.interval"                            ;;; bandb-function-name
     "interval_bandb.interval_soundness"                  ;;; bandb soundness theorem
     nil                                                  ;;; rewrite-decls
     interval-eq__$                                       ;;; beval-solver
     fnums precision maxdepth sat? vars subs              ;;; (Pass-through params.)
     dirvar verbose? label equiv? tccs?))                 ;;; (Pass-through params.)
  "[Interval] Checks if formulas FNUMS, which may be simply
quantified, holds using a branch and bound algorithm based on interval
arithmetic.  The parameter PRECISION indicates an accuracy of
10^-PRECISION in every atomic computation. However, this accuracy is
not guaranteed in the final result. MAXDEPTH is a maximum recursion
depth for the branch and bound algorithm.

The interval approximations of sin, cos, tan are defined for the
ranges [-pi_lb,pi_lb], [-pi_lb,pi_lb], and [-pi_lb/2,pi_lb/2].

If SAT? is set to t, the strategy checks if formula FNUMS,
whether in the antecedent or in the consequent, is satisfiable
and, in the positive case, prints a provably correct witness.
If formula FNUMS is quantified, it is checked for validity.

VARS is a list of the form (<v1> ... <vn>), where each <vi> is either a
variable name, e.g., \"x\", or a list consisting of a variable name and
an interval, e.g., (\"x\" \"[|-1/3,1/3|]\"). This list is used to specify
the variables in EXPR and to provide their ranges. If this list is not
provided, this information is extracted from the sequent.

SUBS is a list of substitutions for translating user-defined
real-valued functions into interval ones. Each substitution has
the form (<f> <F>), where <f> is the name of a real-valued function
and <F> is the name of its interval counterpart. It is assumed that
<F> satisfies the Inclusion and the Fundamental theorems of interval
arithmetic for <f>. Standard substitutions for basic arithmetic
operators, abs, sq, sqrt, trigonometric functions, exp, and ln
are already provided. This parameter can be used to change the precision
for a particular function, e.g., ((\"pi\" \"PI_n(4)\") (\"cos\"
(\"COS_n\" 1))(\"sin\" (\"SIN_n\" -1))) specifies the precision 4,
PRECISION+1, and PRECISION-1 for pi, cos, and sin, respectively.

DIRVAR is the name of a direction and variable selection method for
the branch an bound algorithm. Theory interval_bandb includes some
pre-defined methods. If none is provided, a choice is made base on the
problem.

If VERBOSE? is set to t, the strategy prints information about number of
splits, depth, etc. 

LABEL is used to label formulas containing additional information computed
by the branch and bound algorithm. These formulas are hidden, but they can
be brought to the sequent using the proof command REVEAL.

If EQUIV? is set to nil, the strategy doesn't try to prove that the
deep embedding of the original expression is correct. The proof of
this fact is trivial from a logical point of view, but requires
unfolding of several definitions which is time consuming in PVS.

If TCCs? is set to nil, the strategy doesn't try to prove possible
TCCs generated during its execution."
  "Checking formula ~a using interval arithmetic")

(defstep numerical (expr 
		    &optional (precision 3) (maxdepth 10)
		    min? max?
		    vars 
		    subs
		    dirvar
		    verbose?
		    label
		    (equiv? t))
  (let ((subs (append subs *ia-builtin*)))
    (gbandb_numerical__$ 
     "interval_arith@strategies4Q.IntervalStrategies4Q__" ;;; required-constant
     ia-interval-expr                                     ;;; pvsexpr-to-strobj 
     "numerical_bandb.numerical"                          ;;; bandb-function-name
     "numerical_bandb.numerical_soundness"                ;;; bandb soundness theorem
     nil                                                  ;;; rewrite-decls
     interval-eq__$                                       ;;; beval-solver
     expr precision maxdepth min? max? vars subs          ;;; (Pass-through parameters.)
     dirvar verbose? label equiv?))                       ;;; (Pass-through parameters.)
  "[Interval] Computes lower and upper bounds of the minimum and
maximum values of EXPR using a branch and bound algorithm based on
interval arithmetic.  PRECISION is the number of decimals in the
output interval. PRECISION also indicates an accuracy of 10^-PRECISION
in every atomic computation. However, this accuracy is not guaranteed
in the final result. MAXDEPTH is a maximum recursion depth for the
branch and bound algorithm. For efficiency, the MIN? and MAX? options
can be used to restrict the precision of the computations to either
the lower or upper bound, respectively.

VARS is a list of the form (<v1> ... <vn>), where each <vi> is either a
variable name, e.g., \"x\", or a list consisting of a variable name and
an interval, e.g., (\"x\" \"[|-1/3,1/3|]\"). This list is used to specify
the variables in EXPR and to provide their ranges. If this list is not
provided, this information is extracted from the sequent.

SUBS is a list of substitutions for translating user-defined
real-valued functions into interval ones. Each substitution has the
form (<f> <F>), where <f> is the name of a real-valued function and
<F> is the name of its interval counterpart. It is assumed that <F>
satisfies the Inclusion and the Fundamental theorems of interval
arithmetic for <f>. Standard substitutions for basic arithmetic
operators, abs, sq, sqrt, trigonometric functions, exp, and ln are
already provided. This parameter can be used to change the precision
for a particular function, e.g., ((\"pi\" \"PI_n(4)\") (\"cos\"
(\"COS_n\" 1))(\"sin\" (\"SIN_n\" -1))) specifies the precision 4,
PRECISION+1, and PRECISION-1 for pi, cos, and sin, respectively.

DIRVAR is the name of a direction and variable selection method for
the branch an bound algorithm. Theory numerical_bandb includes some
pre-defined methods. If none is provided, a choice is made base on the
problem.

If VERBOSE? is set to t, the strategy prints information about number of
splits, depth, etc. 

LABEL is used to label formulas containing additional information computed
by the branch and bound algorithm. These formulas are hidden, but they can
be brought to the sequent using the proof command REVEAL.

If EQUIV? is set to nil, the strategy doesn't try to prove that the
deep embedding of the original expression is correct. The proof of
this fact is trivial from a logical point of view, but requires
unfolding of several definitions which is time consuming in PVS."
  "Computing minmax values of expression ~a,~%via interval arithmetic")
