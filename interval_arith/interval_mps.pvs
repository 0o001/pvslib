%
% An alternative formalization for intervals, based on its midpoint and size.
%
interval_mps: THEORY
BEGIN

  IMPORTING interval

  X,X1,X2: VAR ProperInterval
  x,x1,x2: VAR real
  m,m1,m2: VAR real
  s,s1,s2: VAR nonneg_real
  
  % mid point + size
  mps(mp:real,s:nonneg_real) : Interval =
    [| mp - s/2 , mp + s/2 |]

  mps_proper_j: JUDGEMENT mps(m,s) HAS_TYPE ProperInterval

  mps_rew: LEMMA
    [| m-s , m+s |] = mps(m,2*s)

  mps_mp_s: LEMMA
    mps(midpoint(X),size(X)) = X

  midpoint_mps: LEMMA
    midpoint(mps(m,s)) = m
  AUTO_REWRITE+ midpoint_mps

  size_mps: LEMMA
    size(mps(m,s)) = s
  AUTO_REWRITE+ size_mps

  lb_mps: LEMMA
    lb(mps(m,s)) = m - s/2
  AUTO_REWRITE+ lb_mps

  ub_mps: LEMMA
    ub(mps(m,s)) = m + s/2
  AUTO_REWRITE+ ub_mps

  midinterval: LEMMA
    x ## X1 AND midpoint(X1) ## X2
    IMPLIES x ## mps(midpoint(X2),size(X2)+size(X1))

  % Operations

  % The midpoint of the result must be the result of applying the (correspon-
  % ding real-valued) operation on the midpoints of the arguments.

  % Some of the operations from interval.pvs fulfill that statement trivially.

  Add_mps(X1,X2): Interval = Add(X1,X2)

  Add_mps_midpoint: LEMMA
    midpoint(Add(X1,X2)) = midpoint(X1) + midpoint(X2)
  AUTO_REWRITE+ Add_mps_midpoint

  Sub_mps(X1,X2): Interval = Sub(X1,X2)

  Sub_mps_midpoint: LEMMA
    midpoint(Sub(X1,X2)) = midpoint(X1) - midpoint(X2)
  AUTO_REWRITE+ Sub_mps_midpoint

  % Multiplication

  Mult_mps(X1,X2): Interval =
    LET m1 = midpoint(X1), s1 = size(X1)/2,
        m2 = midpoint(X2), s2 = size(X2)/2
    IN mps(m1*m2,(abs(m1)*s2+abs(m2)*s1+s1*s2)*2)

  Mult_in_Mult_mps: LEMMA
    x ## Mult(X1,X2)
    IMPLIES x ## Mult_mps(X1,X2)

  Mult_mps_enclosure: LEMMA
    Mult(X1,X2) << Mult_mps(X1,X2)

  Mult_inclusion_mps: LEMMA
   x1 ## X1 AND
   x2 ## X2
   IMPLIES x1*x2 ## Mult_mps(X1,X2)

  % Division

  Div_mps(X1,(X2|Zeroless?(X2))): Interval =
    LET m1 = midpoint(X1), s1 = size(X1),
        m2 = midpoint(X2), s2 = size(X2)
    IN mps(m1/m2, abs(m1/m2 - midpoint(Div(X1,X2))) * 2 + size(Div(X1,X2)))

  Div_inclusion_mps: LEMMA
    x1 ## X1 AND
    x2 ## X2 AND
    Zeroless?(X2)
    IMPLIES x1/x2 ## Div_mps(X1,X2)

END interval_mps
