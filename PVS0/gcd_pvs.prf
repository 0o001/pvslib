(gcd_pvs
 (gcd_TCC1 0
  (gcd_TCC1-1 nil 3654012547
   ("" (lemma "well_founded_le") (("" (grind) nil nil)) nil)
   ((restrict const-decl "R" restrict nil)
    (well_founded? const-decl "bool" orders nil)
    (well_founded_le formula-decl nil ordinals nil))
   nil))
 (gcd_TCC2 0
  (gcd_TCC2-1 nil 3654012547 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" gcd_pvs0 nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" gcd_pvs0 nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (boole const-decl "Val" gcd_pvs0 nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_lang nil)
    (pvs0_gcd const-decl "Def" gcd_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (Omega const-decl "nat" omega "orders/")
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (MT type-eq-decl nil gcd_pvs0 nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (T type-eq-decl nil gcd_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Omega_eval const-decl "Val" measure_termination nil)
    (gcd_pvs0 const-decl "nat" gcd_pvs0 nil))
   nil))
 (gcd_TCC3 0
  (gcd_TCC3-1 nil 3654012547 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (gcd_TCC4 0
  (gcd_TCC4-1 nil 3654012547
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "gcd_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "val2env((m,n))")
            ((""
              (inst -1 "(# cnds
                             := (: pvsbool(op1(1, vr)),
                                   pvsnot(op1(0, vr)) :),
                           path := (: 1, 2 :),
                           rec_expr := rec(op1(3, vr)) #)")
              (("1" (inst -1 "(m,n-m)")
                (("1" (assert)
                  (("1" (expand "eval_conds_rec")
                    (("1" (expand "eval_conds_rec")
                      (("1" (expand "eval_conds_rec")
                        (("1" (expand "semantic_rel_expr")
                          (("1" (expand "semantic_rel_expr")
                            (("1" (expand "eop1")
                              (("1"
                                (expand "ebool")
                                (("1"
                                  (expand "boole")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst 1 "(m,n)")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst 1 "(1,0)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst 1 "(m,n)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst 1 "(0,0)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst 1 "(m,n)")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (typepred "pvs0_ccs(pvs0_gcd)")
                (("2" (rewrite "every_nth")
                  (("2" (inst -1 "0")
                    (("1"
                      (case "(# cnds
                := (: pvsbool[Val[T]](op1[Val[T]](1, vr[Val[T]])),
                      pvsnot[Val[T]](op1[Val[T]](0, vr[Val[T]])) :),
              path := (: 1, 2 :),
              rec_expr := rec[Val[T]](op1[Val[T]](3, vr[Val[T]])) #) = nth(pvs0_ccs(pvs0_gcd), 0)")
                      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (pvs0_gcd_tcc_termination name-judgement
     "(pvs0_tcc_termination(ebool, eop1, eop2))" gcd_pvs0 nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_lang nil)
    (boole const-decl "Val" gcd_pvs0 nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (m skolem-const-decl "nat" gcd_pvs nil)
    (n skolem-const-decl "nat" gcd_pvs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (every_nth formula-decl nil list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" pvs0_props
                 nil)
    (append def-decl "list[T]" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
                nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" pvs0_to_dg nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Environment type-eq-decl nil pvs0_lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T type-eq-decl nil gcd_pvs0 nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (MT type-eq-decl nil gcd_pvs0 nil) (< def-decl "bool" ordinals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (eop2 const-decl "Val" gcd_pvs0 nil)
    (pvs0_gcd const-decl "Def" gcd_pvs0 nil)
    (gcd_wfm const-decl
     "(pvs0_tcc_termination_pred(ebool, eop1, eop2)(pvs0_gcd))"
     gcd_pvs0 nil))
   nil))
 (gcd_TCC5 0
  (gcd_TCC5-1 nil 3654012547
   ("" (skeep)
    (("" (typepred "v(m,n-m)")
      (("1" (replaces -1)
        (("1" (lemma "gcd_pvs0_m_n")
          (("1" (insteep -1) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (gcd_pvs0 const-decl "nat" gcd_pvs0 nil)
    (gcd_wfm const-decl
     "(pvs0_tcc_termination_pred(ebool, eop1, eop2)(pvs0_gcd))"
     gcd_pvs0 nil)
    (pvs0_gcd const-decl "Def" gcd_pvs0 nil)
    (eop2 const-decl "Val" gcd_pvs0 nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T type-eq-decl nil gcd_pvs0 nil) (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (MT type-eq-decl nil gcd_pvs0 nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gcd_pvs0_m_n formula-decl nil gcd_pvs0 nil))
   nil))
 (gcd_TCC6 0
  (gcd_TCC6-1 nil 3654012547
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "gcd_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "val2env((m,n))")
            ((""
              (inst -1 "(# cnds
                             := (: pvsnot(op1(1, vr)),
                                   pvsnot(op1(0, vr)) :),
                           path := (: 2, 2 :),
                           rec_expr := rec(op1(4, vr)) #)")
              (("1" (inst -1 "(n,m)")
                (("1" (assert)
                  (("1" (hide 5)
                    (("1" (prop)
                      (("1" (expand "semantic_rel_expr")
                        (("1" (expand "semantic_rel_expr")
                          (("1" (inst 1 "(m,n)")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "eval_conds_rec")
                        (("2" (expand "eval_conds_rec")
                          (("2" (expand "eval_conds_rec")
                            (("2" (expand "semantic_rel_expr")
                              (("2"
                                (expand "semantic_rel_expr")
                                (("2"
                                  (expand "eop1")
                                  (("2"
                                    (expand "boole")
                                    (("2"
                                      (expand "ebool")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst 1 "(0,0)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 1 "(m,n)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst 1 "(0,0)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst 1 "(m,n)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "pvs0_ccs(pvs0_gcd)")
                (("2" (rewrite "every_nth")
                  (("2" (inst -1 "1")
                    (("1"
                      (case "(# cnds
                := (: pvsnot[Val[T]](op1[Val[T]](1, vr[Val[T]])),
                      pvsnot[Val[T]](op1[Val[T]](0, vr[Val[T]])) :),
              path := (: 2, 2 :),
              rec_expr := rec[Val[T]](op1[Val[T]](4, vr[Val[T]])) #) = nth(pvs0_ccs(pvs0_gcd), 1)")
                      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (pvs0_gcd_tcc_termination name-judgement
     "(pvs0_tcc_termination(ebool, eop1, eop2))" gcd_pvs0 nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_lang nil)
    (boole const-decl "Val" gcd_pvs0 nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (every_nth formula-decl nil list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" pvs0_props
                 nil)
    (append def-decl "list[T]" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
                nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" pvs0_to_dg nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Environment type-eq-decl nil pvs0_lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T type-eq-decl nil gcd_pvs0 nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (MT type-eq-decl nil gcd_pvs0 nil) (< def-decl "bool" ordinals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (eop2 const-decl "Val" gcd_pvs0 nil)
    (pvs0_gcd const-decl "Def" gcd_pvs0 nil)
    (gcd_wfm const-decl
     "(pvs0_tcc_termination_pred(ebool, eop1, eop2)(pvs0_gcd))"
     gcd_pvs0 nil))
   nil))
 (gcd_TCC7 0
  (gcd_TCC7-1 nil 3654012547
   ("" (skeep)
    (("" (typepred "v(n,m)")
      (("" (replaces -1)
        (("" (lemma "gcd_pvs0_m_n")
          (("" (insteep -1)
            (("" (replaces -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((gcd_pvs0 const-decl "nat" gcd_pvs0 nil)
    (gcd_wfm const-decl
     "(pvs0_tcc_termination_pred(ebool, eop1, eop2)(pvs0_gcd))"
     gcd_pvs0 nil)
    (pvs0_gcd const-decl "Def" gcd_pvs0 nil)
    (eop2 const-decl "Val" gcd_pvs0 nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T type-eq-decl nil gcd_pvs0 nil) (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (MT type-eq-decl nil gcd_pvs0 nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gcd_pvs0_m_n formula-decl nil gcd_pvs0 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)))

