(ack_pvs0
 (ack_op1_TCC1 0
  (ack_op1_TCC1-1 nil 3682020741 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (ack_op1_TCC2 0
  (ack_op1_TCC2-1 nil 3682020741 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (ack_op2_TCC1 0
  (ack_op2_TCC1-1 nil 3682020741 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (M1_TCC1 0
  (M1_TCC1-1 nil 3682020741 ("" (subtype-tcc) nil nil) nil nil))
 (A0_TCC1 0
  (A0_TCC1-1 nil 3662226670 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A0_TCC2 0
  (A0_TCC2-1 nil 3662226670 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A0_TCC3 0
  (A0_TCC3-1 nil 3662226670 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A1_TCC1 0
  (A1_TCC1-1 nil 3662226670 ("" (eval-formula))
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A1_TCC2 0
  (A1_TCC2-1 nil 3662226670 ("" (eval-formula))
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A2_TCC1 0
  (A2_TCC1-1 nil 3662226670 ("" (eval-formula))
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A2_TCC2 0
  (A2_TCC2-1 nil 3662226670 ("" (eval-formula))
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A2_TCC3 0
  (A2_TCC3-1 nil 3683896183 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (ack_mm_TCC1 0
  (ack_mm_TCC1-5 "" 3681839843
   ("" (rewrite "indi_f_equiv")
    (("" (eval-expr "ack_ccg`dg")
      (("" (expand "indi_f_sound_iter")
        (("" (split)
          (("1" (expand "indi_f_sound_all_vertex")
            (("1" (assert)
              (("1" (eval-expr "ack_ccg`dg`data")
                (("1" (hide -2)
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (expand "gt")
                          (("1" (expand "ack_ccg")
                            (("1" (expand "make_ccg")
                              (("1"
                                (expand "ack_measures")
                                (("1"
                                  (expand "ge")
                                  (("1"
                                    (expand "le")
                                    (("1"
                                      (expand "eval_conds")
                                      (("1"
                                        (expand "eval_conds_rec")
                                        (("1"
                                          (expand "eval_conds_rec")
                                          (("1"
                                            (expand "eval_conds_rec")
                                            (("1"
                                              (skeep*)
                                              (("1"
                                                (expand "pvs0_ack")
                                                (("1"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("1"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (eval-formula -1) nil nil)
                         ("3" (expand "indi_f_sound_all_vertex")
                          (("3" (prop)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (eval-formula -1) nil nil)
                                 ("2"
                                  (expand "gt")
                                  (("2"
                                    (expand "ack_ccg")
                                    (("2"
                                      (expand "make_ccg")
                                      (("2"
                                        (expand "ack_measures")
                                        (("2"
                                          (expand "eval_conds")
                                          (("2"
                                            (expand "eval_conds_rec")
                                            (("2"
                                              (expand "eval_conds_rec")
                                              (("2"
                                                (expand
                                                 "eval_conds_rec")
                                                (("2"
                                                  (skeep*)
                                                  (("2"
                                                    (expand "pvs0_ack")
                                                    (("2"
                                                      (expand
                                                       "semantic_rel_expr")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "ge")
                                                            (("2"
                                                              (expand
                                                               "le")
                                                              (("2"
                                                                (hide
                                                                 -9
                                                                 -10)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (eval-formula -1) nil nil)
                                 ("2" (eval-formula -1) nil nil))
                                nil))
                              nil)
                             ("3" (expand "indi_f_sound_all_vertex")
                              (("3"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1" (eval-formula -1) nil nil)
                                     ("2" (eval-formula -1) nil nil)
                                     ("3" (eval-formula -1) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1" (eval-formula -1) nil nil)
                                     ("2" (eval-formula -1) nil nil)
                                     ("3"
                                      (eval-formula -1)
                                      (("3"
                                        (expand "ack_ccg")
                                        (("3"
                                          (expand "make_ccg")
                                          (("3"
                                            (expand "ack_measures")
                                            (("3"
                                              (expand "gt")
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (expand "eval_conds")
                                                  (("3"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("3"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (expand
                                                               "pvs0_ack")
                                                              (("3"
                                                                (expand
                                                                 "ge")
                                                                (("3"
                                                                  (expand
                                                                   "le")
                                                                  (("3"
                                                                    (expand
                                                                     "semantic_rel_expr")
                                                                    (("3"
                                                                      (expand
                                                                       "semantic_rel_expr")
                                                                      (("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "indi_f_sound_all_vertex")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "indi_f_sound_iter")
            (("2" (split)
              (("1" (eval-expr "ack_ccg`dg`data")
                (("1" (hide -2)
                  (("1" (replaces -1)
                    (("1" (expand "indi_f_sound_all_vertex")
                      (("1" (split)
                        (("1" (flatten)
                          (("1" (eval-formula -1) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (expand "ack_ccg")
                            (("2" (expand "make_ccg")
                              (("2"
                                (expand "ack_measures")
                                (("2"
                                  (expand "gt")
                                  (("2"
                                    (skeep*)
                                    (("2"
                                      (expand "ge")
                                      (("2"
                                        (expand "le")
                                        (("2"
                                          (expand "eval_conds")
                                          (("2"
                                            (expand "eval_conds_rec")
                                            (("2"
                                              (expand "eval_conds_rec")
                                              (("2"
                                                (expand
                                                 "eval_conds_rec")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand
                                                       "semantic_rel_expr")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "indi_f_sound_all_vertex")
                          (("3" (prop)
                            (("1" (eval-formula -1) nil nil)
                             ("2" (eval-formula -1) nil nil)
                             ("3" (expand "indi_f_sound_all_vertex")
                              (("3"
                                (prop)
                                (("1" (eval-formula -1) nil nil)
                                 ("2" (eval-formula -1) nil nil)
                                 ("3"
                                  (expand "indi_f_sound_all_vertex")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "indi_f_sound_iter")
                (("2" (expand "indi_f_sound_iter")
                  (("2" (split)
                    (("1" (eval-expr "ack_ccg`dg`data")
                      (("1" (hide -2)
                        (("1" (replaces -1)
                          (("1" (expand "indi_f_sound_all_vertex")
                            (("1" (prop)
                              (("1" (eval-formula -1) nil nil)
                               ("2" (eval-formula -1) nil nil)
                               ("3"
                                (expand "indi_f_sound_all_vertex")
                                (("3"
                                  (prop)
                                  (("1" (eval-formula -1) nil nil)
                                   ("2" (eval-formula -1) nil nil)
                                   ("3"
                                    (expand "indi_f_sound_all_vertex")
                                    (("3"
                                      (prop)
                                      (("1" (eval-formula -1) nil nil)
                                       ("2" (eval-formula -1) nil nil)
                                       ("3"
                                        (expand
                                         "indi_f_sound_all_vertex")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "indi_f_sound_iter")
                      (("2" (split)
                        (("1" (eval-expr "ack_ccg`dg`data")
                          (("1" (hide -2)
                            (("1" (replaces -1)
                              (("1"
                                (expand "indi_f_sound_all_vertex")
                                (("1"
                                  (prop)
                                  (("1" (eval-formula -1) nil nil)
                                   ("2" (eval-formula -1) nil nil)
                                   ("3"
                                    (expand "indi_f_sound_all_vertex")
                                    (("3"
                                      (prop)
                                      (("1" (eval-formula -1) nil nil)
                                       ("2" (eval-formula -1) nil nil)
                                       ("3"
                                        (expand
                                         "indi_f_sound_all_vertex")
                                        (("3"
                                          (prop)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (eval-formula -1)
                                                nil
                                                nil)
                                               ("2"
                                                (eval-formula -1)
                                                nil
                                                nil)
                                               ("3"
                                                (expand "ack_ccg")
                                                (("3"
                                                  (expand "make_ccg")
                                                  (("3"
                                                    (expand
                                                     "ack_measures")
                                                    (("3"
                                                      (expand "gt")
                                                      (("3"
                                                        (skeep*)
                                                        (("3"
                                                          (expand "ge")
                                                          (("3"
                                                            (expand
                                                             "le")
                                                            (("3"
                                                              (expand
                                                               "eval_conds")
                                                              (("3"
                                                                (expand
                                                                 "eval_conds_rec")
                                                                (("3"
                                                                  (expand
                                                                   "eval_conds_rec")
                                                                  (("3"
                                                                    (expand
                                                                     "eval_conds_rec")
                                                                    (("3"
                                                                      (expand
                                                                       "semantic_rel_expr")
                                                                      (("3"
                                                                        (expand
                                                                         "semantic_rel_expr")
                                                                        (("3"
                                                                          (skosimp*)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (eval-formula -1)
                                            nil
                                            nil)
                                           ("3"
                                            (expand
                                             "indi_f_sound_all_vertex")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "indi_f_sound_iter")
                          (("2" (expand "indi_f_sound_iter")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]"
     PVS0Bool_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (ack_op2 const-decl "Val" ack_pvs0 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt const-decl "bool" ccg "CCG/")
    (make_ccg const-decl "CCG" ccg_def "CCG/")
    (ge const-decl "bool" ccg_def "CCG/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nth def-decl "T" list_props nil)
    (get const-decl "Sign3" measures "CCG/")
    (ack_op1 const-decl "Val" ack_pvs0 nil)
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (le const-decl "bool" ccg_def "CCG/")
    (ack_measures const-decl "FunMeasures" ack_pvs0 nil)
    (indi_f_sound_all_vertex def-decl "bool" ccg_to_mwg "CCG/")
    (indi_f_sound_iter def-decl "{b: bool |
         (FORALL (i_: below(N), j_: below(N)):
            i_ > i OR (i_ = i AND j_ >= j) IMPLIES
             (FORALL (c: vert(dg(G))):
                (get(f(c))(i_, j_) = 1 IMPLIES gt(ms(G), c, i_, j_, FALSE))
                 AND
                 (get(f(c))(i_, j_) = 0 IMPLIES
                   gt(ms(G), c, i_, j_, TRUE))))
          = b}" ccg_to_mwg "CCG/")
    (eval_conds const-decl "bool" pvs0_cc nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (A2 const-decl "Measure_Matrix" ack_pvs0 nil)
    (A1 const-decl "Measure_Matrix" ack_pvs0 nil)
    (A0 const-decl "Measure_Matrix" ack_pvs0 nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (indi_f type-eq-decl nil ccg_to_mwg "CCG/")
    (Measure_Matrix type-eq-decl nil measures "CCG/")
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_type type-eq-decl nil c_digraphs_imp "digraphs/")
    (ack_ccg const-decl "CCG" ack_pvs0 nil)
    (CCG type-eq-decl nil ccg_def "CCG/")
    (FunMeasures type-eq-decl nil ccg_def "CCG/")
    (cdigraph const-decl "bool" c_digraphs_def "digraphs/")
    (ComputableDigraph type-eq-decl nil c_digraphs_def "digraphs/")
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (indi_f_equiv formula-decl nil ccg_to_mwg "CCG/"))
   shostak)
  (ack_mm_TCC1-4 nil 3681825391
   ("" (rewrite "indi_f_equiv")
    (("" (expand "indi_f_sound_iter")
      (("" (eval-expr "ack_ccg`dg`data")
        (("" (replace -1 :hide? t)
          (("" (split)
            (("1" (propax) nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (expand "indi_f_sound_all_vertex")
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "ack_ccg")
                        (("1" (expand "make_ccg")
                          (("1" (expand "ack_measures")
                            (("1" (expand "gt")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "ge")
                                  (("1"
                                    (expand "le")
                                    (("1"
                                      (expand "M1")
                                      (("1"
                                        (expand "lt")
                                        (("1"
                                          (expand "eval_conds")
                                          (("1"
                                            (expand "eval_conds_rec")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "semantic_rel_expr"
                                                             -3)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "pvs0_ack"
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "eop1")
                                                                  (("1"
                                                                    (expand
                                                                     "boole")
                                                                    (("1"
                                                                      (expand
                                                                       "semantic_rel_expr"
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "semantic_rel_expr"
                                                                         -2)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (expand
                                                                             "pvs0_ack"
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "eop1")
                                                                              (("1"
                                                                                (expand
                                                                                 "boole")
                                                                                (("1"
                                                                                  (expand
                                                                                   "semantic_rel_expr"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "pvs0_ack"
                                                                                         (1))
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -2)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             -3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "semantic_rel_expr")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "pvs0_ack"
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "eop1")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil)))))
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "pvs0_ack")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil)))))))
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil)))))
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil)))))))
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                     ("2" (flatten)
                      (("2" (expand "ack_ccg")
                        (("2" (expand "make_ccg")
                          (("2" (expand "ack_measures")
                            (("2" (expand "gt")
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "M1")
                                  (("2"
                                    (expand "ge")
                                    (("2"
                                      (expand "le")
                                      (("2"
                                        (expand "lt")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "eval_conds")
                                            (("2"
                                              (expand "eval_conds_rec")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "pvs0_ack"
                                                               (-4 1))
                                                              (("2"
                                                                (expand
                                                                 "semantic_rel_expr"
                                                                 -2)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "pvs0_ack"
                                                                     -3)
                                                                    (("2"
                                                                      (expand
                                                                       "eop1")
                                                                      (("2"
                                                                        (expand
                                                                         "boole")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (expand
                                                                             "semantic_rel_expr"
                                                                             -2)
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               :hide?
                                                                               t)
                                                                              (("2"
                                                                                (expand
                                                                                 "semantic_rel_expr")
                                                                                (("2"
                                                                                  (skeep*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "pvs0_ack"
                                                                                     (-4
                                                                                      -7))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "eop1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "boole")
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -3)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -4)
                                                                                                    nil)))))
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -3)
                                                                                                  nil)))))
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "semantic_rel_expr")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil)))))
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                     ("3" (expand "indi_f_sound_all_vertex")
                      (("3" (split)
                        (("1" (flatten)
                          (("1" (expand "ack_ccg")
                            (("1" (expand "make_ccg")
                              (("1"
                                (expand "ack_measures")
                                (("1"
                                  (expand "gt")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "ge")
                                      (("1"
                                        (expand "le")
                                        (("1"
                                          (expand "M1")
                                          (("1"
                                            (expand "eval_conds")
                                            (("1"
                                              (expand "eval_conds_rec")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "pvs0_ack"
                                                               (-3 -5))
                                                              (("1"
                                                                (expand
                                                                 "semantic_rel_expr")
                                                                (("1"
                                                                  (skeep*)
                                                                  (("1"
                                                                    (expand
                                                                     "semantic_rel_expr")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (expand
                                                                         "pvs0_ack"
                                                                         (-3
                                                                          -6
                                                                          -11))
                                                                        (("1"
                                                                          (expand
                                                                           "eop1")
                                                                          (("1"
                                                                            (expand
                                                                             "eop2")
                                                                            (("1"
                                                                              (expand
                                                                               "boole")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lt")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil)))
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil)))
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                         ("2" (grind) nil)
                         ("3" (expand "indi_f_sound_all_vertex")
                          (("3" (split)
                            (("1" (flatten)
                              (("1"
                                (lift-if)
                                (("1"
                                  (expand "ack_ccg")
                                  (("1"
                                    (expand "make_ccg")
                                    (("1"
                                      (expand "ack_measures")
                                      (("1"
                                        (expand "gt")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "ge")
                                            (("1"
                                              (expand "le")
                                              (("1"
                                                (expand "M1")
                                                (("1"
                                                  (expand "eval_conds")
                                                  (("1"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "eval_conds_rec")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "pvs0_ack"
                                                                     (-3
                                                                      -5))
                                                                    (("1"
                                                                      (expand
                                                                       "semantic_rel_expr")
                                                                      (("1"
                                                                        (skeep*)
                                                                        (("1"
                                                                          (expand
                                                                           "semantic_rel_expr")
                                                                          (("1"
                                                                            (expand
                                                                             "pvs0_ack"
                                                                             (-3
                                                                              -6
                                                                              -9))
                                                                            (("1"
                                                                              (expand
                                                                               "eop1")
                                                                              (("1"
                                                                                (expand
                                                                                 "boole")
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    (("1"
                                                                                      (postpone)
                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                             ("2" (flatten) (("2" (postpone) nil)))
                             ("3" (expand "indi_f_sound_all_vertex")
                              (("3" (propax) nil)))))))))))))))
                 ("2" (expand "indi_f_sound_iter")
                  (("2" (split)
                    (("1" (propax) nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten) (("1" (postpone) nil)))
                         ("2" (postpone) nil))))))))))))))))))))))
    nil)
   nil nil)
  (ack_mm_TCC1-3 nil 3681661306
   ("" (rewrite "indi_f_equiv")
    (("" (expand "indi_f_sound_iter")
      (("" (eval-expr "ack_ccg`dg`data")
        (("" (replace -1 :hide? t)
          (("" (split)
            (("1" (propax) nil nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (expand "indi_f_sound_all_vertex")
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "ack_ccg")
                        (("1" (expand "make_ccg")
                          (("1" (expand "ack_measures")
                            (("1" (expand "gt")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "ge")
                                  (("1"
                                    (expand "le")
                                    (("1"
                                      (expand "M1")
                                      (("1"
                                        (expand "lt")
                                        (("1"
                                          (expand "eval_conds")
                                          (("1"
                                            (expand "eval_conds_rec")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "semantic_rel_expr"
                                                             -3)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "pvs0_ack"
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "eop1")
                                                                  (("1"
                                                                    (expand
                                                                     "boole")
                                                                    (("1"
                                                                      (expand
                                                                       "semantic_rel_expr"
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "semantic_rel_expr"
                                                                         -2)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (expand
                                                                             "pvs0_ack"
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "eop1")
                                                                              (("1"
                                                                                (expand
                                                                                 "boole")
                                                                                (("1"
                                                                                  (expand
                                                                                   "semantic_rel_expr"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "pvs0_ack"
                                                                                         (1))
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -2)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             -3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "semantic_rel_expr")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "pvs0_ack"
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "eop1")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "pvs0_ack")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -7)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "pvs0_ack")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -6)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "semantic_rel_expr")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "pvs0_ack")
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (replaces
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (eval-formula -1) nil nil))
                      nil)
                     ("3" (expand "indi_f_sound_all_vertex")
                      (("3" (split)
                        (("1" (flatten)
                          (("1" (expand "ack_ccg")
                            (("1" (expand "make_ccg")
                              (("1"
                                (expand "ack_measures")
                                (("1"
                                  (expand "gt")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "ge")
                                      (("1"
                                        (expand "le")
                                        (("1"
                                          (expand "M1")
                                          (("1"
                                            (expand "lt")
                                            (("1"
                                              (expand "eval_conds")
                                              (("1"
                                                (expand
                                                 "eval_conds_rec")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "eval_conds_rec")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "semantic_rel_expr")
                                                                (("1"
                                                                  (skeep*)
                                                                  (("1"
                                                                    (expand
                                                                     "semantic_rel_expr")
                                                                    (("1"
                                                                      (skeep*)
                                                                      (("1"
                                                                        (expand
                                                                         "pvs0_ack"
                                                                         (-3
                                                                          -6
                                                                          -11))
                                                                        (("1"
                                                                          (expand
                                                                           "eop1")
                                                                          (("1"
                                                                            (expand
                                                                             "boole")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (eval-formula -1) nil nil)) nil)
                         ("3" (expand "indi_f_sound_all_vertex")
                          (("3" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (ack_mm_TCC1-2 nil 3681661220
   ("" (rewrite "indi_f_equiv")
    (("" (expand "indi_f_sound_iter")
      (("" (eval-expr "factorial_ccg`dg`data")
        (("" (replace -1)
          (("" (split)
            (("1" (expand "indi_f_sound_all_vertex")
              (("1" (split)
                (("1" (flatten)
                  (("1" (expand "gt")
                    (("1" (skeep)
                      (("1" (expand "ack_ccg")
                        (("1" (expand "make_ccg")
                          (("1" (expand "ack_measures")
                            (("1" (expand "restrict")
                              (("1"
                                (expand "ge")
                                (("1"
                                  (expand "le")
                                  (("1"
                                    (expand "M")
                                    (("1"
                                      (expand "semantic_rel_expr")
                                      (("1"
                                        (expand "semantic_rel_expr")
                                        (("1"
                                          (skeep -3)
                                          (("1"
                                            (expand "pvs0_ack")
                                            (("1"
                                              (expand "eop1")
                                              (("1"
                                                (case-replace
                                                 "valarg = 0")
                                                (("1"
                                                  (replaces -4 :dir rl)
                                                  (("1"
                                                    (replaces -4)
                                                    (("1"
                                                      (hide-all-but -3)
                                                      (("1"
                                                        (expand
                                                         "eval_conds")
                                                        (("1"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "eval_conds_rec"
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "semantic_rel_expr")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))))))))))
                 ("2" (flatten) (("2" (eval-formula -1) nil)))
                 ("3" (expand "indi_f_sound_all_vertex")
                  (("3" (propax) nil)))))))
             ("2" (expand "indi_f_sound_iter")
              (("2" (expand "indi_f_sound_iter")
                (("2" (propax) nil))))))))))))))
    nil)
   nil nil)
  (ack_mm_TCC1-1 nil 3662384555
   ("" (expand "indi_f_sound")
    (("" (skeep)
      (("" (case "i=0" "j=0")
        (("1" (replaces -)
          (("1" (split)
            (("1" (flatten)
              (("1" (eval-expr "get(A0)(0,0)")
                (("1" (replaces -1)
                  (("1" (eval-expr "get(A1)(0,0)")
                    (("1" (eval-expr "get(A2)(0,0)")
                      (("1" (replaces -)
                        (("1" (typepred "c") (("1" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil))
 (ack_terminates 0
  (ack_terminates-2 nil 3662111507
   ("" (use "scp_iff_pvs0_terminates")
    (("" (assert)
      (("" (hide 2)
        (("" (use "ccg_implies_scp_pvs0")
          (("" (inst -1 "ack_dg")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (expand "ccg_termination_pvs0")
                  (("1" (inst 1 "ack_measures")
                    (("1" (use "mwg_termination_to_ccg_termination")
                      (("1" (inst -1 "ack_mm")
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (use "c_bounding_from_gl_termination")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (split)
                            (("1" (expand "ack_ccg")
                              (("1" (propax) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (typepred "ack_mm")
                                (("2"
                                  (expand "ack_ccg")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "ack_dg") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (ccg_implies_scp_pvs0 formula-decl nil ccg_to_pvs0 nil)
    (pvso_to_dg_sound_ccg application-judgement
     "(sound_ccg_digraph(pvs0))" ack_pvs0 nil)
    (ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (mwg_termination_to_ccg_termination formula-decl nil ccg_to_mwg
     "CCG/")
    (CCG type-eq-decl nil ccg_def "CCG/")
    (make_ccg const-decl "CCG" ccg_def "CCG/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (* const-decl "Measure_Matrix" measures "CCG/")
    (id const-decl "Measure_Matrix" measures "CCG/")
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def
     "digraphs/")
    (wdg type-eq-decl nil matrix_wdg "CCG/")
    (wgd_type type-eq-decl nil c_weighted_digraphs_def "digraphs/")
    (c_digraph type-eq-decl nil c_digraphs_def "digraphs/")
    (edges const-decl "bool" c_digraphs_def "digraphs/")
    (get_wgt const-decl "Weight" c_weighted_digraphs_def "digraphs/")
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (edge type-eq-decl nil digraphs_ "digraphs/")
    (weight const-decl "Measure_Matrix[N]" ccg_to_mwg "CCG/")
    (ccg_to_mwg const-decl "{W: wgd_type |
         dg(W) = dg(G) AND
          (FORALL (e: (edges(dg(G)))): get_wgt(W, e) = weight(G)(f)(e))}"
     ccg_to_mwg "CCG/")
    (c_bounding_from_gl_termination formula-decl nil bounding_circuits
     "CCG/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil c_digraphs_imp "digraphs/")
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     "digraphs/")
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (ack_ccg const-decl "CCG" ack_pvs0 nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures "CCG/")
    (indi_f type-eq-decl nil ccg_to_mwg "CCG/")
    (indi_f_sound const-decl "bool" ccg_to_mwg "CCG/")
    (ack_mm const-decl "(indi_f_sound(ack_ccg))" ack_pvs0 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FunMeasure type-eq-decl nil ccg_def "CCG/")
    (FunMeasures type-eq-decl nil ccg_def "CCG/")
    (ack_measures const-decl "FunMeasures" ack_pvs0 nil)
    (SoundCCGDigraph type-eq-decl nil ccg_to_pvs0 nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (ComputableDigraph type-eq-decl nil c_digraphs_def "digraphs/")
    (cdigraph const-decl "bool" c_digraphs_def "digraphs/")
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil)
    (ack_dg const-decl "(cdigraph)" ack_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (scp_iff_pvs0_terminates formula-decl nil scp_iff_pvs0 nil))
   nil)
  (ack_terminates-1 nil 3662108240 ("" (postpone) nil nil) nil
   shostak))
 (pvs0_ack_tcc_termination 0
  (pvs0_ack_tcc_termination-1 nil 3681660963
   ("" (use "ack_terminates")
    (("" (use "terminates_implies_pvs0_tcc") (("" (assert) nil nil))
      nil))
    nil)
   ((terminates_implies_pvs0_tcc formula-decl nil measure_termination
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (ack_terminates formula-decl nil ack_pvs0 nil))
   nil))
 (ack_msr 0
  (ack_msr-2 nil 3683905380
   ("" (lemma "ccg_implies_pvs0_tcc")
    (("" (expand "pvs0_tcc_termination")
      (("" (inst -1 "pvs0_ack")
        (("" (split)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (expand "ccg_termination_pvs0")
              (("2" (inst 1 "ack_measures")
                (("2" (use "mwg_termination_to_ccg_termination")
                  (("2" (inst -1 "ack_mm")
                    (("1" (beta)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (use "c_bounding_from_gl_termination")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1" (eval-formula) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (typepred "ack_mm")
                        (("2" (expand "ack_ccg")
                          (("2" (expand "ack_dg")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (mwg_termination_to_ccg_termination formula-decl nil ccg_to_mwg
     "CCG/")
    (pvs0_to_dg const-decl "(cdigraph)" pvs0_to_dg nil)
    (make_ccg const-decl "CCG" ccg_def "CCG/")
    (CCG type-eq-decl nil ccg_def "CCG/")
    (cdigraph const-decl "bool" c_digraphs_def "digraphs/")
    (ComputableDigraph type-eq-decl nil c_digraphs_def "digraphs/")
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (ack_dg const-decl "(cdigraph)" ack_pvs0 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (* const-decl "Measure_Matrix" measures "CCG/")
    (id const-decl "Measure_Matrix" measures "CCG/")
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def
     "digraphs/")
    (wdg type-eq-decl nil matrix_wdg "CCG/")
    (wgd_type type-eq-decl nil c_weighted_digraphs_def "digraphs/")
    (c_digraph type-eq-decl nil c_digraphs_def "digraphs/")
    (edges const-decl "bool" c_digraphs_def "digraphs/")
    (get_wgt const-decl "Weight" c_weighted_digraphs_def "digraphs/")
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (edge type-eq-decl nil digraphs_ "digraphs/")
    (weight const-decl "Measure_Matrix[N]" ccg_to_mwg "CCG/")
    (ccg_to_mwg const-decl "{W: wgd_type |
         dg(W) = dg(G) AND
          (FORALL (e: (edges(dg(G)))): get_wgt(W, e) = weight(G)(f)(e))}"
     ccg_to_mwg "CCG/")
    (c_bounding_from_gl_termination formula-decl nil bounding_circuits
     "CCG/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil c_digraphs_imp "digraphs/")
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     "digraphs/")
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (ack_ccg const-decl "CCG" ack_pvs0 nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures "CCG/")
    (indi_f type-eq-decl nil ccg_to_mwg "CCG/")
    (indi_f_sound const-decl "bool" ccg_to_mwg "CCG/")
    (ack_mm const-decl "(indi_f_sound(ack_ccg))" ack_pvs0 nil)
    (pvso_to_dg_sound_ccg application-judgement
     "(sound_ccg_digraph(pvs0))" ack_pvs0 nil)
    (pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)"
     ack_pvs0 nil)
    (ack_measures const-decl "FunMeasures" ack_pvs0 nil)
    (FunMeasures type-eq-decl nil ccg_def "CCG/")
    (FunMeasure type-eq-decl nil ccg_def "CCG/")
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (ccg_implies_pvs0_tcc formula-decl nil ccg_to_pvs0 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil))
   nil)
  (ack_msr-1 nil 3683905327 ("" (assert) (("" (postpone) nil nil)) nil)
   nil shostak))
 (ack_wfm_TCC1 0
  (ack_wfm_TCC1-2 nil 3653236289
   ("" (lemma "pvs0_ack_tcc_termination")
    (("" (expand "pvs0_tcc_termination")
      (("" (skeep -) (("" (inst? 1) nil nil)) nil)) nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (wfm skolem-const-decl
     "WFM[[nat, nat], MT, LAMBDA (m, n: nat): m < n]" ack_pvs0 nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)"
     ack_pvs0 nil)
    (pvs0_ack_tcc_termination judgement-tcc nil ack_pvs0 nil))
   nil)
  (ack_wfm_TCC1-1 nil 3653236216 ("" (existence-tcc) nil nil) nil nil))
 (ack_pvs0_TCC1 0
  (ack_pvs0_TCC1-1 nil 3683905965 ("" (use "ack_terminates") nil nil)
   ((ack_terminates formula-decl nil ack_pvs0 nil)) nil))
 (ack_pvs0_m_n_TCC1 0
  (ack_pvs0_m_n_TCC1-1 nil 3681664924 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ack_pvs0_m_n_TCC2 0
  (ack_pvs0_m_n_TCC2-1 nil 3681664924 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ack_pvs0_m_n_TCC3 0
  (ack_pvs0_m_n_TCC3-1 nil 3681664924 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ack_pvs0_m_n 0
  (ack_pvs0_m_n-1 nil 3683905817
   ("" (skeep)
    (("" (lift-if)
      (("" (prop)
        (("1" (expand "ack_pvs0")
          (("1" (expand "pvs0_eval")
            (("1" (expand "pvs0_ack" 1 5)
              (("1" (expand "pvs0_eval_expr")
                (("1" (eval-expr "pvs0_ack`4")
                  (("1" (assert)
                    (("1" (eval-expr "pvs0_ack`1")
                      (("1" (replace -2)
                        (("1" (expand "pvs0_eval_expr" 1 1)
                          (("1" (expand "pvs0_eval_expr" 1 1)
                            (("1" (expand "pvs0_ack" 1 2)
                              (("1"
                                (expand "ack_op1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "pvs0_eval_expr" 1 1)
                                    (("1"
                                      (expand "pvs0_eval_expr" 1 1)
                                      (("1"
                                        (expand "pvs0_ack")
                                        (("1"
                                          (expand "ack_op1")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "ack_pvs0")
          (("2" (expand "pvs0_eval")
            (("2" (expand "pvs0_eval_expr" 1 1)
              (("2" (eval-expr "pvs0_ack`4")
                (("2" (assert)
                  (("2" (eval-expr "pvs0_ack`1")
                    (("2" (replace -2)
                      (("2" (expand "pvs0_eval_expr" 1 1)
                        (("2" (expand "pvs0_eval_expr" 1 1)
                          (("2" (expand "pvs0_ack" 1 2)
                            (("2" (expand "ack_op1")
                              (("2"
                                (replace -1)
                                (("2"
                                  (expand "pvs0_eval_expr" 1 1)
                                  (("2"
                                    (expand "pvs0_eval_expr" 1 1)
                                    (("2"
                                      (expand "pvs0_eval_expr" 1 1)
                                      (("2"
                                        (expand "pvs0_ack" 1 1)
                                        (("2"
                                          (expand "ack_op1")
                                          (("2"
                                            (expand
                                             "pvs0_eval_expr"
                                             1
                                             1)
                                            (("2"
                                              (expand
                                               "pvs0_eval_expr"
                                               1
                                               2)
                                              (("2"
                                                (expand "pvs0_ack" 1 3)
                                                (("2"
                                                  (expand
                                                   "pvs0_eval_expr"
                                                   1
                                                   2)
                                                  (("2"
                                                    (expand "ack_op1")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "ack_pvs0")
          (("3" (expand "pvs0_eval")
            (("3" (expand "pvs0_eval_expr" 2 1)
              (("3" (eval-expr "pvs0_ack`4")
                (("3" (assert)
                  (("3" (replace -1)
                    (("3" (eval-expr "pvs0_ack`1")
                      (("3" (expand "pvs0_eval_expr" 2 1)
                        (("3" (expand "pvs0_eval_expr" 2 1)
                          (("3" (expand "pvs0_ack" 2 2)
                            (("3" (expand "ack_op1")
                              (("3"
                                (replace -1)
                                (("3"
                                  (expand "pvs0_eval_expr" 2 1)
                                  (("3"
                                    (expand "pvs0_eval_expr" 2 1)
                                    (("3"
                                      (expand "pvs0_eval_expr" 2 1)
                                      (("3"
                                        (expand "pvs0_ack" 2 1)
                                        (("3"
                                          (expand "ack_op1")
                                          (("3"
                                            (expand
                                             "pvs0_eval_expr"
                                             2
                                             1)
                                            (("3"
                                              (expand
                                               "pvs0_eval_expr"
                                               2
                                               2)
                                              (("3"
                                                (expand
                                                 "pvs0_eval_expr"
                                                 2
                                                 2)
                                                (("3"
                                                  (expand
                                                   "pvs0_eval_expr"
                                                   2
                                                   2)
                                                  (("3"
                                                    (expand
                                                     "pvs0_eval_expr"
                                                     2
                                                     3)
                                                    (("3"
                                                      (expand
                                                       "pvs0_eval_expr"
                                                       2
                                                       3)
                                                      (("3"
                                                        (expand
                                                         "pvs0_ack"
                                                         2
                                                         (3 6))
                                                        (("3"
                                                          (expand
                                                           "ack_op2")
                                                          (("3"
                                                            (expand
                                                             "ack_op1")
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ack_op2 const-decl "Val" ack_pvs0 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite adt-constructor-decl
     "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ack_op1 const-decl "Val" ack_pvs0 nil)
    (pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)"
     ack_pvs0 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pvs0_eval_expr def-decl "{v: Val |
         semantic_rel_expr(false_val, eval_op1, eval_op2)
                          (expr, body, val, v)}" pvs0_eval nil)
    (pvs0_eval const-decl
     "{v: Val | semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)(pvs0`4, pvs0`4, val, v)}"
     pvs0_eval nil))
   shostak)))

