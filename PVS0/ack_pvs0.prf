(ack_pvs0
 (eop1_TCC1 0
  (eop1_TCC1-1 nil 3681660963 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (eop1_TCC2 0
  (eop1_TCC2-1 nil 3681660963 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (eop2_TCC1 0
  (eop2_TCC1-1 nil 3681660963 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (lt_TCC1 0
  (lt_TCC1-1 nil 3681660963 ("" (rewrite "wf_nat") nil nil)
   ((wf_nat formula-decl nil naturalnumbers nil)) nil))
 (ack_measures_TCC1 0
  (ack_measures_TCC1-1 nil 3681660963 ("" (subtype-tcc) nil nil)
   ((N const-decl "posnat" ack_pvs0 nil)) nil))
 (A0_TCC1 0
  (A0_TCC1-1 nil 3662226670 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A0_TCC2 0
  (A0_TCC2-1 nil 3662226670 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A0_TCC3 0
  (A0_TCC3-1 nil 3662226670 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A1_TCC1 0
  (A1_TCC1-1 nil 3662226670 ("" (eval-formula))
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A1_TCC2 0
  (A1_TCC2-1 nil 3662226670 ("" (eval-formula))
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A2_TCC1 0
  (A2_TCC1-1 nil 3662226670 ("" (eval-formula))
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A2_TCC2 0
  (A2_TCC2-1 nil 3662226670 ("" (eval-formula))
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (ack_mm_TCC1 0
  (ack_mm_TCC1-5 "" 3681839843
   ("" (rewrite "indi_f_equiv")
    (("" (expand "indi_f_sound_iter")
      (("" (eval-expr "ack_ccg`dg`data")
        (("" (replaces -1)
          (("" (prop)
            (("1" (expand "indi_f_sound_all_vertex")
              (("1" (expand "indi_f_sound_all_vertex")
                (("1" (expand "indi_f_sound_all_vertex")
                  (("1" (expand "indi_f_sound_all_vertex")
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (eval-formula -1)
                          (("1" (expand "gt")
                            (("1" (skeep)
                              (("1"
                                (expand "ack_ccg")
                                (("1"
                                  (expand "make_ccg")
                                  (("1"
                                    (expand "ack_measures")
                                    (("1"
                                      (expand "ge")
                                      (("1"
                                        (expand "le")
                                        (("1" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (eval-formula -1) nil nil))
                        nil)
                       ("3" (flatten)
                        (("3" (eval-formula -1)
                          (("3" (expand "gt")
                            (("3" (skeep)
                              (("3"
                                (expand "ack_ccg")
                                (("3"
                                  (expand "make_ccg")
                                  (("3"
                                    (expand "ack_measures")
                                    (("3"
                                      (expand "ge")
                                      (("3"
                                        (expand "le")
                                        (("3" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (flatten) (("4" (eval-formula -1) nil nil))
                        nil)
                       ("5" (flatten) (("5" (eval-formula -1) nil nil))
                        nil)
                       ("6" (flatten)
                        (("6" (eval-formula -1)
                          (("6" (expand "gt")
                            (("6" (skeep)
                              (("6"
                                (expand "ack_ccg")
                                (("6"
                                  (expand "make_ccg")
                                  (("6"
                                    (expand "ack_measures")
                                    (("6"
                                      (expand "ge")
                                      (("6"
                                        (expand "le")
                                        (("6" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "indi_f_sound_iter")
              (("2" (expand "indi_f_sound_all_vertex")
                (("2" (expand "indi_f_sound_iter")
                  (("2" (expand "indi_f_sound_all_vertex")
                    (("2" (expand "indi_f_sound_iter")
                      (("2" (expand "indi_f_sound_all_vertex")
                        (("2" (expand "indi_f_sound_iter")
                          (("2" (expand "indi_f_sound_all_vertex")
                            (("2" (expand "indi_f_sound_iter")
                              (("2" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ack_mm_TCC1-4 nil 3681825391
   ("" (rewrite "indi_f_equiv")
    (("" (expand "indi_f_sound_iter")
      (("" (eval-expr "ack_ccg`dg`data")
        (("" (replace -1 :hide? t)
          (("" (split)
            (("1" (propax) nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (expand "indi_f_sound_all_vertex")
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "ack_ccg")
                        (("1" (expand "make_ccg")
                          (("1" (expand "ack_measures")
                            (("1" (expand "gt")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "ge")
                                  (("1"
                                    (expand "le")
                                    (("1"
                                      (expand "M1")
                                      (("1"
                                        (expand "lt")
                                        (("1"
                                          (expand "eval_conds")
                                          (("1"
                                            (expand "eval_conds_rec")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "semantic_rel_expr"
                                                             -3)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "pvs0_ack"
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "eop1")
                                                                  (("1"
                                                                    (expand
                                                                     "boole")
                                                                    (("1"
                                                                      (expand
                                                                       "semantic_rel_expr"
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "semantic_rel_expr"
                                                                         -2)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (expand
                                                                             "pvs0_ack"
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "eop1")
                                                                              (("1"
                                                                                (expand
                                                                                 "boole")
                                                                                (("1"
                                                                                  (expand
                                                                                   "semantic_rel_expr"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "pvs0_ack"
                                                                                         (1))
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -2)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             -3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "semantic_rel_expr")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "pvs0_ack"
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "eop1")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil)))))
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "pvs0_ack")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil)))))))
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil)))))
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil)))))))
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                     ("2" (flatten)
                      (("2" (expand "ack_ccg")
                        (("2" (expand "make_ccg")
                          (("2" (expand "ack_measures")
                            (("2" (expand "gt")
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "M1")
                                  (("2"
                                    (expand "ge")
                                    (("2"
                                      (expand "le")
                                      (("2"
                                        (expand "lt")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "eval_conds")
                                            (("2"
                                              (expand "eval_conds_rec")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "pvs0_ack"
                                                               (-4 1))
                                                              (("2"
                                                                (expand
                                                                 "semantic_rel_expr"
                                                                 -2)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "pvs0_ack"
                                                                     -3)
                                                                    (("2"
                                                                      (expand
                                                                       "eop1")
                                                                      (("2"
                                                                        (expand
                                                                         "boole")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (expand
                                                                             "semantic_rel_expr"
                                                                             -2)
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               :hide?
                                                                               t)
                                                                              (("2"
                                                                                (expand
                                                                                 "semantic_rel_expr")
                                                                                (("2"
                                                                                  (skeep*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "pvs0_ack"
                                                                                     (-4
                                                                                      -7))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "eop1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "boole")
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -3)
                                                                                                    nil)))
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -4)
                                                                                                    nil)))))
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -3)
                                                                                                  nil)))))
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "semantic_rel_expr")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil)))))
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil)))))))
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                     ("3" (expand "indi_f_sound_all_vertex")
                      (("3" (split)
                        (("1" (flatten)
                          (("1" (expand "ack_ccg")
                            (("1" (expand "make_ccg")
                              (("1"
                                (expand "ack_measures")
                                (("1"
                                  (expand "gt")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "ge")
                                      (("1"
                                        (expand "le")
                                        (("1"
                                          (expand "M1")
                                          (("1"
                                            (expand "eval_conds")
                                            (("1"
                                              (expand "eval_conds_rec")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "pvs0_ack"
                                                               (-3 -5))
                                                              (("1"
                                                                (expand
                                                                 "semantic_rel_expr")
                                                                (("1"
                                                                  (skeep*)
                                                                  (("1"
                                                                    (expand
                                                                     "semantic_rel_expr")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (expand
                                                                         "pvs0_ack"
                                                                         (-3
                                                                          -6
                                                                          -11))
                                                                        (("1"
                                                                          (expand
                                                                           "eop1")
                                                                          (("1"
                                                                            (expand
                                                                             "eop2")
                                                                            (("1"
                                                                              (expand
                                                                               "boole")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lt")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil)))
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil)))
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                         ("2" (grind) nil)
                         ("3" (expand "indi_f_sound_all_vertex")
                          (("3" (split)
                            (("1" (flatten)
                              (("1"
                                (lift-if)
                                (("1"
                                  (expand "ack_ccg")
                                  (("1"
                                    (expand "make_ccg")
                                    (("1"
                                      (expand "ack_measures")
                                      (("1"
                                        (expand "gt")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "ge")
                                            (("1"
                                              (expand "le")
                                              (("1"
                                                (expand "M1")
                                                (("1"
                                                  (expand "eval_conds")
                                                  (("1"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "eval_conds_rec")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "pvs0_ack"
                                                                     (-3
                                                                      -5))
                                                                    (("1"
                                                                      (expand
                                                                       "semantic_rel_expr")
                                                                      (("1"
                                                                        (skeep*)
                                                                        (("1"
                                                                          (expand
                                                                           "semantic_rel_expr")
                                                                          (("1"
                                                                            (expand
                                                                             "pvs0_ack"
                                                                             (-3
                                                                              -6
                                                                              -9))
                                                                            (("1"
                                                                              (expand
                                                                               "eop1")
                                                                              (("1"
                                                                                (expand
                                                                                 "boole")
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    (("1"
                                                                                      (postpone)
                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                             ("2" (flatten) (("2" (postpone) nil)))
                             ("3" (expand "indi_f_sound_all_vertex")
                              (("3" (propax) nil)))))))))))))))
                 ("2" (expand "indi_f_sound_iter")
                  (("2" (split)
                    (("1" (propax) nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten) (("1" (postpone) nil)))
                         ("2" (postpone) nil))))))))))))))))))))))
    nil)
   nil nil)
  (ack_mm_TCC1-3 nil 3681661306
   ("" (rewrite "indi_f_equiv")
    (("" (expand "indi_f_sound_iter")
      (("" (eval-expr "ack_ccg`dg`data")
        (("" (replace -1 :hide? t)
          (("" (split)
            (("1" (propax) nil nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (expand "indi_f_sound_all_vertex")
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "ack_ccg")
                        (("1" (expand "make_ccg")
                          (("1" (expand "ack_measures")
                            (("1" (expand "gt")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "ge")
                                  (("1"
                                    (expand "le")
                                    (("1"
                                      (expand "M1")
                                      (("1"
                                        (expand "lt")
                                        (("1"
                                          (expand "eval_conds")
                                          (("1"
                                            (expand "eval_conds_rec")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "semantic_rel_expr"
                                                             -3)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "pvs0_ack"
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "eop1")
                                                                  (("1"
                                                                    (expand
                                                                     "boole")
                                                                    (("1"
                                                                      (expand
                                                                       "semantic_rel_expr"
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "semantic_rel_expr"
                                                                         -2)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (expand
                                                                             "pvs0_ack"
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "eop1")
                                                                              (("1"
                                                                                (expand
                                                                                 "boole")
                                                                                (("1"
                                                                                  (expand
                                                                                   "semantic_rel_expr"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "pvs0_ack"
                                                                                         (1))
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -2)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             -3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "semantic_rel_expr")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "pvs0_ack"
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "eop1")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "pvs0_ack")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -7)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "pvs0_ack")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -6)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "semantic_rel_expr")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "pvs0_ack")
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (replaces
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (eval-formula -1) nil nil))
                      nil)
                     ("3" (expand "indi_f_sound_all_vertex")
                      (("3" (split)
                        (("1" (flatten)
                          (("1" (expand "ack_ccg")
                            (("1" (expand "make_ccg")
                              (("1"
                                (expand "ack_measures")
                                (("1"
                                  (expand "gt")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "ge")
                                      (("1"
                                        (expand "le")
                                        (("1"
                                          (expand "M1")
                                          (("1"
                                            (expand "lt")
                                            (("1"
                                              (expand "eval_conds")
                                              (("1"
                                                (expand
                                                 "eval_conds_rec")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "eval_conds_rec")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "semantic_rel_expr")
                                                                (("1"
                                                                  (skeep*)
                                                                  (("1"
                                                                    (expand
                                                                     "semantic_rel_expr")
                                                                    (("1"
                                                                      (skeep*)
                                                                      (("1"
                                                                        (expand
                                                                         "pvs0_ack"
                                                                         (-3
                                                                          -6
                                                                          -11))
                                                                        (("1"
                                                                          (expand
                                                                           "eop1")
                                                                          (("1"
                                                                            (expand
                                                                             "boole")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (eval-formula -1) nil nil)) nil)
                         ("3" (expand "indi_f_sound_all_vertex")
                          (("3" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (ack_mm_TCC1-2 nil 3681661220
   ("" (rewrite "indi_f_equiv")
    (("" (expand "indi_f_sound_iter")
      (("" (eval-expr "factorial_ccg`dg`data")
        (("" (replace -1)
          (("" (split)
            (("1" (expand "indi_f_sound_all_vertex")
              (("1" (split)
                (("1" (flatten)
                  (("1" (expand "gt")
                    (("1" (skeep)
                      (("1" (expand "ack_ccg")
                        (("1" (expand "make_ccg")
                          (("1" (expand "ack_measures")
                            (("1" (expand "restrict")
                              (("1"
                                (expand "ge")
                                (("1"
                                  (expand "le")
                                  (("1"
                                    (expand "M")
                                    (("1"
                                      (expand "semantic_rel_expr")
                                      (("1"
                                        (expand "semantic_rel_expr")
                                        (("1"
                                          (skeep -3)
                                          (("1"
                                            (expand "pvs0_ack")
                                            (("1"
                                              (expand "eop1")
                                              (("1"
                                                (case-replace
                                                 "valarg = 0")
                                                (("1"
                                                  (replaces -4 :dir rl)
                                                  (("1"
                                                    (replaces -4)
                                                    (("1"
                                                      (hide-all-but -3)
                                                      (("1"
                                                        (expand
                                                         "eval_conds")
                                                        (("1"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "eval_conds_rec"
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "semantic_rel_expr")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))))))))))
                 ("2" (flatten) (("2" (eval-formula -1) nil)))
                 ("3" (expand "indi_f_sound_all_vertex")
                  (("3" (propax) nil)))))))
             ("2" (expand "indi_f_sound_iter")
              (("2" (expand "indi_f_sound_iter")
                (("2" (propax) nil))))))))))))))
    nil)
   nil nil)
  (ack_mm_TCC1-1 nil 3662384555
   ("" (expand "indi_f_sound")
    (("" (skeep)
      (("" (case "i=0" "j=0")
        (("1" (replaces -)
          (("1" (split)
            (("1" (flatten)
              (("1" (eval-expr "get(A0)(0,0)")
                (("1" (replaces -1)
                  (("1" (eval-expr "get(A1)(0,0)")
                    (("1" (eval-expr "get(A2)(0,0)")
                      (("1" (replaces -)
                        (("1" (typepred "c") (("1" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil))
 (pvs0_ack_tcc_termination 0
  (pvs0_ack_tcc_termination-1 nil 3681660963
   ("" (judgement-tcc) nil nil) nil nil))
 (ack_msr_TCC1 0
  (ack_msr_TCC1-1 nil 3681660963 ("" (subtype-tcc) nil nil) nil nil))
 (ack_terminates 0
  (ack_terminates-2 nil 3662111507
   ("" (use "scp_iff_pvs0_terminates")
    (("" (assert)
      (("" (hide 2)
        (("" (use "ccg_implies_scp_pvs0")
          (("" (inst -1 "ack_dg")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (expand "ccg_termination_pvs0")
                  (("1" (inst 1 "ack_measures")
                    (("1" (use "mwg_termination_to_ccg_termination")
                      (("1" (inst -1 "ack_mm")
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (use "c_bounding_from_gl_termination")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (split)
                            (("1" (expand "ack_ccg")
                              (("1" (propax) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (typepred "ack_mm")
                                (("2"
                                  (expand "ack_ccg")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "ack_dg") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ccg_implies_scp_pvs0 formula-decl nil ccg_to_pvs0 nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (mwg_termination_to_ccg_termination formula-decl nil ccg_to_mwg
     "CCG/")
    (CCG type-eq-decl nil ccg_def "CCG/")
    (make_ccg const-decl "CCG" ccg_def "CCG/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (* const-decl "Measure_Matrix" measures "CCG/")
    (id const-decl "Measure_Matrix" measures "CCG/")
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def
     "digraphs/")
    (wdg type-eq-decl nil matrix_wdg "CCG/")
    (wgd_type type-eq-decl nil c_weighted_digraphs_def "digraphs/")
    (c_digraph type-eq-decl nil c_digraphs_def "digraphs/")
    (edges const-decl "bool" c_digraphs_def "digraphs/")
    (get_wgt const-decl "Weight" c_weighted_digraphs_def "digraphs/")
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (edge type-eq-decl nil digraphs_ "digraphs/")
    (weight const-decl "Measure_Matrix[N]" ccg_to_mwg "CCG/")
    (ccg_to_mwg const-decl "{W: wgd_type |
         dg(W) = dg(G) AND
          (FORALL (e: (edges(dg(G)))): get_wgt(W, e) = weight(G)(f)(e))}"
     ccg_to_mwg "CCG/")
    (c_bounding_from_gl_termination formula-decl nil bounding_circuits
     "CCG/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil c_digraphs_imp "digraphs/")
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     "digraphs/")
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (ack_ccg const-decl "CCG" ack_pvs0 nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures "CCG/")
    (indi_f type-eq-decl nil ccg_to_mwg "CCG/")
    (indi_f_sound const-decl "bool" ccg_to_mwg "CCG/")
    (ack_mm const-decl "(indi_f_sound(ack_ccg))" ack_pvs0 nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FunMeasure type-eq-decl nil ccg_def "CCG/")
    (FunMeasures type-eq-decl nil ccg_def "CCG/")
    (SoundCCGDigraph type-eq-decl nil ccg_to_pvs0 nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (ComputableDigraph type-eq-decl nil c_digraphs_def "digraphs/")
    (cdigraph const-decl "bool" c_digraphs_def "digraphs/")
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil)
    (ack_dg const-decl "(cdigraph)" ack_pvs0 nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (scp_iff_pvs0_terminates formula-decl nil scp_iff_pvs0 nil))
   nil)
  (ack_terminates-1 nil 3662108240 ("" (postpone) nil nil) nil
   shostak))
 (ack_wfm_TCC1 0
  (ack_wfm_TCC1-2 nil 3653236289
   ("" (lemma "pvs0_ack_tcc_termination_mwg")
    (("" (expand "pvs0_tcc_termination")
      (("" (skeep -) (("" (inst? 1) nil nil)) nil)) nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (ack_wfm_TCC1-1 nil 3653236216 ("" (existence-tcc) nil nil) nil nil))
 (ack_pvs0_m_n_TCC1 0
  (ack_pvs0_m_n_TCC1-1 nil 3681664924 ("" (subtype-tcc) nil nil) nil
   nil))
 (ack_pvs0_m_n_TCC2 0
  (ack_pvs0_m_n_TCC2-1 nil 3681664924 ("" (subtype-tcc) nil nil) nil
   nil))
 (ack_pvs0_m_n_TCC3 0
  (ack_pvs0_m_n_TCC3-1 nil 3681664924 ("" (subtype-tcc) nil nil) nil
   nil)))

