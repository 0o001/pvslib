(ack_pvs0
 (eop1_TCC1 0
  (eop1_TCC1-1 nil 3643792193 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (eop1_TCC2 0
  (eop1_TCC2-1 nil 3643792193 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (eop2_TCC1 0
  (eop2_TCC1-1 nil 3643792193 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (IMP_measure_termination_TCC1 0
  (IMP_measure_termination_TCC1-1 nil 3653235320
   ("" (expand "R")
    (("" (expand "restrict") (("" (rewrite "well_founded_le") nil nil))
      nil))
    nil)
   ((well_founded_le formula-decl nil ordinals nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (pvs0_ack_tcc_termination 0
  (pvs0_ack_tcc_termination-2 nil 3653235388
   ("" (expand "pvs0_tcc_termination")
    (("" (expand "pvs0_tcc_termination_pred")
      (("" (inst 1 "lex2")
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (typepred "cc")
                (("" (use "pvs0_ccs_completness")
                  (("" (eval-expr "pvs0_ccs(pvs0_ack)")
                    (("" (replaces -1)
                      (("" (expand "member")
                        (("" (expand* "member")
                          (("" (expand* "member")
                            (("" (expand* "member")
                              ((""
                                (prop)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "semantic_rel_expr")
                                      (("1"
                                        (expand "semantic_rel_expr")
                                        (("1"
                                          (expand "eop1" -2)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (replaces -2)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (lemma
                                                         "lex2_lt")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "env(vr)`1"
                                                             "env(vr)`2")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("2"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("2"
                                                            (expand
                                                             "eval_conds_rec")
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (skeep*)
                                                                (("2"
                                                                  (expand
                                                                   "semantic_rel_expr"
                                                                   -4)
                                                                  (("2"
                                                                    (expand
                                                                     "semantic_rel_expr"
                                                                     -4)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (replaces
                                                                         -4)
                                                                        (("2"
                                                                          (hide
                                                                           (1
                                                                            -2))
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replaces -1)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "semantic_rel_expr" -1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (replaces -3)
                                            (("2"
                                              (expand
                                               "semantic_rel_expr"
                                               -1)
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (expand "eop2" 1)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (lemma
                                                         "lex2_lt")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "env(vr)`1"
                                                             "env(vr)`2")
                                                            (("1"
                                                              (hide
                                                               -3
                                                               -4)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 2)
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand
                                                               "semantic_rel_expr")
                                                              (("2"
                                                                (expand
                                                                 "semantic_rel_expr")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -2)
                                  (("3"
                                    (replaces -1)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "semantic_rel_expr" -1)
                                        (("3"
                                          (expand
                                           "semantic_rel_expr"
                                           -1)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (replaces -1)
                                                (("3"
                                                  (expand "eop1" 1)
                                                  (("3"
                                                    (lift-if)
                                                    (("3"
                                                      (prop)
                                                      (("1"
                                                        (lemma
                                                         "lex2_lt")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "env(vr)`1"
                                                             "env(vr)`2")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 1)
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (hide
                                                             -4
                                                             -5)
                                                            (("2"
                                                              (expand
                                                               "semantic_rel_expr")
                                                              (("2"
                                                                (expand
                                                                 "semantic_rel_expr")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (pvs0_ccs_completness formula-decl nil pvs0_to_dg nil)
    (eop2 const-decl "Val" ack_pvs0 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_lang nil)
    (eop1 const-decl "Val" ack_pvs0 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Environment type-eq-decl nil pvs0_lang nil)
    (env skolem-const-decl "Environment[T]" ack_pvs0 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lex2_lt formula-decl nil lex2 nil)
    (boole const-decl "Val" ack_pvs0 nil)
    (ebool const-decl "bool" ack_pvs0 nil)
    (/= const-decl "boolean" notequal nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (op2 adt-constructor-decl "[[nat, Expr, Expr] -> (op2?)]" PVS0_adt
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (pvs0_ack const-decl "Def" ack_pvs0 nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (MT type-eq-decl nil ack_pvs0 nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T type-eq-decl nil ack_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil))
   nil)
  (pvs0_ack_tcc_termination-1 nil 3651310635
   ("" (expand "pvs0_tcc_termination")
    (("" (inst 1 "lex2")
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (typepred "cc")
              (("" (use "pvs0_ccs_completness")
                (("" (eval-expr "pvs0_ccs(pvs0_ack)")
                  (("1" (replaces -1)
                    (("1" (expand "member")
                      (("1" (expand* "member")
                        (("1" (expand* "member")
                          (("1" (expand* "member")
                            (("1" (prop)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "semantic_rel_expr")
                                    (("1"
                                      (expand "semantic_rel_expr")
                                      (("1"
                                        (expand "eop1" -2)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (replaces -2)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (lemma "lex2_lt")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "env(vr)`1"
                                                           "env(vr)`2")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("2"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("2"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (skeep*)
                                                              (("2"
                                                                (expand
                                                                 "semantic_rel_expr"
                                                                 -4)
                                                                (("2"
                                                                  (expand
                                                                   "semantic_rel_expr"
                                                                   -4)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (replaces
                                                                       -4)
                                                                      (("2"
                                                                        (hide
                                                                         (1
                                                                          -2))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replaces -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "semantic_rel_expr" -1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (replaces -3)
                                          (("2"
                                            (expand
                                             "semantic_rel_expr"
                                             -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "eop2" 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (lemma "lex2_lt")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "env(vr)`1"
                                                           "env(vr)`2")
                                                          (("1"
                                                            (hide
                                                             -3
                                                             -4)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 2)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "semantic_rel_expr")
                                                            (("2"
                                                              (expand
                                                               "semantic_rel_expr")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -2)
                                (("3"
                                  (replaces -1)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "semantic_rel_expr" -1)
                                      (("3"
                                        (expand "semantic_rel_expr" -1)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (replaces -1)
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (expand "eop1" 1)
                                                (("3"
                                                  (lift-if)
                                                  (("3"
                                                    (prop)
                                                    (("1"
                                                      (lemma "lex2_lt")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "env(vr)`1"
                                                           "env(vr)`2")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 1)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (hide -4 -5)
                                                          (("2"
                                                            (expand
                                                             "semantic_rel_expr")
                                                            (("2"
                                                              (expand
                                                               "semantic_rel_expr")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "mt_lex2_TCC1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((WFM type-eq-decl nil measure_termination_defs nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (op2 adt-constructor-decl "[[nat, Expr, Expr] -> (op2?)]" PVS0_adt
     nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_ccs_completness formula-decl nil pvs0_to_dg nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil))
   nil))
 (ack_wfm_TCC1 0
  (ack_wfm_TCC1-2 nil 3653236289
   ("" (lemma "pvs0_ack_tcc_termination")
    (("" (expand "pvs0_tcc_termination")
      (("" (skeep -) (("" (inst? 1) nil nil)) nil)) nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (wfm skolem-const-decl
     "WFM[T, MT, restrict[[ordstruct, ordstruct], [MT, MT], boolean](ordinals.<)]"
     ack_pvs0 nil)
    (pvs0_ack const-decl "Def" ack_pvs0 nil)
    (eop2 const-decl "Val" ack_pvs0 nil)
    (eop1 const-decl "Val" ack_pvs0 nil)
    (ebool const-decl "bool" ack_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (MT type-eq-decl nil ack_pvs0 nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T type-eq-decl nil ack_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_ack_tcc_termination name-judgement
     "(pvs0_tcc_termination(ebool, eop1, eop2))" ack_pvs0 nil)
    (pvs0_ack_tcc_termination judgement-tcc nil ack_pvs0 nil))
   nil)
  (ack_wfm_TCC1-1 nil 3653236216 ("" (existence-tcc) nil nil) nil nil))
 (ack_pvs0_m_n_TCC1 0
  (ack_pvs0_m_n_TCC1-1 nil 3653314891 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ack_pvs0_m_n_TCC2 0
  (ack_pvs0_m_n_TCC2-1 nil 3653314891 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ack_pvs0_m_n_TCC3 0
  (ack_pvs0_m_n_TCC3-1 nil 3653314891 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)))

