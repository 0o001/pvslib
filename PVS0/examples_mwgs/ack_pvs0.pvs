ack_pvs0 : THEORY
BEGIN
  IMPORTING ack_pvs0_defs
% ------------------------------------------------------------------------------ 
% Proof of termination via pvs0_tccs
%    

  IMPORTING CCG@ccg_to_mwg[Val[T], Expr[Val[T]], Conditions[T],
             MT,lt,N,
             LAMBDA (expr: Expr[Val[T]], env, val: Val[T]):
             semantic_rel_expr(ebool, eop1, eop2)
                              (expr, get_body(pvs0_ack),
                               LAMBDA (v: (vr?)): env, val),
           LAMBDA (conds: Conditions[T], env: Val[T]):
             eval_conds(ebool, eop1, eop2)
                       (pvs0_ack, conds, LAMBDA (v: (vr?)): env)]

  IMPORTING PVS0@ccg_to_pvs0 [T,ebool,eop1,eop2,
  	    	         MT,lt,N]	 

  IMPORTING PVS0@scp_iff_pvs0[T,ebool,eop1,eop2]

  IMPORTING CCG@bounding_circuits[CallingContext,N]

  % Matrices taken from Andrea's slides
  A0: Measure_Matrix = (: (:  1 ,  0 :),
      		          (: -1 , -1 :) :)
  
  A1: Measure_Matrix = (: (:  1 , -1 :),
      		          (: -1 , -1 :) :)
  
  A2: Measure_Matrix = (: (:  0 , -1 :),
      		          (: -1 ,  1 :) :)

  ack_dg : (cdigraph) = pvs0_to_cd(ebool, eop1, eop2)(pvs0_ack)

  ack_ccg: CCG = make_ccg(ack_dg,ack_measures)

  ack_mm: (indi_f_sound(ack_ccg)) =
   LAMBDA(v: vert(dg(ack_ccg))):
     IF v`actuals = op1(3, vr)  THEN A0  % node 0
     ELSIF v`actuals = op2(0, vr, rec(op1(4, vr))) THEN A1 % node 1
     ELSE A2 % node 2
     ENDIF
    
  ack_terminates: LEMMA terminates(ebool,eop1,eop2)(pvs0_ack)

  % This judgement states that there exist a measure and a relation that can be used to
  % prove that measure termination
  pvs0_ack_tcc_termination_mwg: JUDGEMENT
    pvs0_ack HAS_TYPE (pvs0_tcc_termination(ebool,eop1,eop2))
    
  pvs0_ack_tcc_termination: JUDGEMENT
    pvs0_ack HAS_TYPE (pvs0_tcc_termination(ebool,eop1,eop2))

% ------------------------------------------------------------------------------ 
% Definition of an arbitrary measure fulfilling measure termination
%
  ack_wfm  : (pvs0_tcc_termination_pred(ebool,eop1,eop2)(pvs0_ack))

% ------------------------------------------------------------------------------ 
% Definition of a PVS0 function that is extentionally equal to PVS function

  ack_pvs0(m,n:nat): nat = Omega_eval(ebool,eop1,eop2)(pvs0_ack)(m,n)`1

  ack_pvs0_m_n : LEMMA
    FORALL (m:nat,n:nat): ack_pvs0(m,n) = 
      IF m = 0 THEN n+1
      ELSIF n = 0 THEN ack_pvs0(m-1,1)
      ELSE ack_pvs0(m-1,ack_pvs0(m,n-1))
      ENDIF

END ack_pvs0
