ack_mwg: THEORY
BEGIN

%  IMPORTING ack_pvs0 % pvs0_ack is defined there
  T : TYPE = [nat,nat]

  IMPORTING PVS0@pvs0_cc[T]
  
  ebool(m,n:nat) : bool = m /= 0

  boole(b:bool) : Val = (IF NOT b THEN 0 ELSE 1 ENDIF,0)

  eop1(op:nat)(m,n:nat) : Val = 
    COND op = 0 -> boole(m=0),
         op = 1 -> boole(n=0),
         op = 2 -> (n+1,0),
         op = 3 -> IF m /= 0 THEN (m-1,1) ELSE (m,n) ENDIF,
	 op = 4 -> IF n /= 0 THEN (m,n-1) ELSE (m,n) ENDIF,
         ELSE -> (m,n)
    ENDCOND

  eop2(op:nat)(v1,v2:Val) : Val = 
    IF v1`1 > 0 THEN (v1`1-1,v2`1) ELSE v1 ENDIF

  % Interpretation:
  %   vr        : (m,n)
  %   bool(m,n) : m /= 0
  %   op1 0     : (m,n) -> bool(m=0)
  %   op1 1     : (m,n) -> bool(n=0)
  %   op1 2     : (m,n) -> (n+1,0)
  %   op1 3     : (m,n) -> (m-1,1)
  %   op1 4     : (m,n) -> (m,n-1)
  %   op2 0     : (m1,n1),(m2,n2) -> (m1-1,m2)

  pvs0_ack : Def = def(ite(op1(0,vr),
                            op1(2,vr),
                            ite(op1(1,vr),
                                rec(op1(3,vr)),
                                rec(op2(0,vr,rec(op1(4,vr)))))))

  MT : TYPE
  lt : (well_founded?[MT])
  N  : posnat = 2

  IMPORTING CCG@ccg_to_mwg[Val[T], Expr[Val[T]], Conditions[T],
             MT,lt,N,
             LAMBDA (expr: Expr[Val[T]], env, val: Val[T]):
             semantic_rel_expr(ebool, eop1, eop2)
                              (expr, get_body(pvs0_ack),
                               LAMBDA (v: (vr?)): env, val),
           LAMBDA (conds: Conditions[T], env: Val[T]):
             eval_conds(ebool, eop1, eop2)
                       (pvs0_ack, conds, LAMBDA (v: (vr?)): env)]

  IMPORTING PVS0@ccg_to_pvs0[T,ebool,eop1,eop2,MT,lt,N]	 

  IMPORTING PVS0@scp_iff_pvs0[T,ebool,eop1,eop2]

  IMPORTING CCG@bounding_circuits[CallingContext,N]

  measures: FunMeasures

  f: (indi_f_sound(make_ccg(pvs0_to_cd
                                       (ebool, eop1, eop2)(pvs0_ack),
                                       measures)))
				       
  ack_terminates: CONJECTURE terminates(ebool,eop1,eop2)(pvs0_ack)

END ack_mwg
