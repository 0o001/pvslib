(ack_pvs
 (ack_TCC1 0
  (ack_TCC1-1 nil 3643739441
   ("" (expand "restrict") (("" (use "wf_nat") nil nil)) nil)
   ((wf_nat formula-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (ack_TCC2 0
  (ack_TCC2-1 nil 3643739441 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (boole const-decl "Val" ack_pvs0_defs nil)
    (eop1 const-decl "Val" ack_pvs0_defs nil)
    (ebool const-decl "bool" ack_pvs0_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" ack_pvs0_defs nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" ack_pvs0_defs
     nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0_defs nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (Omega const-decl "nat" omega "orders/")
    (eval const-decl "Maybe[Val]" PVS0 nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (T type-eq-decl nil ack_pvs0_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Omega_eval const-decl "Val" measure_termination nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil))
   nil))
 (ack_TCC3 0
  (ack_TCC3-1 nil 3643739441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ack_TCC4 0
  (ack_TCC4-2 nil 3665259730
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "ack_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "(m, n)")
            (("" (eval-expr "pvs0_ccs(pvs0_ack`4)")
              (("" (typepred "pvs0_ccs(pvs0_ack`4)")
                (("" (replaces -2)
                  (("" (expand "every")
                    (("" (expand "every")
                      (("" (expand "every")
                        (("" (expand "every")
                          (("" (flatten)
                            (("" (hide (-2 -3))
                              ((""
                                (inst? -2 :where -1)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide (-1 3))
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "semantic_rel_expr")
                                          (("1"
                                            (expand
                                             "semantic_rel_expr")
                                            (("1"
                                              (expand "pvs0_ack")
                                              (("1"
                                                (expand "eop1")
                                                (("1"
                                                  (inst 1 "(m,n)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "eval_conds")
                                          (("2"
                                            (expand "eval_conds_rec")
                                            (("2"
                                              (expand
                                               "semantic_rel_expr")
                                              (("2"
                                                (expand
                                                 "eval_conds_rec")
                                                (("2"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("2"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("2"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("2"
                                                        (expand
                                                         "pvs0_ack")
                                                        (("2"
                                                          (expand
                                                           "eop1")
                                                          (("2"
                                                            (expand
                                                             "boole")
                                                            (("2"
                                                              (expand
                                                               "ebool")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "(1,0)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "(m,n)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   1
                                                                   "(0,0)")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "(m,n)")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2"
                                    (expand "every")
                                    (("2"
                                      (expand "every")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" PVS0Expr_adt
     nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m skolem-const-decl "nat" ack_pvs nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (ebool const-decl "bool" ack_pvs0_defs nil)
    (boole const-decl "Val" ack_pvs0_defs nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eop1 const-decl "Val" ack_pvs0_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pvs0_ack_tcc_termination_mwg name-judgement
     "(pvs0_tcc_termination)" ack_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T type-eq-decl nil ack_pvs0_defs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr type-eq-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil PVS0 nil)
    (< const-decl "bool" reals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0_defs nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))"
     ack_pvs0 nil))
   nil)
  (ack_TCC4-1 nil 3653236532
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "ack_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "val2env((m, n))")
            (("" (eval-expr "pvs0_ccs(pvs0_ack)")
              (("" (typepred "pvs0_ccs(pvs0_ack)")
                (("" (replaces -2)
                  (("" (expand "every")
                    (("" (expand "every")
                      (("" (expand "every")
                        (("" (expand "every")
                          (("" (flatten)
                            (("" (hide (-2 -3))
                              ((""
                                (inst? -2 :where -1)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide (-1 3))
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "semantic_rel_expr")
                                          (("1"
                                            (expand
                                             "semantic_rel_expr")
                                            (("1"
                                              (expand "eop1")
                                              (("1"
                                                (inst 1 "(m,n)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "eval_conds_rec")
                                          (("2"
                                            (expand
                                             "semantic_rel_expr")
                                            (("2"
                                              (expand "eval_conds_rec")
                                              (("2"
                                                (expand
                                                 "semantic_rel_expr")
                                                (("2"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("2"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("2"
                                                      (expand "eop1")
                                                      (("2"
                                                        (expand
                                                         "boole")
                                                        (("2"
                                                          (expand
                                                           "ebool")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "(1,0)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "(m,n)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               1
                                                               "(0,0)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "(m,n)")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2"
                                    (expand "every")
                                    (("2"
                                      (expand "every")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (pvs0_ack_tcc_termination_mwg name-judgement
     "(pvs0_tcc_termination)" ack_pvs0 nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" PVS0Expr_adt
     nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (PVS0Expr type-eq-decl nil PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (boole const-decl "Val" ack_pvs0_defs nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T type-eq-decl nil ack_pvs0_defs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil) nil nil
    (< const-decl "bool" reals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (ebool const-decl "bool" ack_pvs0_defs nil)
    (eop1 const-decl "Val" ack_pvs0_defs nil)
    (eop2 const-decl "Val" ack_pvs0_defs nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0_defs nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))"
     ack_pvs0 nil))
   nil))
 (ack_TCC5 0
  (ack_TCC5-1 nil 3653236532
   ("" (skeep)
    (("" (typepred "v(m-1,1)")
      (("1" (replaces -1)
        (("1" (lemma "ack_pvs0_m_n")
          (("1" (insteep -1)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))"
     ack_pvs0 nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (PVS0 type-eq-decl nil PVS0 nil)
    (PVS0Expr type-eq-decl nil PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T type-eq-decl nil ack_pvs0_defs nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ack_pvs0_m_n formula-decl nil ack_pvs0 nil))
   nil))
 (ack_TCC6 0
  (ack_TCC6-1 nil 3653236532 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ack_TCC7 0
  (ack_TCC7-1 nil 3653236532 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ack_TCC8 0
  (ack_TCC8-4 nil 3665503941
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "ack_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "(m, n)")
            (("" (eval-expr "pvs0_ccs(pvs0_ack`4)")
              (("" (typepred "pvs0_ccs(pvs0_ack`4)")
                (("" (replaces -2)
                  (("" (expand "every")
                    (("" (expand "every")
                      (("" (expand "every")
                        (("" (expand "every")
                          (("" (flatten)
                            (("" (hide (-1 -2))
                              ((""
                                (inst? -2 :where -1)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide (-1 4))
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "semantic_rel_expr")
                                          (("1"
                                            (expand
                                             "semantic_rel_expr")
                                            (("1"
                                              (inst 1 "(m,n)")
                                              (("1"
                                                (expand "pvs0_ack")
                                                (("1"
                                                  (expand "eop1")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "eval_conds")
                                          (("2"
                                            (expand "eval_conds_rec")
                                            (("2"
                                              (expand
                                               "semantic_rel_expr")
                                              (("2"
                                                (expand
                                                 "semantic_rel_expr")
                                                (("2"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("2"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("2"
                                                      (expand
                                                       "semantic_rel_expr")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("2"
                                                          (expand
                                                           "pvs0_ack")
                                                          (("2"
                                                            (expand
                                                             "eop1")
                                                            (("2"
                                                              (expand
                                                               "boole")
                                                              (("2"
                                                                (expand
                                                                 "ebool")
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "(0,0)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "(m,n)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     1
                                                                     "(0,0)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "(m,n)")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2"
                                    (expand "every")
                                    (("2"
                                      (expand "every")
                                      (("2"
                                        (expand "every")
                                        (("2"
                                          (expand "every")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" PVS0Expr_adt
     nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" ack_pvs nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (boole const-decl "Val" ack_pvs0_defs nil)
    (ebool const-decl "bool" ack_pvs0_defs nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eop1 const-decl "Val" ack_pvs0_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pvs0_ack_tcc_termination_mwg name-judgement
     "(pvs0_tcc_termination)" ack_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T type-eq-decl nil ack_pvs0_defs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr type-eq-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil PVS0 nil)
    (< const-decl "bool" reals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0_defs nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))"
     ack_pvs0 nil))
   nil)
  (ack_TCC8-3 nil 3665259764
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "ack_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "(m, n)")
            (("" (eval-expr "pvs0_ccs(pvs0_ack)")
              (("" (typepred "pvs0_ccs(pvs0_ack)")
                (("" (replaces -2)
                  (("" (expand "every")
                    (("" (expand "every")
                      (("" (expand "every")
                        (("" (expand "every")
                          (("" (flatten)
                            (("" (hide (-1 -2))
                              ((""
                                (inst? -2 :where -1)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide (-1 4))
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "semantic_rel_expr")
                                          (("1"
                                            (expand
                                             "semantic_rel_expr")
                                            (("1"
                                              (inst 1 "(m,n)")
                                              (("1"
                                                (expand "eop1")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "eval_conds_rec")
                                          (("2"
                                            (expand
                                             "semantic_rel_expr")
                                            (("2"
                                              (expand
                                               "semantic_rel_expr")
                                              (("2"
                                                (expand
                                                 "eval_conds_rec")
                                                (("2"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("2"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("2"
                                                      (expand
                                                       "semantic_rel_expr")
                                                      (("2"
                                                        (expand "eop1")
                                                        (("2"
                                                          (expand
                                                           "boole")
                                                          (("2"
                                                            (expand
                                                             "ebool")
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "(0,0)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "(m,n)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 1
                                                                 "(0,0)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "(m,n)")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2"
                                    (expand "every")
                                    (("2"
                                      (expand "every")
                                      (("2"
                                        (expand "every")
                                        (("2"
                                          (expand "every")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))"
     ack_pvs0 nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0_defs nil)
    (eop2 const-decl "Val" ack_pvs0_defs nil)
    (eop1 const-decl "Val" ack_pvs0_defs nil)
    (ebool const-decl "bool" ack_pvs0_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil) nil nil
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T type-eq-decl nil ack_pvs0_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (boole const-decl "Val" ack_pvs0_defs nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr type-eq-decl nil PVS0Expr_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" PVS0Expr_adt
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (pvs0_ack_tcc_termination_mwg name-judgement
     "(pvs0_tcc_termination)" ack_pvs0 nil)
    (restrict const-decl "R" restrict nil))
   nil)
  (ack_TCC8-2 nil 3653241823
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "ack_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "val2env((m, n))")
            (("" (eval-expr "pvs0_ccs(pvs0_ack)")
              (("" (typepred "pvs0_ccs(pvs0_ack)")
                (("" (replaces -2)
                  (("" (expand "every")
                    (("" (expand "every")
                      (("" (expand "every")
                        (("" (expand "every")
                          (("" (flatten)
                            (("" (hide (-1 -2))
                              ((""
                                (inst? -2 :where -1)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide (-1 4))
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "semantic_rel_expr")
                                          (("1"
                                            (expand
                                             "semantic_rel_expr")
                                            (("1"
                                              (inst 1 "(m,n)")
                                              (("1"
                                                (expand "eop1")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "eval_conds_rec")
                                          (("2"
                                            (expand
                                             "semantic_rel_expr")
                                            (("2"
                                              (expand
                                               "semantic_rel_expr")
                                              (("2"
                                                (expand
                                                 "eval_conds_rec")
                                                (("2"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("2"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("2"
                                                      (expand
                                                       "semantic_rel_expr")
                                                      (("2"
                                                        (expand "eop1")
                                                        (("2"
                                                          (expand
                                                           "boole")
                                                          (("2"
                                                            (expand
                                                             "ebool")
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "(0,0)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "(m,n)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 1
                                                                 "(0,0)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "(m,n)")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2"
                                    (expand "every")
                                    (("2"
                                      (expand "every")
                                      (("2"
                                        (expand "every")
                                        (("2"
                                          (expand "every")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (pvs0_ack_tcc_termination_mwg name-judgement
     "(pvs0_tcc_termination)" ack_pvs0 nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" PVS0Expr_adt
     nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (PVS0Expr type-eq-decl nil PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (boole const-decl "Val" ack_pvs0_defs nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T type-eq-decl nil ack_pvs0_defs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil) nil nil
    (< const-decl "bool" reals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (ebool const-decl "bool" ack_pvs0_defs nil)
    (eop1 const-decl "Val" ack_pvs0_defs nil)
    (eop2 const-decl "Val" ack_pvs0_defs nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0_defs nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))"
     ack_pvs0 nil))
   nil)
  (ack_TCC8-1 nil 3653236532
   ("" (skeep) (("" (termination-tcc) (("" (postpone) nil nil)) nil))
    nil)
   nil nil))
 (ack_TCC9 0
  (ack_TCC9-3 nil 3665259796
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "v(m,n-1)")
        (("1" (replaces -1)
          (("1" (typepred "ack_wfm")
            (("1" (expand "pvs0_tcc_termination_pred")
              (("1" (inst -1 "(m, n)")
                (("1" (eval-expr "pvs0_ccs(pvs0_ack`4)")
                  (("1" (typepred "pvs0_ccs(pvs0_ack`4)")
                    (("1" (replaces -2)
                      (("1" (expand "every")
                        (("1" (expand "every")
                          (("1" (expand "every")
                            (("1" (expand "every")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide (-1 -3))
                                  (("1"
                                    (inst? -2 :where -1)
                                    (("1"
                                      (inst? -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide (-1 4))
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand
                                               "semantic_rel_expr")
                                              (("1"
                                                (expand
                                                 "semantic_rel_expr"
                                                 1
                                                 1)
                                                (("1"
                                                  (inst 1 "(m,n)" _)
                                                  (("1"
                                                    (expand "pvs0_ack")
                                                    (("1"
                                                      (expand
                                                       "eop2"
                                                       1
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "ack_pvs0")
                                                        (("1"
                                                          (inst
                                                           1
                                                           "Omega_eval(pvs0_ack)(m, n - 1)")
                                                          (("1"
                                                            (expand
                                                             "semantic_rel_expr")
                                                            (("1"
                                                              (expand
                                                               "semantic_rel_expr"
                                                               1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "semantic_rel_expr"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "(m,n-1)")
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "(m,n)")
                                                                      (("1"
                                                                        (expand
                                                                         "eop1")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "Omega_eval_correct")
                                                                      (("2"
                                                                        (expand
                                                                         "semantic_rel")
                                                                        (("2"
                                                                          (expand
                                                                           "semantic_rel")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "pvs0_ack"
                                                                             "_"
                                                                             "_")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "(m, n - 1)"
                                                                               "Omega_eval(pvs0_ack)(m, n - 1)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "pvs0_ack")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "restrict")
                                                                                (("2"
                                                                                  (use
                                                                                   "wf_nat")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "restrict")
                                                            (("2"
                                                              (use
                                                               "wf_nat")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "eval_conds")
                                              (("2"
                                                (expand
                                                 "eval_conds_rec")
                                                (("2"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("2"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("2"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("2"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("2"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("2"
                                                            (expand
                                                             "semantic_rel_expr")
                                                            (("2"
                                                              (expand
                                                               "pvs0_ack")
                                                              (("2"
                                                                (expand
                                                                 "eop1")
                                                                (("2"
                                                                  (expand
                                                                   "boole")
                                                                  (("2"
                                                                    (expand
                                                                     "ebool")
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "(0,0)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "(m,n)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         1
                                                                         "(0,0)")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "(m,n)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "every")
                                      (("2"
                                        (expand "every")
                                        (("2"
                                          (expand "every")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" PVS0Expr_adt
     nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (m skolem-const-decl "nat" ack_pvs nil)
    (n skolem-const-decl "nat" ack_pvs nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (boole const-decl "Val" ack_pvs0_defs nil)
    (ebool const-decl "bool" ack_pvs0_defs nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eop2 const-decl "Val" ack_pvs0_defs nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" ordered_nat "orders/")
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     ordered_nat "orders/")
    (strict_order_restrict application-judgement "(strict_order?[S])"
     ordered_nat "orders/")
    (transitive_restrict application-judgement "(transitive?[S])"
     ordered_nat "orders/")
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     ordered_nat "orders/")
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     ordered_nat "orders/")
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (Omega_eval const-decl "Val" measure_termination nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (Omega_eval_correct formula-decl nil measure_termination nil)
    (semantic_rel const-decl "bool" pvs0_expr nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (semantic_rel const-decl "bool" PVS0 nil)
    (eop1 const-decl "Val" ack_pvs0_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pvs0_ack_tcc_termination_mwg name-judgement
     "(pvs0_tcc_termination)" ack_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T type-eq-decl nil ack_pvs0_defs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr type-eq-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil PVS0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0_defs nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))"
     ack_pvs0 nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil)
  (ack_TCC9-2 nil 3653242678
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "v(m,n-1)")
        (("1" (replaces -1)
          (("1" (typepred "ack_wfm")
            (("1" (expand "pvs0_tcc_termination_pred")
              (("1" (inst -1 "val2env((m, n))")
                (("1" (eval-expr "pvs0_ccs(pvs0_ack)")
                  (("1" (typepred "pvs0_ccs(pvs0_ack)")
                    (("1" (replaces -2)
                      (("1" (expand "every")
                        (("1" (expand "every")
                          (("1" (expand "every")
                            (("1" (expand "every")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide (-1 -3))
                                  (("1"
                                    (inst? -2 :where -1)
                                    (("1"
                                      (inst? -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide (-1 4))
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand
                                               "semantic_rel_expr")
                                              (("1"
                                                (expand
                                                 "semantic_rel_expr"
                                                 1
                                                 1)
                                                (("1"
                                                  (inst 1 "(m,n)" _)
                                                  (("1"
                                                    (expand "eop2" 1 2)
                                                    (("1"
                                                      (expand
                                                       "ack_pvs0")
                                                      (("1"
                                                        (inst
                                                         1
                                                         "Omega_eval(ebool, eop1, eop2)(pvs0_ack)(m, n - 1)")
                                                        (("1"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("1"
                                                            (expand
                                                             "semantic_rel_expr"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "semantic_rel_expr"
                                                               1
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "(m,n-1)")
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "(m,n)")
                                                                    (("1"
                                                                      (expand
                                                                       "eop1")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "Omega_eval_correct")
                                                                    (("2"
                                                                      (expand
                                                                       "semantic_rel")
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "restrict")
                                                                          (("2"
                                                                            (rewrite
                                                                             "well_founded_le")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "restrict")
                                                          (("2"
                                                            (rewrite
                                                             "well_founded_le")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "eval_conds_rec")
                                              (("2"
                                                (expand
                                                 "semantic_rel_expr")
                                                (("2"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("2"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("2"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("2"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("2"
                                                            (expand
                                                             "eop1")
                                                            (("2"
                                                              (expand
                                                               "boole")
                                                              (("2"
                                                                (expand
                                                                 "ebool")
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "(0,0)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "(m,n)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     1
                                                                     "(0,0)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "(m,n)")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "every")
                                      (("2"
                                        (expand "every")
                                        (("2"
                                          (expand "every")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)"
     ack_pvs0 nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" PVS0Expr_adt
     nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (PVS0Expr type-eq-decl nil PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (semantic_rel const-decl "bool" pvs0_expr nil)
    (Omega_eval_correct formula-decl nil measure_termination nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (Omega_eval const-decl "Val" measure_termination nil)
    (well_founded? const-decl "bool" orders nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil) nil nil
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))"
     ack_pvs0 nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil))
   nil)
  (ack_TCC9-1 nil 3653236532
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "v(m,n-1)")
        (("1" (replaces -1) (("1" (postpone) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil))
 (ack_TCC10 0
  (ack_TCC10-1 nil 3653236532
   ("" (skeep)
    (("" (typepred "v(m,n-1)")
      (("1" (replaces -1)
        (("1" (typepred "v(m - 1, ack_pvs0(m, n - 1))")
          (("1" (replaces -1)
            (("1" (lemma "ack_pvs0_m_n")
              (("1" (insteep -1)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))"
     ack_pvs0 nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (PVS0 type-eq-decl nil PVS0 nil)
    (PVS0Expr type-eq-decl nil PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T type-eq-decl nil ack_pvs0_defs nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ack_pvs0_m_n formula-decl nil ack_pvs0 nil))
   nil)))

