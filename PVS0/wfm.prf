(wfm
 (gt_n_TCC1 0
  (gt_n_TCC1-1 nil 3643446453 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (gt_n_decomp_TCC1 0
  (gt_n_decomp_TCC1-1 nil 3644318968 ("" (subtype-tcc) nil nil) nil
   nil))
 (gt_n_decomp 0
  (gt_n_decomp-2 nil 3644324511
   ("" (induct "n")
    (("1" (skeep)
      (("1" (assert)
        (("1" (expand "gt_n" -1)
          (("1" (skeep)
            (("1" (expand "gt_n")
              (("1" (inst 1 "c") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (assert)
          (("2" (expand "gt_n" -2)
            (("2" (skeep -2)
              (("2" (inst -1 "c" "b" "lt!1")
                (("2" (assert)
                  (("2" (skolem -1 "c_")
                    (("2" (flatten)
                      (("2" (inst 1 "c_")
                        (("2" (assert)
                          (("2" (expand "gt_n" 1)
                            (("2" (inst 1 "c") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (above_induction formula-decl nil bounded_int_inductions nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (gt_n inductive-decl "bool" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil wfm nil)
    (pred type-eq-decl nil defined_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)
  (gt_n_decomp-1 nil 3644318973
   ("" (induct "n")
    (("1" (skeep)
      (("1" (assert)
        (("1" (expand "gt_n" -1)
          (("1" (skeep)
            (("1" (expand "gt_n")
              (("1" (inst 1 "c") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (assert)
          (("2" (expand "gt_n" -2)
            (("2" (skeep -2)
              (("2" (inst -1 "c" "b" "<")
                (("2" (assert)
                  (("2" (skolem -1 "c_")
                    (("2" (flatten)
                      (("2" (inst 1 "c_")
                        (("2" (assert)
                          (("2" (expand "gt_n" 1)
                            (("2" (inst 1 "c") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (above_induction formula-decl nil bounded_int_inductions nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (gt_n inductive-decl "bool" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil wfm nil)
    (pred type-eq-decl nil defined_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (gt_n_extension 0
  (gt_n_extension-2 nil 3644324493
   ("" (induct "m")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep*)
        (("2" (case "n=ja")
          (("1" (replaces -1)
            (("1" (hide -3)
              (("1" (use "gt_n_decomp")
                (("1" (assert)
                  (("1" (skeep -1) (("1" (inst? 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "a" "lt!1" "n")
            (("2" (replace 2 -1)
              (("2" (use "gt_n_decomp")
                (("2" (assert)
                  (("2" (skeep -1) (("2" (inst? 2) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (gt_n_decomp formula-decl nil wfm nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (above_induction formula-decl nil bounded_int_inductions nil)
    (< const-decl "bool" reals nil)
    (gt_n inductive-decl "bool" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil wfm nil)
    (pred type-eq-decl nil defined_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (gt_n_extension-1 nil 3644317901
   ("" (induct "m")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep*)
        (("2" (case "n=ja")
          (("1" (replaces -1)
            (("1" (hide -3)
              (("1" (use "gt_n_decomp")
                (("1" (assert)
                  (("1" (skeep -1) (("1" (inst? 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "a" "<" "n")
            (("2" (replace 2 -1)
              (("2" (use "gt_n_decomp")
                (("2" (assert)
                  (("2" (skeep -1) (("2" (inst? 2) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (gt_n_decomp formula-decl nil wfm nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (above_induction formula-decl nil bounded_int_inductions nil)
    (< const-decl "bool" reals nil)
    (gt_n inductive-decl "bool" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil wfm nil)
    (pred type-eq-decl nil defined_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (infinite_branch 0
  (infinite_branch-4 nil 3644324288
   ("" (skeep*)
    ((""
      (case "FORALL(a_: T | lt!1(a_,a)): EXISTS(n:above(0)): FORALL(b): NOT gt_n(lt!1)(n)(a_, b)")
      (("1" (hide 1)
        (("1" (typepred "lt!1")
          (("1" (expand "finite_branching?")
            (("1" (inst -1 "a")
              (("1"
                (name "ns"
                      "{n:above(0)| EXISTS(y:T|lt!1(y,a)): min({n_:above(0)|FORALL (b): NOT gt_n(lt!1)(n_)(y, b)}) = n}")
                (("1" (case "is_finite(ns)")
                  (("1"
                    (name "max_ns" "fset_props[above(0)].max_fs(ns,<)")
                    (("1"
                      (case "FORALL(a_:T | lt!1(a_,a)): FORALL(b): NOT gt_n(lt!1)(max_ns)(a_, b)")
                      (("1" (inst -6 "max_ns+1")
                        (("1" (skolem -6 "b_max")
                          (("1" (expand "gt_n" -6)
                            (("1" (case "max_ns > 0")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -7 "x_a")
                                  (("1"
                                    (inst -2 "x_a")
                                    (("1"
                                      (inst -2 "b_max")
                                      (("1" (flatten) nil nil))
                                      nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -5 -6 -7 -1)
                                (("2"
                                  (typepred "max_ns")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 "a_i")
                        (("2" (typepred "max_ns")
                          (("2" (expand "restrict")
                            (("2"
                              (name "min_n_i"
                                    "min({n: above(0) | FORALL (b): NOT gt_n(lt!1)(n)(a_i, b)})")
                              (("1"
                                (inst -4 "min_n_i")
                                (("1"
                                  (case "min_n_i = max_ns")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "min_n_i")
                                      (("2"
                                        (hide-all-but (-2 2 -7))
                                        (("2"
                                          (lemma "gt_n_extension")
                                          (("2"
                                            (inst
                                             -1
                                             "a_i"
                                             "lt!1"
                                             "min_n_i"
                                             "max_ns")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep -1)
                                                (("1"
                                                  (inst? -2)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep 2)
                                                (("2"
                                                  (inst? 1)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 -1))
                                  (("2"
                                    (expand "ns")
                                    (("2" (inst 1 "a_i") nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -9 "a_i")
                                (("2"
                                  (hide-all-but (1 -9))
                                  (("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skeep -2)
                                          (("2" (inst -1 "n") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "restrict")
                      (("2"
                        (typepred
                         "fset_props[above(0)].max_fs(ns, LAMBDA (s: [above(0), above(0)]): <(s))")
                        (("1" (propax) nil nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil)
                         ("3" (assert)
                          (("3" (expand "ns" -1)
                            (("3" (expand "empty?")
                              (("3"
                                (expand "member")
                                (("3"
                                  (hide 1)
                                  (("3"
                                    (inst -5 "1")
                                    (("3"
                                      (skolem -5 "a_i")
                                      (("3"
                                        (expand "gt_n" -5)
                                        (("3"
                                          (inst -6 "a_i")
                                          (("3"
                                            (skeep -6)
                                            (("3"
                                              (inst
                                               -1
                                               "min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(a_i, b)})")
                                              (("1"
                                                (inst 1 "a_i")
                                                nil
                                                nil)
                                               ("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (inst -1 "n")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (expand "ns" -1)
                        (("3" (expand "gt_n" -5)
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (assert)
                      (("4" (expand "ns" -1)
                        (("4" (expand "empty?")
                          (("4" (expand "member")
                            (("4" (inst -5 "1")
                              (("4"
                                (skolem -5 "a_i")
                                (("4"
                                  (expand "gt_n" -5)
                                  (("4"
                                    (inst -6 "a_i")
                                    (("4"
                                      (skeep -6)
                                      (("4"
                                        (inst
                                         -1
                                         "min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(a_i, b)})")
                                        (("1" (inst 1 "a_i") nil nil)
                                         ("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (inst -1 "n")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 1))
                    (("2" (expand "ns")
                      (("2" (expand "is_finite")
                        (("2" (skeep)
                          (("2"
                            (inst 1 "N"
                             "LAMBDA(n:above(0)|EXISTS (y: T | lt!1(y,a)):
                               min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(y, b)}) = n):
           f(epsilon({y:T| lt!1(y,a) AND min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(y, b)})=n }))")
                            (("1" (expand "injective?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst? -2 :where -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (use "epsilon_ax[T]")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (name-replace
                                               "ep1"
                                               "epsilon({y: T |
                                  lt!1(y,a) AND
                                   min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(y, b)}) = x1})")
                                              (("1"
                                                (use "epsilon_ax[T]")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (name-replace
                                                       "ep2"
                                                       "epsilon({y: T |
                                        lt!1(y,a) AND
                                         min({n_: above(0) | FORALL (b): NOT gt_n(lt!1)(n_)(y, b)}) = x2})")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (reveal -7)
                                                        (("2"
                                                          (hide-all-but
                                                           (1 -1))
                                                          (("2"
                                                            (skolem
                                                             1
                                                             "a_i")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a_i")
                                                                (("2"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst?
                                                                           -3)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2"
                                                      (skeep -2)
                                                      (("2"
                                                        (inst 1 "y")
                                                        (("2"
                                                          (typepred
                                                           "y")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -7)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 -1))
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -1 "y")
                                                        (("2"
                                                          (expand
                                                           "nonempty?")
                                                          (("2"
                                                            (expand
                                                             "empty?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "n")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal -6)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst -1 "y")
                                                      (("2"
                                                        (expand
                                                         "nonempty?")
                                                        (("2"
                                                          (expand
                                                           "empty?")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "n")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred "x1")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst 1 "y")
                                                  (("2"
                                                    (typepred "y")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (reveal -6)
                                          (("2"
                                            (hide-all-but (1 -1))
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -1 "y")
                                                (("2"
                                                  (expand "nonempty?")
                                                  (("2"
                                                    (expand "empty?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -3 "n")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -4)
                                    (("2"
                                      (hide-all-but (1 -1))
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "y")
                                          (("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -3 "n")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (use "epsilon_ax[T]")
                                (("1"
                                  (split -1)
                                  (("1" (flatten) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (typepred "n")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "y")
                                          (("2"
                                            (typepred "y")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (reveal -4)
                                  (("2"
                                    (hide-all-but (1 -1))
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -1 "y")
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -3 "n!1")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (reveal -3)
                                (("3"
                                  (inst -1 "y")
                                  (("3"
                                    (expand "nonempty?")
                                    (("3"
                                      (expand "empty?")
                                      (("3"
                                        (expand "member")
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (inst -3 "n!1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (skeep)
                              (("4"
                                (reveal -3)
                                (("4"
                                  (expand "nonempty?")
                                  (("4"
                                    (expand "empty?")
                                    (("4"
                                      (expand "member")
                                      (("4"
                                        (inst -1 "y")
                                        (("4"
                                          (skeep)
                                          (("4" (inst -2 "n") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem 1 "a_i")
                  (("2" (inst -3 "a_i")
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (skeep -4)
                          (("2" (inst -1 "n")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst 2 "a_")
          (("2" (typepred "a_")
            (("2" (assert)
              (("2" (skeep)
                (("2" (inst 1 "n")
                  (("2" (skeep) (("2" (inst 1 "b") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (gt_n inductive-decl "bool" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_branching? const-decl "bool" wfm nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil wfm nil)
    (is_finite const-decl "bool" finite_sets nil)
    (a_i skolem-const-decl "T" wfm nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a_i skolem-const-decl "T" wfm nil)
    (x_a skolem-const-decl "T" wfm nil)
    (lt!1 skolem-const-decl "{lt: (finite_branching?) |
         FORALL (n: above(0)): EXISTS (b): gt_n(lt)(n)(a, b)}" wfm nil)
    (a skolem-const-decl "T" wfm nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (gt_n_extension formula-decl nil wfm nil)
    (min_n_i skolem-const-decl "{a |
         (FORALL (b): NOT gt_n(lt!1)(a)(a_i, b)) AND
          (FORALL (x: above(0)):
             (FORALL (b): NOT gt_n(lt!1)(x)(a_i, b)) IMPLIES a <= x)}"
     wfm nil)
    (a_i skolem-const-decl "{a_: T | lt!1(a_, a)}" wfm nil)
    (ns skolem-const-decl "[above(0) -> boolean]" wfm nil)
    (member const-decl "bool" sets nil) (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (max_fs def-decl
     "{res: T | fs(res) AND (FORALL (x: (fs)): x < res OR x = res)}"
     fset_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (trichotomous? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y skolem-const-decl "T" wfm nil) (y skolem-const-decl "T" wfm nil)
    (y skolem-const-decl "T" wfm nil) (y skolem-const-decl "T" wfm nil)
    (a_i skolem-const-decl "T" wfm nil)
    (y skolem-const-decl "T" wfm nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (y skolem-const-decl "T" wfm nil)
    (below type-eq-decl nil nat_types nil)
    (epsilon const-decl "T" epsilons nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil))
   nil)
  (infinite_branch-3 nil 3644320794
   ("" (skeep*)
    ((""
      (case "FORALL(a_: T | a_ < a): EXISTS(n:above(0)): FORALL(b): NOT gt_n(<)(n)(a_, b)")
      (("1" (hide 1)
        (("1" (typepred "<")
          (("1" (expand "finite_branching?")
            (("1" (inst -1 "a")
              (("1"
                (name "ns"
                      "{n:above(0)| EXISTS(y:T|y<a): min({n_:above(0)|FORALL (b): NOT gt_n(<)(n_)(y, b)}) = n}")
                (("1" (case "is_finite(ns)")
                  (("1"
                    (name "max_ns" "fset_props[above(0)].max_fs(ns,<)")
                    (("1"
                      (case "FORALL(a_:T | a_ < a): FORALL(b): NOT gt_n(<)(max_ns)(a_, b)")
                      (("1" (inst -6 "max_ns+1")
                        (("1" (skolem -6 "b_max")
                          (("1" (expand "gt_n" -6)
                            (("1" (case "max_ns > 0")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -7 "x_a")
                                  (("1"
                                    (inst -2 "x_a")
                                    (("1"
                                      (inst -2 "b_max")
                                      (("1" (flatten) nil nil))
                                      nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -5 -6 -7 -1)
                                (("2"
                                  (typepred "max_ns")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 "a_i")
                        (("2" (typepred "max_ns")
                          (("2" (expand "restrict")
                            (("2"
                              (name "min_n_i"
                                    "min({n: above(0) | FORALL (b): NOT gt_n(<)(n)(a_i, b)})")
                              (("1"
                                (inst -4 "min_n_i")
                                (("1"
                                  (case "min_n_i = max_ns")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "min_n_i")
                                      (("2"
                                        (hide-all-but (-2 2 -7))
                                        (("2"
                                          (lemma "gt_n_extension")
                                          (("2"
                                            (inst
                                             -1
                                             "a_i"
                                             "<"
                                             "min_n_i"
                                             "max_ns")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep -1)
                                                (("1"
                                                  (inst? -2)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep 2)
                                                (("2"
                                                  (inst? 1)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 -1))
                                  (("2"
                                    (expand "ns")
                                    (("2" (inst 1 "a_i") nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -9 "a_i")
                                (("2"
                                  (hide-all-but (1 -9))
                                  (("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skeep -2)
                                          (("2" (inst -1 "n") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "restrict")
                      (("2"
                        (typepred
                         "fset_props[above(0)].max_fs(ns, LAMBDA (s: [above(0), above(0)]): <(s))")
                        (("1" (propax) nil nil)
                         ("2" (assert)
                          (("2" (expand "ns" -1)
                            (("2" (expand "empty?")
                              (("2"
                                (expand "member")
                                (("2"
                                  (hide 1)
                                  (("2"
                                    (inst -5 "1")
                                    (("2"
                                      (skolem -5 "a_i")
                                      (("2"
                                        (expand "gt_n" -5)
                                        (("2"
                                          (inst -6 "a_i")
                                          (("2"
                                            (skeep -6)
                                            (("2"
                                              (inst
                                               -1
                                               "min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(a_i, b)})")
                                              (("1"
                                                (inst 1 "a_i")
                                                nil
                                                nil)
                                               ("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (inst -1 "n")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (expand "ns" -1)
                        (("3" (expand "empty?")
                          (("3" (expand "member")
                            (("3" (inst -5 "1")
                              (("3"
                                (skolem -5 "a_i")
                                (("3"
                                  (expand "gt_n" -5)
                                  (("3"
                                    (inst -6 "a_i")
                                    (("3"
                                      (skeep -6)
                                      (("3"
                                        (inst
                                         -1
                                         "min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(a_i, b)})")
                                        (("1" (inst 1 "a_i") nil nil)
                                         ("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (inst -1 "n")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 1))
                    (("2" (expand "ns")
                      (("2" (expand "is_finite")
                        (("2" (skeep)
                          (("2"
                            (inst 1 "N"
                             "LAMBDA(n:above(0)|EXISTS (y: T | y < a):
                       min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(y, b)}) = n):
   f(epsilon({y:T| y<a AND min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(y, b)})=n }))")
                            (("1" (expand "injective?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst? -2 :where -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (use "epsilon_ax[T]")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (name-replace
                                               "ep1"
                                               "epsilon({y: T |
                  y < a AND
                   min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(y, b)}) = x1})")
                                              (("1"
                                                (use "epsilon_ax[T]")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (name-replace
                                                       "ep2"
                                                       "epsilon({y: T |
                  y < a AND
                   min({n_: above(0) | FORALL (b): NOT gt_n(<)(n_)(y, b)}) = x2})")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (reveal -7)
                                                        (("2"
                                                          (hide-all-but
                                                           (1 -1))
                                                          (("2"
                                                            (skolem
                                                             1
                                                             "a_i")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a_i")
                                                                (("2"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst?
                                                                           -3)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2"
                                                      (skeep -2)
                                                      (("2"
                                                        (inst 1 "y")
                                                        (("2"
                                                          (typepred
                                                           "y")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -7)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 -1))
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -1 "y")
                                                        (("2"
                                                          (expand
                                                           "nonempty?")
                                                          (("2"
                                                            (expand
                                                             "empty?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "n")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal -6)
                                                (("2"
                                                  (hide-all-but (1 -1))
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst -1 "y")
                                                      (("2"
                                                        (expand
                                                         "nonempty?")
                                                        (("2"
                                                          (expand
                                                           "empty?")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "n")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred "x1")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst 1 "y")
                                                  (("2"
                                                    (typepred "y")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (reveal -6)
                                          (("2"
                                            (hide-all-but (1 -1))
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -1 "y")
                                                (("2"
                                                  (expand "nonempty?")
                                                  (("2"
                                                    (expand "empty?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -3 "n")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -4)
                                    (("2"
                                      (hide-all-but (1 -1))
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "y")
                                          (("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -3 "n")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (use "epsilon_ax[T]")
                                (("1"
                                  (split -1)
                                  (("1" (flatten) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (typepred "n")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "y")
                                          (("2"
                                            (typepred "y")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (reveal -4)
                                  (("2"
                                    (hide-all-but (1 -1))
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -1 "y")
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -3 "n!1")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (reveal -3)
                                (("3"
                                  (inst -1 "y")
                                  (("3"
                                    (expand "nonempty?")
                                    (("3"
                                      (expand "empty?")
                                      (("3"
                                        (expand "member")
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (inst -3 "n!1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (skeep)
                              (("4"
                                (reveal -3)
                                (("4"
                                  (expand "nonempty?")
                                  (("4"
                                    (expand "empty?")
                                    (("4"
                                      (expand "member")
                                      (("4"
                                        (inst -1 "y")
                                        (("4"
                                          (skeep)
                                          (("4" (inst -2 "n") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem 1 "a_i")
                  (("2" (inst -3 "a_i")
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (skeep -4)
                          (("2" (inst -1 "n")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst 2 "a_")
          (("2" (typepred "a_")
            (("2" (assert)
              (("2" (skeep)
                (("2" (inst 1 "n")
                  (("2" (skeep) (("2" (inst 1 "b") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (gt_n inductive-decl "bool" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_branching? const-decl "bool" wfm nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil wfm nil)
    (is_finite const-decl "bool" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (gt_n_extension formula-decl nil wfm nil)
    (member const-decl "bool" sets nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (max_fs def-decl
     "{res: T | fs(res) AND (FORALL (x: (fs)): x < res OR x = res)}"
     fset_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (below type-eq-decl nil nat_types nil)
    (epsilon const-decl "T" epsilons nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil))
   nil)
  (infinite_branch-2 nil 3644320426
   ("" (skeep*)
    ((""
      (case "FORALL(a_: T | a_ < a): EXISTS(n:above(0)): FORALL(b): NOT gt_n(<)(n)(a_, b)")
      (("1" (hide 1)
        (("1" (typepred "<")
          (("1" (expand "finite_branching?")
            (("1" (inst -1 "a")
              (("1"
                (name "ns"
                      "{n:above(0)| EXISTS(y:T|y<a): min({n_:above(0)|FORALL (b): NOT gt_n(<)(n_)(y, b)}) = n}")
                (("1" (case "is_finite(ns)")
                  (("1" (name "max_ns" "fset_props[nat].max_fs(ns,<)")
                    (("1"
                      (case "FORALL(a_:T | a_ < a): FORALL(b): NOT gt_n(<)(max_ns)(a_, b)")
                      (("1" (inst -6 "max_ns+1")
                        (("1" (skolem -6 "b_max")
                          (("1" (expand "gt_n" -6)
                            (("1" (case "max_ns > 0")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -7 "x_a")
                                  (("1"
                                    (inst -2 "x_a")
                                    (("1"
                                      (inst -2 "b_max")
                                      (("1" (flatten) nil nil))
                                      nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -5 -6 -7 -1)
                                (("2"
                                  (typepred "max_ns")
                                  (("2"
                                    (assert)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 "a_i")
                        (("2" (typepred "max_ns")
                          (("2" (expand "restrict")
                            (("2"
                              (name "min_n_i"
                                    "min({n: above(0) | FORALL (b): NOT gt_n(<)(n)(a_i, b)})")
                              (("1"
                                (inst -3 "min_n_i")
                                (("1"
                                  (case "min_n_i = max_ns")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "min_n_i")
                                      (("2"
                                        (hide-all-but (-2 2 -6))
                                        (("2"
                                          (lemma "gt_n_extension")
                                          (("2"
                                            (inst
                                             -1
                                             "a_i"
                                             "<"
                                             "min_n_i"
                                             "max_ns")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep -1)
                                                (("1"
                                                  (inst? -2)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep 2)
                                                (("2"
                                                  (inst? 1)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 -1))
                                  (("2"
                                    (expand "ns")
                                    (("2" (inst 1 "a_i") nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -8 "a_i")
                                (("2"
                                  (hide-all-but (1 -8))
                                  (("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (skeep -2)
                                          (("2" (inst -1 "n") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "restrict")
                      (("2"
                        (typepred
                         "fset_props[nat].max_fs(ns, LAMBDA (s: [nat, nat]): <(s))")
                        (("1" (propax) nil nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil)
                     ("3" (postpone) nil nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -3 "y")
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (skeep)
                          (("2" (inst -1 "n")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil nil)
  (infinite_branch-1 nil 3644273114
   ("" (skeep*)
    ((""
      (case "FORALL(a_: T | a_ < a): EXISTS(n:above(0)): FORALL(b): NOT gt_n(<)(n)(a_, b)")
      (("1" (hide 1)
        (("1" (typepred "<")
          (("1" (expand "finite_branching?")
            (("1" (inst -1 "a")
              (("1"
                (name "ns"
                      "{n:above(0)| EXISTS(y:T|y<a): min({n_:nat|FORALL (b): NOT gt_n(<)(n_)(y, b)}) = n}")
                (("1" (case "is_finite(ns)")
                  (("1" (name "max_ns" "fset_props[nat].max_fs(ns,<)")
                    (("1"
                      (case "FORALL(a_:T | a_ < a): FORALL(b): NOT gt_n(<)(max_ns)(a_, b)")
                      (("1" (inst -6 "max_ns+1")
                        (("1" (skolem -6 "b_max")
                          (("1" (expand "gt_n" -6)
                            (("1" (case "max_ns > 0")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -7 "x_a")
                                  (("1"
                                    (inst -2 "x_a")
                                    (("1"
                                      (inst -2 "b_max")
                                      (("1" (flatten) nil nil))
                                      nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -5 -6 -7 -1)
                                (("2"
                                  (typepred "max_ns")
                                  (("2"
                                    (assert)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skolem 1 "a_i")
                        (("2" (typepred "max_ns")
                          (("2" (expand "restrict")
                            (("2"
                              (name "min_n_i"
                                    "min({n: above(0) | FORALL (b): NOT gt_n(<)(n)(a_i, b)})")
                              (("1"
                                (inst -3 "min_n_i")
                                (("1"
                                  (case "min_n_i = max_ns")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "min_n_i")
                                      (("2"
                                        (hide-all-but (-2 2 -6))
                                        (("2"
                                          (lemma "gt_n_extension")
                                          (("2"
                                            (inst
                                             -1
                                             "a_i"
                                             "<"
                                             "min_n_i"
                                             "max_ns")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep -1)
                                                (("1"
                                                  (inst? -2)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep 2)
                                                (("2"
                                                  (inst? 1)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 -1))
                                  (("2"
                                    (expand "ns")
                                    (("2"
                                      (inst 1 "a_i")
                                      (("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -3 "y")
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (skeep)
                          (("2" (inst -1 "n")
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (seq_gt_TCC1 0
  (seq_gt_TCC1-1 nil 3644269319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil wfm nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_branching? const-decl "bool" wfm nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gt_n inductive-decl "bool" wfm nil))
   nil))
 (seq_gt_TCC2 0
  (seq_gt_TCC2-1 nil 3644269319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil wfm nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_branching? const-decl "bool" wfm nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gt_n inductive-decl "bool" wfm nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (seq_gt_TCC3 0
  (seq_gt_TCC3-1 nil 3644269319 ("" (termination-tcc) nil nil) nil
   nil))
 (seq_gt_TCC4 0
  (seq_gt_TCC4-1 nil 3644269319
   ("" (skeep*)
    (("" (use "epsilon_ax[T]")
      (("1" (split -1)
        (("1" (flatten) (("1" (inst -2 "n_1") nil nil)) nil)
         ("2" (hide 3)
          (("2" (lemma "infinite_branch")
            (("2" (inst -1 "v(a)(lt!1)(n - 1)" "lt!1")
              (("1" (typepred "v(a)(lt!1)(n - 1)")
                (("1" (propax) nil nil) ("2" (assert) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((epsilon_ax formula-decl nil epsilons nil)
    (T formal-type-decl nil wfm nil) (< const-decl "bool" reals nil)
    (gt_n inductive-decl "bool" wfm nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (finite_branching? const-decl "bool" wfm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "nat" wfm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a skolem-const-decl "T" wfm nil)
    (lt!1 skolem-const-decl "{lt: (finite_branching?) |
         FORALL (n: above(0)): EXISTS (b): gt_n(lt)(n)(a, b)}" wfm nil)
    (v skolem-const-decl "[a1: T ->
   [lt1:
      {lt: (finite_branching?) |
               FORALL (n: above(0)): EXISTS (b): gt_n(lt)(n)(a1, b)} ->
      [{z: nat | z < n} ->
         {b: T |
                  FORALL (n: above(0)):
                    EXISTS (b_: T): gt_n(lt1)(n)(b, b_)}]]]" wfm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (infinite_branch formula-decl nil wfm nil))
   nil))
 (seq_gt_dec 0
  (seq_gt_dec-2 nil 3644323938
   ("" (skeep*)
    (("" (expand "seq_gt" 1 1)
      (("" (use "epsilon_ax[T]")
        (("" (split -1)
          (("1" (flatten) nil nil)
           ("2" (hide 2)
            (("2" (lemma "infinite_branch")
              (("2" (inst -1 "seq_gt(a)(lt!1)(n)" "lt!1")
                (("2" (typepred "seq_gt(a)(lt!1)(n)")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq_gt def-decl
     "{b: T | FORALL (n: above(0)): EXISTS (b_: T): gt_n(lt)(n)(b, b_)}"
     wfm nil)
    (infinite_branch formula-decl nil wfm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (a skolem-const-decl "T" wfm nil)
    (lt!1 skolem-const-decl "{lt: (finite_branching?) |
         FORALL (n: above(0)): EXISTS (b): gt_n(lt)(n)(a, b)}" wfm nil)
    (n skolem-const-decl "nat" wfm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_branching? const-decl "bool" wfm nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gt_n inductive-decl "bool" wfm nil)
    (T formal-type-decl nil wfm nil)
    (epsilon_ax formula-decl nil epsilons nil))
   nil)
  (seq_gt_dec-1 nil 3644270231
   ("" (skeep*)
    (("" (expand "seq_gt" 1 1)
      (("" (use "epsilon_ax[T]")
        (("" (split -1)
          (("1" (flatten) nil nil)
           ("2" (hide 2)
            (("2" (lemma "infinite_branch")
              (("2" (inst -1 "seq_gt(a)(<)(n)" "<")
                (("2" (typepred "seq_gt(a)(<)(n)")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq_gt def-decl
     "{b: T | FORALL (n: above(0)): EXISTS (b_: T): gt_n(lt)(n)(b, b_)}"
     wfm nil)
    (infinite_branch formula-decl nil wfm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_branching? const-decl "bool" wfm nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gt_n inductive-decl "bool" wfm nil)
    (T formal-type-decl nil wfm nil)
    (epsilon_ax formula-decl nil epsilons nil))
   shostak))
 (bottom 0
  (seq_gt "" 3644269995
   ("" (skeep)
    (("" (case "(FORALL (n:above(0)): EXISTS (b): gt_n(lt)(n)(a, b))")
      (("1" (hide 1)
        (("1" (typepred "lt")
          (("1" (use "no_infinite_descending_sequence")
            (("1" (assert)
              (("1" (hide -2)
                (("1" (expand "empty?")
                  (("1" (expand "member")
                    (("1" (expand "descending?")
                      (("1" (inst -1 "seq_gt(a)(lt)")
                        (("1" (skeep)
                          (("1" (use "seq_gt_dec") nil nil)) nil)
                         ("2" (split 1)
                          (("1" (hide-all-but 1)
                            (("1" (expand "finite_branching?")
                              (("1"
                                (use "lt_no_desc_inf_branch")
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst 2 "n") (("2" (skeep) (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((lt formal-const-decl "(well_founded?[T])" wfm nil)
    (well_founded? const-decl "bool" orders nil)
    (gt_n inductive-decl "bool" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil wfm nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (descending? const-decl "bool" monotone_sequences "orders/")
    (lt_no_desc_inf_branch formula-decl nil wfm nil)
    (seq_gt_dec formula-decl nil wfm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sequence type-eq-decl nil sequences nil)
    (seq_gt def-decl
     "{b: T | FORALL (n: above(0)): EXISTS (b_: T): gt_n(lt)(n)(b, b_)}"
     wfm nil)
    (a skolem-const-decl "T" wfm nil)
    (finite_branching? const-decl "bool" wfm nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness
     "orders/"))
   shostak)
  (bottom-2 nil 3643647842
   ("" (skeep)
    (("" (case "(FORALL (n:above(0)): EXISTS (b): gt_n(n)(a, b))")
      (("1" (hide 1)
        (("1" (use "lt__wf")
          (("1" (replace -2 -1)
            (("1" (use "no_infinite_descending_sequence")
              (("1" (assert)
                (("1" (hide -2)
                  (("1" (expand "empty?")
                    (("1" (expand "member")
                      (("1" (expand "descending?")
                        (("1"
                          (inst -1
                           "LAMBDA(n:nat): epsilon({b_:T | (EXISTS(m:nat):gt_n(m)(a,b_)) AND level_(a)(b_)=n+1})")
                          (("1" (skolem 1 "n")
                            (("1" (assert)
                              (("1"
                                (use "epsilon_ax[T]")
                                (("1"
                                  (split -1)
                                  (("1"
                                    (name-replace
                                     "e2"
                                     "epsilon({b_: T |
                                   (EXISTS (m: nat): gt_n(m)(a, b_)) AND
                                    level_(a)(b_) = 2 + n})")
                                    (("1"
                                      (use "epsilon_ax[T]")
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (name-replace
                                           "e1"
                                           "epsilon({b_: T |
                                         (EXISTS (m: nat): gt_n(m)(a, b_)) AND
                                          level_(a)(b_) = 1 + n})")
                                          (("1"
                                            (expand "lt_")
                                            (("1"
                                              (split 1)
                                              (("1" (flatten) nil nil)
                                               ("2" (flatten) nil nil)
                                               ("3"
                                                (flatten)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "each_level")
                                          (("2"
                                            (replace -3 -1)
                                            (("2"
                                              (inst -1 "1+n")
                                              (("2"
                                                (skeep -1)
                                                (("2"
                                                  (inst 1 "b")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "each_level")
                                    (("2"
                                      (replace -2 -1)
                                      (("2"
                                        (inst -1 "2+n")
                                        (("2"
                                          (skeep -1)
                                          (("2"
                                            (inst 1 "b")
                                            (("2"
                                              (assert)
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst 2 "n") (("2" (skeep) (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_n inductive-decl "bool" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil) (T formal-type-decl nil wfm nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness
     "orders/")
    (pred type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sequence type-eq-decl nil sequences nil)
    (epsilon const-decl "T" epsilons nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (descending? const-decl "bool" monotone_sequences "orders/")
    (empty? const-decl "bool" sets nil))
   nil)
  (bottom-1 nil 3643647818 ("" (postpone) nil nil) nil shostak))
 (Omega_TCC1 0
  (Omega_TCC1-1 nil 3643402145
   ("" (skeep)
    (("" (use "bottom")
      (("" (expand "nonempty?")
        (("" (expand "empty?")
          (("" (expand "member")
            (("" (skeep) (("" (inst -2 "n") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bottom formula-decl nil wfm nil) (T formal-type-decl nil wfm nil)
    (empty? const-decl "bool" sets nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (omega_prev_TCC1 0
  (omega_prev_TCC1-1 nil 3647254163 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (T formal-type-decl nil wfm nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Omega const-decl "nat" wfm nil))
   nil))
 (omega_prev 0
  (omega_prev-1 nil 3647254474
   ("" (skeep :preds? t)
    (("" (expand "Omega")
      ((""
        (typepred
         "min({n: above(0) | FORALL (b): NOT gt_n(lt)(n)(y, b)})")
        (("1"
          (inst -3
           "min({n: above(0) | FORALL (b): NOT gt_n(lt)(n)(y, b)}) - 1")
          (("1" (assert)
            (("1" (skeep 1) (("1" (inst 1 "b_1") nil nil)) nil)) nil)
           ("2" (assert) nil nil)
           ("3" (use "bottom")
            (("3" (hide 2)
              (("3" (expand "nonempty?")
                (("3" (expand "empty?")
                  (("3" (expand "member") (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "bottom")
          (("2" (hide 2)
            (("2" (expand "nonempty?")
              (("2" (expand "empty?")
                (("2" (expand "member")
                  (("2" (skeep -1) (("2" (inst -2 "n") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Omega const-decl "nat" wfm nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (y skolem-const-decl "{y: T | Omega(y) > 1}" wfm nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (bottom formula-decl nil wfm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (T formal-type-decl nil wfm nil)
    (pred type-eq-decl nil defined_types nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (gt_n inductive-decl "bool" wfm nil)
    (well_founded? const-decl "bool" orders nil)
    (lt formal-const-decl "(well_founded?[T])" wfm nil))
   shostak))
 (gt_n_omega 0
  (gt_n_omega-1 nil 3647196281
   ("" (skeep :preds? t)
    (("" (use "omega_prev")
      (("" (case "n=Omega(y)-1")
        (("1" (replaces -1) nil nil)
         ("2" (skeep)
          (("2" (lemma "gt_n_extension")
            (("2" (inst -1 "y" "lt" "n" "Omega(y)-1")
              (("2" (assert)
                (("2" (split -1)
                  (("1" (propax) nil nil) ("2" (inst 1 "z") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((omega_prev formula-decl nil wfm nil)
    (above nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (Omega const-decl "nat" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil wfm nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt formal-const-decl "(well_founded?[T])" wfm nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_n_extension formula-decl nil wfm nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (omega_increasing 0
  (omega_increasing-1 nil 3647191866
   ("" (skeep :preds? t)
    (("" (case "Omega(y) >= Omega(x)")
      (("1" (hide 1)
        (("1" (case "EXISTS(d:nat): Omega(y) = Omega(x) + d")
          (("1" (skeep)
            (("1" (lemma "gt_n_omega")
              (("1" (inst -1 "Omega(y) - d -1" "y")
                (("1" (skeep)
                  (("1" (replaces -2)
                    (("1" (assert)
                      (("1" (case "gt_n(lt)(Omega(x))(x, z)")
                        (("1" (hide-all-but -1)
                          (("1" (expand "Omega")
                            (("1"
                              (typepred
                               "min({n: above(0) | FORALL (b): NOT gt_n(lt)(n)(x, b)})")
                              (("1" (grind) nil nil)
                               ("2"
                                (hide -1)
                                (("2"
                                  (use " bottom")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "nonempty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (inst -2 "n")
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "gt_n" 1)
                          (("2" (flatten)
                            (("2" (split 1)
                              (("1" (grind) nil nil)
                               ("2"
                                (split 2)
                                (("1"
                                  (case "Omega(x)=1")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "gt_n")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (inst 1 "y")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (assert)
                    (("2" (hide -1)
                      (("2" (case "Omega(x) = 1")
                        (("1" (expand "Omega")
                          (("1" (hide 1)
                            (("1"
                              (typepred
                               "min({n: above(0) | FORALL (b): NOT gt_n(lt)(n)(x, b)})")
                              (("1"
                                (replaces -4)
                                (("1"
                                  (expand "gt_n")
                                  (("1" (inst? -2) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (use "bottom")
                                (("2"
                                  (expand "nonempty?")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (skeep -1)
                                        (("2" (inst -2 "n") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "Omega(y)-Omega(x)")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((lt formal-const-decl "(well_founded?[T])" wfm nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (Omega const-decl "nat" wfm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T formal-type-decl nil wfm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gt_n_omega formula-decl nil wfm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (bottom formula-decl nil wfm nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (gt_n inductive-decl "bool" wfm nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (d skolem-const-decl "nat" wfm nil)
    (y skolem-const-decl "{y: T | lt(y, x)}" wfm nil)
    (x skolem-const-decl "T" wfm nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak)))

