%***********************************************************************************%
%  This theory proves that PVS0 is expressive enough: for any PVS0 functions there  %
%  exists another PVS0 function that corresponds to their composition, and for any  %
%  PVS0 function there exists a PVS0 function that corresponds to its minimization. %
%  The latter means that for f : PVS0 and any value v : T, the minimization gives   %
%  the "minimum" v': T such that v' greater than or equal to v and the f(v') equals %
%  the zero element in T.                                                           %
%                                                                                   %
% Since construction of zero, successor and projection is possible, and the PVS0    %
% language includes branching instructions (ite), existence of composition and      %
% minimization imply Turing-completeness of the PVS0 language.                      %
%***********************************************************************************%

pvs0_comp[T: TYPE+]: THEORY
BEGIN
ASSUMING 

    IMPORTING sets_aux@countability, pvs0_lang[T]
    countable : ASSUMPTION EXISTS (f:[T->nat]) : bijective?(f)

    listable : ASSUMPTION EXISTS (f : [T-> (cons?[nat])]) : bijective?(f)

    to_PVS0 : ASSUMPTION
      EXISTS (f:[T->PVS0[T]]): surjective?(f)
ENDASSUMING

  T_to_nat : (bijective?[T,nat])
  nat_to_T : [nat->T] = inverse(T_to_nat)

  T_to_list : (bijective?[T,(cons?[nat])])

  T_to_PVS0 : (surjective?[T,PVS0[T]])
  
  eop1x(op: nat)(t : T) : T =
      COND
          op = 0 -> nat_to_T(T_to_nat(t)+1),
	  ELSE -> t
      ENDCOND

  eop2(op : nat)(t1, t2: T): T =
      COND
          op=0 -> nat_to_T(T_to_nat(t1)+T_to_nat(t2)),
          op=1 -> nat_to_T(T_to_nat(t1)*T_to_nat(t2)),
          op=2 -> IF T_to_nat(t1) <= T_to_nat(t2) THEN
	   	      nat_to_T(1)
    	          ELSE nat_to_T(0) ENDIF,
          op=3 -> nat_to_T(nth(T_to_list(t1), rem(length(T_to_list(t1)))(T_to_nat(t2)))),
	  ELSE -> t1
      ENDCOND

  minimizator(g:PVS0,i,t: T): INDUCTIVE bool =
    IF semantic_rel(g,i,nat_to_T(0)) THEN i = t ELSE
      minimizator(g, nat_to_T(T_to_nat(i)+1),t)
    ENDIF
     
  eop2x_bool(op : nat)(t1, t2: T)(t3: T):  bool =
        COND
    	    op=0 -> IF NOT EXISTS(t: T): semantic_rel(T_to_PVS0(t1), t2, t) THEN t3 = nat_to_T(1)
	    	    ELSE semantic_rel(T_to_PVS0(t1), t2, t3) ENDIF,
            op=1 -> IF EXISTS(t :T): minimizator(T_to_PVS0(t1),t2,t) THEN
		    minimizator(T_to_PVS0(t1),t2,t3) ELSE
		    t3 = nat_to_T(0) ENDIF,
	    op=2 -> IF EXISTS(t :T): minimizator(T_to_PVS0(t1),t2,t) THEN
		    t3 = nat_to_T(1) ELSE t3 = nat_to_T(0) ENDIF,
	    op=3 -> IF EXISTS(t: T): semantic_rel(T_to_PVS0(t1), t2, t) THEN t3 = nat_to_T(1)
	    	    ELSE t3 = nat_to_T(0) ENDIF,
    	    ELSE -> eop2(op-4)(t1,t2) = t3
	ENDCOND

  eop2x(op : nat)(t1, t2 : T) : T = choose({t : T| eop2x_bool(op)(t1,t2)(t)})

  PVS0X: TYPE = {f: PVS0 | f`1=nat_to_T(1) AND f`2 = eop1x AND f`3 = eop2x}

  PVS0_to_T(p: PVS0): T = choose({t: T | p = T_to_PVS0(t)})

% This is the PVS0 expression for composition of PVS0 functions f and g.
  pvs0_sim(f,g: PVS0) : PVS0= (nat_to_T(0), eop1x, eop2x, 
     ite(op2(3,cnst(PVS0_to_T(g)),vr),
	ite(op2(3,cnst(PVS0_to_T(f)),op2(0,cnst(PVS0_to_T(g)),vr)),
		op2(0,cnst(PVS0_to_T(f)),op2(0,cnst(PVS0_to_T(g)),vr)),
		rec(vr)),
	rec(vr))
     )

  T_to_PVS0_to_T: LEMMA
    FORALL(f: PVS0): T_to_PVS0(PVS0_to_T(f))=f

% This is the main lemma for the construction of composition: indeed
% pvs0_sim(f,g) corresponds to the composition of any PVS0 functions
% f and g.

  composition :LEMMA
     FORALL(f ,g: PVS0, t, v: T): semantic_rel(pvs0_sim(f,g),t,v) IFF
     EXISTS(w : T): semantic_rel(g,t,w) AND semantic_rel(f,w,v)

% This is the PVS0 expression for minimization 
  min(f : PVS0): PVS0 =
    (nat_to_T(0),eop1x,eop2x,ite(op2(2,cnst(PVS0_to_T(f)),vr),op2(1,cnst(PVS0_to_T(f)),vr),rec(vr)))
     exists_min(f: PVS0): PVS0 = (nat_to_T(0),eop1x,eop2x,op2(2,cnst(PVS0_to_T(f)),vr))

     
  minimizator_is_min: LEMMA
     FORALL(g : PVS0,i,t : T): minimizator(g,i,t) => semantic_rel(g,t,nat_to_T(0))

  minimizator_is_min2: LEMMA
     FORALL(g : PVS0,i,t : T): minimizator(g,i,t) =>
     FORALL(h: T):  T_to_nat(i) <= T_to_nat(h) AND T_to_nat(h) < T_to_nat(t) => NOT semantic_rel(g,h,nat_to_T(0)) 
     
% This is the main lemma for minimization. It states soundness and completeness of
% the PVS0 min construction:  for any f : PVS0, min(f) : PVS0 is such that for all
% i : T, min(f)(i) equals the minimum value t : T such that t >= i and f(t) = 0. 
     
  minimization: LEMMA
     FORALL(f : PVS0,i :T ,t : T):
     semantic_rel(exists_min(f),i,nat_to_T(1)) AND semantic_rel(min(f),i,t) =>
       (semantic_rel(f,t,nat_to_T(0)) AND
     FORALL(h: T):  T_to_nat(i) <= T_to_nat(h) AND T_to_nat(h) < T_to_nat(t) =>
       NOT semantic_rel(f,h,nat_to_T(0)) )
     
END pvs0_comp
