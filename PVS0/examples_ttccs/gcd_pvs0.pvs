gcd_pvs0 : THEORY
BEGIN
% ------------------------------------------------------------------------------ 
% Definition of function in PVS0 
%
  T : TYPE = [nat,nat]

  IMPORTING PVS0@pvs0_lang[T]

  ebool(m,n:nat) : bool = m /= 0

  boole(b:bool) : Val = (IF NOT b THEN 0 ELSE 1 ENDIF,0)

  eop1(op:nat)(m,n:nat) : Val = 
    COND op = 0 -> boole(m=0 OR n=0),
         op = 1 -> boole(n >= m),
         op = 2 -> (m+n, 0),
	 op = 3 -> IF n >= m THEN (m,n-m) ELSE (m,n) ENDIF,
         op = 4 -> (n,m),    
	 ELSE -> (m, n)
    ENDCOND

  eop2(op : nat)(v1,v2:Val) : Val = v1
  % Interpretation:
  %   vr        : (m,n)
  %   bool(m,n) : m /= 0
  %   op1 0     : (m,n) -> bool(m=0 OR n = 0)
  %   op1 1     : (m,n) -> bool(m >= n)
  %   op1 2     : (m,n) -> (m,n-m) or (n,m)
  %   op1 3     : (m,n) -> (m+n,0)

  pvs0_gcd : Def = def(ite(op1(0,vr),
                            op1(2,vr),
                            ite(op1(1,vr),
                                rec(op1(3,vr)),
                                rec(op1(4,vr)))))

% ------------------------------------------------------------------------------ 
% Proof of termination via pvs0_tccs
%    

  MT : TYPE = ordinal
  R  : MACRO PRED[[MT,MT]] = ordinals.<

  IMPORTING PVS0@measure_termination
  	    [ T  % Base type
	    , MT % Measure type
	    , R  % Measure relation
	    ] 

  IMPORTING pvs0_to_dg[T]

  % This judgement states that there exist a measure and a relation that can be used to
  % prove that measure termination
  pvs0_gcd_tcc_termination: JUDGEMENT
    pvs0_gcd HAS_TYPE (pvs0_tcc_termination(ebool,eop1,eop2))

% ------------------------------------------------------------------------------ 
% Definition of an arbitrary measure fulfilling measure termination
%
  gcd_wfm  : (pvs0_tcc_termination_pred(ebool,eop1,eop2)(pvs0_gcd))

% ------------------------------------------------------------------------------ 
% Definition of a PVS0 function that is extentionally equal to PVS function

  gcd_pvs0(m,n:nat): nat = Omega_eval(ebool,eop1,eop2)(pvs0_gcd)(m,n)`1

  gcd_pvs0_m_n : LEMMA
    FORALL (m:nat,n:nat): gcd_pvs0(m,n) = 
      IF m = 0 OR n = 0 THEN m+n
      ELSIF n >= m THEN gcd_pvs0(m,n-m)
      ELSE gcd_pvs0(n,m)
      ENDIF

END gcd_pvs0
