ack_pvs0 : THEORY
BEGIN
% ------------------------------------------------------------------------------ 
% Definition of function in PVS0 
%
  T : TYPE = [nat,nat]

  IMPORTING PVS0@pvs0_lang[T]

  ebool(m,n:nat) : bool = m /= 0

  boole(b:bool) : Val = (IF NOT b THEN 0 ELSE 1 ENDIF,0)

  eop1(op:nat)(m,n:nat) : Val = 
    COND op = 0 -> boole(m=0),
         op = 1 -> boole(n=0),
         op = 2 -> (n+1,0),
         op = 3 -> IF m /= 0 THEN (m-1,1) ELSE (m,n) ENDIF,
	 op = 4 -> IF n /= 0 THEN (m,n-1) ELSE (m,n) ENDIF,
         ELSE -> (m,n)
    ENDCOND

  eop2(op:nat)(v1,v2:Val) : Val = 
    IF v1`1 > 0 THEN (v1`1-1,v2`1) ELSE v1 ENDIF

  % Interpretation:
  %   vr        : (m,n)
  %   bool(m,n) : m /= 0
  %   op1 0     : (m,n) -> bool(m=0)
  %   op1 1     : (m,n) -> bool(n=0)
  %   op1 2     : (m,n) -> (n+1,0)
  %   op1 3     : (m,n) -> (m-1,1)
  %   op1 4     : (m,n) -> (m,n-1)
  %   op2 0     : (m1,n1),(m2,n2) -> (m1-1,m2)

  pvs0_ack : PVS0 = (ebool,eop1,eop2,
                     ite(op1(0,vr),
                         op1(2,vr),
                         ite(op1(1,vr),
                             rec(op1(3,vr)),
                             rec(op2(0,vr,rec(op1(4,vr)))))))

% ------------------------------------------------------------------------------ 
% Proof of termination via pvs0_tccs
%    

  MT : TYPE = ordinal
  R  : MACRO PRED[[MT,MT]] = ordinals.<

  IMPORTING PVS0@measure_termination
  	    [ T  % Base type
	    , MT % Measure type
	    , R  % Measure relation
	    ] 

  % This judgement states that there exist a measure and a relation that can be used to
  % prove that measure termination
  pvs0_ack_tcc_termination: JUDGEMENT
    pvs0_ack HAS_TYPE (pvs0_tcc_termination)

% ------------------------------------------------------------------------------ 
% Definition of an arbitrary measure fulfilling measure termination
%
  ack_wfm  : (pvs0_tcc_termination_pred(pvs0_ack))

% ------------------------------------------------------------------------------ 
% Definition of a PVS0 function that is extentionally equal to PVS function

  ack_pvs0(m,n:nat): nat = Omega_eval(pvs0_ack)(m,n)`1

  ack_pvs0_m_n : LEMMA
    FORALL (m:nat,n:nat): ack_pvs0(m,n) = 
      IF m = 0 THEN n+1
      ELSIF n = 0 THEN ack_pvs0(m-1,1)
      ELSE ack_pvs0(m-1,ack_pvs0(m,n-1))
      ENDIF

END ack_pvs0
