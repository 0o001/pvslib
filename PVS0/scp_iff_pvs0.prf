(scp_iff_pvs0
 (R_wf 0
  (R_wf-1 nil 3665254532
   ("" (skeep)
    (("" (expand "scp_termination_pvs0")
      (("" (expand "scp_termination?")
        (("" (use "no_infinite_descending_sequence")
          (("" (assert)
            (("" (hide 2)
              (("" (expand "empty?")
                (("" (skolem 1 "vals")
                  (("" (expand "member")
                    (("" (expand "descending?")
                      (("" (expand "R")
                        ((""
                          (name "ccs_seq"
                                "LAMBDA(i: nat): epsilon({cc: (cc_of_pvs0(pvs0`4)) |
                                             eval_conds
                                                       (pvs0, cc`conds, vals(i))
                                              AND
                                              semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)
                                                               (cc`actuals, pvs0`4,
                                                                vals(i),
                                                                vals(1 + i))})")
                          (("1" (inst -3 "ccs_seq" "vals")
                            (("1" (expand "infinite_seq_ccs")
                              (("1"
                                (skeep)
                                (("1"
                                  (replaces -1 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "epsilon_ax[(cc_of_pvs0(pvs0`4))]")
                                      (("1"
                                        (inst -2 "i")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -1 "0")
                            (("2" (skeep) (("2" (inst 1 "cc") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness
     "orders/")
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (R const-decl "bool" scp_iff_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (descending? const-decl "bool" monotone_sequences "orders/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (sequence type-eq-decl nil sequences nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (epsilon const-decl "T" epsilons nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (epsilon_ax formula-decl nil epsilons nil)
    (Seq_val type-eq-decl nil cc_def "CCG/")
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (scp_termination? const-decl "bool" scp "CCG/"))
   nil)
  (R_wf-3 nil 3653154721
   ("" (skeep)
    (("" (expand "scp_termination_pvs0")
      (("" (expand "scp_termination?")
        (("" (use "no_infinite_descending_sequence")
          (("" (assert)
            (("" (hide 2)
              (("" (expand "empty?")
                (("" (skolem 1 "vals")
                  (("" (expand "member")
                    (("" (expand "descending?")
                      (("" (expand "R")
                        ((""
                          (name "ccs_seq"
                                "LAMBDA(i: nat): epsilon({cc: (cc_of_pvs0(def)) |
                               eval_conds(false_val, eval_op1, eval_op2)
                                         (def, cc`conds, LAMBDA (v: (vr?)): vals(i))
                                AND
                                semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                 (cc`actuals, def,
                                                  LAMBDA (v: (vr?)): vals(i),
                                                  vals(1 + i))})")
                          (("1" (inst -3 "ccs_seq" "vals")
                            (("1" (expand "infinite_seq_ccs")
                              (("1"
                                (skeep)
                                (("1"
                                  (replaces -1 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "epsilon_ax[(cc_of_pvs0(def))]")
                                      (("1"
                                        (inst -2 "i")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -1 "0")
                            (("2" (skeep) (("2" (inst 1 "cc") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_infinite_descending_sequence formula-decl nil well_foundedness
     "orders/")
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (descending? const-decl "bool" monotone_sequences "orders/")
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (Seq_val type-eq-decl nil cc_def "CCG/")
    (scp_termination? const-decl "bool" scp "CCG/"))
   nil))
 (R_no_desc_inf_branch 0
  (R_no_desc_inf_branch-5 nil 3665254648
   ("" (skeep)
    (("" (case "empty?({y: Val | R(pvs0)(y, x)})")
      (("1" (use "finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil nil))
          nil))
        nil)
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_dg_vertices_l(pvs0`4))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs" "LAMBDA(y:Val | R(pvs0)(y, x)):
                                                          epsilon({n:below(n_ccs) |
                                                 	     LET cc = nth[CallingContext](pvs0_to_dg_vertices_l(pvs0`4), n)
                                                 	     IN semantic_rel_expr(pvs0`1,pvs0`2,pvs0`3)
                                                                                  (cc`actuals, pvs0`4, x, y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
           semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)
                            (nth[CallingContext]
                                 (pvs0_to_dg_vertices_l(pvs0`4),
                                  n)`actuals,
                             pvs0`4, x, x1)})" "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
           semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)
                            (nth[CallingContext]
                                 (pvs0_to_dg_vertices_l(pvs0`4),
                                  n)`actuals,
                             pvs0`4, x, x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth[CallingContext](pvs0_to_dg_vertices_l(pvs0`4), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness"
                                           :subst
                                           ("def" "pvs0`4"))
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(pvs0`4),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_dg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_dg_vertices_l(pvs0`4))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use
                                   "cc_of_pvs0_completeness"
                                   :subst
                                   ("def" "pvs0`4"))
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(pvs0`4),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_dg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(pvs0`4))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) nil nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_dg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(pvs0`4))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R const-decl "bool" scp_iff_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" set_as_list
     "structures/")
    (finite_emptyset name-judgement "finite_set[T]" set_as_list_props
     "structures/")
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (pvs0 skolem-const-decl "PVS0[T]" scp_iff_pvs0 nil)
    (x skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (n_ccs skolem-const-decl "nat" scp_iff_pvs0 nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (nth def-decl "T" list_props nil)
    (i skolem-const-decl "below(length(pvs0_to_dg_vertices_l(pvs0`4)))"
     scp_iff_pvs0 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cc_of_pvs0_completeness formula-decl nil pvs0_to_dg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "below(length(pvs0_to_dg_vertices_l(pvs0`4)))"
     scp_iff_pvs0 nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (deterministic_expr formula-decl nil pvs0_expr nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil)
    (member_null formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (length def-decl "nat" list_props nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil))
   nil)
  (R_no_desc_inf_branch-4 nil 3653155315
   ("" (skeep)
    (("" (case "empty?({y: Val | R(def)(y, x)})")
      (("1" (use "finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil nil))
          nil))
        nil)
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_dg_vertices_l(def))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs" "LAMBDA(y:Val | R(def)(y, x)):
                                              epsilon({n:below(n_ccs) |
                                     	     LET cc = nth[CallingContext](pvs0_to_dg_vertices_l(def), n)
                                     	     IN semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                                      (cc`actuals, def, val2env(x), y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
           semantic_rel_expr(false_val, eval_op1, eval_op2)
                            (nth[CallingContext]
                                 (pvs0_to_dg_vertices_l(def), n)`actuals,
                             def, LAMBDA (v: (vr?)): x, x1)})"
                            "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
           semantic_rel_expr(false_val, eval_op1, eval_op2)
                            (nth[CallingContext]
                                 (pvs0_to_dg_vertices_l(def), n)`actuals,
                             def, LAMBDA (v: (vr?)): x, x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth[CallingContext](pvs0_to_dg_vertices_l(def), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness")
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(def),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_dg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "cc_of_pvs0_completeness")
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(def),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_dg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) nil nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_dg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (finite_emptyset name-judgement "finite_set[T]" set_as_list
     "structures/")
    (finite_emptyset name-judgement "finite_set[T]" set_as_list_props
     "structures/")
    (Val type-eq-decl nil pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (cc_of_pvs0_completeness formula-decl nil pvs0_to_dg nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (deterministic_expr formula-decl nil pvs0_expr nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil))
   nil)
  (R_no_desc_inf_branch-3 nil 3653154990
   ("" (skeep)
    (("" (case "empty?({y: Val[T] | R(def)(y, x)})")
      (("1" (use " finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil)))))
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_dg_vertices_l(def))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs" "LAMBDA(y:Val | R(def)(y, x)):
                                        epsilon({n:below(n_ccs) |
                               	     LET cc = nth[CallingContext](pvs0_to_dg_vertices_l(def), n)
                               	     IN semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                                (cc`actuals, def, val2env(x), y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
                                         semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                          (nth[CallingContext]
                                                               (pvs0_to_dg_vertices_l(def), n)`actuals,
                                                           def, LAMBDA (v: (vr?[Val[T]])): x,
                                                           x1)})"
                            "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
                                                 semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                                  (nth[CallingContext]
                                                                       (pvs0_to_dg_vertices_l(def), n)`actuals,
                                                                   def, LAMBDA (v: (vr?[Val[T]])): x,
                                                                   x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth(pvs0_to_dg_vertices_l(def), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              nil)))))))))))))
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness")
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(def),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1" (assert) nil)))))
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil)))))))))
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_dg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil)))))))))))))))))))
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil)))))))))))
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "cc_of_pvs0_completeness")
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(def),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil)))))
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_dg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))))
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3"
                                          (propax)
                                          nil)))))))))))))))))))
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil)))))))
                     ("2" (propax) nil)))))))
               ("2" (skeep) nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil)))))))))
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_dg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2"
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (R_no_desc_inf_branch-2 nil 3653154863
   ("" (skeep)
    (("" (case "empty?({y: Val[T] | R(def)(y, x)})")
      (("1" (use " finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil)))))
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_ccg_vertices_l(def))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs" "LAMBDA(y:Val | R(def)(y, x)):
                                  epsilon({n:below(n_ccs) |
                         	     LET cc = nth[CallingContext](pvs0_to_ccg_vertices_l(def), n)
                         	     IN semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                          (cc`actuals, def, val2env(x), y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
                          semantic_rel_expr(false_val, eval_op1, eval_op2)
                                           (nth[CallingContext]
                                                (pvs0_to_ccg_vertices_l(def), n)`actuals,
                                            def, LAMBDA (v: (vr?[Val[T]])): x,
                                            x1)})" "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
                              semantic_rel_expr(false_val, eval_op1, eval_op2)
                                               (nth[CallingContext]
                                                    (pvs0_to_ccg_vertices_l(def), n)`actuals,
                                                def, LAMBDA (v: (vr?[Val[T]])): x,
                                                x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth(pvs0_to_ccg_vertices_l(def), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              nil)))))))))))))
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness")
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1" (assert) nil)))))
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil)))))))))
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_ccg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil)))))))))))))))))))
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil)))))))))))
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "cc_of_pvs0_completeness")
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil)))))
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_ccg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))))
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3"
                                          (propax)
                                          nil)))))))))))))))))))
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil)))))))
                     ("2" (propax) nil)))))))
               ("2" (skeep) nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil)))))))))
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_ccg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2"
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (R_no_desc_inf_branch-1 nil 3647272140
   ("" (skeep)
    ((""
      (case "empty?({y: Val[T] | R(false_val, eval_op1, eval_op2)(def)(y, x)})")
      (("1" (use " finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil nil))
          nil))
        nil)
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_ccg_vertices_l(def))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs"
               "LAMBDA(y:Val | R(false_val, eval_op1, eval_op2)(def)(y, x)):
                            epsilon({n:below(n_ccs) |
                   	     LET cc = nth[CallingContext](pvs0_to_ccg_vertices_l(def), n)
                   	     IN semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                    (cc`actuals, def, val2env(x), y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
           semantic_rel_expr(false_val, eval_op1, eval_op2)
                            (nth[CallingContext]
                                 (pvs0_to_ccg_vertices_l(def), n)`actuals,
                             def, LAMBDA (v: (vr?[Val[T]])): x,
                             x1)})" "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
           semantic_rel_expr(false_val, eval_op1, eval_op2)
                            (nth[CallingContext]
                                 (pvs0_to_ccg_vertices_l(def), n)`actuals,
                             def, LAMBDA (v: (vr?[Val[T]])): x,
                             x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth(pvs0_to_ccg_vertices_l(def), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness")
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_ccg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "cc_of_pvs0_completeness")
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_ccg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) nil nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_ccg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (finite_emptyset name-judgement "finite_set[T]" set_as_list
     "structures/")
    (finite_emptyset name-judgement "finite_set[T]" set_as_list_props
     "structures/")
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member_nth formula-decl nil more_list_props "structures/")
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (CallingContext type-eq-decl nil cc_def "CCG/"))
   nil))
 (IMP_lex2_generic_TCC1 0
  (IMP_lex2_generic_TCC1-1 nil 3682853981
   ("" (lemma "wf_nat") (("" (grind) nil nil)) nil)
   ((well_founded? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   nil))
 (scp_implies_pvs0_tcc_TCC1 0
  (scp_implies_pvs0_tcc_TCC1-1 nil 3682522622
   ("" (subtype-tcc) nil nil)
   ((T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (scp_termination? const-decl "bool" scp "CCG/")
    (scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil))
   nil))
 (scp_implies_pvs0_tcc 0
  (scp_implies_pvs0_tcc-1 nil 3665254734
   ("" (skeep*)
    (("" (expand "pvs0_tcc_termination")
      (("" (inst 1 "omega[Val,R(pvs0)].Omega")
        (("1" (expand "pvs0_tcc_termination_pred")
          (("1" (skeep*)
            (("1" (use "omega_increasing[Val,R(pvs0)]")
              (("1" (hide 2)
                (("1" (expand "R")
                  (("1" (expand "eval_conds")
                    (("1"
                      (inst 1
                       "(# nid := cc`path, actuals := get_arg(cc`rec_expr) , conds := cc`cnds  #)")
                      (("1" (assert) nil nil)
                       ("2" (expand "cc_of_pvs0")
                        (("2" (typepred "cc")
                          (("2" (expand "pvs0_tcc_valid_cc")
                            (("2" (flatten)
                              (("2"
                                (case
                                 "rec(get_arg(cc`rec_expr)) = cc`rec_expr")
                                (("1"
                                  (inst 1 "cc`path")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "pvs0_to_dg_vertex")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (apply-extensionality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (use "R_no_desc_inf_branch") nil nil)) nil)
               ("3" (hide 2)
                (("3" (use "R_wf") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (use "R_no_desc_inf_branch") nil nil)
         ("3" (use "R_wf") (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (omega_increasing formula-decl nil omega "orders/")
    (env skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (vact skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cc skolem-const-decl "(pvs0_tcc_valid_cc(pvs0`4))" scp_iff_pvs0
        nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PVS0Expr_rec_extensionality formula-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (R_no_desc_inf_branch formula-decl nil scp_iff_pvs0 nil)
    (R_wf formula-decl nil scp_iff_pvs0 nil)
    (Omega const-decl "nat" omega "orders/")
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (R const-decl "bool" scp_iff_pvs0 nil)
    (pvs0 skolem-const-decl "PVS0[T]" scp_iff_pvs0 nil))
   nil)
  (scp_implies_pvs0_tcc-2 nil 3653089991
   ("" (skeep*)
    (("" (expand "pvs0_tcc_termination")
      (("" (inst 1 "omega[Val,R(def)].Omega")
        (("1" (expand "pvs0_tcc_termination_pred")
          (("1" (skeep*)
            (("1" (use "omega_increasing[Val,R(def)]")
              (("1" (hide 2)
                (("1" (expand "R")
                  (("1" (expand "eval_conds")
                    (("1" (case "env = LAMBDA(v: (vr?)):env(vr)")
                      (("1" (replaces -1 :dir rl)
                        (("1"
                          (inst 1
                           "(# actuals := get_arg(cc`rec_expr) , conds := cc`cnds  #)")
                          (("1" (assert) nil nil)
                           ("2" (expand "cc_of_pvs0")
                            (("2" (typepred "cc")
                              (("2"
                                (expand "pvs0_tcc_valid_cc")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (case
                                     "rec(get_arg(cc`rec_expr)) = cc`rec_expr")
                                    (("1"
                                      (inst 1 "cc`path")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "pvs0_to_dg_vertex")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (apply-extensionality) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (use "R_no_desc_inf_branch") nil nil)) nil)
               ("3" (hide 2)
                (("3" (use "R_wf") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (use "R_no_desc_inf_branch") nil nil)
         ("3" (use "R_wf") (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (omega_increasing formula-decl nil omega "orders/")
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0Expr_rec_extensionality formula-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Omega const-decl "nat" omega "orders/")
    (WFM type-eq-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil))
   nil))
 (pvs0_tcc_implies_scp_TCC1 0
  (pvs0_tcc_implies_scp_TCC1-1 nil 3682522622
   ("" (subtype-tcc) nil nil) nil nil))
 (pvs0_tcc_implies_scp 0
  (pvs0_tcc_implies_scp-2 nil 3665254768
   ("" (skeep)
    (("" (expand "pvs0_tcc_termination")
      (("" (expand "pvs0_tcc_termination_pred")
        ((""
          (use "scp_termination[Val,PVS0Expr,Conditions,Path,[nat->(cc_of_pvs0(pvs0`4))]]")
          (("" (expand "SCP")
            ((""
              (inst -1 "semantic_relation(pvs0)"
               "eval_conditions(pvs0)")
              (("" (expand "scp_termination_pvs0")
                (("" (assert)
                  (("" (hide 2)
                    (("" (skeep)
                      (("" (expand "infinite_seq_ccs")
                        (("" (skeep -2)
                          ((""
                            (inst 1 "lt_val
                              (pvs0)(wfm)")
                            (("1" (skeep 1)
                              (("1"
                                (expand "lt_val")
                                (("1"
                                  (insteep -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (use
                                       "dg_vert_valid_cc"
                                       ("def" "pvs0`4"))
                                      (("1"
                                        (skeep -1)
                                        (("1"
                                          (insteep 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "eval_conds")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -5 "vals(i)")
                                                  (("1"
                                                    (insteep -5)
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "vals(1+i)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "lt_val_wf") nil nil)
                             ("3" (expand "restrict")
                              (("3" (use "wf_nat") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (scp_termination formula-decl nil scp "CCG/")
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (Environment type-eq-decl nil cc_def "CCG/")
    (lt_val_wf formula-decl nil pvs0_termination nil)
    (dg_vert_valid_cc formula-decl nil pvs0_to_dg nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (Seq_val type-eq-decl nil cc_def "CCG/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wfm skolem-const-decl "WFM[T, MT, LAMBDA (m, n: nat): m < n]"
     scp_iff_pvs0 nil)
    (pvs0 skolem-const-decl "PVS0[T]" scp_iff_pvs0 nil)
    (lt_val const-decl "bool" pvs0_termination nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil)
    (SCP const-decl "bool" scp "CCG/")
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil))
   nil)
  (pvs0_tcc_implies_scp-1 nil 3653167984
   ("" (skeep)
    (("" (expand "pvs0_tcc_termination")
      (("" (expand "pvs0_tcc_termination_pred")
        ((""
          (use "scp_termination[Val,PVS0Expr,Conditions,[nat->(cc_of_pvs0(def))]]")
          (("" (expand "SCP")
            ((""
              (inst -1 "semantic_relation(def)" "eval_conditions(def)")
              (("" (expand "scp_termination_pvs0")
                (("" (assert)
                  (("" (hide 2)
                    (("" (skeep)
                      (("" (expand "infinite_seq_ccs")
                        (("" (skeep -2)
                          ((""
                            (inst 1
                             "lt_val(false_val, eval_op1, eval_op2)
                        (def)(wfm)")
                            (("1" (skeep 1)
                              (("1"
                                (expand "lt_val")
                                (("1"
                                  (insteep -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (use "dg_vert_valid_cc")
                                      (("1"
                                        (skeep -1)
                                        (("1"
                                          (insteep 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "eval_conds")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -5
                                                   "LAMBDA(v:(vr?)): vals(i)")
                                                  (("1"
                                                    (insteep -5)
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "vals(1+i)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "lt_val_wf") nil nil)
                             ("3" (expand "restrict")
                              (("3" (use "wf_nat") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (scp_termination formula-decl nil scp "CCG/")
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (dg_vert_valid_cc formula-decl nil pvs0_to_dg nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (Seq_val type-eq-decl nil cc_def "CCG/")
    (WFM type-eq-decl nil measure_termination_defs nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (SCP const-decl "bool" scp "CCG/")
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil))
   nil))
 (scp_iff_pvs0_terminates 0
  (scp_iff_pvs0_terminates-1 nil 3653168447
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (use "scp_implies_pvs0_tcc")
          (("1" (assert)
            (("1" (use "pvs0_tcc_implies_terminates")
              (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (use "terminates_implies_pvs0_tcc")
          (("2" (assert)
            (("2" (use "pvs0_tcc_implies_scp") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_implies_pvs0_tcc formula-decl nil scp_iff_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (pvs0_tcc_implies_terminates formula-decl nil pvs0_termination nil)
    (terminates_implies_pvs0_tcc formula-decl nil measure_termination
     nil)
    (pvs0_tcc_implies_scp formula-decl nil scp_iff_pvs0 nil))
   nil))
 (pvs0_eval_expr_TCC1 0
  (pvs0_eval_expr_TCC1-1 nil 3682847758
   ("" (skeep)
    (("" (typepred "body")
      (("" (use "terminates_implies_pvs0_tcc") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (terminates_implies_pvs0_tcc formula-decl nil measure_termination
     nil))
   nil))
 (pvs0_eval_expr_TCC2 0
  (pvs0_eval_expr_TCC2-1 nil 3682847758
   ("" (use "lt_lex2_wf") (("" (grind) nil nil)) nil)
   ((lt_lex2 const-decl "bool" lex2_generic "orders/")
    (well_founded? const-decl "bool" orders nil)
    (lt_lex2_wf name-judgement "(well_founded?[[A, B]])" scp_iff_pvs0
     nil)
    (lt_lex2_wf name-judgement "(well_founded?[[A, B]])" lex2_generic
     "orders/")
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2_wf judgement-tcc nil lex2_generic "orders/"))
   nil))
 (pvs0_eval_expr_TCC3 0
  (pvs0_eval_expr_TCC3-1 nil 3682847758
   ("" (skeep)
    (("" (replaces -1)
      (("" (expand "semantic_rel_expr") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((semantic_rel_expr inductive-decl "bool" pvs0_expr nil)) nil))
 (pvs0_eval_expr_TCC4 0
  (pvs0_eval_expr_TCC4-1 nil 3682847758
   ("" (skeep)
    (("" (replaces -1)
      (("" (expand "semantic_rel_expr") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((semantic_rel_expr inductive-decl "bool" pvs0_expr nil)) nil))
 (pvs0_eval_expr_TCC5 0
  (pvs0_eval_expr_TCC5-1 nil 3682847758
   ("" (skeep)
    (("" (skeep)
      (("" (replaces -1)
        (("" (expand "semantic_rel_expr")
          (("" (inst 1 "v")
            ((""
              (typepred
               " v1(false_val, eval_op1, eval_op2)(arg, body, val)")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (typepred "val")
                  (("2" (skeep)
                    (("2" (inst 1 "append((:0:), path)")
                      (("1" (lemma "subterm_append")
                        (("1" (inst -1 "body" "path")
                          (("1" (assert)
                            (("1" (inst -1 "(:0:)")
                              (("1"
                                (reveal -3)
                                (("1"
                                  (split)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (replace -3 1)
                                      (("1"
                                        (replace -1 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "path_conditions_unmodified")
                                    (("2"
                                      (inst -1 "body" "path" 0)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -4 -1)
                                          (("2"
                                            (replace -2 -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "append")
                                                (("2"
                                                  (expand "append")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (reveal -3)
                                    (("2"
                                      (replace -1 1)
                                      (("2"
                                        (expand "valid_path")
                                        (("2"
                                          (grind)
                                          (("2"
                                            (rewrite "null_path")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "every")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "valid_paths_subexpr")
                        (("2" (inst -1 "body" "path")
                          (("2" (assert)
                            (("2" (inst -1 "(:0:)")
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide 2 -2)
                                  (("1"
                                    (reveal -4)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "valid_path")
                                        (("1"
                                          (grind)
                                          (("1"
                                            (rewrite "null_path")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "every")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "every")
                        (("3" (expand "every") (("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (lt_lex2 const-decl "bool" lex2_generic "orders/")
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil))
   nil))
 (pvs0_eval_expr_TCC6 0
  (pvs0_eval_expr_TCC6-1 nil 3682847758
   ("" (skeep)
    (("" (typepred "val")
      (("" (skeep)
        (("" (inst 1 "append((:0:), path)")
          (("1" (lemma "subterm_append")
            (("1" (inst -1 "body" "path")
              (("1" (assert)
                (("1" (inst -1 "(:0:)")
                  (("1" (split)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (replace -4 1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "path_conditions_unmodified")
                      (("2" (inst -1 "body" "path" 0)
                        (("2" (assert)
                          (("2" (expand "append")
                            (("2" (expand "append")
                              (("2"
                                (replace -1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replace -1 1)
                      (("2" (replace -3 1)
                        (("2" (expand "valid_path")
                          (("2" (grind)
                            (("2" (rewrite "null_path") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "every") (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "valid_paths_subexpr")
            (("2" (inst -1 "body" "path")
              (("2" (assert)
                (("2" (inst -1 "(:0:)")
                  (("1" (replace -1 1)
                    (("1" (hide 2 -2)
                      (("1" (replace -2)
                        (("1" (expand "valid_path")
                          (("1" (grind)
                            (("1" (rewrite "null_path") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "every") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "every")
            (("3" (expand "every") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_expr_TCC7 0
  (pvs0_eval_expr_TCC7-1 nil 3682847758
   ("" (skeep) (("" (expand "lt_lex2") (("" (grind) nil nil)) nil))
    nil)
   ((lt_lex2 const-decl "bool" lex2_generic "orders/")
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pvs0_eval_expr_TCC8 0
  (pvs0_eval_expr_TCC8-1 nil 3682847758
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "val")
        (("" (skeep)
          (("" (inst 1 "append((:1:), path)")
            (("1" (lemma "subterm_append")
              (("1" (inst -1 "body" "path")
                (("1" (assert)
                  (("1" (inst -1 "(:1:)")
                    (("1" (split)
                      (("1" (replace -1 1)
                        (("1" (replace -2 1)
                          (("1" (replace -4 1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "path_conditions_unmodified2")
                        (("2" (inst -1 "body" "path" 1)
                          (("2" (assert)
                            (("2" (expand "append")
                              (("2"
                                (expand "append")
                                (("2"
                                  (replace -1 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (replace -1 1)
                        (("2" (replace -3 1)
                          (("2" (expand "valid_path")
                            (("2" (prop)
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (lemma "valid_paths_subexpr")
                                (("2"
                                  (inst -1 "body" "path")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "(:1:)")
                                      (("1"
                                        (expand "append")
                                        (("1"
                                          (expand "append")
                                          (("1"
                                            (grind)
                                            (("1"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (lemma "valid_paths_subexpr")
                                (("4"
                                  (inst -1 "body" "path")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (inst -1 "(:1:)")
                                      (("1"
                                        (grind)
                                        (("1"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "every") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "valid_paths_subexpr")
              (("2" (inst -1 "body" "path")
                (("2" (assert)
                  (("2" (inst -1 "(:1:)")
                    (("1" (replace -1 1)
                      (("1" (replace -3 1)
                        (("1" (grind)
                          (("1" (rewrite "null_path") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "every") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "every")
              (("3" (expand "every") (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (path_conditions_unmodified2 formula-decl nil pvs0_props nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil))
   nil))
 (pvs0_eval_expr_TCC9 0
  (pvs0_eval_expr_TCC9-1 nil 3682847758
   ("" (skeep)
    (("" (skeep) (("" (expand "lt_lex2") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (lt_lex2 const-decl "bool" lex2_generic "orders/"))
   nil))
 (pvs0_eval_expr_TCC10 0
  (pvs0_eval_expr_TCC10-1 nil 3682847758
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "semantic_rel_expr")
          (("" (assert)
            (("" (inst 1 "v1" "v2")
              (("" (split)
                (("1" (hide -3)
                  (("1"
                    (typepred
                     " v(false_val, eval_op1, eval_op2)(arg1, body, val)")
                    (("1" (replace -3 -1 rl)
                      (("1" (replace -2 1) (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide -2 2)
                      (("2" (typepred "val")
                        (("2" (skeep)
                          (("2" (inst 1 "append((:0:), path)")
                            (("1" (lemma "subterm_append")
                              (("1"
                                (inst -1 "body" "path")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "(:0:)")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (replace -2 1)
                                        (("1"
                                          (split)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (lemma
                                             "path_conditions_unmodified")
                                            (("2"
                                              (inst -1 "body" "path" 0)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "append")
                                                  (("2"
                                                    (expand "append")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "every")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "valid_paths_subexpr")
                              (("2"
                                (inst -1 "body" "path")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "(:0:)")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide 2 -2)
                                        (("1"
                                          (replace -2 1)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "every")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "every")
                              (("3"
                                (expand "every")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2)
                  (("2"
                    (typepred
                     " v(false_val, eval_op1, eval_op2)(arg2, body, val)")
                    (("1" (replace -3 -1 rl)
                      (("1" (replace -2 1) (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide -2 2)
                      (("2" (typepred "val")
                        (("2" (skeep)
                          (("2" (inst 1 "append((:1:), path)")
                            (("1" (lemma "subterm_append")
                              (("1"
                                (inst -1 "body" "path")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "(:1:)")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (replace -2 1)
                                        (("1"
                                          (split)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (lemma
                                             "path_conditions_unmodified2")
                                            (("2"
                                              (inst -1 "body" "path" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "append")
                                                  (("2"
                                                    (expand "append")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "every")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "valid_paths_subexpr")
                              (("2"
                                (inst -1 "body" "path")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "(:1:)")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide 2 -2)
                                        (("1"
                                          (replace -2 1)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "every")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "every")
                              (("3"
                                (expand "every")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (path_conditions_unmodified2 formula-decl nil pvs0_props nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (lt_lex2 const-decl "bool" lex2_generic "orders/")
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil))
   nil))
 (pvs0_eval_expr_TCC11 0
  (pvs0_eval_expr_TCC11-1 nil 3682847758
   ("" (skeep)
    (("" (typepred "val")
      (("" (skeep)
        (("" (inst 1 "append((:0:), path)")
          (("1" (lemma "subterm_append")
            (("1" (inst -1 "body" "path")
              (("1" (assert)
                (("1" (inst -1 "(:0:)")
                  (("1" (split)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (replace -4 1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "path_conditions_unmodified")
                      (("2" (inst -1 "body" "path" 0)
                        (("2" (assert)
                          (("2" (expand "append")
                            (("2" (expand "append")
                              (("2"
                                (replace -1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replace -1 1)
                      (("2" (replace -3 1)
                        (("2" (expand "valid_path")
                          (("2" (grind)
                            (("1" (rewrite "null_path") nil nil)
                             ("2" (rewrite "null_path") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "every") (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "valid_paths_subexpr")
            (("2" (inst -1 "body" "path")
              (("2" (assert)
                (("2" (inst -1 "(:0:)")
                  (("1" (replace -1 1)
                    (("1" (hide 2 -2)
                      (("1" (replace -2)
                        (("1" (expand "valid_path")
                          (("1" (grind)
                            (("1" (rewrite "null_path") nil nil)
                             ("2" (rewrite "null_path") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "every") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "every")
            (("3" (expand "every") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_expr_TCC12 0
  (pvs0_eval_expr_TCC12-1 nil 3682847758
   ("" (skeep) (("" (expand "lt_lex2") (("" (grind) nil nil)) nil))
    nil)
   ((lt_lex2 const-decl "bool" lex2_generic "orders/")
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pvs0_eval_expr_TCC13 0
  (pvs0_eval_expr_TCC13-1 nil 3682847758
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "val")
        (("" (skeep)
          (("" (inst 2 "append((:1:), path)")
            (("1" (lemma "subterm_append")
              (("1" (inst -1 "body" "path")
                (("1" (assert)
                  (("1" (inst -1 "(:1:)")
                    (("1" (split)
                      (("1" (replace -1 1)
                        (("1" (replace -2 1)
                          (("1" (replace -4 1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "append")
                        (("2" (expand "append")
                          (("2" (use "path_conditions_cons")
                            (("2" (assert)
                              (("2"
                                (replaces -1)
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (expand "path_conds_aux")
                                    (("2"
                                      (expand "eval_conds")
                                      (("2"
                                        (expand "eval_conds_rec" 1)
                                        (("2"
                                          (split)
                                          (("1"
                                            (inst?)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (replace -1 1)
                        (("2" (replace -3 1)
                          (("2" (hide -2 2)
                            (("2" (grind)
                              (("2" (rewrite "null_path") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "every") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "valid_paths_subexpr")
              (("2" (inst -1 "body" "path")
                (("2" (assert)
                  (("2" (inst -1 "(:1:)")
                    (("1" (replace -1 1)
                      (("1" (hide 2 -2)
                        (("1" (replace -2)
                          (("1" (expand "valid_path")
                            (("1" (grind)
                              (("1" (rewrite "null_path") nil nil)
                               ("2" (rewrite "null_path") nil nil)
                               ("3" (rewrite "null_path") nil nil)
                               ("4" (rewrite "null_path") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "every") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "every")
              (("3" (expand "every") (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (path_conds_aux const-decl "PVS0Bool" pvs0_props nil)
    (path_conditions_cons formula-decl nil pvs0_props nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil))
   nil))
 (pvs0_eval_expr_TCC14 0
  (pvs0_eval_expr_TCC14-1 nil 3682847758
   ("" (skeep)
    (("" (skeep) (("" (expand "lt_lex2") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (lt_lex2 const-decl "bool" lex2_generic "orders/"))
   nil))
 (pvs0_eval_expr_TCC15 0
  (pvs0_eval_expr_TCC15-1 nil 3682847758
   ("" (skeep)
    (("" (skeep)
      (("" (expand "semantic_rel_expr")
        (("" (assert)
          (("" (inst 2 "vc")
            (("" (split)
              (("1"
                (typepred
                 "v(false_val, eval_op1, eval_op2)(cnd, body, val)")
                (("1" (replace -3 -1 rl)
                  (("1" (hide -3)
                    (("1" (replace -2 1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide -2 2)
                  (("2" (typepred "val")
                    (("2" (skeep)
                      (("2" (inst 1 "append((:0:), path)")
                        (("1" (lemma "subterm_append")
                          (("1" (inst -1 "body" "path")
                            (("1" (assert)
                              (("1"
                                (inst -1 "(:0:)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (lemma
                                         "path_conditions_unmodified")
                                        (("2"
                                          (inst -1 "body" "path" 0)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "append")
                                              (("2"
                                                (expand "append")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -2 2)
                                  (("2"
                                    (replace -1 1)
                                    (("2"
                                      (replace -2 1)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "every")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "valid_paths_subexpr")
                          (("2" (inst -1 "body" "path")
                            (("2" (assert)
                              (("2"
                                (inst -1 "(:0:)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (hide 2 -2)
                                    (("1"
                                      (replace -2 1)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "every")
                          (("3" (expand "every")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2"
                  (with-tccs
                   (name-replace "nv"
                    "v(false_val, eval_op1, eval_op2)(arg1, body, val)"))
                  (("2" (hide -2 1 3)
                    (("2" (typepred "nv")
                      (("2" (replace -2 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (lt_lex2 const-decl "bool" lex2_generic "orders/")
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil))
   nil))
 (pvs0_eval_expr_TCC16 0
  (pvs0_eval_expr_TCC16-1 nil 3682847758
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "val")
        (("" (skeep)
          (("" (inst 1 "append((:2:), path)")
            (("1" (lemma "subterm_append")
              (("1" (inst -1 "body" "path")
                (("1" (assert)
                  (("1" (inst -1 "(:2:)")
                    (("1" (split)
                      (("1" (replace -1 1)
                        (("1" (replace -2 1)
                          (("1" (replace -4 1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "path_conditions_cons")
                        (("2" (inst -1 "body" "path" 2)
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (replace -1 1)
                        (("2" (replace -3 1)
                          (("2" (expand "valid_path")
                            (("2" (auto-rewrite "null_path")
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "every") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "valid_paths_subexpr")
              (("2" (inst -1 "body" "path")
                (("2" (assert)
                  (("2" (inst -1 "(:2:)")
                    (("1" (replace -1 1)
                      (("1" (hide 2 -2)
                        (("1" (replace -2)
                          (("1" (expand "valid_path")
                            (("1" (auto-rewrite "null_path")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "every") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "every")
              (("3" (expand "every") (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (path_conds_aux const-decl "PVS0Bool" pvs0_props nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (path_conditions_cons formula-decl nil pvs0_props nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil))
   nil))
 (pvs0_eval_expr_TCC17 0
  (pvs0_eval_expr_TCC17-1 nil 3682847758 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (lt_lex2 const-decl "bool" lex2_generic "orders/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pvs0_eval_expr_TCC18 0
  (pvs0_eval_expr_TCC18-1 nil 3682853981
   ("" (skeep)
    (("" (skeep)
      (("" (expand "semantic_rel_expr")
        (("" (assert)
          (("" (inst 1 "vc")
            (("" (split)
              (("1"
                (typepred
                 "v(false_val, eval_op1, eval_op2)(cnd, body, val)")
                (("1" (replace -4 -1 :dir rl :hide? t)
                  (("1" (replace -2 1) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide -2 2)
                  (("2" (typepred "val")
                    (("2" (skeep)
                      (("2" (inst 1 "append((:0:), path)")
                        (("1" (lemma "subterm_append")
                          (("1" (inst -1 "body" "path")
                            (("1" (assert)
                              (("1"
                                (inst -1 "(:0:)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (lemma
                                         "path_conditions_unmodified")
                                        (("2"
                                          (inst -1 "body" "path" 0)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "append")
                                              (("2"
                                                (expand "append")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -2 2)
                                  (("2"
                                    (replace -1 1)
                                    (("2"
                                      (replace -2 1)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "every")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "valid_paths_subexpr")
                          (("2" (inst -1 "body" "path")
                            (("2" (assert)
                              (("2"
                                (inst -1 "(:0:)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (hide 2 -2)
                                    (("1"
                                      (replace -2 1)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "every")
                          (("3" (expand "every")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) nil nil)
               ("3" (flatten)
                (("3"
                  (with-tccs
                   (name-replace "nv"
                    "v(false_val, eval_op1, eval_op2)(arg2, body, val)"))
                  (("3" (typepred "nv")
                    (("3" (replace -3 1) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (lt_lex2 const-decl "bool" lex2_generic "orders/")
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil))
   nil))
 (pvs0_eval_expr_TCC19 0
  (pvs0_eval_expr_TCC19-1 nil 3682872225
   ("" (skeep)
    (("" (typepred "val")
      (("" (skeep)
        (("" (inst 1 "append((:0:), path)")
          (("1" (lemma "subterm_append")
            (("1" (inst -1 "body" "path")
              (("1" (assert)
                (("1" (inst -1 "(:0:)")
                  (("1" (split)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (replace -4 1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "path_conditions_unmodified")
                      (("2" (inst -1 "body" "path" 0)
                        (("2" (assert)
                          (("2" (expand "append")
                            (("2" (expand "append")
                              (("2"
                                (replace -1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replace -1 1)
                      (("2" (replace -3 1)
                        (("2" (expand "valid_path")
                          (("2" (auto-rewrite "null_path")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "every") (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "valid_paths_subexpr")
            (("2" (inst -1 "body" "path")
              (("2" (assert)
                (("2" (inst -1 "(:0:)")
                  (("1" (replace -1 1)
                    (("1" (hide 2 -2)
                      (("1" (replace -2)
                        (("1" (expand "valid_path")
                          (("1" (auto-rewrite "null_path")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "every") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "every")
            (("3" (expand "every") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_expr_TCC20 0
  (pvs0_eval_expr_TCC20-1 nil 3682872225
   ("" (skeep) (("" (expand "lt_lex2") (("" (grind) nil nil)) nil))
    nil)
   ((lt_lex2 const-decl "bool" lex2_generic "orders/")
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pvs0_eval_expr_TCC21 0
  (pvs0_eval_expr_TCC21-1 nil 3682872225
   ("" (skeep)
    (("" (skeep)
      (("" (inst 1 "(::)")
        (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil)
         ("2" (rewrite "null_path") nil nil))
        nil))
      nil))
    nil)
   ((null_path formula-decl nil pvs0_props nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil))
 (pvs0_eval_expr_TCC22 0
  (pvs0_eval_expr_TCC22-1 nil 3682872225
   ("" (skeep)
    (("" (skeep)
      (("" (expand "lt_lex2")
        (("" (flatten)
          (("" (hide 2)
            ((""
              (typepred "wfm_tcc[T, MT, LAMBDA (m, n: nat): m < n]
            (false_val, eval_op1, eval_op2, body)")
              (("" (expand "pvs0_tcc_termination_pred")
                (("" (inst -1 "val")
                  (("" (typepred "val")
                    (("" (skeep)
                      (("" (label "wfm" -3)
                        ((""
                          (with-tccs
                           (inst "wfm"
                            "(# `rec_expr:=expr, `cnds:=path_conditions(body,path), `path:=path #)"))
                          (("1"
                            (with-tccs
                             (typepred
                              "v1(false_val, eval_op1, eval_op2)(arg, body, val)"))
                            (("1" (inst -4 "v")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (replace -4 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (hide -3)
                                (("2"
                                  (typepred
                                   "v1(false_val, eval_op1, eval_op2)(arg, body, val)")
                                  (("1"
                                    (typepred "val")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "append((:0:), path)")
                                        (("1"
                                          (lemma "subterm_append")
                                          (("1"
                                            (inst -1 "body" "path")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -1 "(:0:)")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "path_conditions_unmodified")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "body"
                                                       "path"
                                                       0)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "append")
                                                          (("2"
                                                            (expand
                                                             "append")
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (replace -4 1)
                                                    (("2"
                                                      (replace -6 1)
                                                      (("2"
                                                        (expand
                                                         "valid_path")
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (rewrite
                                                             "null_path")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "every")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "valid_paths_subexpr")
                                          (("2"
                                            (inst -1 "body" "path")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -1 "(:0:)")
                                                (("1"
                                                  (replace -4 1)
                                                  (("1"
                                                    (replace -6 1)
                                                    (("1"
                                                      (hide 2 -2)
                                                      (("1"
                                                        (expand
                                                         "valid_path")
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (rewrite
                                                             "null_path")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "every")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "every")
                                          (("3"
                                            (expand "every")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (inst 1 "append((:0:), path)")
                                      (("1"
                                        (lemma "subterm_append")
                                        (("1"
                                          (inst -1 "body" "path")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -1 "(:0:)")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (replace -2 1)
                                                    (("1"
                                                      (replace -4 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "path_conditions_unmodified")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "body"
                                                     "path"
                                                     0)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "append")
                                                        (("2"
                                                          (expand
                                                           "append")
                                                          (("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (replace -3 1)
                                                    (("2"
                                                      (expand
                                                       "valid_path")
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (rewrite
                                                           "null_path")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "every")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "valid_paths_subexpr")
                                        (("2"
                                          (inst -1 "body" "path")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -1 "(:0:)")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (hide 2 -2)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (expand
                                                       "valid_path")
                                                      (("1"
                                                        (grind)
                                                        (("1"
                                                          (rewrite
                                                           "null_path")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "every")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "every")
                                        (("3"
                                          (expand "every")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "pvs0_tcc_valid_cc")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (restrict const-decl "R" restrict nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (expr skolem-const-decl "PVS0Expr[Val[T]]" scp_iff_pvs0 nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_lex2 const-decl "bool" lex2_generic "orders/"))
   nil))
 (pvs0_eval_expr_TCC23 0
  (pvs0_eval_expr_TCC23-1 nil 3682872225
   ("" (skeep)
    (("" (skeep)
      ((""
        (name-replace "nv"
         "v1(false_val, eval_op1, eval_op2)(body, body, v)")
        (("1" (expand "semantic_rel_expr")
          (("1" (assert)
            (("1" (with-tccs (typepred "nv"))
              (("1" (inst 1 "v")
                (("1" (assert)
                  (("1" (replace -2 1)
                    (("1" (typepred "v")
                      (("1" (hide -2) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (inst 1 "(::)")
            (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
              nil)
             ("2" (rewrite "null_path") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_path formula-decl nil pvs0_props nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (lt_lex2 const-decl "bool" lex2_generic "orders/")
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil))
   nil))
 (pvs0_eval_expr_TCC24 0
  (pvs0_eval_expr_TCC24-1 nil 3682872225
   ("" (skeep)
    (("" (typepred "val")
      (("" (skeep)
        (("" (inst 1 "append((:0:), path)")
          (("1" (lemma "subterm_append")
            (("1" (inst -1 "body" "path")
              (("1" (assert)
                (("1" (inst -1 "(:0:)")
                  (("1" (split)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (replace -4 1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "path_conditions_unmodified")
                      (("2" (inst -1 "body" "path" 0)
                        (("2" (assert)
                          (("2" (expand "append")
                            (("2" (expand "append")
                              (("2"
                                (replace -1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replace -1 1)
                      (("2" (replace -3 1)
                        (("2" (expand "valid_path")
                          (("2" (auto-rewrite "null_path")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "every") (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "valid_paths_subexpr")
            (("2" (inst -1 "body" "path")
              (("2" (assert)
                (("2" (inst -1 "(:0:)")
                  (("1" (replace -1 1)
                    (("1" (hide 2 -2)
                      (("1" (replace -2)
                        (("1" (expand "valid_path")
                          (("1" (auto-rewrite "null_path")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "every") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "every")
            (("3" (expand "every") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" scp_iff_pvs0 nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     scp_iff_pvs0 nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     scp_iff_pvs0 nil)
    (false_val skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null_path formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_expr_TCC25 0
  (pvs0_eval_expr_TCC25-1 nil 3682872225
   ("" (skeep) (("" (expand "lt_lex2") (("" (grind) nil nil)) nil))
    nil)
   ((lt_lex2 const-decl "bool" lex2_generic "orders/")
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pvs0_eval_TCC1 0
  (pvs0_eval_TCC1-1 nil 3683472034 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   nil))
 (pvs0_eval_TCC2 0
  (pvs0_eval_TCC2-1 nil 3683472034
   ("" (skeep)
    (("" (inst 1 "(::)")
      (("1" (grind) nil nil) ("2" (rewrite "null_path") nil nil)) nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0 skolem-const-decl "{pvs0: PVS0 | terminating?(pvs0)}"
     scp_iff_pvs0 nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (null_path formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_correct 0
  (pvs0_eval_correct-1 nil 3683501056
   ("" (skeep* :preds? t)
    (("" (typepred "pvs0_eval(pvs0)(arg)")
      (("" (expand "semantic_rel")
        (("" (ground)
          (("" (use "deterministic_expr") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_eval const-decl
     "{v: Val | semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)(pvs0`4, pvs0`4, val, v)}"
     scp_iff_pvs0 nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deterministic_expr formula-decl nil pvs0_expr nil)
    (semantic_rel const-decl "bool" pvs0_lang nil))
   shostak)))

