(scp_iff_pvs0
 (R_wf 0
  (R_wf-1 nil 3665254532
   ("" (skeep)
    (("" (expand "scp_termination_pvs0")
      (("" (expand "scp_termination?")
        (("" (use "no_infinite_descending_sequence")
          (("" (assert)
            (("" (hide 2)
              (("" (expand "empty?")
                (("" (skolem 1 "vals")
                  (("" (expand "member")
                    (("" (expand "descending?")
                      (("" (expand "R")
                        ((""
                          (name "ccs_seq"
                                "LAMBDA(i: nat): epsilon({cc: (cc_of_pvs0(pvs0`4)) |
                                             eval_conds
                                                       (pvs0, cc`conds, vals(i))
                                              AND
                                              semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)
                                                               (cc`actuals, pvs0`4,
                                                                vals(i),
                                                                vals(1 + i))})")
                          (("1" (inst -3 "ccs_seq" "vals")
                            (("1" (expand "infinite_seq_ccs")
                              (("1"
                                (skeep)
                                (("1"
                                  (replaces -1 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "epsilon_ax[(cc_of_pvs0(pvs0`4))]")
                                      (("1"
                                        (inst -2 "i")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -1 "0")
                            (("2" (skeep) (("2" (inst 1 "cc") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness
     "orders/")
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (R const-decl "bool" scp_iff_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (descending? const-decl "bool" monotone_sequences "orders/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (sequence type-eq-decl nil sequences nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (epsilon const-decl "T" epsilons nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (epsilon_ax formula-decl nil epsilons nil)
    (Seq_val type-eq-decl nil cc_def "CCG/")
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (scp_termination? const-decl "bool" scp "CCG/"))
   nil)
  (R_wf-3 nil 3653154721
   ("" (skeep)
    (("" (expand "scp_termination_pvs0")
      (("" (expand "scp_termination?")
        (("" (use "no_infinite_descending_sequence")
          (("" (assert)
            (("" (hide 2)
              (("" (expand "empty?")
                (("" (skolem 1 "vals")
                  (("" (expand "member")
                    (("" (expand "descending?")
                      (("" (expand "R")
                        ((""
                          (name "ccs_seq"
                                "LAMBDA(i: nat): epsilon({cc: (cc_of_pvs0(def)) |
                               eval_conds(false_val, eval_op1, eval_op2)
                                         (def, cc`conds, LAMBDA (v: (vr?)): vals(i))
                                AND
                                semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                 (cc`actuals, def,
                                                  LAMBDA (v: (vr?)): vals(i),
                                                  vals(1 + i))})")
                          (("1" (inst -3 "ccs_seq" "vals")
                            (("1" (expand "infinite_seq_ccs")
                              (("1"
                                (skeep)
                                (("1"
                                  (replaces -1 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "epsilon_ax[(cc_of_pvs0(def))]")
                                      (("1"
                                        (inst -2 "i")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -1 "0")
                            (("2" (skeep) (("2" (inst 1 "cc") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_infinite_descending_sequence formula-decl nil well_foundedness
     "orders/")
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (descending? const-decl "bool" monotone_sequences "orders/")
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (Seq_val type-eq-decl nil cc_def "CCG/")
    (scp_termination? const-decl "bool" scp "CCG/"))
   nil))
 (R_no_desc_inf_branch 0
  (R_no_desc_inf_branch-5 nil 3665254648
   ("" (skeep)
    (("" (case "empty?({y: Val | R(pvs0)(y, x)})")
      (("1" (use "finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil nil))
          nil))
        nil)
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_dg_vertices_l(pvs0`4))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs" "LAMBDA(y:Val | R(pvs0)(y, x)):
                                                          epsilon({n:below(n_ccs) |
                                                 	     LET cc = nth[CallingContext](pvs0_to_dg_vertices_l(pvs0`4), n)
                                                 	     IN semantic_rel_expr(pvs0`1,pvs0`2,pvs0`3)
                                                                                  (cc`actuals, pvs0`4, x, y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
           semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)
                            (nth[CallingContext]
                                 (pvs0_to_dg_vertices_l(pvs0`4),
                                  n)`actuals,
                             pvs0`4, x, x1)})" "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
           semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)
                            (nth[CallingContext]
                                 (pvs0_to_dg_vertices_l(pvs0`4),
                                  n)`actuals,
                             pvs0`4, x, x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth[CallingContext](pvs0_to_dg_vertices_l(pvs0`4), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness"
                                           :subst
                                           ("def" "pvs0`4"))
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(pvs0`4),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_dg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_dg_vertices_l(pvs0`4))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use
                                   "cc_of_pvs0_completeness"
                                   :subst
                                   ("def" "pvs0`4"))
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(pvs0`4),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_dg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(pvs0`4))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) nil nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_dg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(pvs0`4))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R const-decl "bool" scp_iff_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" set_as_list
     "structures/")
    (finite_emptyset name-judgement "finite_set[T]" set_as_list_props
     "structures/")
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (pvs0 skolem-const-decl "PVS0[T]" scp_iff_pvs0 nil)
    (x skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (n_ccs skolem-const-decl "nat" scp_iff_pvs0 nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (nth def-decl "T" list_props nil)
    (i skolem-const-decl "below(length(pvs0_to_dg_vertices_l(pvs0`4)))"
     scp_iff_pvs0 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cc_of_pvs0_completeness formula-decl nil pvs0_to_dg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "below(length(pvs0_to_dg_vertices_l(pvs0`4)))"
     scp_iff_pvs0 nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (deterministic_expr formula-decl nil pvs0_expr nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil)
    (member_null formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil))
   nil)
  (R_no_desc_inf_branch-4 nil 3653155315
   ("" (skeep)
    (("" (case "empty?({y: Val | R(def)(y, x)})")
      (("1" (use "finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil nil))
          nil))
        nil)
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_dg_vertices_l(def))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs" "LAMBDA(y:Val | R(def)(y, x)):
                                              epsilon({n:below(n_ccs) |
                                     	     LET cc = nth[CallingContext](pvs0_to_dg_vertices_l(def), n)
                                     	     IN semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                                      (cc`actuals, def, val2env(x), y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
           semantic_rel_expr(false_val, eval_op1, eval_op2)
                            (nth[CallingContext]
                                 (pvs0_to_dg_vertices_l(def), n)`actuals,
                             def, LAMBDA (v: (vr?)): x, x1)})"
                            "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
           semantic_rel_expr(false_val, eval_op1, eval_op2)
                            (nth[CallingContext]
                                 (pvs0_to_dg_vertices_l(def), n)`actuals,
                             def, LAMBDA (v: (vr?)): x, x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth[CallingContext](pvs0_to_dg_vertices_l(def), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness")
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(def),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_dg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "cc_of_pvs0_completeness")
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(def),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_dg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) nil nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_dg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (finite_emptyset name-judgement "finite_set[T]" set_as_list
     "structures/")
    (finite_emptyset name-judgement "finite_set[T]" set_as_list_props
     "structures/")
    (Val type-eq-decl nil pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (cc_of_pvs0_completeness formula-decl nil pvs0_to_dg nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (deterministic_expr formula-decl nil pvs0_expr nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil))
   nil)
  (R_no_desc_inf_branch-3 nil 3653154990
   ("" (skeep)
    (("" (case "empty?({y: Val[T] | R(def)(y, x)})")
      (("1" (use " finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil)))))
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_dg_vertices_l(def))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs" "LAMBDA(y:Val | R(def)(y, x)):
                                        epsilon({n:below(n_ccs) |
                               	     LET cc = nth[CallingContext](pvs0_to_dg_vertices_l(def), n)
                               	     IN semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                                (cc`actuals, def, val2env(x), y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
                                         semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                          (nth[CallingContext]
                                                               (pvs0_to_dg_vertices_l(def), n)`actuals,
                                                           def, LAMBDA (v: (vr?[Val[T]])): x,
                                                           x1)})"
                            "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
                                                 semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                                  (nth[CallingContext]
                                                                       (pvs0_to_dg_vertices_l(def), n)`actuals,
                                                                   def, LAMBDA (v: (vr?[Val[T]])): x,
                                                                   x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth(pvs0_to_dg_vertices_l(def), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              nil)))))))))))))
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness")
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(def),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1" (assert) nil)))))
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil)))))))))
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_dg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil)))))))))))))))))))
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil)))))))))))
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "cc_of_pvs0_completeness")
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_dg_vertices_l(def),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil)))))
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_dg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))))
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3"
                                          (propax)
                                          nil)))))))))))))))))))
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil)))))))
                     ("2" (propax) nil)))))))
               ("2" (skeep) nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil)))))))))
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_dg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2"
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (R_no_desc_inf_branch-2 nil 3653154863
   ("" (skeep)
    (("" (case "empty?({y: Val[T] | R(def)(y, x)})")
      (("1" (use " finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil)))))
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_ccg_vertices_l(def))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs" "LAMBDA(y:Val | R(def)(y, x)):
                                  epsilon({n:below(n_ccs) |
                         	     LET cc = nth[CallingContext](pvs0_to_ccg_vertices_l(def), n)
                         	     IN semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                          (cc`actuals, def, val2env(x), y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
                          semantic_rel_expr(false_val, eval_op1, eval_op2)
                                           (nth[CallingContext]
                                                (pvs0_to_ccg_vertices_l(def), n)`actuals,
                                            def, LAMBDA (v: (vr?[Val[T]])): x,
                                            x1)})" "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
                              semantic_rel_expr(false_val, eval_op1, eval_op2)
                                               (nth[CallingContext]
                                                    (pvs0_to_ccg_vertices_l(def), n)`actuals,
                                                def, LAMBDA (v: (vr?[Val[T]])): x,
                                                x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth(pvs0_to_ccg_vertices_l(def), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              nil)))))))))))))
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness")
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1" (assert) nil)))))
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil)))))))))
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_ccg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil)))))))))))))))))))
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil)))))))))))
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "cc_of_pvs0_completeness")
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil)))))
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_ccg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))))
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3"
                                          (propax)
                                          nil)))))))))))))))))))
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil)))))))
                     ("2" (propax) nil)))))))
               ("2" (skeep) nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil)))))))))
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_ccg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2"
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (R_no_desc_inf_branch-1 nil 3647272140
   ("" (skeep)
    ((""
      (case "empty?({y: Val[T] | R(false_val, eval_op1, eval_op2)(def)(y, x)})")
      (("1" (use " finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil nil))
          nil))
        nil)
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_ccg_vertices_l(def))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs"
               "LAMBDA(y:Val | R(false_val, eval_op1, eval_op2)(def)(y, x)):
                            epsilon({n:below(n_ccs) |
                   	     LET cc = nth[CallingContext](pvs0_to_ccg_vertices_l(def), n)
                   	     IN semantic_rel_expr(false_val, eval_op1, eval_op2)
                                                    (cc`actuals, def, val2env(x), y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
           semantic_rel_expr(false_val, eval_op1, eval_op2)
                            (nth[CallingContext]
                                 (pvs0_to_ccg_vertices_l(def), n)`actuals,
                             def, LAMBDA (v: (vr?[Val[T]])): x,
                             x1)})" "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
           semantic_rel_expr(false_val, eval_op1, eval_op2)
                            (nth[CallingContext]
                                 (pvs0_to_ccg_vertices_l(def), n)`actuals,
                             def, LAMBDA (v: (vr?[Val[T]])): x,
                             x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth(pvs0_to_ccg_vertices_l(def), n1)`actuals"
                                        "PVS0Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness")
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def.CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_ccg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use "cc_of_pvs0_completeness")
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_ccg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) nil nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "cc_of_pvs0_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_ccg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (finite_emptyset name-judgement "finite_set[T]" set_as_list
     "structures/")
    (finite_emptyset name-judgement "finite_set[T]" set_as_list_props
     "structures/")
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member_nth formula-decl nil more_list_props "structures/")
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (CallingContext type-eq-decl nil cc_def "CCG/"))
   nil))
 (scp_implies_pvs0_tcc_TCC1 0
  (scp_implies_pvs0_tcc_TCC1-1 nil 3686040215
   ("" (subtype-tcc) nil nil)
   ((T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (scp_termination? const-decl "bool" scp "CCG/")
    (scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil))
   nil))
 (scp_implies_pvs0_tcc 0
  (scp_implies_pvs0_tcc-1 nil 3665254734
   ("" (skeep*)
    (("" (expand "pvs0_tcc_termination")
      (("" (inst 1 "omega[Val,R(pvs0)].Omega")
        (("1" (expand "pvs0_tcc_termination_pred")
          (("1" (skeep*)
            (("1" (use "omega_increasing[Val,R(pvs0)]")
              (("1" (hide 2)
                (("1" (expand "R")
                  (("1" (expand "eval_conds")
                    (("1"
                      (inst 1
                       "(# nid := cc`path, actuals := get_arg(cc`rec_expr) , conds := cc`cnds  #)")
                      (("1" (assert) nil nil)
                       ("2" (expand "cc_of_pvs0")
                        (("2" (typepred "cc")
                          (("2" (expand "pvs0_tcc_valid_cc")
                            (("2" (flatten)
                              (("2"
                                (case
                                 "rec(get_arg(cc`rec_expr)) = cc`rec_expr")
                                (("1"
                                  (inst 1 "cc`path")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "pvs0_to_dg_vertex")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (apply-extensionality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (use "R_no_desc_inf_branch") nil nil)) nil)
               ("3" (hide 2)
                (("3" (use "R_wf") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (use "R_no_desc_inf_branch") nil nil)
         ("3" (use "R_wf") (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (omega_increasing formula-decl nil omega "orders/")
    (env skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (vact skolem-const-decl "Val[T]" scp_iff_pvs0 nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (cc skolem-const-decl "(pvs0_tcc_valid_cc(pvs0`4))" scp_iff_pvs0
        nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PVS0Expr_rec_extensionality formula-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (R_no_desc_inf_branch formula-decl nil scp_iff_pvs0 nil)
    (R_wf formula-decl nil scp_iff_pvs0 nil)
    (Omega const-decl "nat" omega "orders/")
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (list type-decl nil list_adt nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (R const-decl "bool" scp_iff_pvs0 nil)
    (pvs0 skolem-const-decl "PVS0[T]" scp_iff_pvs0 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (scp_implies_pvs0_tcc-2 nil 3653089991
   ("" (skeep*)
    (("" (expand "pvs0_tcc_termination")
      (("" (inst 1 "omega[Val,R(def)].Omega")
        (("1" (expand "pvs0_tcc_termination_pred")
          (("1" (skeep*)
            (("1" (use "omega_increasing[Val,R(def)]")
              (("1" (hide 2)
                (("1" (expand "R")
                  (("1" (expand "eval_conds")
                    (("1" (case "env = LAMBDA(v: (vr?)):env(vr)")
                      (("1" (replaces -1 :dir rl)
                        (("1"
                          (inst 1
                           "(# actuals := get_arg(cc`rec_expr) , conds := cc`cnds  #)")
                          (("1" (assert) nil nil)
                           ("2" (expand "cc_of_pvs0")
                            (("2" (typepred "cc")
                              (("2"
                                (expand "pvs0_tcc_valid_cc")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (case
                                     "rec(get_arg(cc`rec_expr)) = cc`rec_expr")
                                    (("1"
                                      (inst 1 "cc`path")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "pvs0_to_dg_vertex")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (apply-extensionality) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (use "R_no_desc_inf_branch") nil nil)) nil)
               ("3" (hide 2)
                (("3" (use "R_wf") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (use "R_no_desc_inf_branch") nil nil)
         ("3" (use "R_wf") (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (omega_increasing formula-decl nil omega "orders/")
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0Expr_rec_extensionality formula-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Omega const-decl "nat" omega "orders/")
    (WFM type-eq-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil))
   nil))
 (pvs0_tcc_implies_scp_TCC1 0
  (pvs0_tcc_implies_scp_TCC1-1 nil 3686040215
   ("" (subtype-tcc) nil nil) nil nil))
 (pvs0_tcc_implies_scp 0
  (pvs0_tcc_implies_scp-2 nil 3665254768
   ("" (skeep)
    (("" (expand "pvs0_tcc_termination")
      (("" (expand "pvs0_tcc_termination_pred")
        ((""
          (use "scp_termination[Val,PVS0Expr,Conditions,Path,[nat->(cc_of_pvs0(pvs0`4))]]")
          (("" (expand "SCP")
            ((""
              (inst -1 "semantic_relation(pvs0)"
               "eval_conditions(pvs0)")
              (("" (expand "scp_termination_pvs0")
                (("" (assert)
                  (("" (hide 2)
                    (("" (skeep)
                      (("" (expand "infinite_seq_ccs")
                        (("" (skeep -2)
                          ((""
                            (inst 1 "lt_val
                              (pvs0)(wfm)")
                            (("1" (skeep 1)
                              (("1"
                                (expand "lt_val")
                                (("1"
                                  (insteep -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (use
                                       "dg_vert_valid_cc"
                                       ("def" "pvs0`4"))
                                      (("1"
                                        (skeep -1)
                                        (("1"
                                          (insteep 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "eval_conds")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -5 "vals(i)")
                                                  (("1"
                                                    (insteep -5)
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "vals(1+i)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "lt_val_wf") nil nil)
                             ("3" (expand "restrict")
                              (("3" (use "wf_nat") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (scp_termination formula-decl nil scp "CCG/")
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (Environment type-eq-decl nil cc_def "CCG/")
    (lt_val_wf formula-decl nil pvs0_termination nil)
    (dg_vert_valid_cc formula-decl nil pvs0_to_dg nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (Seq_val type-eq-decl nil cc_def "CCG/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wfm skolem-const-decl "WFM[T, MT, LAMBDA (m, n: nat): m < n]"
     scp_iff_pvs0 nil)
    (pvs0 skolem-const-decl "PVS0[T]" scp_iff_pvs0 nil)
    (lt_val const-decl "bool" pvs0_termination nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil)
    (SCP const-decl "bool" scp "CCG/")
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil))
   nil)
  (pvs0_tcc_implies_scp-1 nil 3653167984
   ("" (skeep)
    (("" (expand "pvs0_tcc_termination")
      (("" (expand "pvs0_tcc_termination_pred")
        ((""
          (use "scp_termination[Val,PVS0Expr,Conditions,[nat->(cc_of_pvs0(def))]]")
          (("" (expand "SCP")
            ((""
              (inst -1 "semantic_relation(def)" "eval_conditions(def)")
              (("" (expand "scp_termination_pvs0")
                (("" (assert)
                  (("" (hide 2)
                    (("" (skeep)
                      (("" (expand "infinite_seq_ccs")
                        (("" (skeep -2)
                          ((""
                            (inst 1
                             "lt_val(false_val, eval_op1, eval_op2)
                        (def)(wfm)")
                            (("1" (skeep 1)
                              (("1"
                                (expand "lt_val")
                                (("1"
                                  (insteep -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (use "dg_vert_valid_cc")
                                      (("1"
                                        (skeep -1)
                                        (("1"
                                          (insteep 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "eval_conds")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -5
                                                   "LAMBDA(v:(vr?)): vals(i)")
                                                  (("1"
                                                    (insteep -5)
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "vals(1+i)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "lt_val_wf") nil nil)
                             ("3" (expand "restrict")
                              (("3" (use "wf_nat") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (scp_termination formula-decl nil scp "CCG/")
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (dg_vert_valid_cc formula-decl nil pvs0_to_dg nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (Seq_val type-eq-decl nil cc_def "CCG/")
    (WFM type-eq-decl nil measure_termination_defs nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (SCP const-decl "bool" scp "CCG/")
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil))
   nil))
 (scp_iff_pvs0_terminates 0
  (scp_iff_pvs0_terminates-1 nil 3653168447
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (use "scp_implies_pvs0_tcc")
          (("1" (assert)
            (("1" (use "pvs0_tcc_implies_terminates")
              (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (use "terminates_implies_pvs0_tcc")
          (("2" (assert)
            (("2" (use "pvs0_tcc_implies_scp") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_implies_pvs0_tcc formula-decl nil scp_iff_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil scp_iff_pvs0 nil)
    (pvs0_tcc_implies_terminates formula-decl nil pvs0_termination nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (terminates_implies_pvs0_tcc formula-decl nil measure_termination
     nil)
    (pvs0_tcc_implies_scp formula-decl nil scp_iff_pvs0 nil))
   nil)))

