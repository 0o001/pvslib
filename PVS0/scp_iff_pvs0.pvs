%********************************************************************************%
%   SCP if and only if PVS0 termination  					 %
%		  	      	      	      	       	      			 %
%   Authors:									 %
%   										 %
%       Andréia Borges Avelar -- Universidade  de  Brasília  - Brasil  		 %
%       Mauricio Ayala-Rincon -- Universidade  de  Brasília  - Brasil  		 %
%                 Cesar Muñoz -- NASA  Langley  Research  Center - US		 %
%	   Mariano M. Moscato -- National Institute of Aerospace - US            %
%		  	      	      	      	       	      			 %
%********************************************************************************%
scp_iff_pvs0[T:TYPE+] : THEORY
BEGIN

  IMPORTING pvs0_to_dg[T]
  	    
  false_val : VAR Val 
  eval_op1  : VAR [nat->[Val->Val]]
  eval_op2  : VAR [nat->[[Val,Val]->Val]]
  
  pvs0: VAR PVS0
  semantic_relation(pvs0)(expr:PVS0Expr,env:Val,val:Val): MACRO bool =
    semantic_rel_expr(pvs0`1,pvs0`2,pvs0`3)(expr,pvs0`4,env,val)

  eval_conditions(pvs0)(conds:Conditions,env:Val): MACRO bool =
        eval_conds(pvs0,conds,env)

  IMPORTING CCG@scp

  scp_termination_pvs0(pvs0) : bool =
    scp_termination?[Val,PVS0Expr,Conditions,Path,[nat->(cc_of_pvs0(pvs0`4))]]
                    (semantic_relation(pvs0),eval_conditions(pvs0))

  x,y: VAR Val 

  R(pvs0)(x,y): bool = 
    EXISTS(cc: (cc_of_pvs0(pvs0`4))):
      eval_conditions(pvs0)(cc`conds,y) AND
      semantic_relation(pvs0)(cc`actuals,y,x)

  IMPORTING orders@well_foundedness[Val]

  R_wf: LEMMA
    scp_termination_pvs0(pvs0) IMPLIES well_founded?(R(pvs0))

  IMPORTING structures@more_list_props

  R_no_desc_inf_branch: LEMMA
    FORALL (x: Val): is_finite({y: Val | R(pvs0)(y, x)})

  IMPORTING measure_termination[T],
            pvs0_termination[T,MT,lt],
	    orders@lex2_generic[MT, nat, lt, <]

% ------------------------------------------------------------------------------- %
% SCP implies PVS0 measure termination

  scp_implies_pvs0_tcc : LEMMA
    scp_termination_pvs0(pvs0) IMPLIES pvs0_tcc_termination(pvs0)

% ------------------------------------------------------------------------------- %
% PVS0 measure termination implies SCP

  pvs0_tcc_implies_scp : LEMMA
    pvs0_tcc_termination(pvs0) IMPLIES scp_termination_pvs0(pvs0)

% ------------------------------------------------------------------------------- %
% SCP if and only PVS0 termination

  scp_iff_pvs0_terminates : THEOREM
    scp_termination_pvs0(pvs0) IFF terminating?(pvs0)

  pvs0_eval_expr(false_val,eval_op1,eval_op2)
		( expr:PVS0Expr,
		  body:PVS0Expr | terminating?(false_val,eval_op1,eval_op2,body) ,
		  val:Val | EXISTS (path: (valid_path(body))):
		             subterm_at(body,path) = expr AND
		             eval_conds((false_val,eval_op1,eval_op2,body),path_conditions(body,path),val)) :
 RECURSIVE { v: Val | semantic_rel_expr(false_val,eval_op1,eval_op2)(expr,body,val,v) } =
   CASES expr OF
      cnst(v) : v,
      vr : val,
      op1(op,arg) : LET v = pvs0_eval_expr(false_val,eval_op1,eval_op2)(arg,body,val) IN
                    eval_op1(op)(v),
      op2(op,arg1,arg2) :  LET v1 = pvs0_eval_expr(false_val,eval_op1,eval_op2)(arg1,body,val),
                               v2 = pvs0_eval_expr(false_val,eval_op1,eval_op2)(arg2,body,val) IN
                           eval_op2(op)(v1,v2),
      ite(cnd,arg1,arg2) : LET vc = pvs0_eval_expr(false_val,eval_op1,eval_op2)(cnd,body,val) IN
                           IF false_val /= vc THEN
                             pvs0_eval_expr(false_val,eval_op1,eval_op2)(arg1,body,val)
                           ELSE
                             pvs0_eval_expr(false_val,eval_op1,eval_op2)(arg2,body,val)
                           ENDIF,
      rec(arg) : LET v = pvs0_eval_expr(false_val,eval_op1,eval_op2)(arg,body,val) IN
                 pvs0_eval_expr(false_val,eval_op1,eval_op2)(body,body,v)
    ENDCASES
  MEASURE (wfm_tcc(false_val,eval_op1,eval_op2,body)(val), sizepvs0(expr)) by lt_lex2

  pvs0_eval(pvs0:PVS0 | terminating?(pvs0))(val:Val) : {v:Val | semantic_rel_expr(pvs0`1,pvs0`2,pvs0`3)(pvs0`4,pvs0`4,val,v)} =
    pvs0_eval_expr(pvs0`1,pvs0`2,pvs0`3)(pvs0`4,pvs0`4,val)

  pvs0_eval_correct : THEOREM
    FORALL (pvs0:PVS0 | terminating?(pvs0))(arg,val:Val):
      semantic_rel(pvs0,arg,val) IFF val = pvs0_eval(pvs0)(arg)

END scp_iff_pvs0
