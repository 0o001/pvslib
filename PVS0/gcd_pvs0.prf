(gcd_pvs0
 (eop1_TCC1 0
  (eop1_TCC1-1 nil 3643739233 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (mt_lex2_TCC1 0
  (mt_lex2_TCC1-1 nil 3643739233
   ("" (use "well_founded_le") (("" (grind) nil nil)) nil)
   ((restrict const-decl "R" restrict nil)
    (well_founded? const-decl "bool" orders nil)
    (well_founded_le formula-decl nil ordinals nil))
   nil))
 (pvs0_gcd_tcc_termination_TCC1 0
  (pvs0_gcd_tcc_termination_TCC1-1 nil 3651000738
   ("" (subtype-tcc) nil nil)
   ((pvs0_gcd const-decl "PVS0" gcd_pvs0 nil)) nil))
 (pvs0_gcd_tcc_termination 0
  (pvs0_gcd_tcc_termination-1 nil 3650810173
   ("" (expand "pvs0_tcc_termination")
    (("" (inst 1 "lambda(m: nat, n: nat): add(m+1 + 2*n,zero,zero)")
      (("1" (skeep*)
        (("1" (typepred "cc")
          (("1" (use "pvs0_ccs_completness")
            (("1" (eval-expr "pvs0_ccs(pvs0_gcd)")
              (("1" (hide -3)
                (("1" (replaces -1)
                  (("1" (expand* "member")
                    (("1" (expand* "member")
                      (("1" (expand* "member")
                        (("1" (prop)
                          (("1" (replaces -1)
                            (("1" (assert)
                              (("1"
                                (expand "semantic_rel_expr")
                                (("1"
                                  (expand "semantic_rel_expr")
                                  (("1"
                                    (expand "eop1" -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "eval_conds_rec")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "eval_conds_rec")
                                            (("1"
                                              (expand "eval_conds_rec")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("1"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (replaces -2)
                                                        (("1"
                                                          (replaces -4)
                                                          (("1"
                                                            (replaces
                                                             -2)
                                                            (("1"
                                                              (replaces
                                                               -3)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -1)
                            (("2" (expand "eval_conds_rec")
                              (("2"
                                (expand "eval_conds_rec")
                                (("2"
                                  (expand "eval_conds_rec")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "semantic_rel_expr")
                                      (("2"
                                        (expand "semantic_rel_expr")
                                        (("2"
                                          (skeep*)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (use "well_founded_le") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil lang nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (restrict const-decl "R" restrict nil)
    (< def-decl "bool" ordinals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (Conditions type-eq-decl nil lang nil)
    (list type-decl nil list_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (pvs0_gcd const-decl "PVS0" gcd_pvs0 nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]"
     measure_termination_defs nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (/= const-decl "boolean" notequal nil)
    (boole const-decl "Val" gcd_pvs0 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_conds_rec def-decl "bool" lang nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (member def-decl "bool" list_props nil)
    (well_founded_le formula-decl nil ordinals nil)
    (pvs0_ccs_completness formula-decl nil measure_termination_defs
     nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil))
   shostak))
 (R__TCC1 0
  (R__TCC1-2 nil 3651140670
   ("" (inst 1 "LAMBDA(x,x_: MT_):FALSE") (("" (grind) nil nil)) nil)
   ((FALSE const-decl "bool" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT_ nonempty-type-decl nil gcd_pvs0 nil))
   nil)
  (R__TCC1-1 nil 3643739233 ("" (existence-tcc) nil nil) nil nil))
 (IMP_gcd_ax_R_wf_TCC1 0
  (IMP_gcd_ax_R_wf_TCC1-1 nil 3650809743
   ("" (typepred "R_") (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MT_ nonempty-type-decl nil gcd_pvs0 nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (R_ const-decl "(well_founded?[MT_])" gcd_pvs0 nil))
   nil))
 (IMP_gcd_ax_wfm_gcd_dec_1_TCC1 0
  (IMP_gcd_ax_wfm_gcd_dec_1_TCC1-1 nil 3650809743
   ("" (lemma "pvs0_gcd_pvs0_tcc_gen_termination")
    (("" (skeep)
      (("" (inst -1 "lambda(x: (vr?)): (m,n)" "_" "(m-n,n)")
        (("1" (assert)
          (("1"
            (inst -1 "(# cnds
                             := (: pvsbool(op1(1, vr)),
                                   pvsnot(op1(0, vr)) :),
                           path := (: 1, 2 :),
                           rec_expr := rec(op1(3, vr)) #)")
            (("1" (expand "eval_conds_rec")
              (("1" (expand "eval_conds_rec")
                (("1" (expand "eval_conds_rec")
                  (("1" (expand "semantic_rel_expr")
                    (("1" (expand "semantic_rel_expr")
                      (("1" (expand "ebool")
                        (("1" (expand "eop1")
                          (("1" (prop)
                            (("1" (inst 1 "(m,n)")
                              (("1" (assert) nil nil)) nil)
                             ("2" (expand "boole")
                              (("2"
                                (inst 1 "(1,0)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "(m,n)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "boole")
                              (("3"
                                (inst 1 "(0,0)")
                                (("3"
                                  (assert)
                                  (("3"
                                    (inst 1 "(m,n)")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "pvs0_ccs[[nat,nat], MT_, R_](pvs0_gcd)")
              (("2" (rewrite "every_nth")
                (("2" (inst -1 "0")
                  (("1"
                    (case "(# cnds
                := (: pvsbool[Val[[nat, nat]]]
                          (op1[Val[[nat, nat]]](1, vr[Val[[nat, nat]]])),
                      pvsnot[Val[[nat, nat]]]
                          (op1[Val[[nat, nat]]]
                               (0, vr[Val[[nat, nat]]])) :),
              path := (: 1, 2 :),
              rec_expr
                := rec[Val[[nat, nat]]]
                       (op1[Val[[nat, nat]]](3, vr[Val[[nat, nat]]])) #) = nth(pvs0_ccs[[nat, nat], MT_, R_](pvs0_gcd), 0)")
                    (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                     ("3" (hide-all-but 1) (("3" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (MT_ nonempty-type-decl nil gcd_pvs0 nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (R_ const-decl "(well_founded?[MT_])" gcd_pvs0 nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]"
     measure_termination_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" measure_termination_defs nil)
    (path_conditions def-decl "Conditions" lang nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" lang nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (append def-decl "list[T]" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
                 nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every_nth formula-decl nil list_props nil)
    (eval_conds_rec def-decl "bool" lang nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (boole const-decl "Val" gcd_pvs0 nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (Conditions type-eq-decl nil lang nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (pvs0_gcd const-decl "PVS0" gcd_pvs0 nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Environment type-eq-decl nil lang nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m skolem-const-decl "nat" gcd_pvs0 nil)
    (n skolem-const-decl "nat" gcd_pvs0 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pvs0_gcd_pvs0_tcc_gen_termination formula-decl nil gcd_pvs0 nil))
   nil))
 (IMP_gcd_ax_wfm_gcd_dec_2_TCC1 0
  (IMP_gcd_ax_wfm_gcd_dec_2_TCC1-1 nil 3650809743
   ("" (lemma "pvs0_gcd_pvs0_tcc_gen_termination")
    (("" (skeep)
      (("" (inst -1 "lambda(x: (vr?)): (m,n)" "_" "(n,m)")
        (("" (assert)
          ((""
            (inst -1 "(# cnds
                             := (: pvsnot(op1(1, vr)),
                                   pvsnot(op1(0, vr)) :),
                           path := (: 2, 2 :),
                           rec_expr := rec(op1(4, vr)) #)")
            (("1" (expand "eval_conds_rec")
              (("1" (expand "eval_conds_rec")
                (("1" (expand "eval_conds_rec")
                  (("1" (expand "semantic_rel_expr")
                    (("1" (expand "semantic_rel_expr")
                      (("1" (expand "ebool")
                        (("1" (expand "eop1")
                          (("1" (expand "boole")
                            (("1" (prop)
                              (("1" (inst 1 "(m,n)") nil nil)
                               ("2"
                                (inst 1 "(0,0)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "(m,n)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (inst 1 "(0,0)")
                                (("3"
                                  (assert)
                                  (("3"
                                    (inst 1 "(m,n)")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "pvs0_ccs[[nat,nat],MT_,R_](pvs0_gcd)")
              (("2" (rewrite "every_nth")
                (("2" (inst -1 "1")
                  (("1"
                    (case "(# cnds
                := (: pvsnot[Val[[nat, nat]]]
                          (op1[Val[[nat, nat]]](1, vr[Val[[nat, nat]]])),
                      pvsnot[Val[[nat, nat]]]
                          (op1[Val[[nat, nat]]]
                               (0, vr[Val[[nat, nat]]])) :),
              path := (: 2, 2 :),
              rec_expr
                := rec[Val[[nat, nat]]]
                       (op1[Val[[nat, nat]]](4, vr[Val[[nat, nat]]])) #) = nth(pvs0_ccs[[nat, nat], MT_, R_](pvs0_gcd), 1)")
                    (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                     ("3" (hide-all-but 1) (("3" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MT_ nonempty-type-decl nil gcd_pvs0 nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (R_ const-decl "(well_founded?[MT_])" gcd_pvs0 nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]"
     measure_termination_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" measure_termination_defs nil)
    (path_conditions def-decl "Conditions" lang nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" lang nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (append def-decl "list[T]" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
                 nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every_nth formula-decl nil list_props nil)
    (eval_conds_rec def-decl "bool" lang nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (boole const-decl "Val" gcd_pvs0 nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (Conditions type-eq-decl nil lang nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (pvs0_gcd const-decl "PVS0" gcd_pvs0 nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Environment type-eq-decl nil lang nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_gcd_pvs0_tcc_gen_termination formula-decl nil gcd_pvs0 nil))
   nil))
 (IMP_omega_TCC1 0
  (IMP_omega_TCC1-2 nil 3653086001
   ("" (expand "lt_concrete_val")
    (("" (use "lt_val_wf")
      (("1" (grind) nil nil)
       ("2" (expand "pvs0_gcd") (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((lt_val_wf formula-decl nil measure_termination nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (restrict const-decl "R" restrict nil)
    (< def-decl "bool" ordinals nil)
    (mf const-decl "mt_lex2.WFM" gcd_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (eop2 const-decl "Val" gcd_pvs0 nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (pvs0_gcd const-decl "PVS0" gcd_pvs0 nil)
    (Val type-eq-decl nil lang nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (well_founded? const-decl "bool" orders nil)
    (lt_val const-decl "bool" measure_termination nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (lt_concrete_val const-decl "bool" gcd_pvs0 nil))
   nil))
 (IMP_omega_TCC2 0
  (IMP_omega_TCC2-2 nil 3653086025
   ("" (skeep)
    (("" (expand "lt_concrete_val")
      (("" (use "lt_val_no_desc_inf_branch")
        (("" (expand "pvs0_gcd") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((lt_concrete_val const-decl "bool" gcd_pvs0 nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (pvs0_gcd const-decl "PVS0" gcd_pvs0 nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (eop2 const-decl "Val" gcd_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (mf const-decl "mt_lex2.WFM" gcd_pvs0 nil)
    (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_val_no_desc_inf_branch formula-decl nil measure_termination
     nil))
   nil))
 (gcd_pvs0_TCC1 0
  (gcd_pvs0_TCC1-2 nil 3653086348
   ("" (measure-induct+ "m + 2*n" ("m" "n"))
    (("1" (expand "eval" 1)
      (("1" (expand "pvs0_gcd" 1 1)
        (("1" (expand "eval_expr" 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide -2 1) (("1" (grind) nil nil)) nil)
               ("2" (expand "eval_expr" 1)
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (assert) nil nil)
                       ("2" (expand "eval_expr" 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "eval_expr" 2)
                (("3" (lift-if)
                  (("3" (assert)
                    (("3" (prop)
                      (("1" (expand "eval_expr" 1)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "eval_expr" 2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "eval_expr" 1)
                                    (("1"
                                      (expand "eop1" 1)
                                      (("1"
                                        (expand "boole")
                                        (("1"
                                          (expand "ebool" 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand
                                                 "eval_expr"
                                                 3
                                                 2)
                                                (("1"
                                                  (expand
                                                   "eval_expr"
                                                   -3)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "eval_expr"
                                                           3
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "eop1"
                                                             3
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "eval_expr"
                                                               -5)
                                                              (("1"
                                                                (expand
                                                                 "eval_expr"
                                                                 -5)
                                                                (("1"
                                                                  (expand
                                                                   "eop1"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "boole")
                                                                    (("1"
                                                                      (expand
                                                                       "ebool"
                                                                       -5)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -8
                                                                               "x!1-x!2"
                                                                               "x!2")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "eval")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "Omega_gcd")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "omega_increasing")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "(x!1,x!2)"
                                                                                         "(x!1-x!2,x!2)")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "eval_expr_ge_n_j")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "get_body(pvs0_gcd)"
                                                                                             " LAMBDA (v_1: (vr?)): (x!1 - x!2, x!2)"
                                                                                             "ebool"
                                                                                             "eop1"
                                                                                             "eop2"
                                                                                             "get_body(pvs0_gcd)"
                                                                                             "Omega(x!1 - x!2, x!2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "omega.Omega(x!1, x!2) - 1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "IMP_omega_TCC1")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "IMP_omega_TCC1")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "lt_concrete_val"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "lt_val"
                                                                                             1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               " (# cnds
                                             := (: pvsbool(op1(1, vr)),
                                                   pvsnot(op1(0, vr)) :),
                                           path := (: 1, 2 :),
                                           rec_expr := rec(op1(3, vr)) #)")
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "semantic_rel_expr")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "semantic_rel_expr")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "eop1"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "(x!1,x!2)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "eval_conds_rec")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "eval_conds_rec")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "eval_conds_rec")
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "semantic_rel_expr")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "semantic_rel_expr")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "eop1"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "boole"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "ebool"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "(1,0)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "(x!1,x!2)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "semantic_rel_expr")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "semantic_rel_expr")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "eop1"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "boole"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ebool"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "(0,0)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "(x!1,x!2)")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   "mf")
                                                                                                  (("3"
                                                                                                    (use
                                                                                                     "lex2_lt")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "pvs0_ccs[[nat, nat], ordinal,
                             restrict[[ordstruct, ordstruct], [ordinal, ordinal], boolean]
                                 (ordinals.<)](pvs0_gcd)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "every_nth")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "(# cnds
                                           := (: pvsbool[Val[[nat, nat]]]
                                                     (op1[Val[[nat, nat]]](1, vr[Val[[nat, nat]]])),
                                                 pvsnot[Val[[nat, nat]]]
                                                     (op1[Val[[nat, nat]]]
                                                          (0, vr[Val[[nat, nat]]])) :),
                                         path := (: 1, 2 :),
                                         rec_expr
                                           := rec[Val[[nat, nat]]]
                                                  (op1[Val[[nat, nat]]](3, vr[Val[[nat, nat]]])) #) = nth(pvs0_ccs
                                                           [[nat, nat], ordinal,
                                                            restrict
                                                                [[ordstruct, ordstruct],
                                                                 [ordinal, ordinal],
                                                                 boolean]
                                                                (ordinals.<)]
                                                           (pvs0_gcd),
                                                       0)")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "mt_lex2_TCC1")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil)
                                               ("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "eval_expr" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "eval_expr" 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "eval_expr" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "eval_expr" 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (expand "eval_expr" -1)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "eval_expr" 1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "eval_expr" 1 2)
                                        (("1"
                                          (expand "eop1" 1 2)
                                          (("1"
                                            (inst -5 "x!2" "x!1")
                                            (("1"
                                              (expand "eval_expr" 2)
                                              (("1"
                                                (expand "eval_expr" 2)
                                                (("1"
                                                  (expand "eop1" 2)
                                                  (("1"
                                                    (expand "boole" 2)
                                                    (("1"
                                                      (expand
                                                       "ebool"
                                                       2)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "eval"
                                                                 -6)
                                                                (("1"
                                                                  (expand
                                                                   "Omega_gcd")
                                                                  (("1"
                                                                    (lemma
                                                                     "omega_increasing")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "(x!1,x!2)"
                                                                       "(x!2,x!1)")
                                                                      (("1"
                                                                        (lemma
                                                                         "eval_expr_ge_n_j")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "get_body(pvs0_gcd)"
                                                                           "LAMBDA (v: (vr?[Val[[nat, nat]]])): (x!2, x!1)"
                                                                           "ebool"
                                                                           "eop1"
                                                                           "eop2"
                                                                           "get_body(pvs0_gcd)"
                                                                           "omega.Omega(x!2, x!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "Omega(x!1, x!2) -1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "IMP_omega_TCC1")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "IMP_omega_TCC1")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "lt_concrete_val")
                                                                        (("2"
                                                                          (expand
                                                                           "lt_val")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              2
                                                                              4))
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               "(# cnds
                                             := (: pvsnot(op1(1, vr)),
                                                   pvsnot(op1(0, vr)) :),
                                           path := (: 2, 2 :),
                                           rec_expr := rec(op1(4, vr)) #)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "semantic_rel_expr")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "semantic_rel_expr")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "eop1"
                                                                                         1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "(x!1,x!2)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "eval_conds_rec")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "eval_conds_rec")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "eval_conds_rec")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "semantic_rel_expr")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "semantic_rel_expr")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "eval_expr")
                                                                                              (("2"
                                                                                                (split
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "eval_expr"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "eop1"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "boole")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "ebool"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "eop1"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "boole"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "ebool"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "(0,0)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     1
                                                                                                                                     "(x!1,x!2)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "eop1"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "boole"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "ebool"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "(0,0)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     1
                                                                                                                                     "(x!1,x!2)")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "eval_expr"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "mf")
                                                                                    (("3"
                                                                                      (use
                                                                                       "lex2_lt")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "pvs0_ccs[[nat, nat], ordinal,
                             restrict[[ordstruct, ordstruct], [ordinal, ordinal], boolean]
                                 (ordinals.<)](pvs0_gcd)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "every_nth")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "1")
                                                                                    (("1"
                                                                                      (case
                                                                                       "(# cnds
                                           := (: pvsnot[Val[[nat, nat]]]
                                                     (op1[Val[[nat, nat]]](1, vr[Val[[nat, nat]]])),
                                                 pvsnot[Val[[nat, nat]]]
                                                     (op1[Val[[nat, nat]]]
                                                          (0, vr[Val[[nat, nat]]])) :),
                                         path := (: 2, 2 :),
                                         rec_expr
                                           := rec[Val[[nat, nat]]]
                                                  (op1[Val[[nat, nat]]](4, vr[Val[[nat, nat]]])) #) = nth(pvs0_ccs
                                                           [[nat, nat], ordinal,
                                                            restrict
                                                                [[ordstruct, ordstruct],
                                                                 [ordinal, ordinal],
                                                                 boolean]
                                                                (ordinals.<)]
                                                           (pvs0_gcd),
                                                       1)")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "mt_lex2_TCC1")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "eval_expr" 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "eval_expr" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "eval_expr" 1)
                        (("3" (lift-if)
                          (("3" (prop)
                            (("1" (assert) nil nil)
                             ("2" (expand "eval_expr" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (expand "eval_expr" 1)
                (("4" (lift-if)
                  (("4" (assert)
                    (("4" (prop)
                      (("4" (expand "eval_expr" 1)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "pvs0_gcd") (("2" (propax) nil nil)) nil)
     ("3" (expand "pvs0_gcd") (("3" (propax) nil nil)) nil)
     ("4" (expand "pvs0_gcd") (("4" (propax) nil nil)) nil)
     ("5" (expand "pvs0_gcd") (("5" (propax) nil nil)) nil))
    nil)
   ((eval_expr def-decl "Maybe[Val]" lang nil)
    (Omega const-decl "nat" omega "orders/")
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" gcd_pvs0 nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" gcd_pvs0 nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (omega_increasing formula-decl nil omega "orders/")
    (lt_concrete_val const-decl "bool" gcd_pvs0 nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Conditions type-eq-decl nil lang nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (mf const-decl "mt_lex2.WFM" gcd_pvs0 nil)
    (lex2_lt formula-decl nil lex2 nil)
    (eval_conds_rec def-decl "bool" lang nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (mt_lex2_TCC1 subtype-tcc nil gcd_pvs0 nil)
    (every_nth formula-decl nil list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
                 nil)
    (append def-decl "list[T]" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" lang nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (path_conditions def-decl "Conditions" lang nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" measure_termination_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]"
     measure_termination_defs nil)
    (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt_val const-decl "bool" measure_termination nil)
    (eval_expr_ge_n_j recursive-judgement-axiom nil lang nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMP_omega_TCC1 subtype-tcc nil gcd_pvs0 nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (x!2 skolem-const-decl "nat" gcd_pvs0 nil)
    (x!1 skolem-const-decl "nat" gcd_pvs0 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boole const-decl "Val" gcd_pvs0 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Omega_gcd const-decl "nat" gcd_pvs0 nil)
    (eop2 const-decl "Val" gcd_pvs0 nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (eval const-decl "Maybe[Val]" lang nil)
    (Environment type-eq-decl nil lang nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (pvs0_gcd const-decl "PVS0" gcd_pvs0 nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (pvs0_gcd_eval 0
  (pvs0_gcd_eval-3 nil 3653087435
   ("" (measure-induct+ "m+2*n" ("m" "n"))
    (("" (expand "gcd_pvs0" 1)
      (("" (expand "eval")
        (("" (expand "pvs0_gcd" 1 1)
          (("" (expand "eval_expr")
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -2 1) (("1" (grind) nil nil)) nil)
                 ("2" (hide -3) (("2" (grind) nil nil)) nil)
                 ("3" (expand "eval_expr" 1)
                  (("3" (assert)
                    (("3" (prop)
                      (("1" (expand "eval_expr" 1)
                        (("1" (expand "eop1" 1)
                          (("1" (expand "boole" 1)
                            (("1" (expand "ebool" 1)
                              (("1"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "eval_expr" 3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "eval_expr" -1)
                                              (("1"
                                                (expand "eval_expr" -1)
                                                (("1"
                                                  (expand "eop1" -1)
                                                  (("1"
                                                    (expand "boole" -1)
                                                    (("1"
                                                      (expand
                                                       "ebool"
                                                       -1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "eval_expr"
                                                               2)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "eval_expr"
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_expr"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "eop1"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "gcd"
                                                                               1)
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1-x!2"
                                                                                 "x!2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "gcd_pvs0"
                                                                                     -6)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "eval_expr_ge_n")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "Omega_gcd")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "ebool"
                                                                                             "eop1"
                                                                                             "eop2"
                                                                                             "omega.Omega(x!1 - x!2, x!2)"
                                                                                             "omega.Omega(x!1, x!2) - 1"
                                                                                             "get_body(pvs0_gcd)"
                                                                                             "get_body(pvs0_gcd)"
                                                                                             "LAMBDA (v_1: (vr?)): (x!1 - x!2, x!2)")
                                                                                            (("1"
                                                                                              (beta)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "gcd_pvs0_TCC1")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (expand*
                                                                                                       "eval"
                                                                                                       "Omega_gcd")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "omega_increasing")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "(x!1,x!2)"
                                                                                                 "(x!1-x!2,x!2)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-2
                                                                                                    1
                                                                                                    5
                                                                                                    6))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "lt_concrete_val")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lt_val")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "(# cnds
                                                             := (: pvsbool(op1(1, vr)),
                                                                   pvsnot(op1(0, vr)) :),
                                                           path := (: 1, 2 :),
                                                           rec_expr := rec(op1(3, vr)) #)")
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "semantic_rel_expr")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "semantic_rel_expr")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "eop1")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "(x!1,x!2)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "eval_conds_rec")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "eval_conds_rec")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "eval_conds_rec")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "semantic_rel_expr")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "semantic_rel_expr")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "ebool")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "eop1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "boole")
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "(1,0)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "(x!1,x!2)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "(0,0)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "(x!1,x!2)")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "mf")
                                                                                                            (("3"
                                                                                                              (use
                                                                                                               "lex2_lt")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "pvs0_ccs[[nat, nat], ordinal,
                                               restrict[[ordstruct, ordstruct], [ordinal, ordinal], boolean]
                                                   (ordinals.<)](pvs0_gcd)")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "every_nth")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "0")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "(# cnds
                                                                      := (: pvsbool[Val[[nat, nat]]]
                                                                                (op1[Val[[nat, nat]]](1, vr[Val[[nat, nat]]])),
                                                                            pvsnot[Val[[nat, nat]]]
                                                                                (op1[Val[[nat, nat]]]
                                                                                     (0, vr[Val[[nat, nat]]])) :),
                                                                    path := (: 1, 2 :),
                                                                    rec_expr
                                                                      := rec[Val[[nat, nat]]]
                                                                             (op1[Val[[nat, nat]]](3, vr[Val[[nat, nat]]])) #) = nth(pvs0_ccs
                                                                                      [[nat, nat], ordinal,
                                                                                       restrict
                                                                                           [[ordstruct, ordstruct],
                                                                                            [ordinal, ordinal],
                                                                                            boolean]
                                                                                           (ordinals.<)]
                                                                                      (pvs0_gcd),
                                                                                  0)")
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (eval-formula)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (eval-formula)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (eval-formula)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "mt_lex2_TCC1")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (eval-formula)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (lemma
                                                                                               "IMP_omega_TCC1")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "eval_expr"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "eval_expr" 1)
                                              (("2"
                                                (expand "eval_expr" 1)
                                                (("2"
                                                  (expand "eop1" 1)
                                                  (("2"
                                                    (expand "boole" 1)
                                                    (("2"
                                                      (expand
                                                       "ebool"
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "Omega_gcd")
                                                            (("1"
                                                              (expand
                                                               "eval_expr"
                                                               2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_expr"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "eval_expr"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "eop1"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "gcd"
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "x!2"
                                                                               "x!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "gcd_pvs0"
                                                                                   -6)
                                                                                  (("1"
                                                                                    (expand*
                                                                                     "eval"
                                                                                     "Omega_gcd")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "omega_increasing")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "(x!1,x!2)"
                                                                                         "(x!2,x!1)")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "eval_expr_ge_n")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "ebool"
                                                                                             "eop1"
                                                                                             "eop2"
                                                                                             "omega.Omega(x!2, x!1)"
                                                                                             "omega.Omega(x!1, x!2) - 1"
                                                                                             "get_body(pvs0_gcd)"
                                                                                             "get_body(pvs0_gcd)"
                                                                                             "LAMBDA (v_1: (vr?)): (x!2, x!1)")
                                                                                            (("1"
                                                                                              (beta)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "gcd_pvs0_TCC1")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (expand*
                                                                                                       "eval"
                                                                                                       "Omega_gcd")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (lemma
                                                                                               "IMP_omega_TCC1")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (1
                                                                                            3
                                                                                            4
                                                                                            5))
                                                                                          (("2"
                                                                                            (expand
                                                                                             "lt_concrete_val")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "lt_val")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 1
                                                                                                 "(# cnds
                                                             := (: pvsnot(op1(1, vr)),
                                                                   pvsnot(op1(0, vr)) :),
                                                           path := (: 2, 2 :),
                                                           rec_expr := rec(op1(4, vr)) #)")
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "semantic_rel_expr")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "semantic_rel_expr")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "eop1")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "(x!1,x!2)")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "eval_conds_rec")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "eval_conds_rec")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "eval_conds_rec")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "semantic_rel_expr")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "semantic_rel_expr")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "ebool")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "eop1")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "boole")
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "(0,0)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "(x!1,x!2)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "(0,0)")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "(x!1,x!2)")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     "mf")
                                                                                                    (("3"
                                                                                                      (use
                                                                                                       "lex2_lt")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "pvs0_ccs[[nat, nat], ordinal,
                                               restrict[[ordstruct, ordstruct], [ordinal, ordinal], boolean]
                                                   (ordinals.<)](pvs0_gcd)")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "every_nth")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "1")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "(# cnds
                                                                      := (: pvsnot[Val[[nat, nat]]]
                                                                                (op1[Val[[nat, nat]]](1, vr[Val[[nat, nat]]])),
                                                                            pvsnot[Val[[nat, nat]]]
                                                                                (op1[Val[[nat, nat]]]
                                                                                     (0, vr[Val[[nat, nat]]])) :),
                                                                    path := (: 2, 2 :),
                                                                    rec_expr
                                                                      := rec[Val[[nat, nat]]]
                                                                             (op1[Val[[nat, nat]]](4, vr[Val[[nat, nat]]])) #) = nth(pvs0_ccs
                                                                                      [[nat, nat], ordinal,
                                                                                       restrict
                                                                                           [[ordstruct, ordstruct],
                                                                                            [ordinal, ordinal],
                                                                                            boolean]
                                                                                           (ordinals.<)]
                                                                                      (pvs0_gcd),
                                                                                  1)")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (eval-formula)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (eval-formula)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (eval-formula)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "mt_lex2_TCC1")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (eval-formula)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "eval_expr"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "eval_expr" 1)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "eval_expr" 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "eval_expr" 1)
                  (("4" (assert)
                    (("4" (lift-if)
                      (("4" (prop)
                        (("1" (assert) nil nil)
                         ("2" (expand "eval_expr" 1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_gcd const-decl "PVS0" gcd_pvs0 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMP_omega_TCC1 subtype-tcc nil gcd_pvs0 nil)
    (omega_increasing formula-decl nil omega "orders/")
    (lt_val const-decl "bool" measure_termination nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (restrict const-decl "R" restrict nil)
    (< def-decl "bool" ordinals nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]"
     measure_termination_defs nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (every_nth formula-decl nil list_props nil)
    (mt_lex2_TCC1 subtype-tcc nil gcd_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (eval_conds_rec def-decl "bool" lang nil)
    (lex2_lt formula-decl nil lex2 nil)
    (mf const-decl "mt_lex2.WFM" gcd_pvs0 nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (Conditions type-eq-decl nil lang nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (gcd_pvs0_TCC1 subtype-tcc nil gcd_pvs0 nil)
    (eop2 const-decl "Val" gcd_pvs0 nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Environment type-eq-decl nil lang nil)
    (x!2 skolem-const-decl "nat" gcd_pvs0 nil)
    (x!1 skolem-const-decl "nat" gcd_pvs0 nil)
    (lt_concrete_val const-decl "bool" gcd_pvs0 nil)
    (eval_expr_ge_n formula-decl nil lang nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (boole const-decl "Val" gcd_pvs0 nil)
    (eop1 const-decl "Val" gcd_pvs0 nil)
    (ebool const-decl "bool" gcd_pvs0 nil)
    (/= const-decl "boolean" notequal nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" gcd_pvs0 nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" gcd_pvs0 nil)
    (Omega_gcd const-decl "nat" gcd_pvs0 nil)
    (Omega const-decl "nat" omega "orders/")
    (eval_expr def-decl "Maybe[Val]" lang nil)
    (eval const-decl "Maybe[Val]" lang nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gcd_pvs0 const-decl "nat" gcd_pvs0 nil)
    (gcd def-decl "nat" gcd_ax nil)
    (wfm_gcd_ const-decl "mt_gen.WFM" gcd_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil lang nil)
    (R_ const-decl "(well_founded?[MT_])" gcd_pvs0 nil)
    (MT_ nonempty-type-decl nil gcd_pvs0 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (IMP_pvs0_to_ccg_TCC1 0
  (IMP_pvs0_to_ccg_TCC1-1 nil 3650810494
   ("" (rewrite "wf_nat") nil nil)
   ((wf_nat formula-decl nil naturalnumbers nil)) nil)))

