(factorial_pvs0
 (eop1_TCC1 0
  (eop1_TCC1-1 nil 3643188398 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (lt_nat_TCC1 0
  (lt_nat_TCC1-1 nil 3650812591 ("" (rewrite "wf_nat") nil nil)
   ((wf_nat formula-decl nil naturalnumbers nil)) nil))
 (pvs0_factorial_tcc_termination_TCC1 0
  (pvs0_factorial_tcc_termination_TCC1-1 nil 3650992971
   ("" (subtype-tcc) nil nil)
   ((pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)) nil))
 (pvs0_factorial_tcc_termination 0
  (pvs0_factorial_tcc_termination-1 nil 3643193452
   ("" (expand "pvs0_tcc_termination")
    (("" (inst 1 "id[nat]")
      (("" (skeep)
        (("" (skeep)
          ((""
            (case "cc = (# cnds := (: pvsnot(op1(0, vr)) :),
                    path := (: 1, 2 :),
                    rec_expr := rec(op1(1, vr)) #)")
            (("1" (replaces -1)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (expand "semantic_rel_expr")
                    (("1" (expand "eop1" -1 2)
                      (("1" (expand "eval_conds_rec")
                        (("1" (expand "eval_conds_rec")
                          (("1" (expand "ebool" -2 2)
                            (("1" (expand "/=")
                              (("1"
                                (skeep -2)
                                (("1"
                                  (replaces -3)
                                  (("1"
                                    (expand "semantic_rel_expr" -2)
                                    (("1"
                                      (expand "eop1" -2 2)
                                      (("1"
                                        (expand "boole")
                                        (("1"
                                          (skolem -2 "n1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if -3)
                                              (("1"
                                                (split -3)
                                                (("1"
                                                  (expand
                                                   "semantic_rel_expr"
                                                   -2)
                                                  (("1"
                                                    (replaces -2)
                                                    (("1"
                                                      (skolem -1 "n2")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "semantic_rel_expr"
                                                           -1)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "pvs0_ccs_completness")
                (("2" (inst -1 "pvs0_factorial" "cc")
                  (("1" (expand "pvs0_factorial")
                    (("1" (expand "pvs0_ccs")
                      (("1"
                        (eval-expr
                         "pvs0_ccs_rec(def(ite(op1(0, vr), cnst(1),
                                              op2(0, vr, rec(op1(1, vr))))))
                                     (valid_paths(ite
                                                  (op1(0, vr),
                                                   cnst(1),
                                                   op2(0, vr, rec(op1(1, vr))))))")
                        (("1" (replace -1 -2 :hide? t)
                          (("1"
                            (name-replace "A"
                             "(# cnds := (: pvsnot(op1(0, vr)) :),
                path := (: 1, 2 :),
                rec_expr := rec(op1(1, vr)) #)")
                            (("1" (expand "member")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "member")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "pvs0_factorial")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Val type-eq-decl nil lang nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lt_nat const-decl "(well_founded?[nat])" factorial_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (valid_path def-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" lang nil)
    (path_conditions def-decl "Conditions" lang nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" pvs0_to_dg nil)
    (def adt-constructor-decl "[Expr -> (def?)]" PVS0_adt nil)
    (ite adt-constructor-decl "[[Expr, Expr, Expr] -> (ite?)]" PVS0_adt
     nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0_adt nil)
    (op2 adt-constructor-decl "[[nat, Expr, Expr] -> (op2?)]" PVS0_adt
     nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
                 nil)
    (TRUE const-decl "bool" booleans nil)
    (pvs0_ccs_completness formula-decl nil pvs0_to_dg nil)
    (eop1 const-decl "nat" factorial_pvs0 nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boole const-decl "nat" factorial_pvs0 nil)
    (ebool const-decl "bool" factorial_pvs0 nil)
    (eval_conds_rec def-decl "bool" lang nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (list type-decl nil list_adt nil) (PVS0 type-decl nil PVS0_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Conditions type-eq-decl nil lang nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (every adt-def-decl "boolean" BoolPVS0_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil))
   shostak))
 (R__TCC1 0
  (R__TCC1-1 nil 3643390196
   ("" (inst 1 "LAMBDA(x,x_: MT_):FALSE") (("" (grind) nil nil)) nil)
   ((FALSE const-decl "bool" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT_ nonempty-type-decl nil factorial_pvs0 nil))
   nil))
 (IMP_factorial_ax_R_wf_TCC1 0
  (IMP_factorial_ax_R_wf_TCC1-1 nil 3650812591
   ("" (typepred "R_") (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MT_ nonempty-type-decl nil factorial_pvs0 nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (R_ const-decl "(well_founded?[MT_])" factorial_pvs0 nil))
   nil))
 (IMP_factorial_ax_wfm_f_dec_TCC1 0
  (IMP_factorial_ax_wfm_f_dec_TCC1-1 nil 3650812591
   ("" (skeep)
    (("" (lemma "pvs0_factorial_pvs0_tcc_gen_termination")
      ((""
        (inst -1 "LAMBDA(vr: (vr?)): n"
         "(# cnds := (: pvsnot(op1(0, vr)) :),
          path := (: 1, 2 :),
          rec_expr := rec(op1(1, vr)) #)" "n-1")
        (("1" (assert)
          (("1" (split 1)
            (("1" (expand "semantic_rel_expr")
              (("1" (expand "eop1")
                (("1" (inst 1 "n")
                  (("1" (assert)
                    (("1" (expand "semantic_rel_expr")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "eval_conds_rec")
              (("2" (expand "eval_conds_rec")
                (("2" (expand "semantic_rel_expr")
                  (("2" (expand "ebool" 1 2)
                    (("2" (expand "/=")
                      (("2" (inst 1 "0")
                        (("2" (expand "eop1" 1 2)
                          (("2" (expand "boole")
                            (("2" (inst 1 "n")
                              (("2"
                                (expand "semantic_rel_expr")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil)
         ("3" (hide-all-but 1)
          (("3" (expand "pvs0_tcc_valid_cc")
            (("3" (expand "pvs0_factorial")
              (("3" (assert)
                (("3" (split 1)
                  (("1" (expand "valid_path")
                    (("1" (expand "rac")
                      (("1" (expand "rdc")
                        (("1" (expand "length")
                          (("1" (expand "length")
                            (("1" (expand "length")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth")
                                  (("1"
                                    (expand "nth")
                                    (("1"
                                      (expand "reverse" 1 2)
                                      (("1"
                                        (expand "reverse" 1 2)
                                        (("1"
                                          (expand "reverse" 1 2)
                                          (("1"
                                            (expand "append" 1 2)
                                            (("1"
                                              (expand "append" 1)
                                              (("1"
                                                (expand "append" 1)
                                                (("1"
                                                  (expand "reverse")
                                                  (("1"
                                                    (expand "reverse")
                                                    (("1"
                                                      (expand "append")
                                                      (("1"
                                                        (expand
                                                         "valid_path")
                                                        (("1"
                                                          (expand
                                                           "rac")
                                                          (("1"
                                                            (expand
                                                             "rdc")
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append")
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "valid_path")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "subterm_at")
                    (("2"
                      (eval-expr
                       "nth((: 1, 2 :), length((: 1, 2 :)) - 1)")
                      (("2" (lift-if 1)
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (grind) nil nil))
        nil))
      nil))
    nil)
   ((pvs0_factorial_pvs0_tcc_gen_termination formula-decl nil
     factorial_pvs0 nil)
    (rac const-decl "T" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (valid_path def-decl "bool" lang nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" lang nil)
    (path_conditions def-decl "Conditions" lang nil)
    (eval_conds_rec def-decl "bool" lang nil)
    (/= const-decl "boolean" notequal nil)
    (boole const-decl "nat" factorial_pvs0 nil)
    (ebool const-decl "bool" factorial_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (eop1 const-decl "nat" factorial_pvs0 nil)
    (Environment type-eq-decl nil lang nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" factorial_pvs0 nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (every adt-def-decl "boolean" PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Val type-eq-decl nil lang nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (Conditions type-eq-decl nil lang nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (every adt-def-decl "boolean" BoolPVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (IMP_omega_TCC1 0
  (IMP_omega_TCC1-2 nil 3653085543
   ("" (expand "lt_concrete_val")
    (("" (use "lt_val_wf")
      (("1" (grind) nil nil)
       ("2" (expand "pvs0_factorial") (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((lt_val_wf formula-decl nil measure_termination nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lt_nat const-decl "(well_founded?[nat])" factorial_pvs0 nil)
    (mf const-decl "mt_nat.WFM" factorial_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (eop2 const-decl "nat" factorial_pvs0 nil)
    (eop1 const-decl "nat" factorial_pvs0 nil)
    (ebool const-decl "bool" factorial_pvs0 nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Val type-eq-decl nil lang nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (lt_val const-decl "bool" measure_termination nil)
    (lt_concrete_val const-decl "bool" factorial_pvs0 nil))
   nil))
 (IMP_omega_TCC2 0
  (IMP_omega_TCC2-2 nil 3653085573
   ("" (skeep)
    (("" (expand "lt_concrete_val")
      (("" (use "lt_val_no_desc_inf_branch")
        (("" (expand "pvs0_factorial") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((lt_concrete_val const-decl "bool" factorial_pvs0 nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (ebool const-decl "bool" factorial_pvs0 nil)
    (eop1 const-decl "nat" factorial_pvs0 nil)
    (eop2 const-decl "nat" factorial_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (mf const-decl "mt_nat.WFM" factorial_pvs0 nil)
    (lt_nat const-decl "(well_founded?[nat])" factorial_pvs0 nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_val_no_desc_inf_branch formula-decl nil measure_termination
     nil))
   nil))
 (Omega_factorial_simp 0
  (Omega_factorial_simp-1 nil 3653170532
   ("" (measure-induct+ "n" "n")
    (("" (expand "Omega_factorial")
      (("" (expand "Omega")
        (("" (case "x!1=0")
          (("1" (replaces -1)
            (("1" (hide -1)
              (("1"
                (typepred " min({n: above(0) |
                         FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(0, b)})")
                (("1" (inst -3 "1")
                  (("1" (prop)
                    (("1" (hide -3) (("1" (grind) nil nil)) nil)
                     ("2" (skeep)
                      (("2" (hide-all-but -1)
                        (("2" (expand "gt_n")
                          (("2" (expand "lt_concrete_val")
                            (("2" (expand "lt_val")
                              (("2"
                                (expand "mf")
                                (("2"
                                  (expand "lt_nat")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (inst -1 "1")
                      (("2" (expand "member")
                        (("2" (skeep)
                          (("2" (expand "gt_n" -1)
                            (("2" (expand "lt_concrete_val" -1)
                              (("2"
                                (expand "lt_val")
                                (("2"
                                  (expand "mf")
                                  (("2"
                                    (expand "lt_nat")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "IMP_omega_TCC1") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "x!1-1")
            (("1" (assert)
              (("1"
                (typepred "min({n: above(0) |
                               FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(x!1, b)})")
                (("1"
                  (typepred "min({n: above(0) |
                                     FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(x!1 - 1, b)})")
                  (("1" (inst -6 "1+x!1")
                    (("1" (prop)
                      (("1"
                        (inst -4 "min({n: above(0) |
                                                 FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(x!1, b)})-1")
                        (("1" (prop)
                          (("1" (assert) nil nil)
                           ("2" (skeep)
                            (("2" (inst -6 "b_1")
                              (("2"
                                (expand "gt_n" 1 1)
                                (("2"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst 1 "x!1-1")
                                    (("2"
                                      (prop)
                                      (("2"
                                        (expand "lt_concrete_val" 1)
                                        (("2"
                                          (expand "lt_val")
                                          (("2"
                                            (hide-all-but (1 3))
                                            (("2"
                                              (expand "lt_nat")
                                              (("2"
                                                (expand "mf")
                                                (("2"
                                                  (inst
                                                   1
                                                   "(# cnds := (: pvsnot(op1(0, vr)) :),
                                                                                       path := (: 1, 2 :),
                                                                                       rec_expr := rec(op1(1, vr)) #)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("1"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("1"
                                                            (expand
                                                             "eop1")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("2"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("2"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("2"
                                                            (expand
                                                             "semantic_rel_expr")
                                                            (("2"
                                                              (expand
                                                               "ebool")
                                                              (("2"
                                                                (expand
                                                                 "eop1")
                                                                (("2"
                                                                  (expand
                                                                   "boole")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "0")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "pvs0_ccs[nat](pvs0_factorial)")
                                                    (("2"
                                                      (rewrite
                                                       "every_nth")
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (case
                                                           "(# cnds
                                                                                                 := (: pvsnot[Val[nat]](op1[Val[nat]](0, vr[Val[nat]])) :),
                                                                                               path := (: 1, 2 :),
                                                                                               rec_expr := rec[Val[nat]](op1[Val[nat]](1, vr[Val[nat]])) #) = nth(pvs0_ccs[nat](pvs0_factorial), 0)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (eval-formula)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (eval-formula)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (eval-formula)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (eval-formula)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (case
                                     "min({n: above(0) |
                                                                                  FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(x!1, b)}) = 1")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "gt_n" -1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (inst 1 "x!1-1")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (expand "lt_concrete_val" 1)
                                        (("4"
                                          (expand "lt_val" 1)
                                          (("4"
                                            (hide-all-but (1 3))
                                            (("4"
                                              (expand "lt_nat")
                                              (("4"
                                                (expand "mf")
                                                (("4"
                                                  (inst
                                                   1
                                                   "(# cnds := (: pvsnot(op1(0, vr)) :),
                                                                                       path := (: 1, 2 :),
                                                                                       rec_expr := rec(op1(1, vr)) #)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("1"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("1"
                                                            (expand
                                                             "eop1")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("2"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("2"
                                                            (expand
                                                             "semantic_rel_expr")
                                                            (("2"
                                                              (expand
                                                               "semantic_rel_expr")
                                                              (("2"
                                                                (expand
                                                                 "ebool")
                                                                (("2"
                                                                  (expand
                                                                   "eop1")
                                                                  (("2"
                                                                    (expand
                                                                     "boole")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "0")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "x!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "pvs0_ccs[nat](pvs0_factorial)")
                                                    (("2"
                                                      (rewrite
                                                       "every_nth")
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (case
                                                           "(# cnds
                                                                                                 := (: pvsnot[Val[nat]](op1[Val[nat]](0, vr[Val[nat]])) :),
                                                                                               path := (: 1, 2 :),
                                                                                               rec_expr := rec[Val[nat]](op1[Val[nat]](1, vr[Val[nat]])) #) = nth(pvs0_ccs[nat](pvs0_factorial), 0)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (eval-formula)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (eval-formula)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (eval-formula)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (eval-formula)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "min[above(0)]
                                                                   ({n: above(0) |
                                                                       FORALL (b: nat):
                                                                         NOT gt_n[nat, lt_concrete_val]
                                                                                 (lt_concrete_val)(n)(x!1, b)}) = 1")
                          (("1" (replaces -1)
                            (("1" (inst -5 "x!1-1")
                              (("1"
                                (expand "gt_n" 2)
                                (("1"
                                  (expand "lt_concrete_val" 2)
                                  (("1"
                                    (expand "lt_val")
                                    (("1"
                                      (expand "lt_nat")
                                      (("1"
                                        (expand "mf")
                                        (("1"
                                          (hide-all-but (2 3))
                                          (("1"
                                            (inst
                                             1
                                             " (# cnds := (: pvsnot(op1(0, vr)) :),
                                                                                 path := (: 1, 2 :),
                                                                                 rec_expr := rec(op1(1, vr)) #)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("1"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("1"
                                                      (expand "eop1")
                                                      (("1"
                                                        (inst 1 "x!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("2"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("2"
                                                      (expand
                                                       "semantic_rel_expr")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("2"
                                                          (expand
                                                           "ebool")
                                                          (("2"
                                                            (expand
                                                             "eop1")
                                                            (("2"
                                                              (expand
                                                               "boole")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "pvs0_ccs[nat](pvs0_factorial)")
                                              (("2"
                                                (rewrite "every_nth")
                                                (("2"
                                                  (inst -1 "0")
                                                  (("1"
                                                    (case
                                                     "(# cnds
                                                                                           := (: pvsnot[Val[nat]](op1[Val[nat]](0, vr[Val[nat]])) :),
                                                                                         path := (: 1, 2 :),
                                                                                         rec_expr := rec[Val[nat]](op1[Val[nat]](1, vr[Val[nat]])) #) = nth(pvs0_ccs[nat](pvs0_factorial), 0)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (eval-formula)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3"
                                                        (eval-formula)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (eval-formula)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3"
                                                (eval-formula)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("3" (expand "nonempty?")
                          (("3" (expand "empty?")
                            (("3" (expand "member")
                              (("3"
                                (lemma "bottom")
                                (("3"
                                  (inst -1 "x!1")
                                  (("3"
                                    (skeep)
                                    (("3" (inst -2 "n") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (lemma "IMP_omega_TCC1")
                          (("4" (propax) nil nil)) nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2"
                          (case "FORALL (m,n,b: nat): m > n => NOT gt_n(lt_concrete_val)(m)(n, b)")
                          (("1" (inst?)
                            (("1" (skeep)
                              (("1"
                                (inst -1 "x!1" "b")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (measure-induct+ "m" "m")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "gt_n" -3)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -3)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (expand "lt_concrete_val" -2)
                                        (("2"
                                          (expand "lt_val" -2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "lt_nat")
                                              (("2"
                                                (expand "mf")
                                                (("2"
                                                  (inst -6 "x!2-1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -6 "c" "b")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "IMP_omega_TCC1")
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (lemma "IMP_omega_TCC1")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "IMP_omega_TCC1")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (lemma "bottom")
                          (("2" (inst -1 "x!1-1")
                            (("2" (skeep) (("2" (inst -2 "n") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (lemma "bottom")
                      (("2" (expand "member")
                        (("2" (inst -1 "x!1")
                          (("2" (skeep) (("2" (inst -2 "n") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "IMP_omega_TCC1") (("3" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMP_omega_TCC1 subtype-tcc nil factorial_pvs0 nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (lt_val const-decl "bool" measure_termination nil)
    (lt_nat const-decl "(well_founded?[nat])" factorial_pvs0 nil)
    (mf const-decl "mt_nat.WFM" factorial_pvs0 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (lt_concrete_val const-decl "bool" factorial_pvs0 nil)
    (gt_n inductive-decl "bool" omega "orders/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bottom formula-decl nil omega "orders/")
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" BoolPVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Conditions type-eq-decl nil lang nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Val type-eq-decl nil lang nil)
    (every adt-def-decl "boolean" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (eval_conds_rec def-decl "bool" lang nil)
    (ebool const-decl "bool" factorial_pvs0 nil)
    (boole const-decl "nat" factorial_pvs0 nil)
    (eop1 const-decl "nat" factorial_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (every_nth formula-decl nil list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (x!2 skolem-const-decl "nat" factorial_pvs0 nil)
    (x!1 skolem-const-decl "nat" factorial_pvs0 nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Omega const-decl "nat" omega "orders/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Omega_factorial const-decl "nat" factorial_pvs0 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (Omega_factorial_simp-2 nil 3653085624
   ("" (measure-induct+ "n" "n")
    (("" (expand "Omega_factorial")
      (("" (expand "Omega")
        (("" (case "x!1=0")
          (("1" (replaces -1)
            (("1" (hide -1)
              (("1"
                (typepred " min({n: above(0) |
                     FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(0, b)})")
                (("1" (inst -3 "1")
                  (("1" (prop)
                    (("1" (hide -3) (("1" (grind) nil nil)) nil)
                     ("2" (skeep)
                      (("2" (hide-all-but -1)
                        (("2" (expand "gt_n")
                          (("2" (expand "lt_concrete_val")
                            (("2" (expand "lt_val")
                              (("2"
                                (expand "mf")
                                (("2"
                                  (expand "lt_nat")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (inst -1 "1")
                      (("2" (expand "member")
                        (("2" (skeep)
                          (("2" (expand "gt_n" -1)
                            (("2" (expand "lt_concrete_val" -1)
                              (("2"
                                (expand "lt_val")
                                (("2"
                                  (expand "mf")
                                  (("2"
                                    (expand "lt_nat")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "IMP_omega_TCC1") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "x!1-1")
            (("1" (assert)
              (("1"
                (typepred "min({n: above(0) |
                         FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(x!1, b)})")
                (("1"
                  (typepred "min({n: above(0) |
                             FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(x!1 - 1, b)})")
                  (("1" (inst -6 "1+x!1")
                    (("1" (prop)
                      (("1"
                        (inst -4 "min({n: above(0) |
                                     FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(x!1, b)})-1")
                        (("1" (prop)
                          (("1" (assert) nil nil)
                           ("2" (skeep)
                            (("2" (inst -6 "b_1")
                              (("2"
                                (expand "gt_n" 1 1)
                                (("2"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst 1 "x!1-1")
                                    (("2"
                                      (prop)
                                      (("2"
                                        (expand "lt_concrete_val" 1)
                                        (("2"
                                          (expand "lt_val")
                                          (("2"
                                            (hide-all-but (1 3))
                                            (("2"
                                              (expand "lt_nat")
                                              (("2"
                                                (expand "mf")
                                                (("2"
                                                  (inst
                                                   1
                                                   "(# cnds := (: pvsnot(op1(0, vr)) :),
                                                                     path := (: 1, 2 :),
                                                                     rec_expr := rec(op1(1, vr)) #)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("1"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("1"
                                                            (expand
                                                             "eop1")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("2"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("2"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("2"
                                                            (expand
                                                             "semantic_rel_expr")
                                                            (("2"
                                                              (expand
                                                               "ebool")
                                                              (("2"
                                                                (expand
                                                                 "eop1")
                                                                (("2"
                                                                  (expand
                                                                   "boole")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "0")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "pvs0_ccs[nat, nat, lt_nat](pvs0_factorial)")
                                                    (("2"
                                                      (rewrite
                                                       "every_nth")
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (case
                                                           "(# cnds
                                                                      := (: pvsnot[Val[nat]](op1[Val[nat]](0, vr[Val[nat]])) :),
                                                                    path := (: 1, 2 :),
                                                                    rec_expr := rec[Val[nat]](op1[Val[nat]](1, vr[Val[nat]])) #) = nth(pvs0_ccs[nat, nat, lt_nat](pvs0_factorial), 0)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (eval-formula)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (eval-formula)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (eval-formula)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (eval-formula)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (case
                                     "min({n: above(0) |
                                                           FORALL (b: nat): NOT gt_n(lt_concrete_val)(n)(x!1, b)}) = 1")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "gt_n" -1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (inst 1 "x!1-1")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (expand "lt_concrete_val" 1)
                                        (("4"
                                          (expand "lt_val" 1)
                                          (("4"
                                            (hide-all-but (1 3))
                                            (("4"
                                              (expand "lt_nat")
                                              (("4"
                                                (expand "mf")
                                                (("4"
                                                  (inst
                                                   1
                                                   "(# cnds := (: pvsnot(op1(0, vr)) :),
                                                                     path := (: 1, 2 :),
                                                                     rec_expr := rec(op1(1, vr)) #)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("1"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("1"
                                                            (expand
                                                             "eop1")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("2"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("2"
                                                            (expand
                                                             "semantic_rel_expr")
                                                            (("2"
                                                              (expand
                                                               "semantic_rel_expr")
                                                              (("2"
                                                                (expand
                                                                 "ebool")
                                                                (("2"
                                                                  (expand
                                                                   "eop1")
                                                                  (("2"
                                                                    (expand
                                                                     "boole")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "0")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "x!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "pvs0_ccs[nat, nat, lt_nat](pvs0_factorial)")
                                                    (("2"
                                                      (rewrite
                                                       "every_nth")
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (case
                                                           "(# cnds
                                                                      := (: pvsnot[Val[nat]](op1[Val[nat]](0, vr[Val[nat]])) :),
                                                                    path := (: 1, 2 :),
                                                                    rec_expr := rec[Val[nat]](op1[Val[nat]](1, vr[Val[nat]])) #) = nth(pvs0_ccs[nat, nat, lt_nat](pvs0_factorial), 0)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (eval-formula)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (eval-formula)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (eval-formula)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (eval-formula)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "min[above(0)]
                                                ({n: above(0) |
                                                    FORALL (b: nat):
                                                      NOT gt_n[nat, lt_concrete_val]
                                                              (lt_concrete_val)(n)(x!1, b)}) = 1")
                          (("1" (replaces -1)
                            (("1" (inst -5 "x!1-1")
                              (("1"
                                (expand "gt_n" 2)
                                (("1"
                                  (expand "lt_concrete_val" 2)
                                  (("1"
                                    (expand "lt_val")
                                    (("1"
                                      (expand "lt_nat")
                                      (("1"
                                        (expand "mf")
                                        (("1"
                                          (hide-all-but (2 3))
                                          (("1"
                                            (inst
                                             1
                                             " (# cnds := (: pvsnot(op1(0, vr)) :),
                                                                 path := (: 1, 2 :),
                                                                 rec_expr := rec(op1(1, vr)) #)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("1"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("1"
                                                      (expand "eop1")
                                                      (("1"
                                                        (inst 1 "x!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("2"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("2"
                                                      (expand
                                                       "semantic_rel_expr")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("2"
                                                          (expand
                                                           "ebool")
                                                          (("2"
                                                            (expand
                                                             "eop1")
                                                            (("2"
                                                              (expand
                                                               "boole")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "pvs0_ccs[nat, nat, lt_nat](pvs0_factorial)")
                                              (("2"
                                                (rewrite "every_nth")
                                                (("2"
                                                  (inst -1 "0")
                                                  (("1"
                                                    (case
                                                     "(# cnds
                                                                  := (: pvsnot[Val[nat]](op1[Val[nat]](0, vr[Val[nat]])) :),
                                                                path := (: 1, 2 :),
                                                                rec_expr := rec[Val[nat]](op1[Val[nat]](1, vr[Val[nat]])) #) = nth(pvs0_ccs[nat, nat, lt_nat](pvs0_factorial), 0)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (eval-formula)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3"
                                                        (eval-formula)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (eval-formula)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3"
                                                (eval-formula)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("3" (expand "nonempty?")
                          (("3" (expand "empty?")
                            (("3" (expand "member")
                              (("3"
                                (lemma "bottom")
                                (("3"
                                  (inst -1 "x!1")
                                  (("3"
                                    (skeep)
                                    (("3" (inst -2 "n") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (lemma "IMP_omega_TCC1")
                          (("4" (propax) nil nil)) nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2"
                          (case "FORALL (m,n,b: nat): m > n => NOT gt_n(lt_concrete_val)(m)(n, b)")
                          (("1" (inst?)
                            (("1" (skeep)
                              (("1"
                                (inst -1 "x!1" "b")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (measure-induct+ "m" "m")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "gt_n" -3)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -3)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (expand "lt_concrete_val" -2)
                                        (("2"
                                          (expand "lt_val" -2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "lt_nat")
                                              (("2"
                                                (expand "mf")
                                                (("2"
                                                  (inst -6 "x!2-1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -6 "c" "b")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "IMP_omega_TCC1")
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (lemma "IMP_omega_TCC1")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "IMP_omega_TCC1")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (lemma "bottom")
                          (("2" (inst -1 "x!1-1")
                            (("2" (skeep) (("2" (inst -2 "n") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (lemma "bottom")
                      (("2" (expand "member")
                        (("2" (inst -1 "x!1")
                          (("2" (skeep) (("2" (inst -2 "n") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "IMP_omega_TCC1") (("3" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_val const-decl "bool" measure_termination nil)
    (gt_n inductive-decl "bool" omega "orders/")
    (bottom formula-decl nil omega "orders/")
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Conditions type-eq-decl nil lang nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (eval_conds_rec def-decl "bool" lang nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (Omega const-decl "nat" omega "orders/")
    (well_founded? const-decl "bool" orders nil))
   nil))
 (pvs0_factorial_eval_MT_nonempty_TCC1 0
  (pvs0_factorial_eval_MT_nonempty_TCC1-1 nil 3643189390
   ("" (mapped-axiom-tcc) nil nil) nil nil))
 (pvs0_factorial_eval 0
  (pvs0_factorial_eval-1 nil 3643193436
   ("" (induct "n")
    (("1" (assert) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (skeep) (("4" (grind) nil nil)) nil)
     ("5" (expand "pvs0_factorial") (("5" (propax) nil nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (eval_expr def-decl "Maybe[Val]" lang nil)
    (boole const-decl "nat" factorial_pvs0 nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" factorial_pvs0
     nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" factorial_pvs0 nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (eop2 const-decl "nat" factorial_pvs0 nil)
    (eop1 const-decl "nat" factorial_pvs0 nil)
    (ebool const-decl "bool" factorial_pvs0 nil)
    (eval const-decl "Maybe[Val]" lang nil)
    (Environment type-eq-decl nil lang nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (factorial def-decl "nat" factorial_ax nil)
    (wfm_f_ const-decl "mt_gen.WFM" factorial_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (R_ const-decl "(well_founded?[MT_])" factorial_pvs0 nil)
    (well_founded? const-decl "bool" orders nil)
    (MT_ nonempty-type-decl nil factorial_pvs0 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Val type-eq-decl nil lang nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (eval_factorial_TCC1 0
  (eval_factorial_TCC1-1 nil 3650994321
   ("" (skeep)
    (("" (use "Omega_factorial_simp")
      (("" (replaces -1)
        (("" (use "pvs0_factorial_eval")
          (("" (assert) (("" (flatten) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Omega_factorial_simp formula-decl nil factorial_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (pvs0_factorial_eval formula-decl nil factorial_pvs0 nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (semantic_equivalence 0
  (semantic_equivalence-1 nil 3650993143
   ("" (skeep)
    (("" (use "pvs0_factorial_eval")
      (("" (assert)
        (("" (flatten)
          (("" (expand "eval_factorial")
            (("" (use "Omega_factorial_simp")
              (("" (replaces -1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_factorial_eval formula-decl nil factorial_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (Omega_factorial_simp formula-decl nil factorial_pvs0 nil)
    (eval_factorial const-decl "nat" factorial_pvs0 nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak)))

