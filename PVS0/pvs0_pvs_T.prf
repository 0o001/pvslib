(pvs0_pvs_T
 (make_pvs0_TCC1 0
  (make_pvs0_TCC1-1 nil 3665710400
   ("" (skeep)
    (("" (expand "terminating?")
      (("" (expand "terminates_expr")
        (("" (skeep)
          (("" (expand "semantic_rel_expr")
            (("" (expand "semantic_rel_expr")
              (("" (expand "length")
                (("" (expand "length")
                  (("" (expand "nth")
                    (("" (inst 1 "pvs(env)")
                      (("" (inst 1 "env") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((terminating? const-decl "bool" pvs0_lang nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_pvs_T nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (terminates_expr const-decl "bool" pvs0_expr nil))
   nil))
 (from_pvs_to_pvs0 0
  (from_pvs_to_pvs0-1 nil 3665710591
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (expand "make_pvs0")
        (("" (expand "semantic_rel_expr")
          (("" (expand "semantic_rel_expr")
            (("" (inst 1 "t") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel const-decl "bool" pvs0_lang nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_pvs_T nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (make_pvs0 const-decl "(terminating?)" pvs0_pvs_T nil))
   shostak))
 (pvs_in_pvs0_TCC1 0
  (pvs_in_pvs0_TCC1-1 nil 3666649622 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_pvs_T nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (determined? const-decl "bool" pvs0_lang nil))
   nil))
 (pvs_in_pvs0 0
  (pvs_in_pvs0-1 nil 3665710885
   ("" (skeep)
    (("" (inst 1 "make_pvs0(pvs)")
      (("" (skeep)
        (("" (lemma "from_pvs_to_pvs0")
          (("" (insteep -1)
            (("" (expand "semantic_rel")
              (("" (expand "make_pvs0")
                (("" (expand "semantic_rel_expr")
                  (("" (expand "semantic_rel_expr")
                    (("" (skeep)
                      (("" (expand "mu_eval")
                        (("" (expand "eval")
                          (("" (expand "eval_expr")
                            (("" (expand "eval_expr")
                              ((""
                                (lift-if)
                                ((""
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil pvs0_pvs_T nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (make_pvs0 const-decl "(terminating?)" pvs0_pvs_T nil)
    (from_pvs_to_pvs0 formula-decl nil pvs0_pvs_T nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(false_val, eval_op1, eval_op2)
                        (m, expr, body, env))}" pvs0_pvs_T nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(false_val, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" pvs0_pvs_T
     nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (mu_eval const-decl "Val" pvs0_lang nil))
   shostak)))

