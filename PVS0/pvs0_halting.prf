(pvs0_halting
 (to_PVS0_TCC1 0
  (to_PVS0_TCC1-1 nil 3666356880
   ("" (lemma "representantion") (("" (grind) nil nil)) nil)
   ((surjective? const-decl "bool" functions nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (PVS0_partial_recursive type-eq-decl nil pvs0_computable nil)
    (f!1 skolem-const-decl
     "[nat -> PVS0_partial_recursive[false_val, lop1, lop2]]"
     pvs0_halting nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (representantion formula-decl nil pvs0_computable nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (list type-decl nil list_adt nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting
     nil))
   nil))
 (true_val_TCC1 0
  (true_val_TCC1-2 nil 3718320449 ("" (inst 1 "false_val+1") nil nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (/= const-decl "boolean" notequal nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (true_val_TCC1-1 nil 3718320440 ("" (existence-tcc) nil nil) nil
   nil))
 (pvs0_undecidability 0
  (pvs0_undecidability-1 nil 3666816836
   ("" (skolem -1 "f")
    ((""
      (name "ff"
            "(false_val,append(f`2,(:LAMBDA(v:nat):pvs0_eval(f)(v) :)),append(f`3,(:lambda(m,n:nat): pvs0_eval(f)(tuple2nat(m,n)) :)),ite(op1(length(f`2),vr),rec(vr),cnst(true_val)))")
      (("" (hide -1)
        (("" (name "eff" "from_PVS0(ff)")
          (("1" (inst - "ff" "eff")
            (("1" (replaces -1)
              (("1" (case "NOT pvs0_eval(f)(eff) = false_val")
                (("1" (assert)
                  (("1" (hide -1)
                    (("1" (lemma "mu_terminates")
                      (("1" (inst -1 "ff" "eff")
                        (("1" (skoletin* -1)
                          (("1" (expand "eval")
                            (("1" (expand "ff" -2 (4 5))
                              (("1"
                                (expand "eval_expr")
                                (("1"
                                  (case-replace "mun = 0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (name
                                             "EE"
                                             "eval_expr(ff`1, ff`2, ff`3)
                                                                                                                                                                                                                                                                                                                                                                        (mun, op1(length(f`2), vr),
                                                                                                                                                                                                                                                                                                                                                                         ite(op1(length(f`2), vr), rec(vr), cnst(true_val)),
                                                                                                                                                                                                                                                                                                                                                                         eff)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "ff" -3 1)
                                                (("1"
                                                  (expand
                                                   "eval_expr"
                                                   -1)
                                                  (("1"
                                                    (expand "ff" -1 5)
                                                    (("1"
                                                      (use
                                                       "nth_append[[nat->nat]]")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "ff"
                                                               -1
                                                               4)
                                                              (("1"
                                                                (rewrite
                                                                 "length_append[[nat->nat]]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "ff"
                                                                     -1
                                                                     4)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_expr"
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "eval_expr"
                                                                             -2)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "mu")
                                                                                    (("1"
                                                                                      (with-tccs
                                                                                       (typepred
                                                                                        "min({n: nat | some?(eval(ff)(n)(eff))})"))
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -7
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "mun-1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "eval"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ff"
                                                                                                 1
                                                                                                 (4
                                                                                                  5))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "eval"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (name
                                                                                                       "VV"
                                                                                                       "eval_expr(ff`1, ff`2, ff`3)
                                                                          (mun, vr,
                                                                           ite(op1(length(f`2), vr), rec(vr), cnst(true_val)),
                                                                           eff)")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "eval_expr"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "determined?")
                    (("2" (expand "semantic_rel" 1)
                      (("2" (expand "ff")
                        (("2" (expand "semantic_rel_expr" 1)
                          (("2" (expand "semantic_rel_expr" 1 1)
                            (("2" (expand "semantic_rel_expr" 1 1)
                              (("2"
                                (rewrite "length_append")
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "nth_append")
                                    (("2"
                                      (expand "nth")
                                      (("2"
                                        (inst 1 "true_val")
                                        (("2"
                                          (inst 1 "pvs0_eval(f)(eff)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst 1 "eff")
                                              nil
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "semantic_rel_expr")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "f")
            (("2" (skeep)
              (("2" (inst 1 "n+1")
                (("2" (expand "ff")
                  (("2" (expand "pvs0_level" 1)
                    (("2" (prop)
                      (("1" (assert)
                        (("1" (inst 1 "f")
                          (("1" (prop)
                            (("1" (rewrite "length_append") nil nil)
                             ("2" (skeep)
                              (("2"
                                (prop)
                                (("1"
                                  (rewrite "nth_append")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (case "i=length(f`2)")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "nth_append")
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (typepred
                                             "pvs0_eval(f)(env)")
                                            (("1"
                                              (expand "semantic_rel")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (rewrite "length_append")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 1 "f")
                        (("2" (prop)
                          (("1"
                            (lemma
                             "length_append[[[pvs0_expr[naturalnumbers.nat].Val,
                                                                                              pvs0_expr[naturalnumbers.nat].Val] ->
                                                                                               pvs0_expr[naturalnumbers.nat].Val]]")
                            (("1" (inst?)
                              (("1"
                                (expand "length" -1 3)
                                (("1"
                                  (expand "length" -1 3)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (prop)
                              (("1"
                                (rewrite "nth_append")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (case "i=length(f`3)")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (rewrite "nth_append")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (typepred
                                           "pvs0_eval(f)(tuple2nat(env1, env2))")
                                          (("1"
                                            (expand "semantic_rel")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2"
                                    (rewrite "length_append")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((true_val const-decl "{x: Val | x /= false_val}" pvs0_halting nil)
    (/= const-decl "boolean" notequal nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (length def-decl "nat" list_props nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite adt-constructor-decl
     "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" PVS0Expr_adt nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_eval const-decl
     "{v: Val | semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)(pvs0`4, pvs0`4, val, v)}"
     pvs0_eval nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PVS0_computable type-eq-decl nil pvs0_computable nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0_partial_recursive type-eq-decl nil pvs0_computable nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting
     nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (append def-decl "list[T]" list_props nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (from_PVS0 const-decl "(injective?[PVS0_partial_recursive, nat])"
     pvs0_halting nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (mu_terminates formula-decl nil pvs0_lang nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (ff skolem-const-decl "[nat, list[[Val[nat] -> Val[nat]]],
 list[[[Val[nat], Val[nat]] -> Val[nat]]], (ite?)]" pvs0_halting nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_append formula-decl nil list_props nil)
    (nth def-decl "T" list_props nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(false_val, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" pvs0_to_nat
     nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(false_val, eval_op1, eval_op2)
                        (m, expr, body, env))}" pvs0_to_nat nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (f skolem-const-decl "PVS0_computable[false_val, lop1, lop2]"
     pvs0_halting nil)
    (n skolem-const-decl "nat" pvs0_halting nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil)))

