(pvs0_eval
 (pvs0_eval_expr_TCC1 0
  (pvs0_eval_expr_TCC1-1 nil 3682847758
   ("" (skeep)
    (("" (typepred "body")
      (("" (use "terminates_implies_pvs0_tcc") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (terminates_implies_pvs0_tcc formula-decl nil measure_termination
     nil))
   nil))
 (pvs0_eval_expr_TCC2 0
  (pvs0_eval_expr_TCC2-1 nil 3682847758
   ("" (skosimp*) (("" (rewrite "wf_nat") nil nil)) nil)
   ((wf_nat formula-decl nil naturalnumbers nil)) nil))
 (pvs0_eval_expr_TCC3 0
  (pvs0_eval_expr_TCC3-2 nil 3684365534
   ("" (skeep)
    (("" (typepred "z`2")
      (("" (use "terminates_implies_pvs0_tcc") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (terminates_implies_pvs0_tcc formula-decl nil measure_termination
     nil))
   nil))
 (pvs0_eval_expr_TCC4 0
  (pvs0_eval_expr_TCC4-1 nil 3682847758
   ("" (skeep)
    (("" (typepred "body")
      (("" (use "terminates_implies_pvs0_tcc") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (terminates_implies_pvs0_tcc formula-decl nil measure_termination
     nil))
   nil))
 (pvs0_eval_expr_TCC5 0
  (pvs0_eval_expr_TCC5-2 nil 3684365451
   ("" (skeep)
    (("" (replaces -1)
      (("" (expand "semantic_rel_expr") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((semantic_rel_expr inductive-decl "bool" pvs0_expr nil)) nil))
 (pvs0_eval_expr_TCC6 0
  (pvs0_eval_expr_TCC6-2 nil 3684365407
   ("" (skeep)
    (("" (replaces -1)
      (("" (expand "semantic_rel_expr") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((semantic_rel_expr inductive-decl "bool" pvs0_expr nil)) nil))
 (pvs0_eval_expr_TCC7 0
  (pvs0_eval_expr_TCC7-2 nil 3684365361
   ("" (skeep)
    (("" (skeep)
      (("" (replaces -1)
        (("" (expand "semantic_rel_expr")
          (("" (inst 1 "v")
            ((""
              (typepred
               " v1(false_val, eval_op1, eval_op2)(arg, body, val)")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (typepred "val")
                  (("2" (skeep)
                    (("2" (inst 1 "append((:0:), path)")
                      (("1" (lemma "subterm_append")
                        (("1" (inst -1 "body" "path")
                          (("1" (assert)
                            (("1" (inst -1 "(:0:)")
                              (("1"
                                (reveal -3)
                                (("1"
                                  (split)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (replace -3 1)
                                      (("1"
                                        (replace -1 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "path_conditions_unmodified")
                                    (("2"
                                      (inst -1 "body" "path" 0)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -4 -1)
                                          (("2"
                                            (replace -2 -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "append")
                                                (("2"
                                                  (expand "append")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (reveal -3)
                                    (("2"
                                      (replace -1 1)
                                      (("2"
                                        (expand "valid_path")
                                        (("2"
                                          (grind)
                                          (("2"
                                            (rewrite "null_path")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "every")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "valid_paths_subexpr")
                        (("2" (inst -1 "body" "path")
                          (("2" (assert)
                            (("2" (inst -1 "(:0:)")
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide 2 -2)
                                  (("1"
                                    (reveal -4)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "valid_path")
                                        (("1"
                                          (grind)
                                          (("1"
                                            (rewrite "null_path")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "every")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "every")
                        (("3" (expand "every") (("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil))
   nil))
 (pvs0_eval_expr_TCC8 0
  (pvs0_eval_expr_TCC8-2 nil 3684365322
   ("" (skeep)
    (("" (typepred "val")
      (("" (skeep)
        (("" (inst 1 "append((:0:), path)")
          (("1" (lemma "subterm_append")
            (("1" (inst -1 "body" "path")
              (("1" (assert)
                (("1" (inst -1 "(:0:)")
                  (("1" (split)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (replace -4 1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "path_conditions_unmodified")
                      (("2" (inst -1 "body" "path" 0)
                        (("2" (assert)
                          (("2" (expand "append")
                            (("2" (expand "append")
                              (("2"
                                (replace -1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replace -1 1)
                      (("2" (replace -3 1)
                        (("2" (expand "valid_path")
                          (("2" (grind)
                            (("2" (rewrite "null_path") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "every") (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "valid_paths_subexpr")
            (("2" (inst -1 "body" "path")
              (("2" (assert)
                (("2" (inst -1 "(:0:)")
                  (("1" (replace -1 1)
                    (("1" (hide 2 -2)
                      (("1" (replace -2)
                        (("1" (expand "valid_path")
                          (("1" (grind)
                            (("1" (rewrite "null_path") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "every") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "every")
            (("3" (expand "every") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_expr_TCC9 0
  (pvs0_eval_expr_TCC9-1 nil 3682847758
   ("" (skeep*) (("" (rewrite "lex2_lt") (("" (grind) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pvs0_eval_expr_TCC10 0
  (pvs0_eval_expr_TCC10-2 nil 3684365250
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "val")
        (("" (skeep)
          (("" (inst 1 "append((:1:), path)")
            (("1" (lemma "subterm_append")
              (("1" (inst -1 "body" "path")
                (("1" (assert)
                  (("1" (inst -1 "(:1:)")
                    (("1" (split)
                      (("1" (replace -1 1)
                        (("1" (replace -2 1)
                          (("1" (replace -4 1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "path_conditions_unmodified2")
                        (("2" (inst -1 "body" "path" 1)
                          (("2" (assert)
                            (("2" (expand "append")
                              (("2"
                                (expand "append")
                                (("2"
                                  (replace -1 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (replace -1 1)
                        (("2" (replace -3 1)
                          (("2" (expand "valid_path")
                            (("2" (prop)
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (lemma "valid_paths_subexpr")
                                (("2"
                                  (inst -1 "body" "path")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "(:1:)")
                                      (("1"
                                        (expand "append")
                                        (("1"
                                          (expand "append")
                                          (("1"
                                            (grind)
                                            (("1"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (lemma "valid_paths_subexpr")
                                (("4"
                                  (inst -1 "body" "path")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (inst -1 "(:1:)")
                                      (("1"
                                        (grind)
                                        (("1"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "every") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "valid_paths_subexpr")
              (("2" (inst -1 "body" "path")
                (("2" (assert)
                  (("2" (inst -1 "(:1:)")
                    (("1" (replace -1 1)
                      (("1" (replace -3 1)
                        (("1" (grind)
                          (("1" (rewrite "null_path") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "every") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "every")
              (("3" (expand "every") (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (path_conditions_unmodified2 formula-decl nil pvs0_props nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil))
   nil))
 (pvs0_eval_expr_TCC11 0
  (pvs0_eval_expr_TCC11-1 nil 3682847758
   ("" (skeep*)
    (("" (rewrite "lex2_lt")
      (("" (hide -2) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil))
   nil))
 (pvs0_eval_expr_TCC12 0
  (pvs0_eval_expr_TCC12-2 nil 3684365165
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "semantic_rel_expr")
          (("" (assert)
            (("" (inst 1 "v1" "v2")
              (("" (split)
                (("1" (hide -3)
                  (("1"
                    (typepred
                     " v(false_val, eval_op1, eval_op2)(arg1, body, val)")
                    (("1" (replace -3 -1 rl)
                      (("1" (replace -2 1) (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide -2 2)
                      (("2" (typepred "val")
                        (("2" (skeep)
                          (("2" (inst 1 "append((:0:), path)")
                            (("1" (lemma "subterm_append")
                              (("1"
                                (inst -1 "body" "path")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "(:0:)")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (replace -2 1)
                                        (("1"
                                          (split)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (lemma
                                             "path_conditions_unmodified")
                                            (("2"
                                              (inst -1 "body" "path" 0)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "append")
                                                  (("2"
                                                    (expand "append")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "every")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "valid_paths_subexpr")
                              (("2"
                                (inst -1 "body" "path")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "(:0:)")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide 2 -2)
                                        (("1"
                                          (replace -2 1)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "every")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "every")
                              (("3"
                                (expand "every")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2)
                  (("2"
                    (typepred
                     " v(false_val, eval_op1, eval_op2)(arg2, body, val)")
                    (("1" (replace -3 -1 rl)
                      (("1" (replace -2 1) (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide -2 2)
                      (("2" (typepred "val")
                        (("2" (skeep)
                          (("2" (inst 1 "append((:1:), path)")
                            (("1" (lemma "subterm_append")
                              (("1"
                                (inst -1 "body" "path")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "(:1:)")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (replace -2 1)
                                        (("1"
                                          (split)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (lemma
                                             "path_conditions_unmodified2")
                                            (("2"
                                              (inst -1 "body" "path" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "append")
                                                  (("2"
                                                    (expand "append")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -3 1)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "every")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "valid_paths_subexpr")
                              (("2"
                                (inst -1 "body" "path")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "(:1:)")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide 2 -2)
                                        (("1"
                                          (replace -2 1)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (rewrite "null_path")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "every")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "every")
                              (("3"
                                (expand "every")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (path_conditions_unmodified2 formula-decl nil pvs0_props nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil))
   nil))
 (pvs0_eval_expr_TCC13 0
  (pvs0_eval_expr_TCC13-2 nil 3684365109
   ("" (skeep)
    (("" (typepred "val")
      (("" (skeep)
        (("" (inst 1 "append((:0:), path)")
          (("1" (lemma "subterm_append")
            (("1" (inst -1 "body" "path")
              (("1" (assert)
                (("1" (inst -1 "(:0:)")
                  (("1" (split)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (replace -4 1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "path_conditions_unmodified")
                      (("2" (inst -1 "body" "path" 0)
                        (("2" (assert)
                          (("2" (expand "append")
                            (("2" (expand "append")
                              (("2"
                                (replace -1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replace -1 1)
                      (("2" (replace -3 1)
                        (("2" (expand "valid_path")
                          (("2" (grind)
                            (("1" (rewrite "null_path") nil nil)
                             ("2" (rewrite "null_path") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "every") (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "valid_paths_subexpr")
            (("2" (inst -1 "body" "path")
              (("2" (assert)
                (("2" (inst -1 "(:0:)")
                  (("1" (replace -1 1)
                    (("1" (hide 2 -2)
                      (("1" (replace -2)
                        (("1" (expand "valid_path")
                          (("1" (grind)
                            (("1" (rewrite "null_path") nil nil)
                             ("2" (rewrite "null_path") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "every") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "every")
            (("3" (expand "every") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_expr_TCC14 0
  (pvs0_eval_expr_TCC14-1 nil 3682847758
   ("" (skeep*) (("" (rewrite "lex2_lt") (("" (grind) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pvs0_eval_expr_TCC15 0
  (pvs0_eval_expr_TCC15-2 nil 3684365024
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "val")
        (("" (skeep)
          (("" (inst 2 "append((:1:), path)")
            (("1" (lemma "subterm_append")
              (("1" (inst -1 "body" "path")
                (("1" (assert)
                  (("1" (inst -1 "(:1:)")
                    (("1" (split)
                      (("1" (replace -1 1)
                        (("1" (replace -2 1)
                          (("1" (replace -4 1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "append")
                        (("2" (expand "append")
                          (("2" (use "path_conditions_cons")
                            (("2" (assert)
                              (("2"
                                (replaces -1)
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (expand "path_conds_aux")
                                    (("2"
                                      (expand "eval_conds")
                                      (("2"
                                        (expand "eval_conds_rec" 1)
                                        (("2"
                                          (split)
                                          (("1"
                                            (inst?)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (replace -1 1)
                        (("2" (replace -3 1)
                          (("2" (hide -2 2)
                            (("2" (grind)
                              (("2" (rewrite "null_path") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "every") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "valid_paths_subexpr")
              (("2" (inst -1 "body" "path")
                (("2" (assert)
                  (("2" (inst -1 "(:1:)")
                    (("1" (replace -1 1)
                      (("1" (hide 2 -2)
                        (("1" (replace -2)
                          (("1" (expand "valid_path")
                            (("1" (grind)
                              (("1" (rewrite "null_path") nil nil)
                               ("2" (rewrite "null_path") nil nil)
                               ("3" (rewrite "null_path") nil nil)
                               ("4" (rewrite "null_path") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "every") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "every")
              (("3" (expand "every") (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (path_conds_aux const-decl "PVS0Bool" pvs0_props nil)
    (path_conditions_cons formula-decl nil pvs0_props nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil))
   nil))
 (pvs0_eval_expr_TCC16 0
  (pvs0_eval_expr_TCC16-1 nil 3682847758
   ("" (skeep*)
    (("" (rewrite "lex2_lt")
      (("" (hide-all-but (-1 2)) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil))
   nil))
 (pvs0_eval_expr_TCC17 0
  (pvs0_eval_expr_TCC17-2 nil 3684364870
   ("" (skeep)
    (("" (skeep)
      (("" (expand "semantic_rel_expr")
        (("" (assert)
          (("" (inst 2 "vc")
            (("" (split)
              (("1"
                (typepred
                 "v(false_val, eval_op1, eval_op2)(cnd, body, val)")
                (("1" (replace -3 -1 rl)
                  (("1" (hide -3)
                    (("1" (replace -2 1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide -2 2)
                  (("2" (typepred "val")
                    (("2" (skeep)
                      (("2" (inst 1 "append((:0:), path)")
                        (("1" (lemma "subterm_append")
                          (("1" (inst -1 "body" "path")
                            (("1" (assert)
                              (("1"
                                (inst -1 "(:0:)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (lemma
                                         "path_conditions_unmodified")
                                        (("2"
                                          (inst -1 "body" "path" 0)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "append")
                                              (("2"
                                                (expand "append")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -2 2)
                                  (("2"
                                    (replace -1 1)
                                    (("2"
                                      (replace -2 1)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "every")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "valid_paths_subexpr")
                          (("2" (inst -1 "body" "path")
                            (("2" (assert)
                              (("2"
                                (inst -1 "(:0:)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (hide 2 -2)
                                    (("1"
                                      (replace -2 1)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "every")
                          (("3" (expand "every")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2"
                  (with-tccs
                   (name-replace "nv"
                    "v(false_val, eval_op1, eval_op2)(arg1, body, val)"))
                  (("2" (hide -2 1 3)
                    (("2" (typepred "nv")
                      (("2" (replace -2 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil))
   nil))
 (pvs0_eval_expr_TCC18 0
  (pvs0_eval_expr_TCC18-2 nil 3684364805
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "val")
        (("" (skeep)
          (("" (inst 1 "append((:2:), path)")
            (("1" (lemma "subterm_append")
              (("1" (inst -1 "body" "path")
                (("1" (assert)
                  (("1" (inst -1 "(:2:)")
                    (("1" (split)
                      (("1" (replace -1 1)
                        (("1" (replace -2 1)
                          (("1" (replace -4 1) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "path_conditions_cons")
                        (("2" (inst -1 "body" "path" 2)
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (replace -1 1)
                        (("2" (replace -3 1)
                          (("2" (expand "valid_path")
                            (("2" (auto-rewrite "null_path")
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "every") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "valid_paths_subexpr")
              (("2" (inst -1 "body" "path")
                (("2" (assert)
                  (("2" (inst -1 "(:2:)")
                    (("1" (replace -1 1)
                      (("1" (hide 2 -2)
                        (("1" (replace -2)
                          (("1" (expand "valid_path")
                            (("1" (auto-rewrite "null_path")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "every") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "every")
              (("3" (expand "every") (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (path_conds_aux const-decl "PVS0Bool" pvs0_props nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (path_conditions_cons formula-decl nil pvs0_props nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil))
   nil))
 (pvs0_eval_expr_TCC19 0
  (pvs0_eval_expr_TCC19-1 nil 3682872225
   ("" (skeep*)
    (("" (rewrite "lex2_lt")
      (("" (hide-all-but (-1 1)) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil))
   nil))
 (pvs0_eval_expr_TCC20 0
  (pvs0_eval_expr_TCC20-2 nil 3684364613
   ("" (skeep)
    (("" (skeep)
      (("" (expand "semantic_rel_expr")
        (("" (assert)
          (("" (inst 1 "vc")
            (("" (split)
              (("1"
                (typepred
                 "v(false_val, eval_op1, eval_op2)(cnd, body, val)")
                (("1" (replace -4 -1 :dir rl :hide? t)
                  (("1" (replace -2 1) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide -2 2)
                  (("2" (typepred "val")
                    (("2" (skeep)
                      (("2" (inst 1 "append((:0:), path)")
                        (("1" (lemma "subterm_append")
                          (("1" (inst -1 "body" "path")
                            (("1" (assert)
                              (("1"
                                (inst -1 "(:0:)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (lemma
                                         "path_conditions_unmodified")
                                        (("2"
                                          (inst -1 "body" "path" 0)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "append")
                                              (("2"
                                                (expand "append")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -2 2)
                                  (("2"
                                    (replace -1 1)
                                    (("2"
                                      (replace -2 1)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "every")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "valid_paths_subexpr")
                          (("2" (inst -1 "body" "path")
                            (("2" (assert)
                              (("2"
                                (inst -1 "(:0:)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (hide 2 -2)
                                    (("1"
                                      (replace -2 1)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (rewrite "null_path")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "every")
                          (("3" (expand "every")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) nil nil)
               ("3" (flatten)
                (("3"
                  (with-tccs
                   (name-replace "nv"
                    "v(false_val, eval_op1, eval_op2)(arg2, body, val)"))
                  (("3" (typepred "nv")
                    (("3" (replace -3 1) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil))
   nil))
 (pvs0_eval_expr_TCC21 0
  (pvs0_eval_expr_TCC21-2 nil 3684364423
   ("" (skeep)
    (("" (typepred "val")
      (("" (skeep)
        (("" (inst 1 "append((:0:), path)")
          (("1" (lemma "subterm_append")
            (("1" (inst -1 "body" "path")
              (("1" (assert)
                (("1" (inst -1 "(:0:)")
                  (("1" (split)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (replace -4 1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "path_conditions_unmodified")
                      (("2" (inst -1 "body" "path" 0)
                        (("2" (assert)
                          (("2" (expand "append")
                            (("2" (expand "append")
                              (("2"
                                (replace -1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replace -1 1)
                      (("2" (replace -3 1)
                        (("2" (expand "valid_path")
                          (("2" (auto-rewrite "null_path")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "every") (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "valid_paths_subexpr")
            (("2" (inst -1 "body" "path")
              (("2" (assert)
                (("2" (inst -1 "(:0:)")
                  (("1" (replace -1 1)
                    (("1" (hide 2 -2)
                      (("1" (replace -2)
                        (("1" (expand "valid_path")
                          (("1" (auto-rewrite "null_path")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "every") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "every")
            (("3" (expand "every") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_expr_TCC22 0
  (pvs0_eval_expr_TCC22-1 nil 3682872225
   ("" (skeep) (("" (rewrite "lex2_lt") (("" (grind) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pvs0_eval_expr_TCC23 0
  (pvs0_eval_expr_TCC23-2 nil 3684364240
   ("" (skeep)
    (("" (skeep)
      (("" (inst 1 "(::)")
        (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil)
         ("2" (rewrite "null_path") nil nil))
        nil))
      nil))
    nil)
   ((null_path formula-decl nil pvs0_props nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil))
 (pvs0_eval_expr_TCC24 0
  (pvs0_eval_expr_TCC24-2 nil 3684364073
   ("" (skeep*)
    (("" (rewrite "lex2_lt")
      (("" (flatten)
        (("" (hide 2)
          ((""
            (typepred "wfm_tcc[T, MT, LAMBDA (m, n: nat): m < n]
                (false_val, eval_op1, eval_op2, body)")
            (("" (expand "pvs0_tcc_termination_pred")
              (("" (inst -1 "val")
                (("" (typepred "val")
                  (("" (skeep)
                    (("" (label "wfm" -3)
                      ((""
                        (with-tccs
                         (inst "wfm"
                          "(# `rec_expr:=expr, `cnds:=path_conditions(body,path), `path:=path #)"))
                        (("1"
                          (with-tccs
                           (typepred
                            "v1(false_val, eval_op1, eval_op2)(arg, body, val)"))
                          (("1" (inst -4 "v")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (replace -4 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (hide -3)
                              (("2"
                                (typepred
                                 "v1(false_val, eval_op1, eval_op2)(arg, body, val)")
                                (("1"
                                  (typepred "val")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "append((:0:), path)")
                                      (("1"
                                        (lemma "subterm_append")
                                        (("1"
                                          (inst -1 "body" "path")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -1 "(:0:)")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "path_conditions_unmodified")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "body"
                                                     "path"
                                                     0)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "append")
                                                        (("2"
                                                          (expand
                                                           "append")
                                                          (("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -4 1)
                                                  (("2"
                                                    (replace -6 1)
                                                    (("2"
                                                      (expand
                                                       "valid_path")
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (rewrite
                                                           "null_path")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "every")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "valid_paths_subexpr")
                                        (("2"
                                          (inst -1 "body" "path")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -1 "(:0:)")
                                              (("1"
                                                (replace -4 1)
                                                (("1"
                                                  (replace -6 1)
                                                  (("1"
                                                    (hide 2 -2)
                                                    (("1"
                                                      (expand
                                                       "valid_path")
                                                      (("1"
                                                        (grind)
                                                        (("1"
                                                          (rewrite
                                                           "null_path")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "every")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "every")
                                        (("3"
                                          (expand "every")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (inst 1 "append((:0:), path)")
                                    (("1"
                                      (lemma "subterm_append")
                                      (("1"
                                        (inst -1 "body" "path")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -1 "(:0:)")
                                            (("1"
                                              (split)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (replace -2 1)
                                                  (("1"
                                                    (replace -4 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "path_conditions_unmodified")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "body"
                                                   "path"
                                                   0)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "append")
                                                      (("2"
                                                        (expand
                                                         "append")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (replace -1 1)
                                                (("2"
                                                  (replace -3 1)
                                                  (("2"
                                                    (expand
                                                     "valid_path")
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (rewrite
                                                         "null_path")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "every")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "valid_paths_subexpr")
                                      (("2"
                                        (inst -1 "body" "path")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -1 "(:0:)")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (hide 2 -2)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (expand
                                                     "valid_path")
                                                    (("1"
                                                      (grind)
                                                      (("1"
                                                        (rewrite
                                                         "null_path")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "every")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "every")
                                      (("3"
                                        (expand "every")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "pvs0_tcc_valid_cc")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (expr skolem-const-decl "PVS0Expr[Val[T]]" pvs0_eval nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (pvs0_eval_expr_TCC25 0
  (pvs0_eval_expr_TCC25-2 nil 3684363917
   ("" (skeep)
    (("" (skeep)
      ((""
        (name-replace "nv"
         "v1(false_val, eval_op1, eval_op2)(body, body, v)")
        (("1" (expand "semantic_rel_expr")
          (("1" (assert)
            (("1" (with-tccs (typepred "nv"))
              (("1" (inst 1 "v")
                (("1" (assert)
                  (("1" (replace -2 1)
                    (("1" (typepred "v")
                      (("1" (hide -2) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (inst 1 "(::)")
            (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
              nil)
             ("2" (rewrite "null_path") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_path formula-decl nil pvs0_props nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil))
   nil))
 (pvs0_eval_expr_TCC26 0
  (pvs0_eval_expr_TCC26-2 nil 3684363777
   ("" (skeep)
    (("" (typepred "val")
      (("" (skeep)
        (("" (inst 1 "append((:0:), path)")
          (("1" (lemma "subterm_append")
            (("1" (inst -1 "body" "path")
              (("1" (assert)
                (("1" (inst -1 "(:0:)")
                  (("1" (split)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (replace -4 1) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "path_conditions_unmodified")
                      (("2" (inst -1 "body" "path" 0)
                        (("2" (assert)
                          (("2" (expand "append")
                            (("2" (expand "append")
                              (("2"
                                (replace -1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replace -1 1)
                      (("2" (replace -3 1)
                        (("2" (expand "valid_path")
                          (("2" (auto-rewrite "null_path")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "every") (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "valid_paths_subexpr")
            (("2" (inst -1 "body" "path")
              (("2" (assert)
                (("2" (inst -1 "(:0:)")
                  (("1" (replace -1 1)
                    (("1" (hide 2 -2)
                      (("1" (replace -2)
                        (("1" (expand "valid_path")
                          (("1" (auto-rewrite "null_path")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "every") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "every")
            (("3" (expand "every") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" pvs0_eval nil)
    (append def-decl "list[T]" list_props nil)
    (body skolem-const-decl
     "{body: PVS0Expr | terminating?(false_val, eval_op1, eval_op2, body)}"
     pvs0_eval nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     pvs0_eval nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]" pvs0_eval
     nil)
    (false_val skolem-const-decl "Val[T]" pvs0_eval nil)
    (path_conditions_unmodified formula-decl nil pvs0_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null_path formula-decl nil pvs0_props nil)
    (subterm_append formula-decl nil pvs0_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_expr_TCC27 0
  (pvs0_eval_expr_TCC27-1 nil 3684355236
   ("" (skeep) (("" (rewrite "lex2_lt") (("" (grind) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (wfm_tcc const-decl "(pvs0_tcc_termination_pred(pvs0))"
     measure_termination_defs nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_nat adt-def-decl "[PVS0Expr -> nat]" PVS0Expr_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pvs0_eval_TCC1 0
  (pvs0_eval_TCC1-1 nil 3683472034 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   nil))
 (pvs0_eval_TCC2 0
  (pvs0_eval_TCC2-1 nil 3683472034
   ("" (skeep)
    (("" (inst 1 "(::)")
      (("1" (grind) nil nil) ("2" (rewrite "null_path") nil nil)) nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0 skolem-const-decl "{pvs0: PVS0 | terminating?(pvs0)}"
     pvs0_eval nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (null_path formula-decl nil pvs0_props nil))
   nil))
 (pvs0_eval_correct 0
  (pvs0_eval_correct-1 nil 3683501056
   ("" (skeep* :preds? t)
    (("" (typepred "pvs0_eval(pvs0)(arg)")
      (("" (expand "semantic_rel")
        (("" (ground)
          (("" (use "deterministic_expr") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_eval const-decl
     "{v: Val | semantic_rel_expr(pvs0`1, pvs0`2, pvs0`3)(pvs0`4, pvs0`4, val, v)}"
     pvs0_eval nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_eval nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deterministic_expr formula-decl nil pvs0_expr nil)
    (semantic_rel const-decl "bool" pvs0_lang nil))
   shostak)))

