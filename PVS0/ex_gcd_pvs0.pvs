ex_gcd_pvs0: THEORY
BEGIN
% ------------------------------------------------------------------------------ 
% Part0: Definition of gcd in PVS0 (taken from gcd.pvs)
%
  IMPORTING lang[[nat,nat]]

  ebool(m,n:nat) : bool = m /= 0

  boole(b:bool) : Val = (IF NOT b THEN 0 ELSE 1 ENDIF,0)

  eop1(op:nat)(m,n:nat) : Val = 
    COND op = 0 -> boole(m=0 OR n=0),
         op = 1 -> boole(m >= n),
         op = 2 -> (m+n,0),
         op = 3 -> IF m >= n THEN (m-n,n) ELSE (m,n) ENDIF,
	 op = 4 -> (n,m),
         ELSE -> (m,n)
    ENDCOND

  eop2(op:nat)(v1,v2:Val) : Val = v1

  % Interpretation:
  %   vr        : (m,n)
  %   bool(m,n) : n /= 0
  %   op1 0     : (m,n) -> bool(m=0 OR n=0)
  %   op1 1     : (m,n) -> bool(m >= n)
  %   op1 2     : (m,n) -> (m+n,0)
  %   op1 3     : (m,n) -> (m-n,n)
  %   op1 4     : (m,n) -> (n,m)

  pvs0_gcd : PVS0 =
    def(ite(op1(0,vr),op1(2,vr),ite(op1(1,vr),rec(op1(3,vr)),rec(op1(4,vr)))))

% ------------------------------------------------------------------------------ 
% Part1: Proof of termination via pvs0_tccs
%    

  IMPORTING measure_termination_defs
  	    [ [nat,nat]  % Base type
	    , ordinal    % Measure type
	    , ordinals.< % Measure relation
	    ] AS mt_lex2

  % This lemma assures that there are one measure type and one measure relation 
  % that can be used to prove termination via pvs0_tcc.
  pvs0_gcd_tcc_termination: LEMMA
    mt_lex2.pvs0_tcc_termination(ebool,eop1,eop2)(pvs0_gcd)

% ------------------------------------------------------------------------------ 
% Part2: Any measure fulfilling pvs0_tcc can be used to prove pvs' tccs.
%
  MT_: TYPE+
  R_ : (well_founded?[MT_])

  IMPORTING measure_termination_defs
  	    [ [nat,nat]  % Base type
	    , MT_        % Measure type
	    , R_         % Measure relation
	    ] AS mt_gen

  wfm_gcd_: mt_gen.WFM

  pvs0_gcd_pvs0_tcc_gen_termination: AXIOM
    mt_gen.pvs0_tcc_termination_(ebool,eop1,eop2)(pvs0_gcd)(wfm_gcd_)

  % By proving the TCCs generated by this importing clause, we are proving that any
  % measure type and any relation such that pvs0_tcc_termination is valid, can be
  % used to prove termination via tcc in pvs.
  IMPORTING ex_gcd {{ MT := MT_, R := R_ , wfm_gcd := wfm_gcd_}}

% ------------------------------------------------------------------------------ 
% Part3: Semantic equivalence between definitions.
%
  pvs0_gcd_eval : LEMMA
    FORALL(m,n: nat):
      LET v = eval(ebool,eop1,eop2)(n+1,pvs0_gcd)(val2env(m,n)) IN
      some?(v) AND gcd(m,n) = val(v)`1  

END ex_gcd_pvs0
