(eval_props
 (subterm_transitive 0
  (subterm_transitive-1 nil 3642153545
   ("" (induct exc)
    (("1" (typepred "exc!1") (("1" (grind) nil nil)) nil)
     ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (prop)
          (("1" (skeep)
            (("1" (expand "subterm" -3)
              (("1" (split)
                (("1" (assert) nil nil)
                 ("2" (expand "subterm" 1)
                  (("2" (flatten)
                    (("2" (inst -2 "exa" "exb")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "op12_var")
            (("2" (hide 7) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (assert)
        (("5" (prop)
          (("1" (skeep)
            (("1" (expand "subterm" -4)
              (("1" (split)
                (("1" (assert) nil nil)
                 ("2" (expand "subterm" 1)
                  (("2" (flatten)
                    (("2" (inst -3 "exa" "exb")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (expand "subterm" 1)
                  (("3" (flatten)
                    (("3" (inst -2 "exa" "exb")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "op23_var") (("2" (assert) nil nil)) nil)
           ("3" (typepred "op22_var") (("3" (assert) nil nil)) nil)
           ("4" (typepred "op22_var") (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (assert)
        (("6" (prop)
          (("1" (skeep)
            (("1" (expand "subterm" -3)
              (("1" (split)
                (("1" (assert) nil nil)
                 ("2" (expand "subterm" 1)
                  (("2" (flatten)
                    (("2" (inst -2 "exa" "exb")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "rec1_var") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (assert)
        (("7" (skeep)
          (("7" (prop)
            (("1" (expand "subterm" -5)
              (("1" (expand "subterm" 1)
                (("1" (prop)
                  (("1" (expand "subterm" -5)
                    (("1" (assert)
                      (("1" (replace -1 -5)
                        (("1" (hide-all-but (-5 2 3 4))
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -4 "exa" "exb") (("2" (assert) nil nil))
                    nil)
                   ("3" (inst -3 "exa" "exb") (("3" (assert) nil nil))
                    nil)
                   ("4" (assert)
                    (("4" (inst -2 "exa" "exb")
                      (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "ite1_var" "ite2_var" "ite3_var")
              (("2" (assert) nil nil)) nil)
             ("3" (typepred "ite1_var" "ite2_var" "ite3_var")
              (("3" (assert) nil nil)) nil)
             ("4" (typepred "ite1_var" "ite2_var" "ite3_var")
              (("4" (assert) nil nil)) nil)
             ("5" (typepred "ite1_var" "ite2_var" "ite3_var")
              (("5" (assert) nil nil)) nil)
             ("6" (typepred "ite1_var" "ite2_var" "ite3_var")
              (("6" (assert) nil nil)) nil)
             ("7" (typepred "ite1_var" "ite2_var" "ite3_var")
              (("7" (assert) nil nil)) nil)
             ("8" (typepred "ite1_var" "ite2_var" "ite3_var")
              (("8" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skeep) (("8" (assert) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (PVS0_induction formula-decl nil PVS0_adt nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil))
   shostak))
 (rdc_TCC1 0
  (rdc_TCC1-1 nil 3642189975
   ("" (skeep)
    (("" (lemma "length_reverse[nat]")
      (("" (inst?) (("" (typepred "l") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_reverse formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil))
 (rac_TCC1 0
  (rac_TCC1-1 nil 3642189975
   ("" (skeep) (("" (typepred "l") (("" (grind) nil nil)) nil)) nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (rac_append_TCC1 0
  (rac_append_TCC1-1 nil 3642413118
   ("" (skeep)
    (("" (typepred "l2")
      (("" (typepred "l1")
        (("" (expand append) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (append def-decl "list[T]" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (rac_append 0
  (rac_append-1 nil 3642893314
   ("" (measure-induct+ "length(l1)" ("l1"))
    (("1" (expand "rac")
      (("1" (skeep)
        (("1" (expand "append" 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "length" 2 1)
                (("1" (inst? -1)
                  (("1" (expand "nth" 2 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but (-2))
                          (("1" (typepred "l2")
                            (("1" (lemma "length_append[nat]")
                              (("1"
                                (inst? -1)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (1 3))
                          (("2" (grind) nil nil)) nil)
                         ("3" (hide-all-but (1 4))
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "rac")
      (("2" (typepred "l2!1")
        (("2" (lemma "length_append[nat]")
          (("2" (inst?)
            (("2" (hide-all-but (-1 -4 1)) (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (typepred "l2!1")
      (("3" (use "length_append[nat]")
        (("3" (hide-all-but (-1 -3 1)) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_append formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rac const-decl "nat" eval_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (rdc_append 0
  (rdc_append-1 nil 3642894583
   ("" (expand "rdc")
    (("" (measure-induct+ "length(l1)" l1)
      (("1" (skeep)
        (("1" (expand "append" 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "reverse" 2 2)
                (("1"
                  (case "cons(car(x!1), null) = reverse(cons(car(x!1), null))")
                  (("1" (replaces -1)
                    (("1" (rewrite "reverse_append" :dir rl)
                      (("1" (case "null?(cdr(x!1))")
                        (("1" (expand "append" 2 (2 3))
                          (("1" (assert)
                            (("1" (expand "append" 2)
                              (("1"
                                (expand "append" 2)
                                (("1"
                                  (expand "reverse" 2 2)
                                  (("1"
                                    (expand "append" 2)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (typepred "l2")
                                          (("1"
                                            (hide-all-but (-2 1))
                                            (("1"
                                              (use
                                               "length_reverse[nat]")
                                              (("1"
                                                (expand "length" -1 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "cdr(cons(car(reverse(l2)),
                                                                    append(cdr(reverse(l2)), cons(car(x!1), null)))) = append(cdr(reverse(l2)), cons(car(x!1), null))")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (rewrite
                                               "reverse_append")
                                              (("1"
                                                (expand "reverse" 2 1)
                                                (("1"
                                                  (expand
                                                   "reverse"
                                                   2
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "append"
                                                     2
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "append"
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "append")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst-cp -1 "cons(car(x!1), null)")
                          (("2" (inst -2 "append(cdr(x!1), l2)")
                            (("1" (expand "length" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "append" 3 1)
                                          (("1"
                                            (expand "append" 3 1)
                                            (("1"
                                              (inst -1 "cdr(x!1)")
                                              (("1"
                                                (inst -1 l2)
                                                (("1"
                                                  (expand
                                                   "length"
                                                   -1
                                                   2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "l2")
                              (("2"
                                (hide-all-but (-2 1))
                                (("2"
                                  (use "length_append[nat]")
                                  (("2"
                                    (use "length_null[nat]")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "l2!1")
        (("2" (hide-all-but (1 2))
          (("2" (grind)
            (("2" (expand "append")
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "l2!1")
        (("3" (hide-all-but (1 2))
          (("3" (expand "append")
            (("3" (lift-if)
              (("3" (prop)
                (("1" (expand "reverse")
                  (("1" (expand "append")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "reverse")
                  (("2" (expand "append" 2 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (typepred "l2!1")
        (("4" (hide-all-but (1 2))
          (("4" (expand "reverse")
            (("4" (expand "append")
              (("4" (lift-if)
                (("4" (prop)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (typepred "l2!1")
        (("5" (hide-all-but (1 2))
          (("5" (expand "append")
            (("5" (lift-if)
              (("5" (prop)
                (("1" (expand "reverse")
                  (("1" (expand "append")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "reverse")
                  (("2" (expand "append" 2 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (reverse_append formula-decl nil list_props nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_null formula-decl nil more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (l2 skolem-const-decl "{l2: list[nat] | NOT null?(l2)}" eval_props
     nil)
    (x!1 skolem-const-decl "list[nat]" eval_props nil)
    (length_reverse formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rdc const-decl "list[nat]" eval_props nil))
   shostak))
 (rdc_rac 0
  (rdc_rac-1 nil 3643640891
   ("" (skeep)
    (("" (expand* "rdc" "rac")
      (("" (lemma "reverse_def[nat]")
        (("" (inst -1 "l1" 0)
          (("" (assert)
            (("" (prop)
              (("1" (replaces -1 :dir rl)
                (("1" (expand "nth" 1)
                  (("1"
                    (case "(: car(reverse(l1)) :) = reverse((: car(reverse(l1)) :))")
                    (("1" (replaces -1)
                      (("1" (rewrite "reverse_append" :dir rl)
                        (("1" (expand "append")
                          (("1" (expand "append")
                            (("1" (use "expand_list[nat]")
                              (("1"
                                (prop)
                                (("1"
                                  (typepred "l1")
                                  (("1"
                                    (hide -1 2)
                                    (("1"
                                      (use "length_reverse[nat]")
                                      (("1"
                                        (expand "length" -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replaces -1 :dir rl)
                                  (("2"
                                    (rewrite "reverse_reverse")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "l1")
                (("2" (hide -1 3) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rac const-decl "nat" eval_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (expand_list formula-decl nil more_list_props "structures/")
    (reverse_reverse formula-decl nil list_props nil)
    (length_reverse formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (reverse_append formula-decl nil list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reverse_def formula-decl nil more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (valid_path_TCC1 0
  (valid_path_TCC1-1 nil 3642189975
   ("" (expand "restrict")
    (("" (lemma "PVS0_well_founded")
      (("" (expand "strict_well_founded?")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "well_founded_restrict[PVS0, Expr]")
              (("" (inst?)
                (("" (assert)
                  (("" (expand "restrict") (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (PVS0_well_founded formula-decl nil PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (well_founded_restrict judgement-tcc nil restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (valid_path_TCC2 0
  (valid_path_TCC2-1 nil 3642189975
   ("" (skeep)
    (("" (typepred "path")
      (("" (assert) (("" (expand "length") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (rac const-decl "nat" eval_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil))
   nil))
 (valid_path_TCC3 0
  (valid_path_TCC3-1 nil 3642189975
   ("" (skeep)
    (("" (lemma "length_reverse[nat]")
      (("" (inst?) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_reverse formula-decl nil list_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rac const-decl "nat" eval_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil)
    (reverse def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil))
 (valid_path_TCC4 0
  (valid_path_TCC4-1 nil 3642189975
   ("" (skeep)
    (("" (lemma "length_reverse[nat]")
      (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_reverse formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (restrict const-decl "R" restrict nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (rac const-decl "nat" eval_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil))
 (valid_path_TCC5 0
  (valid_path_TCC5-1 nil 3642189975
   ("" (skeep)
    (("" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rac const-decl "nat" eval_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (valid_path_TCC6 0
  (valid_path_TCC6-1 nil 3642189975
   ("" (skeep)
    (("" (lemma "length_reverse[nat]")
      (("" (expand "restrict") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_reverse formula-decl nil list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rac const-decl "nat" eval_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (valid_path_TCC7 0
  (valid_path_TCC7-1 nil 3642189975
   ("" (skeep)
    (("" (lemma "length_reverse[nat]")
      (("" (inst?) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_reverse formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (restrict const-decl "R" restrict nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (rac const-decl "nat" eval_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil))
 (valid_path_TCC8 0
  (valid_path_TCC8-1 nil 3642189975
   ("" (skeep) (("" (expand "restrict") (("" (grind) nil nil)) nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (rac const-decl "nat" eval_props nil)
    (length def-decl "nat" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (valid_path_TCC9 0
  (valid_path_TCC9-1 nil 3642189975
   ("" (skeep) (("" (typepred "expr") (("" (assert) nil nil)) nil))
    nil)
   ((Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (null_path 0
  (null_path-1 nil 3642276868
   ("" (skeep)
    (("" (expand "valid_path")
      (("" (lift-if 1)
        (("" (typepred "expr") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (subterm_at_TCC1 0
  (subterm_at_TCC1-1 nil 3642189975
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((subterm adt-def-decl "boolean" PVS0_adt nil)) nil))
 (subterm_at_TCC2 0
  (subterm_at_TCC2-1 nil 3642276301
   ("" (skeep*)
    (("" (typepred "path")
      (("" (replace -3)
        (("" (expand "valid_path" -2) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subterm_at_TCC3 0
  (subterm_at_TCC3-1 nil 3642276301 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (rac const-decl "nat" eval_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subterm_at_TCC4 0
  (subterm_at_TCC4-1 nil 3642276301
   ("" (skeep*)
    (("" (typepred "v(a, rdc(path))")
      (("1" (expand "subterm" 2)
        (("1" (replace -3) (("1" (assert) nil nil)) nil)) nil)
       ("2" (typepred "path")
        (("2" (replace -3)
          (("2" (expand "valid_path" -2) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((rdc const-decl "list[nat]" eval_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subterm_at_TCC5 0
  (subterm_at_TCC5-1 nil 3642276301
   ("" (skeep*)
    (("" (typepred "path")
      (("" (replace -4)
        (("" (expand "valid_path" -2) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subterm_at_TCC6 0
  (subterm_at_TCC6-1 nil 3642276301
   ("" (skeep*)
    (("" (typepred "v(a, rdc(path))")
      (("1" (replace -4)
        (("1" (expand "subterm" 2) (("1" (assert) nil nil)) nil)) nil)
       ("2" (typepred "path")
        (("2" (replace -4)
          (("2" (expand "valid_path" -2) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((rdc const-decl "list[nat]" eval_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subterm_at_TCC7 0
  (subterm_at_TCC7-1 nil 3642276301 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rac const-decl "nat" eval_props nil)
    (rdc const-decl "list[nat]" eval_props nil))
   nil))
 (subterm_at_TCC8 0
  (subterm_at_TCC8-1 nil 3642276301
   ("" (skeep*)
    (("" (typepred "path")
      (("" (replace -3)
        (("" (expand "valid_path" -2) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil)
    (rac const-decl "nat" eval_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (subterm_at_TCC9 0
  (subterm_at_TCC9-1 nil 3642276301
   ("" (skeep*)
    (("" (typepred "v(b, rdc(path))")
      (("1" (replace -3)
        (("1" (expand "subterm" 3) (("1" (assert) nil nil)) nil)) nil)
       ("2" (typepred "path")
        (("2" (replace -3)
          (("2" (expand "valid_path" -2) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((rdc const-decl "list[nat]" eval_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subterm_at_TCC10 0
  (subterm_at_TCC10-1 nil 3648386465
   ("" (skeep*)
    (("" (typepred "path")
      (("" (replace -3)
        (("" (expand "valid_path" -2) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subterm_at_TCC11 0
  (subterm_at_TCC11-1 nil 3648386465 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (rac const-decl "nat" eval_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subterm_at_TCC12 0
  (subterm_at_TCC12-1 nil 3648386465
   ("" (skeep*)
    (("" (typepred "v(a, rdc(path))")
      (("1" (replace -3)
        (("1" (expand "subterm" 2) (("1" (assert) nil nil)) nil)) nil)
       ("2" (typepred "path")
        (("2" (replace -3)
          (("2" (expand "valid_path" -2) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((rdc const-decl "list[nat]" eval_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subterm_at_TCC13 0
  (subterm_at_TCC13-1 nil 3648386465
   ("" (skeep*)
    (("" (typepred "path")
      (("" (replace -3)
        (("" (expand "valid_path" -2)
          (("" (assert)
            (("" (prop)
              (("1" (assert) nil nil) ("2" (assert) nil nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subterm_at_TCC14 0
  (subterm_at_TCC14-1 nil 3648386465 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (length def-decl "nat" list_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (rac const-decl "nat" eval_props nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subterm_at_TCC15 0
  (subterm_at_TCC15-1 nil 3648386465
   ("" (skeep*)
    ((""
      (typepred "(v(IF rac(path) = 0 THEN c
             ELSIF rac(path) = 1 THEN t
             ELSE e
             ENDIF,
             rdc(path)))")
      (("1" (replace -3)
        (("1" (expand "subterm" 2)
          (("1" (flatten) (("1" (lift-if) (("1" (prop) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (typepred "path")
        (("2" (replace -3)
          (("2" (expand "valid_path" -2)
            (("2" (assert)
              (("2" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rdc const-decl "list[nat]" eval_props nil)
    (rac const-decl "nat" eval_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subterm_at_TCC16 0
  (subterm_at_TCC16-1 nil 3648386465
   ("" (skeep*) (("" (expand "subterm") (("" (propax) nil nil)) nil))
    nil)
   ((subterm adt-def-decl "boolean" PVS0_adt nil)) nil))
 (path_conditions_TCC1 0
  (path_conditions_TCC1-1 nil 3648925820
   ("" (measure-induct+ "length(path_)" "path_")
    (("" (skeep)
      (("" (typepred "path")
        (("" (expand "valid_path" 1)
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (hide-all-but (-1 -3 -5)) (("1" (grind) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (hide-all-but (-1 -3 -5))
                      (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (inst -4 "rdc(x!1)")
                          (("1"
                            (inst -4 "get_arg(expr)" "rdc(path)" "n")
                            (("1" (split -4)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "valid_path" -4)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -6)
                                      (("1"
                                        (lemma "rac_append")
                                        (("1"
                                          (inst -1 "(: n:)" "x!1")
                                          (("1"
                                            (expand "append")
                                            (("1"
                                              (expand "append")
                                              (("1"
                                                (replaces -1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -4)
                                (("2"
                                  (lemma "rdc_append")
                                  (("2"
                                    (inst -1 "(:n:)" "x!1")
                                    (("2"
                                      (expand "append")
                                      (("2"
                                        (expand "append")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (1 2))
                                (("3"
                                  (expand "rdc")
                                  (("3"
                                    (rewrite "length_reverse")
                                    (("3"
                                      (use "length_reverse[nat]")
                                      (("3"
                                        (replaces -1 :dir rl)
                                        (("3"
                                          (rewrite
                                           "length_null_list"
                                           :dir
                                           rl)
                                          (("3"
                                            (use "length_reverse[nat]")
                                            (("3"
                                              (replaces -1 2 :dir rl)
                                              (("3"
                                                (rewrite
                                                 "length_null_list")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "valid_path" -3)
                              (("2" (assert) nil nil)) nil)
                             ("3" (replace -5) (("3" (assert) nil nil))
                              nil)
                             ("4" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (expand "valid_path" -3)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (lemma "rac_append")
                                    (("1"
                                      (inst -1 "(: n:)" "x!1")
                                      (("1"
                                        (expand "append")
                                        (("1"
                                          (expand "append")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (inst -4 "rdc(x!1)")
                                              (("1"
                                                (case
                                                 "length(rdc(x!1)) < length(x!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -4)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (inst
                                                             -6
                                                             "rdc(path)"
                                                             "n")
                                                            (("1"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (lemma
                                                                   "rdc_append")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "(: n :)"
                                                                     "x!1")
                                                                    (("2"
                                                                      (expand
                                                                       "append")
                                                                      (("2"
                                                                        (expand
                                                                         "append")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -6
                                                           "get_arg2(expr)"
                                                           "rdc(path)"
                                                           "n")
                                                          (("2"
                                                            (split -6)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "rdc_append")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "(: n:)"
                                                                 "x!1")
                                                                (("2"
                                                                  (expand
                                                                   "append")
                                                                  (("2"
                                                                    (expand
                                                                     "append")
                                                                    (("2"
                                                                      (replace
                                                                       -7)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 2))
                                                  (("2"
                                                    (expand "rdc")
                                                    (("2"
                                                      (rewrite
                                                       "length_reverse")
                                                      (("2"
                                                        (rewrite
                                                         "length_null_list"
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (use
                                                           "length_reverse[nat]")
                                                          (("2"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "length_null_list")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (expand "valid_path" -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -5 "rdc(x!1)")
                                          (("1"
                                            (lemma "rac_append")
                                            (("1"
                                              (inst -1 "(: n:)" "x!1")
                                              (("1"
                                                (expand "append")
                                                (("1"
                                                  (expand "append")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "get_arg(expr)"
                                                       "rdc(path)"
                                                       "n")
                                                      (("1"
                                                        (split -5)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "rdc_append")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "(:n:)"
                                                             "x!1")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (expand
                                                                 "append")
                                                                (("2"
                                                                  (replace
                                                                   -6)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (1 2))
                                                          (("3"
                                                            (expand
                                                             "rdc"
                                                             1)
                                                            (("3"
                                                              (rewrite
                                                               "length_reverse")
                                                              (("3"
                                                                (rewrite
                                                                 "length_null_list"
                                                                 :dir
                                                                 rl)
                                                                (("3"
                                                                  (use
                                                                   "length_reverse[nat]")
                                                                  (("3"
                                                                    (replaces
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("3"
                                                                      (rewrite
                                                                       "length_null_list")
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (inst -3 "rdc(x!1)")
                                  (("2"
                                    (case
                                     "length(rdc(x!1)) < length(x!1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "valid_path" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -5
                                                   "get_cond(expr)"
                                                   "rdc(path)"
                                                   "n")
                                                  (("1"
                                                    (split -5)
                                                    (("1"
                                                      (lemma
                                                       "rac_append")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "(: n:)"
                                                         "x!1")
                                                        (("1"
                                                          (expand
                                                           "append")
                                                          (("1"
                                                            (expand
                                                             "append")
                                                            (("1"
                                                              (replace
                                                               -7)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -5)
                                                      (("2"
                                                        (lemma
                                                         "rdc_append")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "(:n:)"
                                                           "x!1")
                                                          (("2"
                                                            (expand
                                                             "append")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (inst
                                                   -5
                                                   "get_if(expr)"
                                                   "rdc(path)"
                                                   "n")
                                                  (("2"
                                                    (split -5)
                                                    (("1"
                                                      (replace -6)
                                                      (("1"
                                                        (lemma
                                                         "rac_append")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(: n:)"
                                                           "x!1")
                                                          (("1"
                                                            (expand
                                                             "append")
                                                            (("1"
                                                              (expand
                                                               "append")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -5)
                                                      (("2"
                                                        (lemma
                                                         "rdc_append")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "(:n:)"
                                                           "x!1")
                                                          (("2"
                                                            (expand
                                                             "append")
                                                            (("2"
                                                              (expand
                                                               "append")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (flatten)
                                                (("3"
                                                  (inst
                                                   -5
                                                   "get_else(expr)"
                                                   "rdc(path)"
                                                   "n")
                                                  (("3"
                                                    (split -5)
                                                    (("1"
                                                      (replace -6)
                                                      (("1"
                                                        (lemma
                                                         "rac_append")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(:n:)"
                                                           "x!1")
                                                          (("1"
                                                            (expand
                                                             "append")
                                                            (("1"
                                                              (expand
                                                               "append")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "rdc_append")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "(:n:)"
                                                         "x!1")
                                                        (("2"
                                                          (expand
                                                           "append")
                                                          (("2"
                                                            (expand
                                                             "append")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 3))
                                      (("2"
                                        (expand "rdc")
                                        (("2"
                                          (rewrite "length_reverse")
                                          (("2"
                                            (rewrite
                                             "length_null_list"
                                             :dir
                                             rl)
                                            (("2"
                                              (use
                                               "length_reverse[nat]")
                                              (("2"
                                                (replaces -1 :dir rl)
                                                (("2"
                                                  (rewrite
                                                   "length_null_list")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (x!1 skolem-const-decl "list[nat]" eval_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (rac_append formula-decl nil eval_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (length_null_list formula-decl nil more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_reverse formula-decl nil list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (get_arg2 adt-accessor-decl "[(op2?) -> Expr]" PVS0_adt nil)
    (get_arg1 adt-accessor-decl "[(op2?) -> Expr]" PVS0_adt nil)
    (get_cond adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (get_if adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (get_else adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (path_conditions_TCC2 0
  (path_conditions_TCC2-1 nil 3648925820 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil))
 (valid_paths_subexpr 0
  (valid_paths_subexpr-1 nil 3642953208
   ("" (measure-induct+ "length(path)" ("expr" "path"))
    (("" (skeep)
      (("" (expand "valid_path" 1)
        (("" (lift-if)
          (("" (split)
            (("1" (typepred "path2")
              (("1" (hide -3)
                (("1" (expand "subterm_at")
                  (("1" (assert)
                    (("1" (split)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "valid_path")
                            (("2" (use "length_append[nat]")
                              (("2"
                                (grind)
                                (("2"
                                  (typepred x!2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (typepred "path2" "x!2")
                    (("1" (hide -6)
                      (("1" (use "length_append[nat]")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (case "x!2=null")
                        (("1" (replace -1)
                          (("1" (rewrite "append_null")
                            (("1" (typepred "x!2")
                              (("1"
                                (typepred "path2")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (expand "subterm_at")
                                    (("1"
                                      (expand "valid_path" -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "rac_append")
                          (("2" (rewrite "rdc_append")
                            (("2" (inst -2 "get_arg(x!1)" "rdc(x!2)")
                              (("1"
                                (inst -2 "path2")
                                (("1"
                                  (typepred "x!2" "path2")
                                  (("1"
                                    (expand "valid_path" -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (1 6))
                                            (("1"
                                              (expand "rdc")
                                              (("1"
                                                (rewrite
                                                 "length_reverse")
                                                (("1"
                                                  (use
                                                   "length_reverse[nat]")
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       2
                                                       2)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (case
                                                               "null?(x!2)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "path2")
                                  (("2"
                                    (expand "subterm_at" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "x!2")
                                (("2"
                                  (expand "valid_path" -2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil)
                               ("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (case "x!2=null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite "append_null")
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (typepred "path2")
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (expand "subterm_at")
                                        (("1"
                                          (expand "valid_path" -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "rac_append")
                              (("2"
                                (rewrite "rdc_append")
                                (("2"
                                  (case "rac(x!2)=0")
                                  (("1"
                                    (inst
                                     -3
                                     "get_arg1(x!1)"
                                     " rdc(x!2)")
                                    (("1"
                                      (inst -3 "path2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (1 8))
                                          (("1"
                                            (expand "rdc")
                                            (("1"
                                              (rewrite
                                               "length_reverse")
                                              (("1"
                                                (use
                                                 "length_reverse[nat]")
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     2
                                                     2)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (use
                                                           "reverse_reverse[nat]")
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             2
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "path2")
                                        (("2"
                                          (expand "subterm_at" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x!2")
                                      (("2"
                                        (expand "valid_path" -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "rac(x!2)=1")
                                    (("1"
                                      (inst
                                       -3
                                       "get_arg2(x!1)"
                                       " rdc(x!2)")
                                      (("1"
                                        (inst -3 "path2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (2 9))
                                            (("1"
                                              (expand "rdc")
                                              (("1"
                                                (rewrite
                                                 "length_reverse")
                                                (("1"
                                                  (use
                                                   "length_reverse[nat]")
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       2
                                                       2)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (use
                                                             "reverse_reverse[nat]")
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               2
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "path2")
                                          (("2"
                                            (expand "subterm_at" -2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x!2")
                                        (("2"
                                          (expand "valid_path" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x!2")
                                      (("2"
                                        (expand "valid_path" -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (case "x!2=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (rewrite "append_null")
                                    (("1"
                                      (typepred "path2")
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (expand "subterm_at")
                                          (("1"
                                            (expand "valid_path" -2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (inst
                                       -2
                                       "get_arg(x!1)"
                                       "rdc(x!2)")
                                      (("1"
                                        (inst -2 "path2")
                                        (("1"
                                          (typepred "x!2")
                                          (("1"
                                            (expand "valid_path" -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (1 8))
                                                    (("1"
                                                      (expand "rdc")
                                                      (("1"
                                                        (rewrite
                                                         "length_reverse")
                                                        (("1"
                                                          (use
                                                           "length_reverse[nat]")
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               2
                                                               2)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (use
                                                                     "reverse_reverse[nat]")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       2
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "path2")
                                          (("2"
                                            (expand "subterm_at" -2 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x!2")
                                        (("2"
                                          (expand "valid_path" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil)
                                       ("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (case "x!2=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (rewrite "append_null")
                                    (("1"
                                      (typepred "path2")
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (expand "subterm_at")
                                          (("1"
                                            (expand "valid_path" -2)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace 3)
                                                  (("1"
                                                    (replace 4)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (case "rac(x!2)=0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -2
                                           "get_cond(x!1)"
                                           "rdc(x!2)")
                                          (("1"
                                            (inst -2 "path2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but (1 11))
                                                (("1"
                                                  (expand "rdc")
                                                  (("1"
                                                    (rewrite
                                                     "length_reverse")
                                                    (("1"
                                                      (use
                                                       "length_reverse[nat]")
                                                      (("1"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           2
                                                           2)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "path2")
                                              (("2"
                                                (expand
                                                 "subterm_at"
                                                 -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x!2")
                                            (("2"
                                              (expand "valid_path" -2)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "rac(x!2)=1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -2
                                             "get_if(x!1)"
                                             "rdc(x!2)")
                                            (("1"
                                              (inst -2 "path2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (2 12))
                                                  (("1"
                                                    (expand "rdc")
                                                    (("1"
                                                      (rewrite
                                                       "length_reverse")
                                                      (("1"
                                                        (use
                                                         "length_reverse[nat]")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             2
                                                             2)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("1"
                                                                    (replaces
                                                                     -1
                                                                     2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "path2")
                                                (("2"
                                                  (expand
                                                   "subterm_at"
                                                   -2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x!2")
                                              (("2"
                                                (expand
                                                 "valid_path"
                                                 -2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "rac(x!2)=2")
                                          (("1"
                                            (inst
                                             -2
                                             "get_else(x!1)"
                                             "rdc(x!2)")
                                            (("1"
                                              (inst -2 "path2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (3 13))
                                                  (("1"
                                                    (expand "rdc")
                                                    (("1"
                                                      (rewrite
                                                       "length_reverse")
                                                      (("1"
                                                        (use
                                                         "length_reverse[nat]")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             2
                                                             2)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("1"
                                                                    (replaces
                                                                     -1
                                                                     2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "path2")
                                                (("2"
                                                  (expand
                                                   "subterm_at"
                                                   -2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x!2")
                                              (("2"
                                                (expand
                                                 "valid_path"
                                                 -2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (typepred "x!1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x!2")
                                            (("2"
                                              (expand "valid_path" -2)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_cond adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (get_else adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (get_if adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (rac const-decl "nat" eval_props nil)
    (get_arg1 adt-accessor-decl "[(op2?) -> Expr]" PVS0_adt nil)
    (get_arg2 adt-accessor-decl "[(op2?) -> Expr]" PVS0_adt nil)
    (rac_append formula-decl nil eval_props nil)
    (x!1 skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (x!2 skolem-const-decl "(valid_path(x!1))" eval_props nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reverse_reverse formula-decl nil list_props nil)
    (length_reverse formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (path2 skolem-const-decl "(valid_path(subterm_at(x!1, x!2)))"
     eval_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (length_null formula-decl nil more_list_props "structures/")
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (append def-decl "list[T]" list_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subterm_append_TCC1 0
  (subterm_append_TCC1-1 nil 3642276301
   ("" (skeep)
    (("" (use "valid_paths_subexpr")
      (("" (beta)
        (("" (skeep)
          (("" (inst?)
            (("" (typepred "path2") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil eval_props nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (sterm skolem-const-decl
     "({res: Expr[Val[T]] | subterm[T](res, expr)})" eval_props nil)
    (path2 skolem-const-decl "(valid_path(sterm))" eval_props nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (subterm_append 0
  (subterm_append-1 nil 3642897817
   ("" (induct "expr")
    (("1" (beta) (("1" (propax) nil nil)) nil)
     ("2" (typepred "expr!1") (("2" (grind) nil nil)) nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (split)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (typepred "path" "path2") (("1" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil)
     ("4" (prop)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "path" "path2") (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (assert)
        (("5" (prop)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (typepred "path")
                (("1" (expand "valid_path" -2)
                  (("1" (split)
                    (("1" (expand "subterm_at" 1 3)
                      (("1" (assert)
                        (("1" (lemma "append_null[nat]")
                          (("1" (inst -1 "path2")
                            (("1" (case "append(path2, path) = path2")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2 -4)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (case "NOT null?(path)")
                        (("1" (expand "subterm_at" 2 3)
                          (("1" (assert)
                            (("1" (expand "subterm_at" 2 1)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 2))
                                    (("1"
                                      (grind)
                                      (("1"
                                        (lemma "length_append[nat]")
                                        (("1"
                                          (inst?)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "rdc_append")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (inst -5 "rdc(path)")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "subterm_at" 1 3)
                          (("2" (assert)
                            (("2" (lemma "append_null[nat]")
                              (("2"
                                (inst -1 "path2")
                                (("2"
                                  (case "append(path2, path) = path2")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -6 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "op12_var") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (assert)
        (("6" (prop)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (typepred "path")
                (("1" (expand "valid_path" -2)
                  (("1" (prop)
                    (("1" (expand "subterm_at" 1 3)
                      (("1" (assert)
                        (("1" (lemma "append_null[nat]")
                          (("1" (inst -1 "path2")
                            (("1" (case "append(path2, path) = path2")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -4 -5 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "NOT null?(path)")
                      (("1" (expand "subterm_at" 2 3)
                        (("1" (assert)
                          (("1" (expand "subterm_at" 2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (use "length_append[nat]")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "rdc_append")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide -6)
                                      (("2"
                                        (inst -6 "rdc(path)")
                                        (("2" (inst? -6) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (use "rac_append")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "subterm_at" 1 3)
                        (("2" (assert)
                          (("2" (lemma "append_null[nat]")
                            (("2" (inst -1 "path2")
                              (("2"
                                (case "append(path2, path) = path2")
                                (("1"
                                  (replace -1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (hide -6 -7 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (case "NOT null?(path)")
                      (("1" (expand "subterm_at" 2 3)
                        (("1" (assert)
                          (("1" (expand "subterm_at" 2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (use "length_append[nat]")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "rac_append")
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (use "rdc_append")
                                  (("3"
                                    (replace -1)
                                    (("3"
                                      (hide -6)
                                      (("3"
                                        (inst -5 "rdc(path)")
                                        (("3"
                                          (inst -5 "path2")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "subterm_at" 1 3)
                        (("2" (assert)
                          (("2" (lemma "append_null[nat]")
                            (("2" (inst -1 "path2")
                              (("2"
                                (case "append(path2, path) = path2")
                                (("1"
                                  (replace -1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "op23_var") (("2" (assert) nil nil)) nil)
           ("3" (typepred "op22_var") (("3" (assert) nil nil)) nil)
           ("4" (typepred "op23_var") (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (assert)
        (("7" (prop)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (typepred "path")
                (("1" (expand "valid_path" -2)
                  (("1" (split)
                    (("1" (expand "subterm_at" 1 3)
                      (("1" (assert)
                        (("1" (lemma "append_null[nat]")
                          (("1" (inst -1 "path2")
                            (("1" (case "append(path2, path) = path2")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2 -4)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (case "NOT null?(path)")
                        (("1" (expand "subterm_at" 2 3)
                          (("1" (assert)
                            (("1" (expand "subterm_at" 2 1)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 2))
                                    (("1"
                                      (lemma "length_append[nat]")
                                      (("1"
                                        (inst?)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "rdc_append")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (inst -5 "rdc(path)")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "subterm_at" 1 3)
                          (("2" (assert)
                            (("2" (lemma "append_null[nat]")
                              (("2"
                                (inst -1 "path2")
                                (("2"
                                  (case "append(path2, path) = path2")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -6 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "rec1_var") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("8" (skeep)
      (("8" (assert)
        (("8" (prop)
          (("1" (label "ihc" -3)
            (("1" (label "iht" -2)
              (("1" (label "ihe" -1)
                (("1" (hide -)
                  (("1" (skeep)
                    (("1" (skeep)
                      (("1" (expand "subterm_at" 1 3)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (lemma "append_null[nat]")
                              (("1"
                                (inst -1 "path2")
                                (("1"
                                  (case "append(path2, path) = path2")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "rac_append")
                              (("2"
                                (expand "subterm_at" 1 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 2))
                                        (("1"
                                          (use "length_append[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal "ihc")
                                        (("2"
                                          (inst -1 "rdc(path)")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (use "rdc_append")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (use "rac_append")
                              (("3"
                                (expand "subterm_at" 1 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (lift-if)
                                    (("3"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 3))
                                        (("1"
                                          (use "length_append[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal "iht")
                                        (("2"
                                          (inst -1 "rdc(path)")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (use "rdc_append")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (use "rac_append")
                              (("4"
                                (expand "subterm_at" 2 1)
                                (("4"
                                  (assert)
                                  (("4"
                                    (lift-if)
                                    (("4"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 4))
                                        (("1"
                                          (use "length_append[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal "ihe")
                                        (("2"
                                          (inst -1 "rdc(path)")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (use "rdc_append")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "ite3_var") (("2" (assert) nil nil)) nil)
           ("3" (typepred "ite2_var") (("3" (assert) nil nil)) nil)
           ("4" (typepred "ite2_var") (("4" (assert) nil nil)) nil)
           ("5" (typepred "ite1_var") (("5" (assert) nil nil)) nil)
           ("6" (typepred "ite1_var") (("6" (assert) nil nil)) nil)
           ("7" (typepred "ite1_var") (("7" (assert) nil nil)) nil)
           ("8" (typepred "ite1_var") (("8" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("9" (skeep) (("9" (assert) nil nil)) nil)
     ("10" (lemma "valid_paths_subexpr")
      (("10" (hide 2)
        (("10" (skeep)
          (("10" (skeep)
            (("10" (skeep)
              (("10" (inst -1 "expr" "path")
                (("10" (beta)
                  (("10" (inst -1 "path2")
                    (("10" (typepred "path2") (("10" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil eval_props nil)
    (path2 skolem-const-decl "(valid_path(sterm))" eval_props nil)
    (sterm skolem-const-decl
     "({res: Expr[Val[T]] | subterm[T](res, expr)})" eval_props nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (expr skolem-const-decl "PVS0[Val[T]]" eval_props nil)
    (ite adt-constructor-decl "[[Expr, Expr, Expr] -> (ite?)]" PVS0_adt
     nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (rac_append formula-decl nil eval_props nil)
    (op2 adt-constructor-decl "[[nat, Expr, Expr] -> (op2?)]" PVS0_adt
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (length_append formula-decl nil list_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PVS0_induction formula-decl nil PVS0_adt nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (append def-decl "list[T]" list_props nil))
   shostak))
 (valid_0_path_ext 0
  (valid_0_path_ext-1 nil 3642898469
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "subterm_append")
          (("" (inst? -1)
            (("" (beta)
              (("" (inst -1 "cons(0, null)")
                (("1" (expand "append" -1)
                  (("1" (expand "append" -1)
                    (("1" (lemma "valid_paths_subexpr")
                      (("1" (inst -1 "expr" "path")
                        (("1" (beta)
                          (("1" (inst -1 "cons(0, null)")
                            (("1" (expand "append")
                              (("1"
                                (expand "append")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (prop)
                    (("1" (expand "valid_path")
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (grind)
                            (("1" (use "null_path") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "valid_path")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (hide 2)
                            (("2" (grind)
                              (("2" (use "null_path") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "valid_path")
                      (("3" (assert)
                        (("3" (grind) (("3" (use "null_path") nil nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "valid_path")
                      (("4" (assert)
                        (("4" (flatten)
                          (("4" (hide 2 3)
                            (("4" (grind)
                              (("4" (use "null_path") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_append formula-decl nil eval_props nil)
    (get_cond adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (get_arg1 adt-accessor-decl "[(op2?) -> Expr]" PVS0_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (null_path formula-decl nil eval_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "nat" eval_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (append def-decl "list[T]" list_props nil)
    (valid_paths_subexpr formula-decl nil eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil))
   shostak))
 (valid_1_path_ext 0
  (valid_1_path_ext-1 nil 3643165116
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "subterm_append")
          (("" (inst? -1)
            (("" (beta)
              (("" (inst -1 "cons(1, null)")
                (("1" (expand "append" -1)
                  (("1" (expand "append" -1)
                    (("1" (lemma "valid_paths_subexpr")
                      (("1" (inst -1 "expr" "path")
                        (("1" (beta)
                          (("1" (inst -1 "cons(1, null)")
                            (("1" (expand "append")
                              (("1"
                                (expand "append")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" 1)
                  (("2" (lift-if)
                    (("2" (split -1)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (grind)
                            (("1" (use "null_path") nil nil)
                             ("2" (use "null_path") nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide 2)
                          (("2" (grind)
                            (("1" (use "null_path") nil nil)
                             ("2" (use "null_path") nil nil)
                             ("3" (use "null_path") nil nil)
                             ("4" (use "null_path") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -1 2) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_append formula-decl nil eval_props nil)
    (get_arg2 adt-accessor-decl "[(op2?) -> Expr]" PVS0_adt nil)
    (get_arg1 adt-accessor-decl "[(op2?) -> Expr]" PVS0_adt nil)
    (null_path formula-decl nil eval_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "nat" eval_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_if adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (get_cond adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (append def-decl "list[T]" list_props nil)
    (valid_paths_subexpr formula-decl nil eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil))
   shostak))
 (valid_2_path_ext 0
  (valid_2_path_ext-1 nil 3643207021
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "subterm_append")
          (("" (inst? -1)
            (("" (beta)
              (("" (inst -1 "cons(2, null)")
                (("1" (expand "append" -1)
                  (("1" (expand "append" -1)
                    (("1" (lemma "valid_paths_subexpr")
                      (("1" (inst -1 "expr" "path")
                        (("1" (beta)
                          (("1" (inst -1 "cons(2, null)")
                            (("1" (expand "append")
                              (("1"
                                (expand "append")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" 1)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (grind)
                          (("1" (use "null_path") nil nil)
                           ("2" (use "null_path") nil nil)
                           ("3" (use "null_path") nil nil)
                           ("4" (use "null_path") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -1 2) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_append formula-decl nil eval_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rac const-decl "nat" eval_props nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (null_path formula-decl nil eval_props nil)
    (get_cond adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (get_if adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (get_else adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (append def-decl "list[T]" list_props nil)
    (valid_paths_subexpr formula-decl nil eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil))
   shostak))
 (app_prefix_of_path_ext 0
  (app_prefix_of_path_ext-2 nil 3643729922
   ("" (measure-induct+ "length(path)" ("expr" "path"))
    (("" (skeep)
      (("" (case "x!2 = null")
        (("1" (replace -1)
          (("1" (inst 1 "path_ext")
            (("1" (rewrite "append_null") nil nil)
             ("2" (replace -1)
              (("2" (expand "subterm_at") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "x!1")
          (("2" (prop)
            (("1" (hide -2)
              (("1" (typepred "x!2") (("1" (grind) nil nil)) nil)) nil)
             ("2" (hide -2)
              (("2" (typepred "x!2") (("2" (grind) nil nil)) nil)) nil)
             ("3" (typepred "x!2")
              (("3" (expand "valid_path" -2)
                (("3" (assert)
                  (("3" (flatten)
                    (("3" (inst -5 "get_arg(x!1)" "rdc(x!2)")
                      (("3" (typepred "path_ext")
                        (("3" (expand "valid_path" -2)
                          (("3" (case "path_ext=null")
                            (("1" (hide-all-but (-1 -4 1))
                              (("1" (grind) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst -9 "rdc(path_ext)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 3 "p")
                                        (("1"
                                          (lemma "rdc_rac")
                                          (("1"
                                            (inst -1 "path_ext")
                                            (("1"
                                              (replace -2 :dir rl)
                                              (("1"
                                                (replace -1 3 :dir rl)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (rewrite
                                                     "rdc_append"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -8
                                                       3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "rac_append")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "x!2")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             3
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_rac")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p")
                                          (("2"
                                            (expand "subterm_at" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 3))
                                      (("2"
                                        (expand "rdc")
                                        (("2"
                                          (rewrite "length_reverse")
                                          (("2"
                                            (use "length_reverse[nat]")
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (expand "length" 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (use
                                                         "reverse_reverse[nat]")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "suffix?" -4)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide-all-but (-1 3))
                                            (("1"
                                              (use
                                               "reverse_reverse[nat]")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide-all-but (-1 5))
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "rdc")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (typepred "x!2" "path_ext")
              (("4" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-6 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -2)
                  (("2" (assert)
                    (("2" (expand "suffix?")
                      (("2" (split -5)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (use "reverse_reverse[nat]")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (hide-all-but (-1 4))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "rac(x!2) = rac(path_ext)")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "valid_path" -7)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -9
                                                   "get_arg1(x!1)"
                                                   "rdc(x!2)")
                                                  (("1"
                                                    (inst
                                                     -9
                                                     "rdc(path_ext)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "p")
                                                          (("1"
                                                            (inst
                                                             6
                                                             "p")
                                                            (("1"
                                                              (lemma
                                                               "rdc_rac")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "path_ext")
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "rac_append")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p"
                                                                         "x!2")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             6
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (lemma
                                                                               "rdc_rac")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "rdc_append"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "rdc_rac")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subterm_at"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (expand
                                                           "rdc"
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "length_reverse")
                                                            (("2"
                                                              (use
                                                               "length_reverse[nat]")
                                                              (("2"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "rdc")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1 2))
                                            (("2"
                                              (expand "rac")
                                              (("2"
                                                (lemma
                                                 "reverse_def[nat]")
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "x!2"
                                                   "0")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "path_ext"
                                                     "0")
                                                    (("2"
                                                      (reveal 1 3 4)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 4))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 3))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "rac(x!2) = rac(path_ext)")
                                        (("1"
                                          (inst
                                           -10
                                           "get_arg2(x!1)"
                                           "rdc(x!2)")
                                          (("1"
                                            (inst -10 "rdc(path_ext)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (expand
                                                         "valid_path"
                                                         -10)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_append"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "rac_append")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "p"
                                                                     "x!2")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         6
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "rdc_rac")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 6))
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (rewrite
                                                     "length_reverse")
                                                    (("2"
                                                      (use
                                                       "length_reverse[nat]")
                                                      (("2"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1
                                                           2)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "rdc")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "valid_path"
                                                   -8)
                                                  (("2"
                                                    (expand "rdc")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1 2 3 5 6))
                                          (("2"
                                            (expand "rac")
                                            (("2"
                                              (lemma
                                               "reverse_def[nat]")
                                              (("2"
                                                (inst-cp -1 "x!2" "0")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "path_ext"
                                                   "0")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 5))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (typepred "path_ext" "x!2")
              (("5" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-4 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -5)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "valid_path" -2)
                        (("2" (flatten)
                          (("2" (inst -9 "get_arg(x!1)" "rdc(x!2)")
                            (("2" (inst -9 "rdc(path_ext)")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "suffix?" -5)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide-all-but (-1 2))
                                          (("1"
                                            (use
                                             "reverse_reverse[nat]")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-1 4))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "rac(x!2) = rac(path_ext)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (replace
                                                         -2
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -5
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "rdc_append"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "rac_append")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "x!2")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "rdc_rac")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 1 2 3 5 6))
                                                (("2"
                                                  (expand "rac")
                                                  (("2"
                                                    (lemma
                                                     "reverse_def[nat]")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "x!2"
                                                       "0")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "path_ext"
                                                         "0")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 6))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 5))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2"
                                    (expand "rdc")
                                    (("2"
                                      (rewrite "length_reverse")
                                      (("2"
                                        (use "length_reverse[nat]")
                                        (("2"
                                          (replaces -1 :dir rl)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "suffix?" -4)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide-all-but (-1 3))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide-all-but (-1 5))
                                                  (("1"
                                                    (use
                                                     "reverse_reverse[nat]")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (typepred "path_ext" "x!2")
              (("6" (case "path_ext=null")
                (("1" (hide-all-but (-1 -4 1)) (("1" (grind) nil nil))
                  nil)
                 ("2" (expand "suffix?")
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide-all-but (-1 2))
                        (("1" (use "reverse_reverse[nat]")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide-all-but (-1 4))
                            (("1" (use "reverse_reverse[nat]")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (expand "valid_path" -6)
                            (("2" (assert)
                              (("2"
                                (case "rac(x!2) =rac(path_ext)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "valid_path" -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "get_cond(x!1)"
                                         "rdc(x!2)")
                                        (("1"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "valid_path" -7)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -10
                                         "get_if(x!1)"
                                         "rdc(x!2)")
                                        (("2"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "valid_path" -7)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (inst
                                         -10
                                         "get_else(x!1)"
                                         "rdc(x!2)")
                                        (("3"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1 2 3 5 6))
                                  (("2"
                                    (lemma "reverse_def[nat]")
                                    (("2"
                                      (inst-cp -1 "x!2" "0")
                                      (("2"
                                        (inst -1 "path_ext" "0")
                                        (("2"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "rac")
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 6))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 5))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_cond(x!1), rdc(x!2))))" eval_props
     nil)
    (get_cond adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_if(x!1), rdc(x!2))))" eval_props nil)
    (get_if adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_else(x!1), rdc(x!2))))" eval_props
     nil)
    (get_else adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_arg(x!1), rdc(x!2))))" eval_props nil)
    (get_arg2 adt-accessor-decl "[(op2?) -> Expr]" PVS0_adt nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_arg2(x!1), rdc(x!2))))" eval_props
     nil)
    (rac const-decl "nat" eval_props nil)
    (get_arg1 adt-accessor-decl "[(op2?) -> Expr]" PVS0_adt nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_arg1(x!1), rdc(x!2))))" eval_props
     nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse_def formula-decl nil more_list_props "structures/")
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (reverse_reverse formula-decl nil list_props nil)
    (rdc_rac formula-decl nil eval_props nil)
    (rac_append formula-decl nil eval_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_arg(x!1), rdc(x!2))))" eval_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append_null formula-decl nil list_props nil)
    (path_ext skolem-const-decl
     "{path_ext: (valid_path(x!1)) | suffix?(x!2, path_ext)}"
     eval_props nil)
    (x!2 skolem-const-decl "(valid_path(x!1))" eval_props nil)
    (x!1 skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (app_prefix_of_path_ext-1 nil 3643563298
   ("" (measure-induct+ "length(path)" ("expr" "path"))
    (("" (skeep)
      (("" (case "x!2 = null")
        (("1" (replace -1)
          (("1" (inst 1 "path_ext")
            (("1" (rewrite "append_null") nil nil)
             ("2" (replace -1)
              (("2" (expand "subterm_at") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "x!1")
          (("2" (prop)
            (("1" (hide -2)
              (("1" (typepred "x!2") (("1" (grind) nil nil)) nil)) nil)
             ("2" (hide -2)
              (("2" (typepred "x!2") (("2" (grind) nil nil)) nil)) nil)
             ("3" (typepred "x!2")
              (("3" (expand "valid_path" -2)
                (("3" (assert)
                  (("3" (flatten)
                    (("3" (inst -5 "get_arg(x!1)" "rdc(x!2)")
                      (("3" (typepred "path_ext")
                        (("3" (expand "valid_path" -2)
                          (("3" (case "path_ext=null")
                            (("1" (hide-all-but (-1 -4 1))
                              (("1" (grind) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst -9 "rdc(path_ext)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 3 "p")
                                        (("1"
                                          (lemma "rdc_rac")
                                          (("1"
                                            (inst -1 "path_ext")
                                            (("1"
                                              (replace -2 :dir rl)
                                              (("1"
                                                (replace -1 3 :dir rl)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (rewrite
                                                     "rdc_append"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -8
                                                       3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "rac_append")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "x!2")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             3
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_rac")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p")
                                          (("2"
                                            (expand "subterm_at" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 3))
                                      (("2"
                                        (expand "rdc")
                                        (("2"
                                          (rewrite "length_reverse")
                                          (("2"
                                            (use "length_reverse[nat]")
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (expand "length" 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (use
                                                         "reverse_reverse[nat]")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "suffix?" -4)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide-all-but (-1 3))
                                            (("1"
                                              (use
                                               "reverse_reverse[nat]")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide-all-but (-1 5))
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "rdc")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (typepred "x!2" "path_ext")
              (("4" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-6 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -2)
                  (("2" (assert)
                    (("2" (expand "suffix?")
                      (("2" (split -5)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (use "reverse_reverse[nat]")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (hide-all-but (-1 4))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "rac(x!2) = rac(path_ext)")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "valid_path" -7)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -9
                                                   "get_arg1(x!1)"
                                                   "rdc(x!2)")
                                                  (("1"
                                                    (inst
                                                     -9
                                                     "rdc(path_ext)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "p")
                                                          (("1"
                                                            (inst
                                                             6
                                                             "p")
                                                            (("1"
                                                              (lemma
                                                               "rdc_rac")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "path_ext")
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "rac_append")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p"
                                                                         "x!2")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             6
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (lemma
                                                                               "rdc_rac")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "rdc_append"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "rdc_rac")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subterm_at"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (expand
                                                           "rdc"
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "length_reverse")
                                                            (("2"
                                                              (use
                                                               "length_reverse[nat]")
                                                              (("2"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "rdc")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1 2))
                                            (("2"
                                              (expand "rac")
                                              (("2"
                                                (lemma
                                                 "reverse_def[nat]")
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "x!2"
                                                   "0")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "path_ext"
                                                     "0")
                                                    (("2"
                                                      (reveal 1 3 4)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 4))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 3))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "rac(x!2) = rac(path_ext)")
                                        (("1"
                                          (inst
                                           -10
                                           "get_arg2(x!1)"
                                           "rdc(x!2)")
                                          (("1"
                                            (inst -10 "rdc(path_ext)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (expand
                                                         "valid_path"
                                                         -10)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_append"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "rac_append")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "p"
                                                                     "x!2")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         6
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "rdc_rac")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 6))
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (rewrite
                                                     "length_reverse")
                                                    (("2"
                                                      (use
                                                       "length_reverse[nat]")
                                                      (("2"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1
                                                           2)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "rdc")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "valid_path"
                                                   -8)
                                                  (("2"
                                                    (expand "rdc")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1 2 3 5 6))
                                          (("2"
                                            (expand "rac")
                                            (("2"
                                              (lemma
                                               "reverse_def[nat]")
                                              (("2"
                                                (inst-cp -1 "x!2" "0")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "path_ext"
                                                   "0")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 5))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (typepred "path_ext" "x!2")
              (("5" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-4 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -5)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "valid_path" -2)
                        (("2" (flatten)
                          (("2" (inst -9 "get_arg(x!1)" "rdc(x!2)")
                            (("2" (inst -9 "rdc(path_ext)")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "suffix?" -5)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide-all-but (-1 2))
                                          (("1"
                                            (use
                                             "reverse_reverse[nat]")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-1 4))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "rac(x!2) = rac(path_ext)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (replace
                                                         -2
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -5
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "rdc_append"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "rac_append")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "x!2")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "rdc_rac")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 1 2 3 5 6))
                                                (("2"
                                                  (expand "rac")
                                                  (("2"
                                                    (lemma
                                                     "reverse_def[nat]")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "x!2"
                                                       "0")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "path_ext"
                                                         "0")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 6))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 5))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2"
                                    (expand "rdc")
                                    (("2"
                                      (rewrite "length_reverse")
                                      (("2"
                                        (use "length_reverse[nat]")
                                        (("2"
                                          (replaces -1 :dir rl)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "suffix?" -4)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide-all-but (-1 3))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide-all-but (-1 5))
                                                  (("1"
                                                    (use
                                                     "reverse_reverse[nat]")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (typepred "path_ext" "x!2")
              (("6" (case "path_ext=null")
                (("1" (hide-all-but (-1 -4 1)) (("1" (grind) nil nil))
                  nil)
                 ("2" (expand "suffix?")
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide-all-but (-1 2))
                        (("1" (use "reverse_reverse[nat]")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide-all-but (-1 4))
                            (("1" (use "reverse_reverse[nat]")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (expand "valid_path" -6)
                            (("2" (assert)
                              (("2"
                                (case "rac(x!2) =rac(path_ext)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "valid_path" -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "get_cond(x!1)"
                                         "rdc(x!2)")
                                        (("1"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "valid_path" -7)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -10
                                         "get_if(x!1)"
                                         "rdc(x!2)")
                                        (("2"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (postpone) nil nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cnst_vr_path_ext 0
  (cnst_vr_path_ext-1 nil 3643210892
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use " app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (expand "valid_path" -2)
                    (("" (prop)
                      (("1" (assert)
                        (("1" (expand "append" -4)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "append" -4)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (append def-decl "list[T]" list_props nil)
    (path_ext skolem-const-decl "(valid_path(expr))" eval_props nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (app_prefix_of_path_ext formula-decl nil eval_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil))
   shostak))
 (op1_rec_path_ext 0
  (op1_rec_path_ext-2 nil 3645893583
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use "app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (case "p=null")
                    (("1" (replaces -1)
                      (("1" (expand "append" -3)
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (replace -3 :dir rl)
                      (("2" (rewrite "cons_append")
                        (("2" (rewrite "suffix_app")
                          (("2" (case "rac(p)=0")
                            (("1" (expand "suffix?" 3)
                              (("1"
                                (lift-if)
                                (("1"
                                  (split 3)
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide-all-but (-1 3))
                                          (("1"
                                            (rewrite
                                             "length_null_list"
                                             :dir
                                             rl)
                                            (("1"
                                              (rewrite
                                               "length_reverse")
                                              (("1"
                                                (rewrite
                                                 "length_null_list")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "reverse" 2 1)
                                          (("2"
                                            (expand "reverse" 2 1)
                                            (("2"
                                              (expand "append" 2)
                                              (("2"
                                                (expand "reverse" 2 2)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (expand "rac" -1)
                                                    (("1"
                                                      (lemma
                                                       "reverse_def[nat]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "nth")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "valid_path" -2)
                              (("2" (grind) nil nil)) nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (suffix_app formula-decl nil more_list_props "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_reverse formula-decl nil list_props nil)
    (length_null_list formula-decl nil more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (reverse_def formula-decl nil more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (rac const-decl "nat" eval_props nil)
    (cons_append formula-decl nil more_list_props "structures/")
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (path_ext skolem-const-decl "(valid_path(expr))" eval_props nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (app_prefix_of_path_ext formula-decl nil eval_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil))
   nil)
  (op1_rec_path_ext-1 nil 3643216154
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use " app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (expand "valid_path" -2)
                    (("" (prop)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (hide-all-but (-1 -4 1))
                            (("1" (expand "append")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "suffix?" 2)
                            (("2" (prop)
                              (("1"
                                (replace -6 -1 rl)
                                (("1"
                                  (use "length_append[nat]")
                                  (("1"
                                    (expand "length" -2 2)
                                    (("1"
                                      (replace -1 -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "null?(p)")
                                          (("1"
                                            (expand "append" -8)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (use "length_reverse[nat]")
                                      (("1"
                                        (use "length_append[nat]")
                                        (("1"
                                          (hide-all-but
                                           (-1 -2 -3 -8 3))
                                          (("1"
                                            (use "length_null[nat]")
                                            (("1"
                                              (case "null?(p)")
                                              (("1"
                                                (expand "append" -6)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "length" -3 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lift-if)
                                    (("2"
                                      (lemma "length_reverse[nat]")
                                      (("2"
                                        (inst -1 "cons(0, path)")
                                        (("2"
                                          (expand "length" -1 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "suffix?" -9)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (case
                                                             "path=null")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "null?(p)")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -9
                                                                    7))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    4
                                                                    -8
                                                                    -4))
                                                                  (("2"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("2"
                                                                      (replaces
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "reverse"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "reverse"
                                                                           2
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "append")
                                                                            (("2"
                                                                              (expand
                                                                               "rac")
                                                                              (("2"
                                                                                (lemma
                                                                                 "reverse_def[nat]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "p"
                                                                                   "0")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -1
                                                                                       1)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         3)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("2"
                                                                  (replaces
                                                                   -1
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "null?(path)")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "reverse"
                                                               5
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "append"
                                                                 5)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "suffix?" -9)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             3
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "append"
                                                               3
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   3
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "suffix?"
                                                                     3)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_reverse")
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "reverse"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "preffix_rev_suffix"
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "preffix_rev_suffix"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 4
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -8
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "reverse_append")
                                                                    (("2"
                                                                      (expand
                                                                       "append"
                                                                       4
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "append"
                                                                             4
                                                                             2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "prefix_app")
                                                                              (("2"
                                                                                (expand
                                                                                 "rac")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "reverse_def[nat]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "p"
                                                                                     "0")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "prefix?"
                                                                                             4)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  7))
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     length)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "length_reverse[nat]")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-4
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          9))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "append")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (prop)
                          (("1" (hide-all-but (-1 -4 1))
                            (("1" (expand "append")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "suffix?" 2)
                            (("2" (prop)
                              (("1"
                                (replace -6 -1 rl)
                                (("1"
                                  (use "length_append[nat]")
                                  (("1"
                                    (expand "length" -2 2)
                                    (("1"
                                      (replace -1 -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "null?(p)")
                                          (("1"
                                            (expand "append" -8)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (use "length_reverse[nat]")
                                      (("1"
                                        (use "length_append[nat]")
                                        (("1"
                                          (hide-all-but
                                           (-1 -2 -3 -8 3))
                                          (("1"
                                            (use "length_null[nat]")
                                            (("1"
                                              (case "null?(p)")
                                              (("1"
                                                (expand "append" -6)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "length" -3 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lift-if)
                                    (("2"
                                      (lemma "length_reverse[nat]")
                                      (("2"
                                        (inst -1 "cons(0, path)")
                                        (("2"
                                          (expand "length" -1 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "suffix?" -9)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (case
                                                             "path=null")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "null?(p)")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -9
                                                                    7))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    4
                                                                    -8
                                                                    -4))
                                                                  (("2"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("2"
                                                                      (replaces
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "reverse"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "reverse"
                                                                           2
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "append")
                                                                            (("2"
                                                                              (expand
                                                                               "rac")
                                                                              (("2"
                                                                                (lemma
                                                                                 "reverse_def[nat]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "p"
                                                                                   "0")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -1
                                                                                       1)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         3)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("2"
                                                                  (replaces
                                                                   -1
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "null?(path)")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "reverse"
                                                               5
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "append"
                                                                 5)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "suffix?" -9)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             3
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "append"
                                                               3
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   3
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "suffix?"
                                                                     3)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_reverse")
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "reverse"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "preffix_rev_suffix"
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "preffix_rev_suffix"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 4
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -8
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "reverse_append")
                                                                    (("2"
                                                                      (expand
                                                                       "append"
                                                                       4
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "append"
                                                                             4
                                                                             2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "prefix_app")
                                                                              (("2"
                                                                                (expand
                                                                                 "rac")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "reverse_def[nat]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "p"
                                                                                     "0")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "prefix?"
                                                                                             4)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  7))
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     length)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "length_reverse[nat]")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-4
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          9))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "append")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil more_list_props "structures/")
    (reverse_def formula-decl nil more_list_props "structures/")
    (prefix? def-decl "bool" more_list_props "structures/")
    (suffix? def-decl "bool" more_list_props "structures/")
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil))
   shostak))
 (op2_path_ext 0
  (op2_path_ext-1 nil 3643560964
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use "app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (expand "valid_path" -2)
                    (("" (assert)
                      (("" (case "null?(p)")
                        (("1" (hide-all-but (-1 -4 1))
                          (("1" (grind) nil nil)) nil)
                         ("2" (assert)
                          (("2" (prop)
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (lemma "suffix_app[nat]")
                                (("1"
                                  (inst -1 "p" "(:0:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (use "reverse_def[nat]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (expand
                                                     "suffix?"
                                                     1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  3))
                                                                (("1"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  1
                                                                  3))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -4 :dir rl)
                              (("2"
                                (lemma "suffix_app[nat]")
                                (("2"
                                  (inst -1 "p" "(:1:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (lemma "reverse_def[nat]")
                                            (("1"
                                              (inst -1 "p" "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "suffix?"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    3))
                                                                  (("1"
                                                                    (use
                                                                     "reverse_reverse[nat]")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    3))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rac const-decl "nat" eval_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (reverse_reverse formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse_def formula-decl nil more_list_props "structures/")
    (suffix_app formula-decl nil more_list_props "structures/")
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (path_ext skolem-const-decl "(valid_path(expr))" eval_props nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (app_prefix_of_path_ext formula-decl nil eval_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil))
   shostak))
 (ite_path_ext 0
  (ite_path_ext-1 nil 3643562518
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use "app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (expand "valid_path" -2)
                    (("" (assert)
                      (("" (case "null?(p)")
                        (("1" (hide-all-but (-1 -4 1))
                          (("1" (grind) nil nil)) nil)
                         ("2" (assert)
                          (("2" (replace -3 :dir rl)
                            (("2" (prop)
                              (("1"
                                (lemma "suffix_app[nat]")
                                (("1"
                                  (inst -1 "p" "(:0:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (use "reverse_def[nat]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (expand
                                                     "suffix?"
                                                     1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  3))
                                                                (("1"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  1
                                                                  3))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "suffix_app[nat]")
                                (("2"
                                  (inst -1 "p" "(:1:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (lemma "reverse_def[nat]")
                                            (("1"
                                              (inst -1 "p" "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "suffix?"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    3))
                                                                  (("1"
                                                                    (use
                                                                     "reverse_reverse[nat]")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    3))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "suffix_app[nat]")
                                (("3"
                                  (inst -1 "p" "(:2:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (lemma "reverse_def[nat]")
                                            (("1"
                                              (inst -1 "p" "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "suffix?"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    3))
                                                                  (("1"
                                                                    (use
                                                                     "reverse_reverse[nat]")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    3))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rac const-decl "nat" eval_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (reverse_reverse formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse_def formula-decl nil more_list_props "structures/")
    (suffix_app formula-decl nil more_list_props "structures/")
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (path_ext skolem-const-decl "(valid_path(expr))" eval_props nil)
    (path skolem-const-decl "(valid_path(expr))" eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (app_prefix_of_path_ext formula-decl nil eval_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil))
   shostak))
 (valid_paths_TCC1 0
  (valid_paths_TCC1-3 nil 3644072003
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil)
   ((null_path formula-decl nil eval_props nil)) nil)
  (valid_paths_TCC1-2 nil 3644071995
   ("" (expand "restrict")
    (("" (lemma "PVS0_well_founded")
      (("" (expand "strict_well_founded?")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "well_founded_restrict[PVS0, Expr]")
              (("" (inst?)
                (("" (assert)
                  (("" (expand "restrict")
                    (("" (propax) nil))))))))))))))))))
    nil)
   nil nil)
  (valid_paths_TCC1-1 nil 3642412740
   ("" (expand "restrict")
    (("" (lemma "PVS0_well_founded")
      (("" (expand "strict_well_founded?")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "well_founded_restrict[PVS0, Expr]")
              (("" (inst?)
                (("" (assert)
                  (("" (expand "restrict") (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (PVS0_well_founded formula-decl nil PVS0_adt nil)
    (Val type-eq-decl nil lang nil))
   shostak))
 (valid_paths_TCC2 0
  (valid_paths_TCC2-4 nil 3644072174
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "restrict")
        (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil))
   nil)
  (valid_paths_TCC2-3 nil 3644072168
   ("" (expand "restrict")
    (("" (lemma "PVS0_well_founded")
      (("" (expand "strict_well_founded?")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "well_founded_restrict[PVS0, Expr]")
              (("" (inst?)
                (("" (assert)
                  (("" (expand "restrict")
                    (("" (propax) nil))))))))))))))))))
    nil)
   nil nil)
  (valid_paths_TCC2-2 nil 3644072074
   (";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
    (expand "restrict")
    ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
      (lemma "PVS0_well_founded")
      ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
        (expand "strict_well_founded?")
        ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
          (assert)
          ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
            (flatten)
            ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
              (lemma "well_founded_restrict[PVS0, Expr]")
              ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
                (inst?)
                ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
                  (assert)
                  ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
                    (expand "restrict")
                    ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
                      (propax) nil))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (valid_paths_TCC2-1 nil 3642412740
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "valid_path") (("" (propax) nil nil)) nil)) nil))
    nil)
   nil nil))
 (valid_paths_TCC3 0
  (valid_paths_TCC3-1 nil 3642412740 ("" (tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (valid_paths_TCC4 0
  (valid_paths_TCC4-3 nil 3648388907
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rac_append formula-decl nil eval_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "nat" eval_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse def-decl "list[T]" list_props nil)
    (append_null formula-decl nil list_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil)
  (valid_paths_TCC4-2 nil 3644072525
   ("" (skeep) (("" (grind) nil nil)) nil) nil nil)
  (valid_paths_TCC4-1 nil 3642412740 ("" (grind) nil nil) nil nil))
 (valid_paths_TCC5 0
  (valid_paths_TCC5-5 nil 3648389010
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(a)(x1))
                  (l1) =>
                every[list[number]]
                    (LAMBDA (x1: list[number]):
                       every[number]
                           (LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (x1)
                        AND valid_path(expr)(x1))
                    (map[list[nat], list[nat]]
                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                      map[list[nat], list[nat]]
                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                         (LAMBDA (x: number):
                                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                             AND integer_pred(x) AND x >= 0)
                         (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc_rac formula-decl nil eval_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (rac const-decl "nat" eval_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (rac_append formula-decl nil eval_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (append_null formula-decl nil list_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (a skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (p skolem-const-decl "(valid_path(expr))" eval_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (member def-decl "bool" list_props nil))
   nil)
  (valid_paths_TCC5-4 nil 3648051891
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   nil)
  (valid_paths_TCC5-3 nil 3643733447
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l1) =>
         every[list[number]]
             (LAMBDA (x1: list[number]):
                every[number]
                    (LAMBDA (x: number):
                            number_field_pred(x) AND real_pred(x)
                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                    (x1)
                 AND valid_path(expr)(x1))
             (map[list[nat], list[nat]]
                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
             map[list[nat], list[nat]]
                 (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
          (LAMBDA (x: number):
                  number_field_pred(x) AND real_pred(x) AND rational_pred(x)
              AND integer_pred(x) AND x >= 0)
          (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   nil)
  (valid_paths_TCC5-2 nil 3643732536
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "p")
        (("" (replace -5)
          (("" (expand "member" 1)
            (("" (flatten)
              (("" (expand "valid_path" -4)
                (("" (assert)
                  (("" (flatten)
                    (("" (inst -2 "rdc(p)")
                      ((""
                        (case " member[(valid_path(expr))](p,
                    map[list[nat], list[nat]]
                        (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(v(a)))")
                        (("1" (propax) nil)
                         ("2" (hide 3)
                          (("2"
                            (case "member[(valid_path(a))](rdc(p), v(a))")
                            (("1" (hide -3)
                              (("1"
                                (case
                                 "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                         every(LAMBDA (x: number):
                                      number_field_pred(x) AND real_pred(x)
                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                              (x1)
                          AND valid_path(a)(x1))
                      (l) => every[list[number]]
                     (LAMBDA (x1: list[number]):
                        every[number]
                            (LAMBDA (x: number):
                                    number_field_pred(x) AND real_pred(x)
                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                            (x1)
                         AND (null?(x1) OR (rac(x1) = 0 AND valid_path(a)(rdc(x1)))))
                     (map[list[nat], list[nat]]
                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
                                (("1"
                                  (case
                                   "forall(l:list[list[nat]]| every(LAMBDA (x1: list[number]):
                           every(LAMBDA (x: number):
                                        number_field_pred(x) AND real_pred(x)
                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                (x1)
                            AND valid_path(a)(x1))
                        (l)): (member[(valid_path(a))](rdc(p), l) and rac(p) = 0 and not p = null[nat])=>  member[(valid_path(expr))]
                       (p,
                        map[list[nat], list[nat]]
                            (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil)))))
                                   ("2"
                                    (hide-all-but (-1 -7 1))
                                    (("2"
                                      (measure-induct+ "length(l)" "l")
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-1 -3))
                                              (("1" (grind) nil)))
                                             ("2"
                                              (expand "member" 2)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "member" -2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -3 1 2 4))
                                                        (("1"
                                                          (case
                                                           "forall(l :list[nat]|not null?(l)): l = append(rdc(l),(: rac(l) :))")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil)))
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand*
                                                                 "rdc"
                                                                 "rac")
                                                                (("2"
                                                                  (case
                                                                   "(: nth(l, length(l) - 1) :) = reverse((: nth(l, length(l) - 1) :))")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "reverse(l) = reverse( append(reverse(cdr(reverse(l))),
                                       reverse((: nth(l, length(l) - 1) :))))")
                                                                      (("1"
                                                                        (use
                                                                         "reverse_reverse[nat]")
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "reverse_reverse")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (case
                                                                           "null?(reverse(l))")
                                                                          (("1"
                                                                            (typepred
                                                                             "l")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-2
                                                                                1))
                                                                              (("1"
                                                                                (use
                                                                                 "reverse_reverse[nat]")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))))))
                                                                           ("2"
                                                                            (rewrite
                                                                             "reverse_append")
                                                                            (("2"
                                                                              (rewrite
                                                                               "reverse_reverse")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "reverse_reverse")
                                                                                (("2"
                                                                                  (case
                                                                                   "nth(l, length(l) - 1) = nth(reverse(l), 0)")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "append")
                                                                                          (("1"
                                                                                            (decompose-equality)
                                                                                            nil)))))))))
                                                                                   ("2"
                                                                                    (hide
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (generalize
                                                                                         "l"
                                                                                         "l")
                                                                                        (("1"
                                                                                          (measure-induct+
                                                                                           "length(l)"
                                                                                           "l")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "reverse"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "reverse"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append "
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)))
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (postpone)
                                                                                                      nil)))))))))))
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil)
                                                                                           ("3"
                                                                                            (postpone)
                                                                                            nil)))
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil)
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil)))))))
                                                                                   ("3"
                                                                                    (postpone)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (postpone)
                                                                    nil)
                                                                   ("3"
                                                                    (postpone)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (postpone)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (replace -4)
                                        (("2"
                                          (expand "valid_path" 1)
                                          (("2"
                                            (typepred "l!1")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                nil)))))))))
                                       ("3"
                                        (hide-all-but 1)
                                        (("3" (grind) nil)))
                                       ("4"
                                        (typepred "p")
                                        (("4"
                                          (replace -4)
                                          (("4"
                                            (expand "valid_path" -2)
                                            (("4"
                                              (assert)
                                              nil)))))))))))
                                   ("3"
                                    (replace -7)
                                    (("3"
                                      (expand "valid_path" 1)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil)))))))))
                                   ("4"
                                    (hide-all-but 1)
                                    (("4" (grind) nil)))))
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (measure-induct+ "length(l)" "l")
                                    (("1"
                                      (expand "map" 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1" (grind) nil)))
                                           ("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "every" -2 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "forall(l:list[nat]): every(LAMBDA (x: number):
                                      number_field_pred(x) AND real_pred(x)
                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                              (l) =>  every[number]
                             (LAMBDA (x: number):
                                     number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                 AND integer_pred(x) AND x >= 0)
                             (append[nat](l, (: 0 :)))")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (measure-induct+
                                                           "length(l)"
                                                           "l")
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             1)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil)))
                                                                 ("2"
                                                                  (expand
                                                                   "every"
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "every"
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "cdr(x!2)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                3))
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))))))))))))))))))))
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite
                                                   "rac_append")
                                                  (("2"
                                                    (rewrite
                                                     "rdc_append")
                                                    (("2"
                                                      (expand
                                                       "every"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil)))
                                                             ("2"
                                                              (expand
                                                               "rdc"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil)))))))))))))))))))))))))
                                               ("3"
                                                (expand "every" -2 1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil)))))))))))))))))))))))
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil)))))))
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil)))))))
                             ("2" (propax) nil)))))
                         ("3" (hide-all-but 1)
                          (("3" (grind) nil))))))))))))))))))))))))
    nil)
   nil nil)
  (valid_paths_TCC5-1 nil 3642412740
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "p")
        (("" (replace -5)
          (("" (expand "member" 1)
            (("" (flatten)
              (("" (expand "valid_path" -4)
                (("" (assert)
                  (("" (flatten)
                    (("" (inst -2 "rdc(p)")
                      ((""
                        (case " member[(valid_path(expr))](p,
             map[list[nat], list[nat]]
                 (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(v(a)))")
                        (("1" (propax) nil nil)
                         ("2" (hide 3)
                          (("2"
                            (case "member[(valid_path(a))](rdc(p), v(a))")
                            (("1" (hide -3)
                              (("1"
                                (case
                                 "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l) => every[list[number]]
          (LAMBDA (x1: list[number]):
             every[number]
                 (LAMBDA (x: number):
                         number_field_pred(x) AND real_pred(x)
                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                 (x1)
              AND (null?(x1) OR (rac(x1) = 0 AND valid_path(a)(rdc(x1)))))
          (map[list[nat], list[nat]]
               (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
                                (("1"
                                  (case
                                   "forall(l:list[list[nat]]| every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l)): (member[(valid_path(a))](rdc(p), l) and rac(p) = 0 and not p = null[nat])=>  member[(valid_path(expr))]
          (p,
           map[list[nat], list[nat]]
               (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-1 -7 1))
                                    (("2"
                                      (measure-induct+ "length(l)" "l")
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-1 -3))
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (expand "member" 2)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "member" -2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -3 1 2 4))
                                                        (("1"
                                                          (case
                                                           "forall(l :list[nat]|not null?(l)): l = append(rdc(l),(: rac(l) :))")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand*
                                                                 "rdc"
                                                                 "rac")
                                                                (("2"
                                                                  (case
                                                                   "(: nth(l, length(l) - 1) :) = reverse((: nth(l, length(l) - 1) :))")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "reverse(l) = reverse( append(reverse(cdr(reverse(l))),
              reverse((: nth(l, length(l) - 1) :))))")
                                                                      (("1"
                                                                        (use
                                                                         "reverse_reverse[nat]")
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "reverse_reverse")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (case
                                                                           "null?(reverse(l))")
                                                                          (("1"
                                                                            (typepred
                                                                             "l")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-2
                                                                                1))
                                                                              (("1"
                                                                                (use
                                                                                 "reverse_reverse[nat]")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "reverse_append")
                                                                            (("2"
                                                                              (rewrite
                                                                               "reverse_reverse")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "reverse_reverse")
                                                                                (("2"
                                                                                  (case
                                                                                   "nth(l, length(l) - 1) = nth(reverse(l), 0)")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "append")
                                                                                          (("1"
                                                                                            (decompose-equality)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (generalize
                                                                                         "l"
                                                                                         "l")
                                                                                        (("1"
                                                                                          (measure-induct+
                                                                                           "length(l)"
                                                                                           "l")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "reverse"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "reverse"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append "
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -4)
                                        (("2"
                                          (expand "valid_path" 1)
                                          (("2"
                                            (typepred "l!1")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3" (grind) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "p")
                                        (("4"
                                          (replace -4)
                                          (("4"
                                            (expand "valid_path" -2)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (replace -7)
                                    (("3"
                                      (expand "valid_path" 1)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide-all-but 1)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (measure-induct+ "length(l)" "l")
                                    (("1"
                                      (expand "map" 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "every" -2 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "forall(l:list[nat]): every(LAMBDA (x: number):
                   number_field_pred(x) AND real_pred(x)
               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
           (l) =>  every[number]
          (LAMBDA (x: number):
                  number_field_pred(x) AND real_pred(x) AND rational_pred(x)
              AND integer_pred(x) AND x >= 0)
          (append[nat](l, (: 0 :)))")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (measure-induct+
                                                           "length(l)"
                                                           "l")
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             1)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "every"
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "every"
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "cdr(x!2)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                3))
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite
                                                   "rac_append")
                                                  (("2"
                                                    (rewrite
                                                     "rdc_append")
                                                    (("2"
                                                      (expand
                                                       "every"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "rdc"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "every" -2 1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil))
   nil))
 (valid_paths_TCC6 0
  (valid_paths_TCC6-4 nil 3648052040
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil)
   ((null_path formula-decl nil eval_props nil)) nil)
  (valid_paths_TCC6-3 nil 3643733623
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "valid_path") (("" (propax) nil nil)) nil)) nil))
    nil)
   nil nil)
  (valid_paths_TCC6-2 nil 3643733558 ("" (termination-tcc) nil nil) nil
   nil)
  (valid_paths_TCC6-1 nil 3642412740 ("" (termination-tcc) nil nil)
   ((Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   shostak))
 (valid_paths_TCC7 0
  (valid_paths_TCC7-1 nil 3642412740
   ("" (skeep)
    (("" (expand "restrict")
      (("" (replace -1)
        (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   shostak))
 (valid_paths_TCC8 0
  (valid_paths_TCC8-1 nil 3642412740 ("" (tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (valid_paths_TCC9 0
  (valid_paths_TCC9-1 nil 3642412740 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (valid_paths_TCC10 0
  (valid_paths_TCC10-3 nil 3648389182
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil)
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                 ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil nil))
                            nil)
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (append def-decl "list[T]" list_props nil)
    (op2 adt-constructor-decl "[[nat, Expr, Expr] -> (op2?)]" PVS0_adt
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (rac_append formula-decl nil eval_props nil)
    (append_null formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (x!2 skolem-const-decl "list[list[nat]]" eval_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (rac const-decl "nat" eval_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (b skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (a skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "list[nat]" eval_props nil))
   nil)
  (valid_paths_TCC10-2 nil 3645264052
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "<<")
        (("" (assert)
          (("" (expand "restrict") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)) nil)
  (valid_paths_TCC10-1 nil 3642412740
   ("" (skeep)
    (("" (lemma "every_append[list[nat]]")
      (("" (inst?)
        (("1" (inst?)
          (("1" (prop)
            (("1" (assert)
              (("1" (lemma "valid_paths_subexpr")
                (("1" (replace -5 1)
                  (("1" (expand "valid_path" 1)
                    (("1" (expand "every" 1 1)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (expand every 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4" (grind) nil nil)
                                 ("5" (grind) nil nil)
                                 ("6" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil)
                           ("4" (postpone) nil nil)
                           ("5" (postpone) nil nil)
                           ("6" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil))
            nil)
           ("2" (postpone) nil nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   ((Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   nil))
 (valid_paths_TCC11 0
  (valid_paths_TCC11-4 nil 3648389303
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "v(b)" "p")
        (("" (replace -7)
          (("" (expand "valid_path" -6)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (assert)
                  ((""
                    (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (append[nat](l, (: n :)))")
                    (("1"
                      (case "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(a)(x1))
                           (l1) and  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(b)(x1))
                           (l2)) =>  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(expr)(x1))
                           ( append[list[nat]]
                                 (map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                      (l1),
                                  map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                      (l2)))")
                      (("1" (prop)
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))")
                          (("1" (inst?)
                            (("1" (inst -7 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 1)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (2 4 -1 -3 -4))
                                                (("1"
                                                  (lemma "rdc_rac")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(x!1)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil)
                         ("2"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))")
                          (("1" (inst?)
                            (("1" (inst -9 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3 -5 -6 -7 -8 -9)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member" 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (1 2 4 -4 -1))
                                                      (("1"
                                                        (lemma
                                                         "rdc_rac")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "member" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(x!1)" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (1 4))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2"
                          (measure-induct+ "length(l1) +length(l2)"
                           ("l1" "l2"))
                          (("1" (expand "every" -2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -3 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "car(x!2)"
                                                       "1")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (reveal -9)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       -5
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("3"
                                                        (expand
                                                         "every"
                                                         -5
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "map"
                                                           -5
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "append"
                                                             -5
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide-all-but
                                                                 (2 3))
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -6 "car(x!1)" "0")
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst -4 "cdr(x!1)" "x!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (2 3))
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (hide-all-but 1)
                            (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (measure-induct+ "length(l)" "l")
                        (("2" (skeep)
                          (("2" (expand "append" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -1 -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every" 2)
                                  (("2"
                                    (inst -1 "cdr(x!1)")
                                    (("1" (grind) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x!1 skolem-const-decl "list[nat]" eval_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (a skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (p skolem-const-decl "(valid_path(expr))" eval_props nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (b skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (rdc_rac formula-decl nil eval_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (append_null formula-decl nil list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (rac_append formula-decl nil eval_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (rac const-decl "nat" eval_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (member def-decl "bool" list_props nil))
   nil)
  (valid_paths_TCC11-3 nil 3648052387
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil)
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                 ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil nil))
                            nil)
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((op2 adt-constructor-decl "[[nat, Expr, Expr] -> (op2?)]" PVS0_adt
     nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   nil)
  (valid_paths_TCC11-2 nil 3648052315
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "v(b)" "p")
        (("" (replace -7)
          (("" (expand "valid_path" -6)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (assert)
                  ((""
                    (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (append[nat](l, (: n :)))")
                    (("1"
                      (case "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(a)(x1))
                           (l1) and  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(b)(x1))
                           (l2)) =>  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(expr)(x1))
                           ( append[list[nat]]
                                 (map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                      (l1),
                                  map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                      (l2)))")
                      (("1" (prop)
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))")
                          (("1" (inst?)
                            (("1" (inst -7 "rdc(p)")
                              (("1" (assert) nil)))))
                           ("2" (hide 3)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 1)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (2 4 -1 -3 -4))
                                                (("1"
                                                  (lemma "rdc_rac")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil)))))))))))))))))
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(x!1)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil)))))))))))))))))))))))
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil)))))
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil)))
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil)))))
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil)))
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil)))))
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil)))
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil)))))
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil)))))))
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil)))))))
                           ("4" (hide-all-but 1) (("4" (grind) nil)))
                           ("5" (propax) nil)))
                         ("2"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))")
                          (("1" (inst?)
                            (("1" (inst -9 "rdc(p)")
                              (("1" (assert) nil)))))
                           ("2" (hide 3 -5 -6 -7 -8 -9)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member" 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (1 2 4 -4 -1))
                                                      (("1"
                                                        (lemma
                                                         "rdc_rac")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil)))))))))))))))
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))))))))))))))))
                                     ("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "member" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(x!1)" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (1 4))
                                                (("2"
                                                  (grind)
                                                  nil)))))))))))))))))))
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil)))))
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil)))
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil)))))
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil)))
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil)))))
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil)))
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil)))))
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil)))))))
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil)))))))
                           ("4" (hide-all-but 1) (("4" (grind) nil)))
                           ("5" (propax) nil)))))
                       ("2" (hide-all-but (1 -1))
                        (("2"
                          (measure-induct+ "length(l1) +length(l2)"
                           ("l1" "l2"))
                          (("1" (expand "every" -2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -3 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil)))))))
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "car(x!2)"
                                                       "1")
                                                      nil)
                                                     ("2"
                                                      (reveal -9)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))))
                                                     ("3"
                                                      (inst
                                                       -5
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("3"
                                                        (expand
                                                         "every"
                                                         -5
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "map"
                                                           -5
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "append"
                                                             -5
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide-all-but
                                                                 (2 3))
                                                                (("3"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))))))))))
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -6 "car(x!1)" "0")
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil)))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))))
                                           ("3"
                                            (inst -4 "cdr(x!1)" "x!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (2 3))
                                                (("3"
                                                  (grind)
                                                  nil)))))))))))))))))))))))
                           ("2" (hide-all-but 1) (("2" (grind) nil)))
                           ("3" (hide-all-but 1) (("3" (grind) nil)))
                           ("4" (hide-all-but 1) (("4" (grind) nil)))
                           ("5" (hide-all-but 1)
                            (("5" (grind) nil)))))))
                       ("3" (hide-all-but 1) (("3" (grind) nil)))))
                     ("2" (hide-all-but 1)
                      (("2" (measure-induct+ "length(l)" "l")
                        (("2" (skeep)
                          (("2" (expand "append" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (hide -1 -2) (("1" (grind) nil)))
                                 ("2"
                                  (expand "every" 2)
                                  (("2"
                                    (inst -1 "cdr(x!1)")
                                    (("1" (grind) nil)
                                     ("2"
                                      (assert)
                                      nil))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (valid_paths_TCC11-1 nil 3642412740
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "v(b)" "p")
        (("" (replace -7)
          (("" (expand "valid_path" -6)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (assert)
                  ((""
                    (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                            number_field_pred(x) AND real_pred(x)
                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                    (append[nat](l, (: n :)))")
                    (("1"
                      (case "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(a)(x1))
                  (l1) and  every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(b)(x1))
                  (l2)) =>  every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(expr)(x1))
                  ( append[list[nat]]
                        (map[list[nat], list[nat]]
                             (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                             (l1),
                         map[list[nat], list[nat]]
                             (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                             (l2)))")
                      (("1" (prop)
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                          append[list[nat]]
                              (map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                   (l1),
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                   (l2)))")
                          (("1" (inst?)
                            (("1" (inst -7 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 1)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (2 4 -1 -3 -4))
                                                (("1"
                                                  (lemma "rdc_rac")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(x!1)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil)
                         ("2"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                          append[list[nat]]
                              (map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                   (l1),
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                   (l2)))")
                          (("1" (inst?)
                            (("1" (inst -9 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3 -5 -6 -7 -8 -9)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member" 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (1 2 4 -4 -1))
                                                      (("1"
                                                        (lemma
                                                         "rdc_rac")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "member" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(x!1)" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (1 4))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2"
                          (measure-induct+ "length(l1) +length(l2)"
                           ("l1" "l2"))
                          (("1" (expand "every" -2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -3 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "car(x!2)"
                                                       "1")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (reveal -9)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       -5
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("3"
                                                        (expand
                                                         "every"
                                                         -5
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "map"
                                                           -5
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "append"
                                                             -5
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide-all-but
                                                                 (2 3))
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -6 "car(x!1)" "0")
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst -4 "cdr(x!1)" "x!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (2 3))
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (hide-all-but 1)
                            (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (measure-induct+ "length(l)" "l")
                        (("2" (skeep)
                          (("2" (expand "append" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -1 -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every" 2)
                                  (("2"
                                    (inst -1 "cdr(x!1)")
                                    (("1" (grind) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   shostak))
 (valid_paths_TCC12 0
  (valid_paths_TCC12-4 nil 3648052612
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil)
   ((null_path formula-decl nil eval_props nil)) nil)
  (valid_paths_TCC12-3 nil 3648052564
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil)))
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1) (("1" (grind) nil)))
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil)))))
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil)))))))))))))))))))))
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))))
                                 ("2" (assert) nil)))))))))))
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil)))))))))
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil)))
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil)))))))))))))))))))))))))))))))))
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2"
                                              (grind)
                                              nil)))))))))))))))))))))))))))))
                 ("2" (hide-all-but 1) (("2" (grind) nil)))
                 ("3" (hide-all-but 1) (("3" (grind) nil)))
                 ("4" (hide-all-but 1) (("4" (grind) nil)))
                 ("5" (hide-all-but 1) (("5" (grind) nil)))))
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil)))
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil)))
                                     ("2" (grind) nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil)))))))))
                               ("2" (assert) nil)))))))))))))))))))))
           ("3" (hide-all-but 1) (("3" (grind) nil))))))))))
    nil)
   nil nil)
  (valid_paths_TCC12-2 nil 3648052519
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil)))
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1) (("1" (grind) nil)))
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil)))))
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil)))))))))))))))))))))
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))))
                                 ("2" (assert) nil)))))))))))
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil)))))))))
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil)))
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil)))))))))))))))))))))))))))))))))
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2"
                                              (grind)
                                              nil)))))))))))))))))))))))))))))
                 ("2" (hide-all-but 1) (("2" (grind) nil)))
                 ("3" (hide-all-but 1) (("3" (grind) nil)))
                 ("4" (hide-all-but 1) (("4" (grind) nil)))
                 ("5" (hide-all-but 1) (("5" (grind) nil)))))
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil)))
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil)))
                                     ("2" (grind) nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil)))))))))
                               ("2" (assert) nil)))))))))))))))))))))
           ("3" (hide-all-but 1) (("3" (grind) nil))))))))))
    nil)
   nil nil)
  (valid_paths_TCC12-1 nil 3642412740
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "valid_path") (("" (propax) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (valid_paths_TCC13 0
  (valid_paths_TCC13-1 nil 3642412740
   ("" (skeep*)
    (("" (replace -1) (("" (expand* "restrict" "<<") nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil))
   shostak))
 (valid_paths_TCC14 0
  (valid_paths_TCC14-1 nil 3642412740 ("" (tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (valid_paths_TCC15 0
  (valid_paths_TCC15-3 nil 3648391689
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rac_append formula-decl nil eval_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "nat" eval_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse def-decl "list[T]" list_props nil)
    (append_null formula-decl nil list_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil)
  (valid_paths_TCC15-2 nil 3644074276 ("" (grind) nil nil) nil nil)
  (valid_paths_TCC15-1 nil 3642412740 ("" (termination-tcc) nil nil)
   nil nil))
 (valid_paths_TCC16 0
  (valid_paths_TCC16-4 nil 3648391795
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) =>
                       every[list[number]]
                           (LAMBDA (x1: list[number]):
                              every[number]
                                  (LAMBDA (x: number):
                                          number_field_pred(x) AND real_pred(x)
                                      AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                  (x1)
                               AND valid_path(expr)(x1))
                           (map[list[nat], list[nat]]
                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                                        (LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                            AND integer_pred(x) AND x >= 0)
                                        (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc_rac formula-decl nil eval_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (rac const-decl "nat" eval_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (rac_append formula-decl nil eval_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (append_null formula-decl nil list_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (a skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (p skolem-const-decl "(valid_path(expr))" eval_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (member def-decl "bool" list_props nil))
   nil)
  (valid_paths_TCC16-3 nil 3648052790
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   nil)
  (valid_paths_TCC16-2 nil 3645281850
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(a)(x1))
                  (l1) =>
                every[list[number]]
                    (LAMBDA (x1: list[number]):
                       every[number]
                           (LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (x1)
                        AND valid_path(expr)(x1))
                    (map[list[nat], list[nat]]
                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                      map[list[nat], list[nat]]
                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                         (LAMBDA (x: number):
                                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                             AND integer_pred(x) AND x >= 0)
                         (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   nil)
  (valid_paths_TCC16-1 nil 3642412740 ("" (termination-tcc) nil nil)
   ((Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   shostak))
 (valid_paths_TCC17 0
  (valid_paths_TCC17-2 nil 3648052910
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil)
   ((null_path formula-decl nil eval_props nil)) nil)
  (valid_paths_TCC17-1 nil 3642412740
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "valid_path") (("" (propax) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (valid_paths_TCC18 0
  (valid_paths_TCC18-1 nil 3642412740
   ("" (skeep)
    (("" (replace -1) (("" (expand* "restrict" "<<") nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil))
   shostak))
 (valid_paths_TCC19 0
  (valid_paths_TCC19-1 nil 3642412740 ("" (tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (valid_paths_TCC20 0
  (valid_paths_TCC20-1 nil 3642412740 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (valid_paths_TCC21 0
  (valid_paths_TCC21-1 nil 3642412740 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (valid_paths_TCC22 0
  (valid_paths_TCC22-3 nil 3648391998
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)" "v(c)")
      ((""
        (case "forall(l1,l2,l3 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and  every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(c)(x1))
                         (l3)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(expr)(x1))
                        (append[list[nat]]
                             (append[list[nat]]
                                  (map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                       (l1),
                                   map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                       (l2)),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))(l3)))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2"
            (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                 number_field_pred(x) AND real_pred(x)
                                             AND rational_pred(x) AND integer_pred(x)
                                             AND x >= 0)
                                         (append[nat](l, (: n :)))")
            (("1"
              (measure-induct+ "length(l1)+length(l2)+length(l3)"
               ("l1" "l2" "l3"))
              (("1" (expand "every" -2 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (expand "map" 1 1)
                      (("1" (assert)
                        (("1" (expand "append" 1 2)
                          (("1" (expand "every" -3 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -4 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (reveal -9)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (split 2)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "car(x!3)"
                                                           "2")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 1 2))
                                                          (("2"
                                                            (expand
                                                             "valid_path"
                                                             1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 1
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (rewrite
                                                                   "rac_append")
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_append")
                                                                    (("1"
                                                                      (expand
                                                                       "rdc")
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "reverse"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "append"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "reverse")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "append_null")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (inst
                                                           -6
                                                           "null"
                                                           "null"
                                                           "cdr(x!3)")
                                                          (("3"
                                                            (expand
                                                             "every"
                                                             -6
                                                             (1 3))
                                                            (("3"
                                                              (expand
                                                               "map"
                                                               -6
                                                               (1 2))
                                                              (("3"
                                                                (expand
                                                                 "append"
                                                                 -6
                                                                 2)
                                                                (("3"
                                                                  (expand
                                                                   "append"
                                                                   -6
                                                                   1)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide-all-but
                                                                       (2
                                                                        3))
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -7 "car(x!2)" 1)
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 3 5))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (reveal -9)
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (inst
                                                 -5
                                                 "null"
                                                 "cdr(x!2)"
                                                 "x!3")
                                                (("3"
                                                  (expand "every" -5 1)
                                                  (("3"
                                                    (expand "map" -5 1)
                                                    (("3"
                                                      (expand
                                                       "append"
                                                       -5
                                                       2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal -9)
                      (("2" (replaces -1)
                        (("2" (expand "map" 2 1)
                          (("2" (assert)
                            (("2" (expand "append" 2 2)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (expand "every" 2 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -7 "car(x!1)" "0")
                                      nil
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1 2))
                                      (("2"
                                        (expand "valid_path" 1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide 1 3 4)
                                            (("2"
                                              (rewrite "rac_append")
                                              (("1"
                                                (rewrite "rdc_append")
                                                (("1"
                                                  (expand "rdc")
                                                  (("1"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "reverse")
                                                          (("1"
                                                            (rewrite
                                                             "append_null")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst -4 "cdr(x!1)" "x!2" "x!3")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but (2 3))
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
               ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
               ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (measure-induct+ "length(l)" "l")
                (("2" (skeep)
                  (("2" (expand "append" 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (hide -) (("1" (grind) nil nil)) nil)
                         ("2" (expand "every" 2)
                          (("2" (inst -1 "cdr(x!1)")
                            (("1" (inst?)
                              (("1"
                                (expand "length" -1 2)
                                (("1"
                                  (assert)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x!1 skolem-const-decl "list[nat]" eval_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (a skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (b skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (c skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rac_append formula-decl nil eval_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rac const-decl "nat" eval_props nil)
    (nth def-decl "T" list_props nil)
    (append_null formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc_append formula-decl nil eval_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil)
  (valid_paths_TCC22-2 nil 3645267582
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "<<")
        (("" (expand "restrict") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)) nil)
  (valid_paths_TCC22-1 nil 3642412740 ("" (tcc))
   ((Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   nil))
 (valid_paths_TCC23 0
  (valid_paths_TCC23-5 nil 3648392074
   ("" (skeep*)
    (("" (typepred "p" "v(a)" "v(b)" "v(c)")
      (("" (expand "member" 1)
        (("" (flatten)
          ((""
            (case "forall(l : list[nat], n : nat): every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x)
                                                   AND x >= 0)
                                               (append[nat](l, (: n :)))")
            (("1"
              (case "forall(l1,l2,l3 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                       every(LAMBDA (x: number):
                                    number_field_pred(x) AND real_pred(x)
                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                            (x1)
                        AND valid_path(a)(x1))
                    (l1) and  every(LAMBDA (x1: list[number]):
                       every(LAMBDA (x: number):
                                    number_field_pred(x) AND real_pred(x)
                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                            (x1)
                        AND valid_path(b)(x1))
                    (l2) and  every(LAMBDA (x1: list[number]):
                       every(LAMBDA (x: number):
                                    number_field_pred(x) AND real_pred(x)
                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                            (x1)
                        AND valid_path(c)(x1))
                    (l3)) =>  every(LAMBDA (x1: list[number]):
                       every(LAMBDA (x: number):
                                    number_field_pred(x) AND real_pred(x)
                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                            (x1)
                        AND valid_path(ite(a, b, c))(x1))
                    (append[list[nat]]
                          (append[list[nat]]
                               (map[list[nat], list[nat]]
                                    (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                    (l1),
                                map[list[nat], list[nat]]
                                    (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                    (l2)),
                           map[list[nat], list[nat]]
                               (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))
                               (l3)))")
              (("1" (replace -11)
                (("1" (expand "valid_path" -4)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (inst -7 "rdc(p)")
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))],l2 :list[(valid_path(b))], l3 : list[(valid_path(c))]): member[(valid_path(a))](rdc(p), l1) =>  member[(valid_path(expr))](p,
                          append[list[nat]]
                              (append[list[nat]]
                                   (map[list[nat], list[nat]]
                                        (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                        (l1),
                                    map[list[nat], list[nat]]
                                        (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                        (l2)),
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))
                                   (l3)))")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (hide (3 -11 -10 -9 -8 -7 -6))
                            (("2"
                              (measure-induct+
                               "length(l1)+length(l2)+length(l3)"
                               ("l1" "l2" "l3"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 2)
                                          (("1"
                                            (expand "append" 2 1)
                                            (("1"
                                              (expand "member" 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -3 1 2 4))
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 2)
                                          (("2"
                                            (expand "append" 2 1)
                                            (("2"
                                              (expand "member" 2)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst
                                                   -2
                                                   "cdr(x!1)"
                                                   "x!2"
                                                   "x!3")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (1 2))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "y!1" "y!2" "y!3")
                                  (("2"
                                    (replace -13)
                                    (("2"
                                      (inst? -10)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (skeep)
                                (("4"
                                  (typepred "x!1`1" "x!1`2" "x!1`3")
                                  (("4"
                                    (replace -13)
                                    (("4"
                                      (inst? -10)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (typepred "y!1`1" "y!1`2" "y!1`3")
                                (("6"
                                  (replace -11)
                                  (("6"
                                    (inst?)
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (typepred "l1!1" "l2!1" "l3!1")
                                (("8"
                                  (replace -10)
                                  (("8"
                                    (inst?)
                                    (("8" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2" "l3")
                              (("3"
                                (inst?)
                                (("3"
                                  (replace -16)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (inst -9 "rdc(p)")
                        (("2"
                          (case "forall(l1 : list[(valid_path(a))],l2 :list[(valid_path(b))], l3 : list[(valid_path(c))]): member[(valid_path(b))](rdc(p), l2) =>  member[(valid_path(expr))](p,
                          append[list[nat]]
                              (append[list[nat]]
                                   (map[list[nat], list[nat]]
                                        (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                        (l1),
                                    map[list[nat], list[nat]]
                                        (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                        (l2)),
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))
                                   (l3)))")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (hide (3 -11 -10 -9 -8 -7 -6))
                            (("2"
                              (measure-induct+
                               "length(l1)+length(l2)+length(l3)"
                               ("l1" "l2" "l3"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 2)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "append" 2 1)
                                                  (("1"
                                                    (expand "member" 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -4 1 2 4))
                                                        (("1"
                                                          (lemma
                                                           "rdc_rac")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "append" 2 1)
                                                  (("2"
                                                    (expand "member" 2)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -3
                                                         "null"
                                                         "cdr(x!2)"
                                                         "x!3")
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide-all-but
                                                                 (1 4))
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 2)
                                      (("2"
                                        (expand "append" 2 1)
                                        (("2"
                                          (expand "member" 2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst
                                               -1
                                               "cdr(x!1)"
                                               "x!2"
                                               "x!3")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but (1 4))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "y!1" "y!2" "y!3")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (replace -11)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (typepred "x!1`1" "x!1`2" "x!1`3")
                                (("4"
                                  (replace -11)
                                  (("4"
                                    (inst? -8)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (typepred "y!1`1" "y!1`2" "y!1`3")
                                (("6"
                                  (replace -11)
                                  (("6"
                                    (inst?)
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (typepred "l1!1" "l2!1" "l3!1")
                                (("8"
                                  (inst?)
                                  (("8"
                                    (replace -10)
                                    (("8" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2" "l3")
                              (("3"
                                (inst?)
                                (("3"
                                  (replace -16)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (inst -11 "rdc(p)")
                        (("3"
                          (case "forall(l1 : list[(valid_path(a))],l2 :list[(valid_path(b))], l3 : list[(valid_path(c))]): member[(valid_path(c))](rdc(p), l3) =>  member[(valid_path(expr))](p,
                          append[list[nat]]
                              (append[list[nat]]
                                   (map[list[nat], list[nat]]
                                        (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                        (l1),
                                    map[list[nat], list[nat]]
                                        (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                        (l2)),
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))
                                   (l3)))")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2"
                            (measure-induct+
                             "length(l1)+length(l2)+length(l3)"
                             ("l1" "l2" "l3"))
                            (("1" (hide 3 -13 -12 -11 -10 -9 -8 -7 -6)
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 2)
                                      (("1"
                                        (expand "map" 1 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "append" 1 1)
                                              (("1"
                                                (expand "member" -4)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand "map" 2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide-all-but
                                                               (1
                                                                2
                                                                4
                                                                -1
                                                                -5))
                                                              (("1"
                                                                (lemma
                                                                 "rdc_rac")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "map" 2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           2)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "null"
                                                               "null"
                                                               "cdr(x!3)")
                                                              (("2"
                                                                (expand
                                                                 "map"
                                                                 -4
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "append"
                                                                   -4
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "map"
                                                                     -4
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "append"
                                                                       -4
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            4))
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "append" 2 1)
                                              (("2"
                                                (expand "member" 2)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "null"
                                                     "cdr(x!2)"
                                                     "x!3")
                                                    (("2"
                                                      (expand
                                                       "map"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         -2
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             (1 4))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 2)
                                      (("2"
                                        (expand "append" 2 1)
                                        (("2"
                                          (expand "member" 2 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst
                                               -1
                                               "cdr(x!1)"
                                               "x!2"
                                               "x!3")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but (1 4))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "y!1" "y!2" "y!3")
                              (("2"
                                (replace -17)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3" (grind) nil nil)) nil)
                             ("4" (hide 2)
                              (("4"
                                (typepred "x!1`1" "x!1`2" "x!1`3")
                                (("4"
                                  (replace -17)
                                  (("4"
                                    (inst? -8)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide-all-but 1)
                              (("5" (grind) nil nil)) nil)
                             ("6" (hide 2)
                              (("6"
                                (typepred "y!1`1" "y!1`2" "y!1`3")
                                (("6"
                                  (inst?)
                                  (("6"
                                    (replace -17)
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (hide-all-but 1)
                              (("7" (grind) nil nil)) nil)
                             ("8" (typepred "l1!1" "l2!1" "l3!1")
                              (("8"
                                (inst?)
                                (("8"
                                  (replace -16)
                                  (("8" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("9" (hide-all-but 1)
                              (("9" (grind) nil nil)) nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2" "l3")
                              (("3"
                                (inst?)
                                (("3"
                                  (replace -16)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (1 -1))
                (("2"
                  (measure-induct+ "length(l1)+length(l2)+length(l3)"
                   ("l1" "l2" "l3"))
                  (("1" (expand "every" -2 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (expand "map" 1 1)
                          (("1" (assert)
                            (("1" (expand "append" 1 2)
                              (("1"
                                (expand "every" -3 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 1 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 1 1)
                                          (("1"
                                            (expand "every" -4 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but (1 -1))
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "map" 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "every"
                                                       2
                                                       1)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -7)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide-all-but
                                                               (4
                                                                5
                                                                -2))
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse")
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (inst
                                                           -6
                                                           "null"
                                                           "null"
                                                           "cdr(x!3)")
                                                          (("3"
                                                            (expand
                                                             "every"
                                                             -6
                                                             (1 3))
                                                            (("3"
                                                              (expand
                                                               "map"
                                                               -6
                                                               (1 2))
                                                              (("3"
                                                                (expand
                                                                 "append"
                                                                 -6
                                                                 (1 2))
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (hide-all-but
                                                                     (2
                                                                      3))
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1" (inst? -7) nil nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (5 3 -2))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst
                                                 -5
                                                 "null"
                                                 "cdr(x!2)"
                                                 "x!3")
                                                (("3"
                                                  (expand "every" -5 1)
                                                  (("3"
                                                    (expand "map" -5 1)
                                                    (("3"
                                                      (expand
                                                       "append"
                                                       -5
                                                       2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "map" 2 1)
                          (("2" (assert)
                            (("2" (expand "append" 2 2)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (expand "every" 2 1)
                                  (("2"
                                    (prop)
                                    (("1" (inst? -7) nil nil)
                                     ("2"
                                      (expand "valid_path" 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (2 5 -2))
                                          (("2"
                                            (rewrite "rac_append")
                                            (("1"
                                              (rewrite "rdc_append")
                                              (("1"
                                                (expand "rdc")
                                                (("1"
                                                  (expand
                                                   "reverse"
                                                   1
                                                   2)
                                                  (("1"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "append"
                                                       1
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "reverse")
                                                        (("1"
                                                          (rewrite
                                                           "append_null")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst -4 "cdr(x!1)" "x!2" "x!3")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but (2 3))
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                   ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                   ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                   ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (measure-induct+ "length(l)" "l")
                (("2" (skeep)
                  (("2" (expand "append" 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (hide -) (("1" (grind) nil nil)) nil)
                         ("2" (expand "every" 2)
                          (("2" (inst -1 "cdr(x!1)")
                            (("1" (inst?)
                              (("1"
                                (expand "length" -1 2)
                                (("1"
                                  (assert)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x!1 skolem-const-decl "list[nat]" eval_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ite adt-constructor-decl "[[Expr, Expr, Expr] -> (ite?)]" PVS0_adt
     nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (b skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (c skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rdc_rac formula-decl nil eval_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (p skolem-const-decl "(valid_path(expr))" eval_props nil)
    (expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (a skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rdc_append formula-decl nil eval_props nil)
    (append_null formula-decl nil list_props nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rac_append formula-decl nil eval_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (rac const-decl "nat" eval_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil))
   nil)
  (valid_paths_TCC23-4 nil 3648053119
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)" "v(c)")
      ((""
        (case "forall(l1,l2,l3 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and  every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(c)(x1))
                         (l3)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(expr)(x1))
                        (append[list[nat]]
                             (append[list[nat]]
                                  (map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                       (l1),
                                   map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                       (l2)),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))(l3)))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2"
            (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                 number_field_pred(x) AND real_pred(x)
                                             AND rational_pred(x) AND integer_pred(x)
                                             AND x >= 0)
                                         (append[nat](l, (: n :)))")
            (("1"
              (measure-induct+ "length(l1)+length(l2)+length(l3)"
               ("l1" "l2" "l3"))
              (("1" (expand "every" -2 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (expand "map" 1 1)
                      (("1" (assert)
                        (("1" (expand "append" 1 2)
                          (("1" (expand "every" -3 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -4 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (reveal -9)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (split 2)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "car(x!3)"
                                                           "2")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 1 2))
                                                          (("2"
                                                            (expand
                                                             "valid_path"
                                                             1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 1
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (rewrite
                                                                   "rac_append")
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_append")
                                                                    (("1"
                                                                      (expand
                                                                       "rdc")
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "reverse"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "append"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "reverse")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "append_null")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (inst
                                                           -6
                                                           "null"
                                                           "null"
                                                           "cdr(x!3)")
                                                          (("3"
                                                            (expand
                                                             "every"
                                                             -6
                                                             (1 3))
                                                            (("3"
                                                              (expand
                                                               "map"
                                                               -6
                                                               (1 2))
                                                              (("3"
                                                                (expand
                                                                 "append"
                                                                 -6
                                                                 2)
                                                                (("3"
                                                                  (expand
                                                                   "append"
                                                                   -6
                                                                   1)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide-all-but
                                                                       (2
                                                                        3))
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -7 "car(x!2)" 1)
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 3 5))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (reveal -9)
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (inst
                                                 -5
                                                 "null"
                                                 "cdr(x!2)"
                                                 "x!3")
                                                (("3"
                                                  (expand "every" -5 1)
                                                  (("3"
                                                    (expand "map" -5 1)
                                                    (("3"
                                                      (expand
                                                       "append"
                                                       -5
                                                       2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal -9)
                      (("2" (replaces -1)
                        (("2" (expand "map" 2 1)
                          (("2" (assert)
                            (("2" (expand "append" 2 2)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (expand "every" 2 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -7 "car(x!1)" "0")
                                      nil
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1 2))
                                      (("2"
                                        (expand "valid_path" 1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide 1 3 4)
                                            (("2"
                                              (rewrite "rac_append")
                                              (("1"
                                                (rewrite "rdc_append")
                                                (("1"
                                                  (expand "rdc")
                                                  (("1"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "reverse")
                                                          (("1"
                                                            (rewrite
                                                             "append_null")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst -4 "cdr(x!1)" "x!2" "x!3")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but (2 3))
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
               ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
               ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (measure-induct+ "length(l)" "l")
                (("2" (skeep)
                  (("2" (expand "append" 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (hide -) (("1" (grind) nil nil)) nil)
                         ("2" (expand "every" 2)
                          (("2" (inst -1 "cdr(x!1)")
                            (("1" (inst?)
                              (("1"
                                (expand "length" -1 2)
                                (("1"
                                  (assert)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil))
   nil)
  (valid_paths_TCC23-3 nil 3645374288
   ("" (skeep*)
    (("" (typepred "p" "v(a)" "v(b)" "v(c)")
      (("" (expand "member" 1)
        (("" (flatten)
          ((""
            (case "forall(l : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l, (: n :)))")
            (("1"
              (case "forall(l1,l2,l3 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l1) and  every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(b)(x1))
           (l2) and  every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(c)(x1))
           (l3)) =>  every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(ite(a, b, c))(x1))
           (append[list[nat]]
                 (append[list[nat]]
                      (map[list[nat], list[nat]]
                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                           (l1),
                       map[list[nat], list[nat]]
                           (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                           (l2)),
                  map[list[nat], list[nat]]
                      (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))
                      (l3)))")
              (("1" (replace -11)
                (("1" (expand "valid_path" -4)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (inst -7 "rdc(p)")
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))],l2 :list[(valid_path(b))], l3 : list[(valid_path(c))]): member[(valid_path(a))](rdc(p), l1) =>  member[(valid_path(expr))](p,
             append[list[nat]]
                 (append[list[nat]]
                      (map[list[nat], list[nat]]
                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                           (l1),
                       map[list[nat], list[nat]]
                           (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                           (l2)),
                  map[list[nat], list[nat]]
                      (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))
                      (l3)))")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (hide (3 -11 -10 -9 -8 -7 -6))
                            (("2"
                              (measure-induct+
                               "length(l1)+length(l2)+length(l3)"
                               ("l1" "l2" "l3"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 2)
                                          (("1"
                                            (expand "append" 2 1)
                                            (("1"
                                              (expand "member" 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -3 1 2 4))
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 2)
                                          (("2"
                                            (expand "append" 2 1)
                                            (("2"
                                              (expand "member" 2)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst
                                                   -2
                                                   "cdr(x!1)"
                                                   "x!2"
                                                   "x!3")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (1 2))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "y!1" "y!2" "y!3")
                                  (("2"
                                    (replace -13)
                                    (("2"
                                      (inst? -10)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (skeep)
                                (("4"
                                  (typepred "x!1`1" "x!1`2" "x!1`3")
                                  (("4"
                                    (replace -13)
                                    (("4"
                                      (inst? -10)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (typepred "y!1`1" "y!1`2" "y!1`3")
                                (("6"
                                  (replace -11)
                                  (("6"
                                    (inst?)
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (typepred "l1!1" "l2!1" "l3!1")
                                (("8"
                                  (replace -10)
                                  (("8"
                                    (inst?)
                                    (("8" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2" "l3")
                              (("3"
                                (inst?)
                                (("3"
                                  (replace -16)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (inst -9 "rdc(p)")
                        (("2"
                          (case "forall(l1 : list[(valid_path(a))],l2 :list[(valid_path(b))], l3 : list[(valid_path(c))]): member[(valid_path(b))](rdc(p), l2) =>  member[(valid_path(expr))](p,
             append[list[nat]]
                 (append[list[nat]]
                      (map[list[nat], list[nat]]
                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                           (l1),
                       map[list[nat], list[nat]]
                           (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                           (l2)),
                  map[list[nat], list[nat]]
                      (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))
                      (l3)))")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (hide (3 -11 -10 -9 -8 -7 -6))
                            (("2"
                              (measure-induct+
                               "length(l1)+length(l2)+length(l3)"
                               ("l1" "l2" "l3"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 2)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "append" 2 1)
                                                  (("1"
                                                    (expand "member" 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -4 1 2 4))
                                                        (("1"
                                                          (lemma
                                                           "rdc_rac")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "append" 2 1)
                                                  (("2"
                                                    (expand "member" 2)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -3
                                                         "null"
                                                         "cdr(x!2)"
                                                         "x!3")
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide-all-but
                                                                 (1 4))
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 2)
                                      (("2"
                                        (expand "append" 2 1)
                                        (("2"
                                          (expand "member" 2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst
                                               -1
                                               "cdr(x!1)"
                                               "x!2"
                                               "x!3")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but (1 4))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "y!1" "y!2" "y!3")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (replace -11)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (typepred "x!1`1" "x!1`2" "x!1`3")
                                (("4"
                                  (replace -11)
                                  (("4"
                                    (inst? -8)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (typepred "y!1`1" "y!1`2" "y!1`3")
                                (("6"
                                  (replace -11)
                                  (("6"
                                    (inst?)
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (typepred "l1!1" "l2!1" "l3!1")
                                (("8"
                                  (inst?)
                                  (("8"
                                    (replace -10)
                                    (("8" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2" "l3")
                              (("3"
                                (inst?)
                                (("3"
                                  (replace -16)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (inst -11 "rdc(p)")
                        (("3"
                          (case "forall(l1 : list[(valid_path(a))],l2 :list[(valid_path(b))], l3 : list[(valid_path(c))]): member[(valid_path(c))](rdc(p), l3) =>  member[(valid_path(expr))](p,
             append[list[nat]]
                 (append[list[nat]]
                      (map[list[nat], list[nat]]
                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                           (l1),
                       map[list[nat], list[nat]]
                           (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                           (l2)),
                  map[list[nat], list[nat]]
                      (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))
                      (l3)))")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2"
                            (measure-induct+
                             "length(l1)+length(l2)+length(l3)"
                             ("l1" "l2" "l3"))
                            (("1" (hide 3 -13 -12 -11 -10 -9 -8 -7 -6)
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 2)
                                      (("1"
                                        (expand "map" 1 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "append" 1 1)
                                              (("1"
                                                (expand "member" -4)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand "map" 2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide-all-but
                                                               (1
                                                                2
                                                                4
                                                                -1
                                                                -5))
                                                              (("1"
                                                                (lemma
                                                                 "rdc_rac")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "map" 2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           2)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "null"
                                                               "null"
                                                               "cdr(x!3)")
                                                              (("2"
                                                                (expand
                                                                 "map"
                                                                 -4
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "append"
                                                                   -4
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "map"
                                                                     -4
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "append"
                                                                       -4
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            4))
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "append" 2 1)
                                              (("2"
                                                (expand "member" 2)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "null"
                                                     "cdr(x!2)"
                                                     "x!3")
                                                    (("2"
                                                      (expand
                                                       "map"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         -2
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             (1 4))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 2)
                                      (("2"
                                        (expand "append" 2 1)
                                        (("2"
                                          (expand "member" 2 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst
                                               -1
                                               "cdr(x!1)"
                                               "x!2"
                                               "x!3")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but (1 4))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "y!1" "y!2" "y!3")
                              (("2"
                                (replace -17)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3" (grind) nil nil)) nil)
                             ("4" (hide 2)
                              (("4"
                                (typepred "x!1`1" "x!1`2" "x!1`3")
                                (("4"
                                  (replace -17)
                                  (("4"
                                    (inst? -8)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide-all-but 1)
                              (("5" (grind) nil nil)) nil)
                             ("6" (hide 2)
                              (("6"
                                (typepred "y!1`1" "y!1`2" "y!1`3")
                                (("6"
                                  (inst?)
                                  (("6"
                                    (replace -17)
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (hide-all-but 1)
                              (("7" (grind) nil nil)) nil)
                             ("8" (typepred "l1!1" "l2!1" "l3!1")
                              (("8"
                                (inst?)
                                (("8"
                                  (replace -16)
                                  (("8" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("9" (hide-all-but 1)
                              (("9" (grind) nil nil)) nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2" "l3")
                              (("3"
                                (inst?)
                                (("3"
                                  (replace -16)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (1 -1))
                (("2"
                  (measure-induct+ "length(l1)+length(l2)+length(l3)"
                   ("l1" "l2" "l3"))
                  (("1" (expand "every" -2 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (expand "map" 1 1)
                          (("1" (assert)
                            (("1" (expand "append" 1 2)
                              (("1"
                                (expand "every" -3 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 1 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 1 1)
                                          (("1"
                                            (expand "every" -4 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but (1 -1))
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "map" 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "every"
                                                       2
                                                       1)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -7)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide-all-but
                                                               (4
                                                                5
                                                                -2))
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse")
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (inst
                                                           -6
                                                           "null"
                                                           "null"
                                                           "cdr(x!3)")
                                                          (("3"
                                                            (expand
                                                             "every"
                                                             -6
                                                             (1 3))
                                                            (("3"
                                                              (expand
                                                               "map"
                                                               -6
                                                               (1 2))
                                                              (("3"
                                                                (expand
                                                                 "append"
                                                                 -6
                                                                 (1 2))
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (hide-all-but
                                                                     (2
                                                                      3))
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1" (inst? -7) nil nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (5 3 -2))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst
                                                 -5
                                                 "null"
                                                 "cdr(x!2)"
                                                 "x!3")
                                                (("3"
                                                  (expand "every" -5 1)
                                                  (("3"
                                                    (expand "map" -5 1)
                                                    (("3"
                                                      (expand
                                                       "append"
                                                       -5
                                                       2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "map" 2 1)
                          (("2" (assert)
                            (("2" (expand "append" 2 2)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (expand "every" 2 1)
                                  (("2"
                                    (prop)
                                    (("1" (inst? -7) nil nil)
                                     ("2"
                                      (expand "valid_path" 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (2 5 -2))
                                          (("2"
                                            (rewrite "rac_append")
                                            (("1"
                                              (rewrite "rdc_append")
                                              (("1"
                                                (expand "rdc")
                                                (("1"
                                                  (expand
                                                   "reverse"
                                                   1
                                                   2)
                                                  (("1"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "append"
                                                       1
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "reverse")
                                                        (("1"
                                                          (rewrite
                                                           "append_null")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst -4 "cdr(x!1)" "x!2" "x!3")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but (2 3))
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                   ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                   ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                   ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (measure-induct+ "length(l)" "l")
                (("2" (skeep)
                  (("2" (expand "append" 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (hide -) (("1" (grind) nil nil)) nil)
                         ("2" (expand "every" 2)
                          (("2" (inst -1 "cdr(x!1)")
                            (("1" (inst?)
                              (("1"
                                (expand "length" -1 2)
                                (("1"
                                  (assert)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0])" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (ite adt-constructor-decl "[[Expr, Expr, Expr] -> (ite?)]" PVS0_adt
     nil))
   nil)
  (valid_paths_TCC23-2 nil 3645373251
   ("" (skeep*)
    (("" (typepred "p" "v(a)" "v(b)" "v(c)")
      (("" (expand "member" 1)
        (("" (flatten) (("" (postpone) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil)
  (valid_paths_TCC23-1 nil 3643118905
   ("" (skeep*)
    (("" (typepred "p" "v(a)" "v(b)" "v(c)")
      (("" (expand "member" 1)
        (("" (flatten) (("" (postpone) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (valid_paths_TCC24 0
  (valid_paths_TCC24-2 nil 3648053274
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil)
   ((null_path formula-decl nil eval_props nil)) nil)
  (valid_paths_TCC24-1 nil 3643118905
   ("" (skeep)
    (("" (typepred "expr")
      (("" (assert)
        (("" (expand "valid_path")
          (("" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil))
   shostak))
 (valid_paths_TCC25 0
  (valid_paths_TCC25-1 nil 3643118905 ("" (tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (valid_paths_TCC26 0
  (valid_paths_TCC26-1 nil 3643118905 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil))
   nil))
 (subset_member_sl 0
  (subset_member_sl-1 nil 3647694155
   ("" (measure-induct+ "length(l1)+length(l2)" (l1 l2))
    (("" (prop)
      (("1" (skeep)
        (("1" (expand "subset_sl?" -1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
               ("2" (expand "member" -3)
                (("2" (assert)
                  (("2" (inst -4 "cdr(x!1)" "x!2")
                    (("2" (assert)
                      (("2" (expand "length" -4 3)
                        (("2" (inst -4 "e") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset_sl?" 1)
        (("2" (lift-if)
          (("2" (prop)
            (("1" (inst -1 "car(x!1)")
              (("1" (assert)
                (("1" (expand "member" 3) (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (inst -2 "cdr(x!1)" "x!2")
              (("2" (expand "length" -2 3)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "member" 3)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_sl_is_preorder name-judgement "(preorder?[list[T]])"
     set_as_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (subset_sl? def-decl
     "{b: bool | b IFF (FORALL x: member(x, l1) => member(x, l2))}"
     set_as_list "structures/")
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Conditions type-eq-decl nil conditions nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (suffix_subset_sl 0
  (suffix_subset_sl-1 nil 3649423687
   ("" (skeep)
    (("" (rewrite "suffix_supl")
      (("" (rewrite "subset_member_sl")
        (("" (skeep -1)
          (("" (replaces -1 :dir rl)
            (("" (skeep) (("" (rewrite "member_append_r") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((suffix_supl formula-decl nil more_list_props "structures/")
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil conditions nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (member_append_r formula-decl nil more_list_props "structures/")
    (subset_member_sl formula-decl nil eval_props nil))
   shostak))
 (path_conditions_cons_TCC1 0
  (path_conditions_cons_TCC1-1 nil 3642331537
   ("" (skeep)
    (("" (typepred "path")
      (("" (lemma "valid_paths_subexpr")
        (("" (inst -1 "body" "path")
          (("" (beta)
            (("" (inst -1 "(: n :)")
              (("1" (expand "append")
                (("1" (expand "append") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (hide-all-but (-3 -4 -5 -6 1))
                (("2" (replace -4 :dir rl)
                  (("2" (expand "valid_path")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (expand "rdc")
                          (("2" (expand "reverse" 1 2)
                            (("2" (expand "reverse" 2 2)
                              (("2"
                                (expand "reverse" 3 2)
                                (("2"
                                  (expand "reverse" 1 2)
                                  (("2"
                                    (expand "reverse" 2 2)
                                    (("2"
                                      (expand "reverse" 3 2)
                                      (("2"
                                        (expand "append" 1)
                                        (("2"
                                          (expand "append" 2)
                                          (("2"
                                            (expand "append" 3)
                                            (("2"
                                              (expand "reverse")
                                              (("2"
                                                (expand "rac")
                                                (("2"
                                                  (expand "length")
                                                  (("2"
                                                    (expand "length")
                                                    (("2"
                                                      (expand "nth")
                                                      (("2"
                                                        (expand
                                                         "valid_path"
                                                         1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (expand
                                                             "valid_path"
                                                             2)
                                                            (("1"
                                                              (split 2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "valid_path")
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (n skolem-const-decl "nat" eval_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" eval_props nil)
    (body skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (append def-decl "list[T]" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "nat" eval_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (valid_paths_subexpr formula-decl nil eval_props nil))
   shostak))
 (path_conditions_cons_TCC2 0
  (path_conditions_cons_TCC2-1 nil 3647855252
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (path_conditions_cons 0
  (path_conditions_cons-1 nil 3647794078
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (beta)
          (("" (prop)
            (("" (expand "path_conditions" 1 1)
              (("" (assert)
                (("" (lift-if)
                  (("" (prop)
                    (("1" (expand "append")
                      (("1" (expand "append")
                        (("1" (expand "path_conds_aux")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "append")
                      (("2" (expand "append")
                        (("2" (expand "path_conds_aux")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" eval_props nil)
    (append def-decl "list[T]" list_props nil)
    (path_conds_aux const-decl "BoolPVS0" eval_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (path_conditions_unmodified_TCC1 0
  (path_conditions_unmodified_TCC1-1 nil 3648297002
   ("" (skeep)
    (("" (replaces -1)
      (("" (lemma "valid_0_path_ext")
        (("" (inst?)
          (("" (assert)
            (("" (assert)
              (("" (flatten)
                (("" (typepred "expr")
                  (("" (replace -2) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (valid_0_path_ext formula-decl nil eval_props nil))
   nil))
 (path_conditions_unmodified 0
  (path_conditions_unmodified-1 nil 3648297205
   ("" (skeep*)
    (("" (beta)
      (("" (prop)
        (("" (expand "path_conditions" 3 1)
          (("" (assert)
            (("" (expand "append") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" eval_props nil)
    (append def-decl "list[T]" list_props nil))
   shostak))
 (path_conditions_unmodified2_TCC1 0
  (path_conditions_unmodified2_TCC1-1 nil 3648476299
   ("" (skeep*)
    (("" (typepred "path")
      (("" (lemma "valid_1_path_ext")
        (("" (inst?)
          (("" (assert)
            (("" (replaces -6 :dir rl) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (valid_1_path_ext formula-decl nil eval_props nil))
   nil))
 (path_conditions_unmodified2 0
  (path_conditions_unmodified2-1 nil 3648476342
   ("" (skeep*)
    (("" (beta)
      (("" (prop)
        (("" (expand "path_conditions" 1 1)
          (("" (assert)
            (("" (expand "append") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" eval_props nil)
    (append def-decl "list[T]" list_props nil))
   nil))
 (suffix_path_cnds_suffix 0
  (suffix_path_cnds_suffix-1 nil 3649079052
   ("" (skeep*)
    (("" (rewrite "suffix_supl" 1)
      (("" (rewrite "suffix_supl")
        (("" (generalize-skolem-constants)
          ((""
            (measure-induct+ "length(path_1)+length(path_ext_1)"
             ("expr_1" "path_1" "path_ext_1"))
            (("" (skeep -2)
              (("" (replace -2 1 :dir rl)
                (("" (expand "append" -2)
                  (("" (lift-if)
                    (("" (prop)
                      (("1" (expand "append" 1 2)
                        (("1" (assert)
                          (("1" (inst 1 "null")
                            (("1" (expand "append" 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "append" 2 2)
                        (("2" (assert)
                          (("2" (expand "path_conditions" 2 2)
                            (("2"
                              (case "NOT ite?(subterm_at(x!1, append(cdr(L), x!2))) OR
                    car(L) = 0")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "append" 2 2)
                                  (("1"
                                    (inst
                                     -3
                                     "x!1"
                                     "x!2"
                                     "append(cdr(L),x!2)")
                                    (("1"
                                      (replace -2 :dir rl)
                                      (("1"
                                        (split -3)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (inst 1 "cdr(L)")
                                          nil
                                          nil)
                                         ("3"
                                          (expand "length" 1 4)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x!3")
                                      (("2"
                                        (replace -4 :dir rl)
                                        (("2"
                                          (lemma
                                           "path_conditions_TCC1")
                                          (("2"
                                            (inst
                                             -1
                                             "x!1"
                                             "cons(car(L), append(cdr(L), x!2))"
                                             "car(L)"
                                             "append(cdr(L), x!2)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (name-replace
                                     "head"
                                     "IF car(L) = 1
                  THEN (: pvsbool(get_cond(subterm_at
                                           (x!1, append(cdr(L), x!2)))) :)
                ELSE (: pvsnot(get_cond(subterm_at
                                        (x!1, append(cdr(L), x!2)))) :)
                ENDIF")
                                    (("2"
                                      (inst
                                       -3
                                       "x!1"
                                       "x!2"
                                       "append(cdr(L),x!2)")
                                      (("2"
                                        (split)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (inst
                                               3
                                               "append(head,L_1)")
                                              (("1"
                                                (rewrite
                                                 "append_assoc")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (inst?) nil nil)
                                         ("3"
                                          (replace -2 :dir rl)
                                          (("3"
                                            (hide-all-but (1 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred "x!3")
                                (("3"
                                  (replace -3 :dir rl)
                                  (("3"
                                    (lemma "path_conditions_TCC1")
                                    (("3"
                                      (inst
                                       -1
                                       "x!1"
                                       "cons(car(L), append(cdr(L), x!2))"
                                       "car(L)"
                                       "append(cdr(L), x!2)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((suffix_supl formula-decl nil more_list_props "structures/")
    (list type-decl nil list_adt nil) (Val type-eq-decl nil lang nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (Conditions type-eq-decl nil conditions nil)
    (path_conditions def-decl "Conditions" eval_props nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (path_conditions_TCC1 subtype-tcc nil eval_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (x!2 skolem-const-decl "(valid_path(x!1))" eval_props nil)
    (L skolem-const-decl "list[nat]" eval_props nil)
    (x!1 skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append_assoc formula-decl nil list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (get_cond adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (suffix_path_cnds 0
  (suffix_path_cnds-1 nil 3645971413
   ("" (skeep*)
    (("" (use "suffix_path_cnds_suffix")
      (("" (use "suffix_subset_sl") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((suffix_path_cnds_suffix formula-decl nil eval_props nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (subset_sl_is_preorder name-judgement "(preorder?[list[T]])"
     set_as_list_props "structures/")
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Conditions type-eq-decl nil conditions nil)
    (path_conditions def-decl "Conditions" eval_props nil)
    (suffix_subset_sl formula-decl nil eval_props nil))
   shostak))
 (member_conds_rec 0
  (member_conds_rec-1 nil 3647695484
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "length(cnds)" cnds)
        (("" (skeep)
          (("" (expand "member" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "eval_conds_rec" -3)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (replace -1 :dir rl)
                        (("1" (prop)
                          (("1" (expand "eval_conds_rec" 2)
                            (("1" (assert)
                              (("1"
                                (expand "eval_conds_rec" 2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "eval_conds_rec" 3)
                            (("2" (assert)
                              (("2"
                                (expand "eval_conds_rec" 3)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "eval_conds_rec" -3)
                  (("2" (assert)
                    (("2" (prop)
                      (("2" (inst -2 "cdr(x!1)")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (hide-all-but (1 2))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eval_conds_rec def-decl "bool" conditions nil)
    (Environment type-eq-decl nil lang nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Conditions type-eq-decl nil conditions nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (member_conds_rec2 0
  (member_conds_rec2-1 nil 3647696231
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "length(cnds)" "cnds")
        (("" (expand "eval_conds_rec" 1)
          (("" (lift-if)
            (("" (split)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (inst-cp -2 "car(x!1)")
                  (("1" (expand "eval_conds_rec" -3)
                    (("1" (expand "eval_conds_rec" -3)
                      (("1" (replaces -3)
                        (("1" (inst?)
                          (("1" (expand "length" -1 2)
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (typepred "e")
                                      (("1"
                                        (expand "member" 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 2)) (("2" (grind) nil nil))
                    nil)
                   ("3" (hide-all-but (1 2)) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x!1 skolem-const-decl "list[BoolPVS0[T]]" eval_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (e skolem-const-decl "{e: BoolPVS0 | member(e, cdr(x!1))}"
     eval_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (eval_conds_rec def-decl "bool" conditions nil)
    (Environment type-eq-decl nil lang nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Conditions type-eq-decl nil conditions nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (suffix_conds_rec 0
  (suffix_conds_rec-1 nil 3647692909
   ("" (skeep*)
    (("" (rewrite "subset_member_sl")
      (("" (lemma "member_conds_rec2")
        ((""
          (inst -1 "eval_bool" "eval_op1" "eval_op2" "env" "expr"
           "suffcnds")
          (("" (assert)
            (("" (skeep)
              (("" (inst?)
                (("" (typepred "e")
                  (("" (assert)
                    (("" (lemma "member_conds_rec")
                      (("" (inst?)
                        (("" (inst -1 "cnds") (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_member_sl formula-decl nil eval_props nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil conditions nil)
    (Val type-eq-decl nil lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Environment type-eq-decl nil lang nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member_conds_rec formula-decl nil eval_props nil)
    (member def-decl "bool" list_props nil)
    (member_conds_rec2 formula-decl nil eval_props nil))
   shostak))
 (suffix_conds_valid_sub 0
  (suffix_conds_valid_sub-1 nil 3647789967
   ("" (skeep*)
    (("" (use "suffix_path_cnds")
      (("" (assert)
        (("" (lemma "suffix_conds_rec")
          ((""
            (inst -1 "eval_bool" "eval_op1" "eval_op2" "env" "body"
             "path_conditions(sub_body, path)"
             " path_conditions(sub_body, path_ext)")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((suffix_path_cnds formula-decl nil eval_props nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (suffix_conds_rec formula-decl nil eval_props nil)
    (subset_sl_is_preorder name-judgement "(preorder?[list[T]])"
     set_as_list_props "structures/")
    (path_conditions def-decl "Conditions" eval_props nil)
    (Conditions type-eq-decl nil conditions nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Environment type-eq-decl nil lang nil))
   shostak))
 (suffix_conds_valid 0
  (suffix_conds_valid-1 nil 3645873169
   ("" (skeep*)
    (("" (lemma "suffix_conds_valid_sub")
      ((""
        (inst -1 "eval_bool" "eval_op1" "eval_op2" "env" "body" "body"
         "path" "path_ext")
        (("1" (assert) nil nil)
         ("2" (hide-all-but (1)) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((suffix_conds_valid_sub formula-decl nil eval_props nil)
    (valid_path def-decl "bool" eval_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Environment type-eq-decl nil lang nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (body skolem-const-decl "Expr[Val[T]]" eval_props nil))
   shostak))
 (rec_decreasing_TCC1 0
  (rec_decreasing_TCC1-1 nil 3642264615 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (rec_decreasing_TCC2 0
  (rec_decreasing_TCC2-1 nil 3642264615 ("" (subtype-tcc) nil nil) nil
   nil))
 (rec_decreasing 0
  (rec_decreasing-3 "1130" 3648035021
   ("" (skeep)
    (("" (skeep)
      (("" (induct "expr")
        (("1" (skeep)
          (("1" (skeep) (("1" (beta) (("1" (inst?) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "expr!1") (("2" (assert) nil nil)) nil)
         ("3" (skeep*)
          (("3" (hide -1)
            (("3" (hide-all-but (-1 -3 -5))
              (("3" (lemma "cnst_vr_path_ext")
                (("3" (inst?)
                  (("3" (assert)
                    (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (flatten)
          (("4" (hide -1)
            (("4" (skeep*)
              (("4" (hide-all-but (-1 -3 -5))
                (("4" (lemma "cnst_vr_path_ext")
                  (("4" (inst?) (("4" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep*)
          (("5" (split -1)
            (("1" (hide -2)
              (("1" (inst -1 "body" "cons(0,path)" "path_ext")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (hide-all-but (1 -1))
                      (("2" (lemma "subterm_append")
                        (("2" (inst -1 "body" "path")
                          (("2" (beta)
                            (("2" (inst -1 "(: 0 :)")
                              (("1"
                                (expand "append" -1)
                                (("1"
                                  (expand "append" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (replace -2 :dir RL)
                                        (("1"
                                          (expand "subterm_at" 1)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 :dir RL :hide? t)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (case "null[nat] = (: :)")
                                      (("1"
                                        (replace -1 :dir RL :hide? t)
                                        (("1"
                                          (use "null_path")
                                          nil
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "every")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "eval_expr" -2)
                      (("3" (lift-if -2) (("3" (assert) nil nil)) nil))
                      nil)
                     ("4" (hide-all-but (1 -1 -3 -5))
                      (("4" (lemma "op1_rec_path_ext")
                        (("4" (inst?)
                          (("4" (assert)
                            (("4" (assert) (("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 1))
                  (("2" (typepred "path")
                    (("2" (hide -1)
                      (("2" (use "valid_0_path_ext")
                        (("2" (assert) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "op12_var") (("2" (propax) nil nil)) nil))
            nil))
          nil)
         ("6" (skolem 1 ("op_idx" "arg1_expr" "arg2_expr"))
          (("6" (flatten)
            (("6" (hide -3)
              (("6" (split -1)
                (("1" (split -2)
                  (("1" (label "ih_arg2" -1)
                    (("1" (hide "ih_arg2")
                      (("1" (label "ih_arg1" -1)
                        (("1" (hide "ih_arg1")
                          (("1" (skeep*)
                            (("1" (use "op2_path_ext")
                              (("1"
                                (assert)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (reveal "ih_arg1")
                                      (("1"
                                        (inst
                                         -1
                                         "body"
                                         "cons(0,path)"
                                         "path_ext")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "subterm_append")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "body"
                                                   "path")
                                                  (("2"
                                                    (beta)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "cons(0, null)")
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (expand
                                                                 "subterm_at"
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "valid_path"
                                                         1
                                                         1)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           1
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "reverse(cdr(reverse(cons[nat](0, null[real])))) = null")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "rac"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "length")
                                                                    (("1"
                                                                      (expand
                                                                       "length")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (expand
                                                                           "rdc"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "reverse"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (expand
                                                                                 "append")
                                                                                (("1"
                                                                                  (expand
                                                                                   "reverse")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "valid_path"
                                                                                     1)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "reverse"
                                                                 1)
                                                                (("3"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("3"
                                                                    (expand
                                                                     "append")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide-all-but
                                                                 1)
                                                                (("4"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "every")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "eval_expr" -3)
                                              (("3"
                                                (lift-if -3)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "valid_0_path_ext")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal "ih_arg2")
                                      (("2"
                                        (inst
                                         -1
                                         "body"
                                         "cons(1,path)"
                                         "path_ext")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "subterm_append")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "body"
                                                   "path")
                                                  (("2"
                                                    (beta)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "cons(1, null)")
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (expand
                                                                 "subterm_at"
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -2
                                                         1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "rac"
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "length")
                                                                  (("2"
                                                                    (expand
                                                                     "nth")
                                                                    (("2"
                                                                      (expand
                                                                       "rdc"
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "reverse"
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "reverse"
                                                                           2
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "append")
                                                                            (("2"
                                                                              (expand
                                                                               "reverse")
                                                                              (("2"
                                                                                (expand
                                                                                 "valid_path"
                                                                                 2)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "every")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (expand "eval_expr" -3)
                                                (("3"
                                                  (lift-if -3)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (use "valid_1_path_ext")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "/=")
                                      (("3"
                                        (replace -1 :dir RL)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "arg2_expr") (("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "arg1_expr") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (skolem 1 "arg_expr")
          (("7" (flatten)
            (("7" (split -1)
              (("1" (hide -2)
                (("1" (skeep*)
                  (("1" (case "path_ext = path")
                    (("1" (replace -1 :hide? t)
                      (("1" (hide -1)
                        (("1" (expand "eval_expr" -2)
                          (("1" (lift-if -2)
                            (("1" (assert)
                              (("1"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3 :dir RL :hide? t)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "body" "cons(0,path)" "path_ext")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (hide-all-but (-1 1))
                            (("2" (lemma "subterm_append")
                              (("2"
                                (inst -1 "body" "path")
                                (("2"
                                  (beta)
                                  (("2"
                                    (inst -1 "cons(0,null)")
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (expand "append" -1 1)
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             RL)
                                            (("1"
                                              (expand "subterm_at")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (replace -1 :hide? t :dir RL)
                                        (("2"
                                          (grind)
                                          (("2"
                                            (use "null_path")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "every")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "eval_expr" -2)
                            (("3" (lift-if -2) (("3" (assert) nil nil))
                              nil))
                            nil)
                           ("4" (hide-all-but (1 -3 -1 2))
                            (("4" (lemma "op1_rec_path_ext")
                              (("4"
                                (inst?)
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2" (typepred "path")
                          (("2" (hide -1)
                            (("2" (use "valid_0_path_ext")
                              (("2"
                                (assert)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "arg_expr") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (skolem 1 ("cond_expr" "then_expr" "else_expr"))
          (("8" (flatten)
            (("8" (hide -4)
              (("8" (split -1)
                (("1" (split -2)
                  (("1" (split -3)
                    (("1" (skeep*)
                      (("1" (label "ih_cond" -3)
                        (("1" (hide "ih_cond")
                          (("1" (label "ih_then" -2)
                            (("1" (hide "ih_then")
                              (("1"
                                (label "ih_else" -1)
                                (("1"
                                  (hide "ih_else")
                                  (("1"
                                    (use "ite_path_ext")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (reveal "ih_cond")
                                            (("1"
                                              (inst -1 "body")
                                              (("1"
                                                (inst
                                                 -1
                                                 "append((:0:),path)"
                                                 "path_ext")
                                                (("1"
                                                  (expand
                                                   "append"
                                                   -1
                                                   2)
                                                  (("1"
                                                    (expand
                                                     "append"
                                                     -1
                                                     2)
                                                    (("1"
                                                      (replace 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "subterm_append")
                                                          (("1"
                                                            (beta)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(:0:)")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "subterm_at"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "rac")
                                                                      (("1"
                                                                        (expand
                                                                         "length")
                                                                        (("1"
                                                                          (expand
                                                                           "length")
                                                                          (("1"
                                                                            (expand
                                                                             "nth")
                                                                            (("1"
                                                                              (expand
                                                                               "rdc")
                                                                              (("1"
                                                                                (expand
                                                                                 "reverse"
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "reverse"
                                                                                   1
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "append")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "reverse")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subterm_at"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "eval_expr"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "valid_path")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "rac")
                                                                        (("2"
                                                                          (expand
                                                                           "length")
                                                                          (("2"
                                                                            (expand
                                                                             "length")
                                                                            (("2"
                                                                              (expand
                                                                               "nth")
                                                                              (("2"
                                                                                (expand
                                                                                 "rdc")
                                                                                (("2"
                                                                                  (expand
                                                                                   "reverse"
                                                                                   1
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "reverse"
                                                                                     1
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "append")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "reverse")
                                                                                        (("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "valid_path")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "valid_0_path_ext")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (expand
                                                       "append"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "suffix_conds_valid")
                                            (("2"
                                              (inst
                                               -1
                                               "eval_bool"
                                               "eval_op1"
                                               "eval_op2"
                                               "env"
                                               "body"
                                               "cons(1,path)"
                                               "path_ext")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "path_conditions_cons")
                                                  (("1"
                                                    (beta)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (expand
                                                           "eval_conds_rec"
                                                           -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (expand
                                                                 "path_conds_aux")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (reveal
                                                                         "ih_then")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "body")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "cons(1,path)"
                                                                             "path_ext")
                                                                            (("1"
                                                                              (replace
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (use
                                                                                   "subterm_append")
                                                                                  (("1"
                                                                                    (beta)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "(:1:)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "append"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "subterm_at"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rac")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "length")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "rdc")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "reverse"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "reverse"
                                                                                                               1
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "append")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "reverse")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subterm_at"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "eval_expr"
                                                                                                                       -5)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "eval_expr_semantic_rel")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "eval_bool"
                                                                                                                                   "eval_op1"
                                                                                                                                   "eval_op2"
                                                                                                                                   "env"
                                                                                                                                   "cond_expr"
                                                                                                                                   "body"
                                                                                                                                   "val(eval_expr(eval_bool, eval_op1, eval_op2)
                     (n, cond_expr, body, env))"
                                                                                                                                   "n")
                                                                                                                                  (("1"
                                                                                                                                    (beta)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "deterministic_expr")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "eval_bool"
                                                                                                                                           "eval_op1"
                                                                                                                                           "eval_op2"
                                                                                                                                           "env"
                                                                                                                                           "cond_expr"
                                                                                                                                           "body"
                                                                                                                                           " val(eval_expr(eval_bool, eval_op1, eval_op2)
                                     (n, cond_expr, body, env))"
                                                                                                                                           "val")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -4
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "valid_path")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 1
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "rac")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "rdc")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "reverse"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "reverse"
                                                                                                               1
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "append")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "reverse")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "valid_path")
                                                                                                                    (("2"
                                                                                                                      (lift-if)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (use
                                                                               "valid_1_path_ext")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "valid_1_path_ext")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             "suffix_conds_valid")
                                            (("3"
                                              (inst
                                               -1
                                               "eval_bool"
                                               "eval_op1"
                                               "eval_op2"
                                               "env"
                                               "body"
                                               "cons(2,path)"
                                               "path_ext")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "path_conditions_cons")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand
                                                         "eval_conds_rec"
                                                         -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand
                                                               "path_conds_aux")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (reveal
                                                                       "ih_else")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "body")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "cons(2,path)"
                                                                           "path_ext")
                                                                          (("1"
                                                                            (replace
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "subterm_append")
                                                                                (("1"
                                                                                  (beta)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "(:2:)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "append")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subterm_at"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "rac")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "rdc")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "reverse"
                                                                                                           1
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "reverse"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "append")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "reverse")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "subterm_at"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "eval_expr"
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "eval_expr_semantic_rel")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "eval_bool"
                                                                                                                               "eval_op1"
                                                                                                                               "eval_op2"
                                                                                                                               "env"
                                                                                                                               "cond_expr"
                                                                                                                               "body"
                                                                                                                               "val(eval_expr(eval_bool, eval_op1, eval_op2)
                                (n, cond_expr, body, env))"
                                                                                                                               "n")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "deterministic_expr")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "eval_bool"
                                                                                                                                       "eval_op1"
                                                                                                                                       "eval_op2"
                                                                                                                                       "env"
                                                                                                                                       "cond_expr"
                                                                                                                                       "body"
                                                                                                                                       "val(eval_expr(eval_bool, eval_op1, eval_op2)
                                     (n, cond_expr, body, env))"
                                                                                                                                       "val")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -3
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "valid_path")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "rac")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "rdc")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "reverse"
                                                                                                           1
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "reverse"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "append")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "reverse")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "valid_path")
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "valid_2_path_ext")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "valid_2_path_ext")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "else_expr")
                      (("2" (propax) nil nil)) nil))
                    nil)
                   ("2" (typepred "then_expr") (("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "cond_expr") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (assert) nil nil)
         ("10" (skeep) (("10" (skeep) (("10" (skeep) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (path skolem-const-decl "(valid_path(body))" eval_props nil)
    (body skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (path_conditions_cons formula-decl nil eval_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cond_expr skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (deterministic_expr formula-decl nil lang nil)
    (eval_expr_semantic_rel formula-decl nil lang nil)
    (path_conds_aux const-decl "BoolPVS0" eval_props nil)
    (suffix_conds_valid formula-decl nil eval_props nil)
    (valid_2_path_ext formula-decl nil eval_props nil)
    (ite_path_ext formula-decl nil eval_props nil)
    (path skolem-const-decl "(valid_path(body))" eval_props nil)
    (body skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (op2_path_ext formula-decl nil eval_props nil)
    (valid_1_path_ext formula-decl nil eval_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (body skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (path skolem-const-decl "(valid_path(body))" eval_props nil)
    (valid_0_path_ext formula-decl nil eval_props nil)
    (/= const-decl "boolean" notequal nil)
    (op1_rec_path_ext formula-decl nil eval_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[nat]" eval_props nil)
    (append def-decl "list[T]" list_props nil)
    (null_path formula-decl nil eval_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "nat" eval_props nil)
    (subterm_append formula-decl nil eval_props nil)
    (body skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (path skolem-const-decl "(valid_path(body))" eval_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cnst_vr_path_ext formula-decl nil eval_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PVS0_induction formula-decl nil PVS0_adt nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Conditions type-eq-decl nil conditions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (path_conditions def-decl "Conditions" eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Environment type-eq-decl nil lang nil)
    (eval_expr def-decl "Maybe[Val]" lang nil)
    (eval_bool skolem-const-decl "[Val[T] -> bool]" eval_props nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     eval_props nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     eval_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "posnat" eval_props nil)
    (env skolem-const-decl "Environment[T]" eval_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (eval_conds_rec def-decl "bool" conditions nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" eval_props
     nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" eval_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)
  (rec_decreasing-2 "1130" 3642334483
   ("" (skeep)
    (("" (skeep)
      (("" (induct "expr")
        (("1" (skeep)
          (("1" (skeep) (("1" (beta) (("1" (inst?) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "expr!1") (("2" (assert) nil nil)) nil)
         ("3" (skeep*)
          (("3" (hide -1)
            (("3" (hide-all-but (-1 -3 -5))
              (("3" (lemma "cnst_vr_path_ext")
                (("3" (inst?)
                  (("3" (assert)
                    (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (flatten)
          (("4" (hide -1)
            (("4" (skeep*)
              (("4" (hide-all-but (-1 -3 -5))
                (("4" (lemma "cnst_vr_path_ext")
                  (("4" (inst?) (("4" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep*)
          (("5" (split -1)
            (("1" (hide -2)
              (("1" (inst -1 "body" "cons(0,path)" "path_ext")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (hide-all-but (1 -1))
                      (("2" (lemma "subterm_append")
                        (("2" (inst -1 "body" "path")
                          (("2" (beta)
                            (("2" (inst -1 "(: 0 :)")
                              (("1"
                                (expand "append" -1)
                                (("1"
                                  (expand "append" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (replace -2 :dir RL)
                                        (("1"
                                          (expand "subterm_at" 1)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 :dir RL :hide? t)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (case "null[nat] = (: :)")
                                      (("1"
                                        (replace -1 :dir RL :hide? t)
                                        (("1"
                                          (use "null_path")
                                          nil
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "every")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "eval_expr" -2)
                      (("3" (lift-if -2) (("3" (assert) nil nil)) nil))
                      nil)
                     ("4" (hide-all-but (1 -1 -3 -5))
                      (("4" (lemma "op1_rec_path_ext")
                        (("4" (inst?)
                          (("4" (assert)
                            (("4" (assert) (("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 1))
                  (("2" (typepred "path")
                    (("2" (hide -1)
                      (("2" (use "valid_0_path_ext")
                        (("2" (assert) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "op12_var") (("2" (propax) nil nil)) nil))
            nil))
          nil)
         ("6" (skolem 1 ("op_idx" "arg1_expr" "arg2_expr"))
          (("6" (flatten)
            (("6" (hide -3)
              (("6" (split -1)
                (("1" (split -2)
                  (("1" (label "ih_arg2" -1)
                    (("1" (hide "ih_arg2")
                      (("1" (label "ih_arg1" -1)
                        (("1" (hide "ih_arg1")
                          (("1" (skeep*)
                            (("1" (use "op2_path_ext")
                              (("1"
                                (assert)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (reveal "ih_arg1")
                                      (("1"
                                        (inst
                                         -1
                                         "body"
                                         "cons(0,path)"
                                         "path_ext")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "subterm_append")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "body"
                                                   "path")
                                                  (("2"
                                                    (beta)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "cons(0, null)")
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (expand
                                                                 "subterm_at"
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "valid_path"
                                                         1
                                                         1)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           1
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               1
                                                               1)
                                                              (("2"
                                                                (case
                                                                 "reverse(cdr(reverse(cons[nat](0, null[real])))) = null")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "valid_path"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "reverse"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "append"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "reverse"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "every")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "eval_expr" -3)
                                              (("3"
                                                (lift-if -3)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "valid_0_path_ext")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal "ih_arg2")
                                      (("2"
                                        (inst
                                         -1
                                         "body"
                                         "cons(1,path)"
                                         "path_ext")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "subterm_append")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "body"
                                                   "path")
                                                  (("2"
                                                    (beta)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "cons(1, null)")
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (expand
                                                                 "subterm_at"
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -2
                                                         1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (expand
                                                                   "nth")
                                                                  (("2"
                                                                    (expand
                                                                     "reverse"
                                                                     2
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       2
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "append"
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "reverse"
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "valid_path")
                                                                            (("2"
                                                                              (lift-if
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "every")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (expand "eval_expr" -3)
                                                (("3"
                                                  (lift-if -3)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (use "valid_1_path_ext")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "/=")
                                      (("3"
                                        (replace -1 :dir RL)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "arg2_expr") (("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "arg1_expr") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (skolem 1 "arg_expr")
          (("7" (flatten)
            (("7" (split -1)
              (("1" (hide -2)
                (("1" (skeep*)
                  (("1" (case "path_ext = path")
                    (("1" (replace -1 :hide? t)
                      (("1" (hide -1)
                        (("1" (expand "eval_expr" -2)
                          (("1" (lift-if -2)
                            (("1" (assert)
                              (("1"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3 :dir RL :hide? t)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "body" "cons(0,path)" "path_ext")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (hide-all-but (-1 1))
                            (("2" (lemma "subterm_append")
                              (("2"
                                (inst -1 "body" "path")
                                (("2"
                                  (beta)
                                  (("2"
                                    (inst -1 "cons(0,null)")
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (expand "append" -1 1)
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             RL)
                                            (("1"
                                              (expand "subterm_at")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (replace -1 :hide? t :dir RL)
                                        (("2"
                                          (grind)
                                          (("2"
                                            (use "null_path")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "every")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "eval_expr" -2)
                            (("3" (lift-if -2) (("3" (assert) nil nil))
                              nil))
                            nil)
                           ("4" (hide-all-but (1 -3 -1 2))
                            (("4" (lemma "op1_rec_path_ext")
                              (("4"
                                (inst?)
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2" (typepred "path")
                          (("2" (hide -1)
                            (("2" (use "valid_0_path_ext")
                              (("2"
                                (assert)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "arg_expr") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (skolem 1 ("cond_expr" "then_expr" "else_expr"))
          (("8" (flatten)
            (("8" (hide -4)
              (("8" (split -1)
                (("1" (split -2)
                  (("1" (split -3)
                    (("1" (skeep*)
                      (("1" (label "ih_cond" -3)
                        (("1" (hide "ih_cond")
                          (("1" (label "ih_then" -2)
                            (("1" (hide "ih_then")
                              (("1"
                                (label "ih_else" -1)
                                (("1"
                                  (hide "ih_else")
                                  (("1"
                                    (case
                                     "suffix?(cons(0, path), path_ext) OR suffix?(cons(1, path), path_ext) OR suffix?(cons(2, path), path_ext)")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (reveal "ih_cond")
                                        (("1"
                                          (inst
                                           -1
                                           "body"
                                           "cons(0,path)"
                                           "path_ext")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide-all-but (1 -2))
                                                (("2"
                                                  (lemma
                                                   "subterm_append")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "body"
                                                     "path")
                                                    (("2"
                                                      (beta)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "cons(0,null)")
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (grind)
                                                              (("2"
                                                                (use
                                                                 "null_path")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "every")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "eval_expr" -3)
                                                (("3"
                                                  (lift-if -3)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -2))
                                            (("2"
                                              (typepred "path")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (use
                                                   "valid_0_path_ext")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal "ih_then")
                                        (("2"
                                          (inst
                                           -1
                                           "body"
                                           "cons(1,path)"
                                           "path_ext")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide-all-but (1 -2))
                                                (("2"
                                                  (lemma
                                                   "subterm_append")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "body"
                                                     "path")
                                                    (("2"
                                                      (beta)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "cons(1,null)")
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (grind)
                                                              (("2"
                                                                (use
                                                                 "null_path")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "every")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "eval_expr" -3)
                                                (("3"
                                                  (lift-if -3)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (split -3)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide 3)
                                                              (("2"
                                                                (lemma
                                                                 "suffix_path_cnds")
                                                                (("2"
                                                                  (inst?
                                                                   :where
                                                                   -4)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "suffix_conds_rec")
                                                                      (("1"
                                                                        (inst?
                                                                         :where
                                                                         -2)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "path_conditions_cons")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "eval_conds_rec"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -1
                                                                                         "cond_val")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -8
                                                                                             :dir
                                                                                             RL)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "semantic_rel_eval_expr")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skolem
                                                                                                     -1
                                                                                                     "m")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "n<m")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "eval_expr_ge_n")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "eval_bool"
                                                                                                             "eval_op1"
                                                                                                             "eval_op2"
                                                                                                             "n"
                                                                                                             "m"
                                                                                                             "cond_expr"
                                                                                                             "body"
                                                                                                             "env")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "eval_expr_ge_n")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "eval_bool"
                                                                                                             "eval_op1"
                                                                                                             "eval_op2"
                                                                                                             "m"
                                                                                                             "n"
                                                                                                             "cond_expr"
                                                                                                             "body"
                                                                                                             "env")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "valid_1_path_ext")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -2))
                                            (("2"
                                              (typepred "path")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (use
                                                   "valid_1_path_ext")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (reveal "ih_else")
                                        (("3"
                                          (inst
                                           -1
                                           "body"
                                           "cons(2,path)"
                                           "path_ext")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide-all-but (1 -2))
                                                (("2"
                                                  (lemma
                                                   "subterm_append")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "body"
                                                     "path")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "cons(2,null)")
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (grind)
                                                              (("2"
                                                                (use
                                                                 "null_path")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "every")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "eval_expr" -3)
                                                (("3"
                                                  (lift-if -3)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (split -3)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (lemma
                                                                 "suffix_path_cnds")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   -5)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "suffix_conds_rec")
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         -2)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "path_conditions_cons")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -2
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "eval_conds_rec"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -1
                                                                                         "cond_val")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -8
                                                                                             :dir
                                                                                             RL)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "semantic_rel_eval_expr")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skolem
                                                                                                     -1
                                                                                                     "m")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "n<m")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "eval_expr_ge_n")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "eval_bool"
                                                                                                             "eval_op1"
                                                                                                             "eval_op2"
                                                                                                             "n"
                                                                                                             "m"
                                                                                                             "cond_expr"
                                                                                                             "body"
                                                                                                             "env")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "eval_expr_ge_n")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "eval_bool"
                                                                                                             "eval_op1"
                                                                                                             "eval_op2"
                                                                                                             "m"
                                                                                                             "n"
                                                                                                             "cond_expr"
                                                                                                             "body"
                                                                                                             "env")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "valid_2_path_ext")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -2))
                                            (("2"
                                              (typepred "path")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (use
                                                   "valid_2_path_ext")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 -1 -3 -5))
                                      (("2"
                                        (use "ite_path_ext")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil)
                                               ("3" (assert) nil nil)
                                               ("4"
                                                (expand "/=")
                                                (("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "else_expr")
                      (("2" (propax) nil nil)) nil))
                    nil)
                   ("2" (typepred "then_expr") (("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "cond_expr") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (skeep*) (("9" (assert) nil nil)) nil)
         ("10" (skeep*) nil nil))
        nil))
      nil))
    nil)
   ((eval_expr_ge_n formula-decl nil lang nil)
    (semantic_rel_eval_expr formula-decl nil lang nil)
    (length_null formula-decl nil more_list_props "structures/")
    (length_singleton formula-decl nil more_list_props "structures/")
    (PVS0_induction formula-decl nil PVS0_adt nil)
    (Val type-eq-decl nil lang nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Environment type-eq-decl nil lang nil)
    (eval_expr def-decl "Maybe[Val]" lang nil)
    (suffix? def-decl "bool" more_list_props "structures/"))
   shostak)
  (rec_decreasing-1 nil 3642265634
   ("" (skeep)
    (("" (skeep)
      (("" (induct "expr")
        (("1" (skeep)
          (("1" (skeep) (("1" (beta) (("1" (inst?) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "expr!1") (("2" (assert) nil nil)) nil)
         ("3" (skeep*)
          (("3" (hide -1)
            (("3" (hide-all-but (-1 -3 -5))
              (("3" (lemma "cnst_vr_path_ext")
                (("3" (inst?)
                  (("3" (assert)
                    (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (flatten)
          (("4" (hide -1)
            (("4" (skeep*)
              (("4" (hide-all-but (-1 -3 -5))
                (("4" (lemma "cnst_vr_path_ext")
                  (("4" (inst?) (("4" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep*)
          (("5" (split -1)
            (("1" (hide -2)
              (("1" (inst -1 "body" "cons(0,path)" "path_ext")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (hide-all-but (1 -1))
                      (("2" (lemma "subterm_append")
                        (("2" (inst -1 "body" "path")
                          (("2" (beta)
                            (("2" (inst -1 "(: 0 :)")
                              (("1"
                                (expand "append" -1)
                                (("1"
                                  (expand "append" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (replace -2 :dir RL)
                                        (("1"
                                          (expand "subterm_at" 1)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 :dir RL :hide? t)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (case "null[nat] = (: :)")
                                      (("1"
                                        (replace -1 :dir RL :hide? t)
                                        (("1"
                                          (use "null_path")
                                          nil
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "every")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "eval_expr" -2)
                      (("3" (lift-if -2) (("3" (assert) nil nil)) nil))
                      nil)
                     ("4" (hide-all-but (1 -1 -3 -5))
                      (("4" (lemma "op1_rec_path_ext")
                        (("4" (inst?)
                          (("4" (assert)
                            (("4" (assert) (("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 1))
                  (("2" (typepred "path")
                    (("2" (hide -1)
                      (("2" (use "valid_0_path_ext")
                        (("2" (assert) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "op12_var") (("2" (propax) nil nil)) nil))
            nil))
          nil)
         ("6" (postpone) nil nil)
         ("7" (skolem 1 "arg_expr")
          (("7" (flatten)
            (("7" (split -1)
              (("1" (hide -2)
                (("1" (skeep*)
                  (("1" (case "path_ext = path")
                    (("1" (replace -1 :hide? t)
                      (("1" (hide -1)
                        (("1" (expand "eval_expr" -2)
                          (("1" (lift-if -2)
                            (("1" (assert)
                              (("1"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -3 :dir RL :hide? t)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "body" "cons(0,path)" "path_ext")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (hide-all-but (-1 1))
                            (("2" (lemma "subterm_append")
                              (("2"
                                (inst -1 "body" "path")
                                (("2"
                                  (beta)
                                  (("2"
                                    (inst -1 "cons(0,null)")
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (expand "append" -1 1)
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             RL)
                                            (("1"
                                              (expand "subterm_at")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (replace -1 :hide? t :dir RL)
                                        (("2"
                                          (grind)
                                          (("2"
                                            (use "null_path")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "every")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "eval_expr" -2)
                            (("3" (lift-if -2) (("3" (assert) nil nil))
                              nil))
                            nil)
                           ("4" (hide-all-but (1 -3 -1 2))
                            (("4" (lemma "op1_rec_path_ext")
                              (("4"
                                (inst?)
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2" (typepred "path")
                          (("2" (hide -1)
                            (("2" (use "valid_0_path_ext")
                              (("2"
                                (assert)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "arg_expr") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (skolem 1 ("cond_expr" "then_expr" "else_expr"))
          (("8" (flatten)
            (("8" (hide -4)
              (("8" (split -1)
                (("1" (split -2)
                  (("1" (split -3)
                    (("1" (skeep*)
                      (("1" (label "ih_cond" -3)
                        (("1" (hide "ih_cond")
                          (("1" (label "ih_then" -2)
                            (("1" (hide "ih_then")
                              (("1"
                                (label "ih_else" -1)
                                (("1"
                                  (hide "ih_else")
                                  (("1"
                                    (case
                                     "suffix?(cons(0, path), path_ext) OR suffix?(cons(1, path), path_ext) OR suffix?(cons(2, path), path_ext)")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (reveal "ih_cond")
                                        (("1"
                                          (inst
                                           -1
                                           "body"
                                           "cons(0,path)"
                                           "path_ext")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide-all-but (1 -2))
                                                (("2"
                                                  (lemma
                                                   "subterm_append")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "body"
                                                     "path")
                                                    (("2"
                                                      (beta)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "cons(0,null)")
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (grind)
                                                              (("2"
                                                                (use
                                                                 "null_path")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "every")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "eval_expr" -3)
                                                (("3"
                                                  (lift-if -3)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -2))
                                            (("2"
                                              (typepred "path")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (use
                                                   "valid_0_path_ext")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal "ih_then")
                                        (("2"
                                          (inst
                                           -1
                                           "body"
                                           "cons(1,path)"
                                           "path_ext")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide-all-but (1 -2))
                                                (("2"
                                                  (lemma
                                                   "subterm_append")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "body"
                                                     "path")
                                                    (("2"
                                                      (beta)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "cons(1,null)")
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (grind)
                                                              (("2"
                                                                (use
                                                                 "null_path")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "every")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "eval_expr" -3)
                                                (("3"
                                                  (lift-if -3)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (split -3)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide-all-but
                                                               (1
                                                                -6
                                                                -4
                                                                -3))
                                                              (("2"
                                                                (lemma
                                                                 "suffix_conds_valid")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "eval_bool"
                                                                   "eval_op1"
                                                                   "eval_op2"
                                                                   "env"
                                                                   "body"
                                                                   "cons(1,path)"
                                                                   "path_ext")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "path_conditions(body, cons(1, path)) = cons(pvsbool(cond_expr), path_conditions(body,path))")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (expand
                                                                           "eval_conds_rec"
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (lemma
                                                                                 "semantic_rel_eval_expr")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "valid_1_path_ext")
                                                                    (("2"
                                                                      (beta)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -2))
                                            (("2"
                                              (typepred "path")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (use
                                                   "valid_1_path_ext")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (reveal "ih_else")
                                        (("3"
                                          (inst
                                           -1
                                           "body"
                                           "cons(2,path)"
                                           "path_ext")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide-all-but (1 -2))
                                                (("2"
                                                  (lemma
                                                   "subterm_append")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "body"
                                                     "path")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "cons(2,null)")
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (grind)
                                                              (("2"
                                                                (use
                                                                 "null_path")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "every")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "eval_expr" -3)
                                                (("3"
                                                  (lift-if -3)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (split -3)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide-all-but
                                                               (-7
                                                                -4
                                                                -5
                                                                -1))
                                                              (("1"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -2))
                                            (("2"
                                              (typepred "path")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (use
                                                   "valid_2_path_ext")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 -1 -3 -5))
                                      (("2"
                                        (use "ite_path_ext")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil)
                                               ("3" (assert) nil nil)
                                               ("4"
                                                (expand "/=")
                                                (("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "else_expr")
                      (("2" (propax) nil nil)) nil))
                    nil)
                   ("2" (typepred "then_expr") (("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "cond_expr") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (skeep*) (("9" (assert) nil nil)) nil)
         ("10" (skeep*) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rec_mu_decreasing_TCC1 0
  (rec_mu_decreasing_TCC1-1 nil 3642352026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (terminates const-decl "bool" lang nil)
    (Terminating type-eq-decl nil lang nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil))
   nil))
 (rec_mu_decreasing_TCC2 0
  (rec_mu_decreasing_TCC2-1 nil 3642352026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (terminates const-decl "bool" lang nil)
    (Terminating type-eq-decl nil lang nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (eval const-decl "Maybe[Val]" lang nil)
    (mu const-decl "posnat" lang nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" eval_props
     nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" eval_props nil))
   nil))
 (rec_mu_decreasing 0
  (rec_mu_decreasing-1 nil 3642352027
   ("" (skeep*)
    (("" (beta)
      (("" (flatten)
        (("" (skeep*)
          (("" (lemma "rec_decreasing")
            ((""
              (inst -1 "eval_bool" "eval_op1" "eval_op2" "env" "n"
               "get_body(def)" "get_body(def)" "null" "path_ext")
              (("1" (beta)
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (flatten)
                      (("1"
                        (case "val(eval_expr(eval_bool, eval_op1, eval_op2)
                                     (n,
                                      get_arg
                                      (subterm_at
                                       (get_body(def), path_ext)),
                                      get_body(def),
                                      env)) = vact")
                        (("1" (replace -1 :hide? t)
                          (("1" (expand "mu" 1)
                            (("1" (hide-all-but (-2 1))
                              (("1"
                                (expand "eval")
                                (("1"
                                  (typepred
                                   "min({n: nat |
             some?(eval_expr(eval_bool, eval_op1, eval_op2)
                            (n, get_body(def), get_body(def),
                             LAMBDA (v: (vr?)): vact))})")
                                  (("1"
                                    (inst -2 "n-1")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (inst -1 "n-1")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "semantic_rel_eval_expr")
                          (("2" (assert)
                            (("2" (skolem -1 "m")
                              (("2"
                                (flatten)
                                (("2"
                                  (replace -2 :hide? t)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (case "n<m")
                                      (("1"
                                        (lemma "eval_expr_ge_n")
                                        (("1"
                                          (inst
                                           -1
                                           "eval_bool"
                                           "eval_op1"
                                           "eval_op2"
                                           "n"
                                           "m"
                                           "get_arg(subterm_at(get_body(def), path_ext))"
                                           "get_body(def)"
                                           "env")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "eval_expr_ge_n")
                                        (("2"
                                          (inst
                                           -1
                                           "eval_bool"
                                           "eval_op1"
                                           "eval_op2"
                                           "m"
                                           "n"
                                           "get_arg(subterm_at(get_body(def), path_ext))"
                                           "get_body(def)"
                                           "env")
                                          (("1"
                                            (assert)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (expand "subterm_at" 1)
                      (("2" (propax) nil nil)) nil)
                     ("3" (hide-all-but (-1 1))
                      (("3" (expand "mu")
                        (("3"
                          (typepred "min({n: nat |
             some?(eval(eval_bool, eval_op1, eval_op2)(n, def)
                       (LAMBDA (v: (vr?)): env(vr)))})")
                          (("1" (assert)
                            (("1" (expand "eval")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3 1 :dir RL :hide? t)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (case
                                       "(LAMBDA (v: (vr?)): env(vr)) = env")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (decompose-equality)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "mu_nonempty")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "valid_path")
                (("2" (lift-if 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (def skolem-const-decl
     "Terminating[T](eval_bool, eval_op1, eval_op2)" eval_props nil)
    (Terminating type-eq-decl nil lang nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     eval_props nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     eval_props nil)
    (eval_bool skolem-const-decl "[Val[T] -> bool]" eval_props nil)
    (terminates const-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Environment type-eq-decl nil lang nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" eval_props nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" eval_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (mu_nonempty formula-decl nil lang nil)
    (semantic_rel_eval_expr formula-decl nil lang nil)
    (< const-decl "bool" reals nil)
    (m skolem-const-decl "nat" eval_props nil)
    (n skolem-const-decl "posnat" eval_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (eval_expr_ge_n formula-decl nil lang nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (eval const-decl "Maybe[Val]" lang nil)
    (mu const-decl "posnat" lang nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (eval_expr def-decl "Maybe[Val]" lang nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rec_decreasing formula-decl nil eval_props nil))
   shostak))
 (decreasing_rec_TCC1 0
  (decreasing_rec_TCC1-1 nil 3642438537 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (decreasing_rec_TCC2 0
  (decreasing_rec_TCC2-1 nil 3642438537 ("" (subtype-tcc) nil nil) nil
   nil))
 (decreasing_rec 0
  (decreasing_rec-3 "" 3648034604
   ("" (skeep)
    (("" (measure-induct "lex2(n, sizepvs0(expr))" ("n" "expr"))
      (("1" (skolem 1 ("n" "e"))
        (("1" (flatten)
          (("1" (skeep*)
            (("1" (expand "eval_expr" 1)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (hide -2) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (assert) nil nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (prop)
                            (("1" (inst -4 "path")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "eval_expr" -6)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1"
                                (prop)
                                (("1"
                                  (inst -4 "path")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "eval_expr" -6)
                                        (("1"
                                          (replace -3)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide 2 3 4 5)
                                      (("1"
                                        (beta)
                                        (("1"
                                          (label "ih" -2)
                                          (("1"
                                            (copy "ih")
                                            (("1"
                                              (inst
                                               -1
                                               "n"
                                               "get_cond(e)")
                                              (("1"
                                                (hide "ih")
                                                (("1"
                                                  (inst -4 "path")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "eval_expr"
                                                         -6)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case "rec?(e)")
                                      (("1"
                                        (hide 1 3 4 5 6)
                                        (("1"
                                          (beta)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (copy -2)
                                                (("1"
                                                  (label "ih" -1)
                                                  (("1"
                                                    (hide "ih")
                                                    (("1"
                                                      (inst -4 "path")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "e")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*) nil nil) ("3" (skeep*) nil nil)
       ("4" (skeep*) nil nil)
       ("5" (skeep*)
        (("5" (inst -10 "path")
          (("5" (flatten)
            (("5" (replace -9) (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("6" (skeep*) nil nil) ("7" (skeep*) nil nil)
       ("8" (skeep*)
        (("8" (inst -10 "path")
          (("8" (flatten)
            (("8" (replace -9) (("8" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("9" (skeep*) nil nil) ("10" (skeep*) nil nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T formal-nonempty-type-decl nil eval_props nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (sizepvs0 const-decl "[PVS0 -> nat]" lang nil)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" eval_props nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" eval_props
     nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (eval_conds_rec def-decl "bool" conditions nil)
    (eval_op2 skolem-const-decl "[nat -> [[Val[T], Val[T]] -> Val[T]]]"
     eval_props nil)
    (eval_op1 skolem-const-decl "[nat -> [Val[T] -> Val[T]]]"
     eval_props nil)
    (eval_bool skolem-const-decl "[Val[T] -> bool]" eval_props nil)
    (eval_expr def-decl "Maybe[Val]" lang nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (path_conditions def-decl "Conditions" eval_props nil)
    (Conditions type-eq-decl nil conditions nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil lang nil)
    (body skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (valid_path def-decl "bool" eval_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e skolem-const-decl "Expr[Val[T]]" eval_props nil)
    (get_cond adt-accessor-decl "[(ite?) -> Expr]" PVS0_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (decreasing_rec-2 "" 3642440033
   ("" (skeep)
    (("" (measure-induct "lex2(n, sizepvs0(expr))" ("n" "expr"))
      (("1" (skolem 1 ("n" "e"))
        (("1" (flatten)
          (("1" (skeep*)
            (("1" (expand "eval_expr" 1)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (hide -2) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (assert) nil nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (postpone) nil nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1" (postpone) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide 2 3 4 5)
                                      (("1"
                                        (beta)
                                        (("1"
                                          (label "ih" -2)
                                          (("1"
                                            (copy "ih")
                                            (("1"
                                              (inst
                                               -1
                                               "n"
                                               "get_cond(e)")
                                              (("1"
                                                (hide "ih")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "cons(0,path)"
                                                     "env")
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (label
                                                           "subexpr_props"
                                                           -4)
                                                          (("1"
                                                            (copy
                                                             "subexpr_props")
                                                            (("1"
                                                              (hide
                                                               "subexpr_props")
                                                              (("1"
                                                                (lift-if
                                                                 1)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (reveal
                                                                       "ih")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "n"
                                                                         "get_if(e)")
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "cons(1,path)"
                                                                             "env")
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case "rec?(e)")
                                      (("1"
                                        (hide 1 3 4 5 6)
                                        (("1"
                                          (beta)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (copy -2)
                                                (("1"
                                                  (label "ih" -1)
                                                  (("1"
                                                    (hide "ih")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "n"
                                                       "get_arg(e)")
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "cons(0,path)"
                                                           "env")
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (reveal
                                                                 "ih")
                                                                (("1"
                                                                  (inst
                                                                   "ih"
                                                                   "n-1"
                                                                   "body")
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil) ("3" (postpone) nil nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil)
       ("10" (postpone) nil nil))
      nil))
    nil)
   nil shostak)
  (decreasing_rec-1 nil 3642431705
   ("" (skeep)
    (("" (induct "expr")
      (("1" (assert) nil nil)
       ("2" (typepred "expr!1") (("2" (assert) nil nil)) nil)
       ("3" (skeep)
        (("3" (hide -1)
          (("3" (expand "eval_expr" 1) (("3" (propax) nil nil)) nil))
          nil))
        nil)
       ("4" (flatten)
        (("4" (hide -1)
          (("4" (expand "eval_expr" 1) (("4" (propax) nil nil)) nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -2)
          (("5" (split -1)
            (("1" (skeep)
              (("1" (inst -1 "cons(0,path)")
                (("1" (split -1)
                  (("1" (expand "eval_expr" 1)
                    (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (skeep)
                    (("2" (inst? -2)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (use "op1_rec_path_ext")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "subterm_append")
                    (("3" (inst -1 "body" "path")
                      (("3" (assert)
                        (("3" (inst -1 "cons(0,null[nat])")
                          (("1" (expand "append " -1)
                            (("1" (expand "append " -1)
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (replace -1 :hide? t :dir rl)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind)
                              (("2" (use "null_path") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "path")
                  (("2" (hide-all-but (1 -2 -3))
                    (("2" (use "valid_0_path_ext")
                      (("2" (assert)
                        (("2" (replace -3 :dir rl)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "op12_var") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("6" (postpone) nil nil)
       ("7" (skeep)
        (("7" (split -1)
          (("1" (hide -2)
            (("1" (skeep)
              (("1" (inst -1 "cons(0,null[nat])")
                (("1" (split -1)
                  (("1" (expand "eval_expr" 1)
                    (("1" (lift-if 1)
                      (("1" (assert) (("1" (postpone) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil)
       ("8" (postpone) nil nil) ("9" (assert) nil nil))
      nil))
    nil)
   nil shostak)))

