(fset_props
 (max_fs_TCC1 0
  (max_fs_TCC1-1 nil 3643977501
   ("" (skeep)
    (("" (assert)
      (("" (skeep)
        (("" (typepred "x")
          (("" (use "card_one[T]")
            (("" (assert)
              (("" (skeep)
                (("" (replaces -1)
                  (("" (use "choose_singleton[T]")
                    (("" (assert)
                      (("" (replaces -1)
                        (("" (expand "singleton")
                          (("" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil fset_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (card_one formula-decl nil finite_sets nil))
   nil))
 (max_fs_TCC2 0
  (max_fs_TCC2-1 nil 3643977501
   ("" (skeep*)
    (("" (assert)
      (("" (skeep)
        (("" (case "NOT empty?(rest(fs))")
          (("1" (typepred "v(rest(fs),<)")
            (("1" (inst -2 "x")
              (("1" (assert)
                (("1" (typepred "<")
                  (("1" (expand "transitive?")
                    (("1" (inst? -1 :where 3)
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "x")
                (("2" (use "choose_rest_or[T]")
                  (("2" (assert)
                    (("2" (expand "member") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil)
           ("2" (use "card_rest[T]")
            (("2" (assert)
              (("2" (use "card_empty?[T]") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_rest application-judgement "finite_set" finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (rest const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (T formal-type-decl nil fset_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fs skolem-const-decl "non_empty_finite_set[T]" fset_props nil)
    (x skolem-const-decl "(fs)" fset_props nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (trichotomous? const-decl "bool" orders nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (card_empty? formula-decl nil finite_sets nil)
    (card_rest formula-decl nil finite_sets nil))
   nil))
 (max_fs_TCC3 0
  (max_fs_TCC3-1 nil 3644323265
   ("" (skeep*)
    (("" (use "rest_member[T]")
      (("" (expand "member")
        (("" (assert)
          (("" (skeep)
            (("" (case "x=choose(fs)")
              (("1" (assert)
                (("1" (replaces -1 :dir rl)
                  (("1" (typepred "<")
                    (("1" (expand "trichotomous?")
                      (("1" (inst? -2) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "x")
                (("2" (use "choose_rest_or[T]")
                  (("2" (expand "member")
                    (("2" (assert)
                      (("2" (typepred "v(rest(fs),<)")
                        (("1" (inst -2 "x") (("1" (grind) nil nil))
                          nil)
                         ("2" (use "card_rest[T]")
                          (("2" (assert)
                            (("2" (use "card_empty?[T]")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (card_empty? formula-decl nil finite_sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rest const-decl "set" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (trichotomous? const-decl "bool" orders nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil fset_props nil)
    (rest_member formula-decl nil sets_lemmas nil))
   nil))
 (max_fs_TCC4 0
  (max_fs_TCC4-1 nil 3644323265
   ("" (skeep*)
    (("" (use "card_rest[T]")
      (("" (assert)
        (("" (use "card_empty?[T]") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((card_rest formula-decl nil finite_sets nil)
    (T formal-type-decl nil fset_props nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (card_empty? formula-decl nil finite_sets nil)
    (rest const-decl "set" sets nil))
   nil))
 (max_fs_TCC5 0
  (max_fs_TCC5-1 nil 3644323265
   ("" (skeep*) (("" (use "card_rest[T]") (("" (assert) nil nil)) nil))
    nil)
   ((card_rest formula-decl nil finite_sets nil)
    (T formal-type-decl nil fset_props nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)))

