(halting_problem
 (T_to_nat_TCC1 0
  (T_to_nat_TCC1-1 nil 3665786623
   ("" (lemma "countable") (("" (skeep) (("" (inst?) nil nil)) nil))
    nil)
   ((T formal-nonempty-type-decl nil halting_problem nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (countable formula-decl nil halting_problem nil))
   nil))
 (nat_to_PVS0_TCC1 0
  (nat_to_PVS0_TCC1-1 nil 3665787104
   ("" (lemma "nat_onto_PVS0Expr")
    (("" (skeep) (("" (inst 1 "F") nil nil)) nil)) nil)
   ((surjective? const-decl "bool" functions nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_onto_PVS0Expr formula-decl nil counting_pvs0_type nil)
    (T formal-nonempty-type-decl nil halting_problem nil))
   nil))
 (PVS0_to_nat_TCC1 0
  (PVS0_to_nat_TCC1-2 nil 3665859214
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (typepred "nat_to_PVS0")
          (("" (expand "surjective?")
            (("" (inst -1 "pvs0`4")
              (("" (skeep)
                (("" (insteep)
                  (("" (expand "member") (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (nat_to_PVS0 const-decl "(surjective?[nat, PVS0Expr[T]])"
     halting_problem nil)
    (surjective? const-decl "bool" functions nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil halting_problem nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalBool type-eq-decl nil pvs0_lang nil)
    (EvalOp1 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil))
 (TFalse_TCC1 0
  (TFalse_TCC1-1 nil 3665871305 ("" (existence-tcc) nil nil) nil nil))
 (TotalityUndecidability 0
  (TotalityUndecidability-1 nil 3665858641
   ("" (skeep)
    (("" (lemma "TerminationUndecidable")
      (("" (inst -1 "LAMBDA(t:T): nat_to_PVS0(T_to_nat(t))")
        (("1"
          (inst 1
           "make_pvs0(LAMBDA(t:T): IF XXX THEN TTrue ELSE TFalse ENDIF)")
          (("1" (skeep)
            (("1" (insteep)
              (("1" (replaces -1 :dir rl)
                (("1" (expand "make_pvs0")
                  (("1" (expand "semantic_rel" 1 1)
                    (("1" (expand "semantic_rel_expr" 1 1)
                      (("1" (expand "semantic_rel_expr")
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (skeep)
                              (("1"
                                (typepred "t_1")
                                (("1"
                                  (expand "from_PVS0")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split -3)
                                      (("1" (postpone) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (inst?)
                              (("2"
                                (typepred "t_1")
                                (("2"
                                  (expand "from_PVS0")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1)
          (("2" (lemma "composition_surjective[T,nat,PVS0Expr[T]]")
            (("2" (inst -1 "T_to_nat" "nat_to_PVS0")
              (("2" (expand "o ") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

