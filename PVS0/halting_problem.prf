(halting_problem
 (IMP_measure_termination_TCC1 0
  (IMP_measure_termination_TCC1-1 nil 3665424225
   ("" (use "wf_nat") nil nil)
   ((wf_nat formula-decl nil naturalnumbers nil)) nil))
 (from_PVS0_TCC1 0
  (from_PVS0_TCC1-2 nil 3665575742
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (lemma "trans")
          (("" (expand "surjective?")
            (("" (inst -1 "pvs0`4")
              (("" (skeep -)
                (("" (insteep -)
                  (("" (expand "member") (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (trans formula-decl nil halting_problem nil)
    (T formal-nonempty-type-decl nil halting_problem nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (EvalBool type-eq-decl nil pvs0_lang nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (member const-decl "bool" sets nil)
    (surjective? const-decl "bool" functions nil)
    (empty? const-decl "bool" sets nil))
   nil))
 (HaltingProblemUndecidable 0
  (HaltingProblemUndecidable-5 nil 3665575793
   ("" (skeep)
    (("" (lemma "trans")
      (("" (expand "surjective?")
        (("" (inst-cp -1 "op1(0,vr)")
          (("" (inst-cp -1 "vr")
            (("" (skolem -2 "falseT")
              (("" (skolem -3 "trueT")
                (("" (inst -1 "ite(op1(0,vr), rec(vr),cnst(trueT))")
                  (("" (skolem -1 "m0")
                    ((""
                      (inst-cp -4
                       "(lambda(v: Val): v = trueT,lambda(n: nat): lambda(v : Val): if semantic_rel(f,v,TT) then trueT else falseT endif,lambda(n: nat): lambda(vv : [Val,Val]): vv`1,ite(op1(0,vr),rec(vr),cnst(trueT)))"
                       "m0")
                      (("1" (prop)
                        (("1" (use "mu_soundness")
                          (("1" (assert)
                            (("1" (assert)
                              (("1"
                                (inst
                                 -1
                                 "(#rec_expr:= rec(vr) ,cnds := path_conditions(ite(op1(0, vr), rec(vr), cnst(trueT)), (:1:)),path := (:1:)#)")
                                (("1"
                                  (inst -1 "m0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -1 "m0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand
                                             "semantic_rel_expr"
                                             1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "path_conditions")
                                            (("2"
                                              (expand "subterm_at")
                                              (("2"
                                                (expand
                                                 "path_conditions")
                                                (("2"
                                                  (expand "append")
                                                  (("2"
                                                    (expand "append")
                                                    (("2"
                                                      (expand
                                                       "eval_conds")
                                                      (("2"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("2"
                                                          (expand
                                                           "eval_conds_rec")
                                                          (("2"
                                                            (inst
                                                             1
                                                             "trueT")
                                                            (("2"
                                                              (expand
                                                               "semantic_rel_expr")
                                                              (("2"
                                                                (expand
                                                                 "semantic_rel_expr")
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "m0")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "path_conditions")
                                  (("2"
                                    (expand "subterm_at")
                                    (("2"
                                      (expand "path_conditions")
                                      (("2"
                                        (expand "append")
                                        (("2"
                                          (expand "append")
                                          (("2"
                                            (expand
                                             "pvs0_tcc_valid_cc")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "valid_path")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 1 3)
                                                    (("1"
                                                      (expand "rac")
                                                      (("1"
                                                        (expand
                                                         "length")
                                                        (("1"
                                                          (expand
                                                           "length")
                                                          (("1"
                                                            (expand
                                                             "nth")
                                                            (("1"
                                                              (expand
                                                               "rdc")
                                                              (("1"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "append")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse")
                                                                      (("1"
                                                                        (expand
                                                                         "valid_path")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "subterm_at")
                                                (("2"
                                                  (expand "rac")
                                                  (("2"
                                                    (expand "length")
                                                    (("2"
                                                      (expand "length")
                                                      (("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (expand
                                                           "rdc")
                                                          (("2"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("2"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "append")
                                                                (("2"
                                                                  (expand
                                                                   "reverse")
                                                                  (("2"
                                                                    (expand
                                                                     "subterm_at")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand
                                                 "path_conditions")
                                                (("3"
                                                  (expand "subterm_at")
                                                  (("3"
                                                    (expand
                                                     "path_conditions")
                                                    (("3"
                                                      (expand "append")
                                                      (("3"
                                                        (expand
                                                         "append")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "valid_path")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (hide 1 3)
                                      (("3"
                                        (expand "rac" 1)
                                        (("3"
                                          (expand "length")
                                          (("3"
                                            (expand "length")
                                            (("3"
                                              (expand "nth")
                                              (("3"
                                                (expand "rdc" 1)
                                                (("3"
                                                  (expand
                                                   "reverse"
                                                   1
                                                   2)
                                                  (("3"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("3"
                                                      (expand "append")
                                                      (("3"
                                                        (expand
                                                         "reverse")
                                                        (("3"
                                                          (expand
                                                           "valid_path")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide-all-but 1)
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst -4
                           "(lambda(v: Val): v = trueT,lambda(n: nat): lambda(v: Val): falseT,lambda(n: nat): lambda(vv : [Val,Val]): vv`1,ite(op1(0,vr),rec(vr),cnst(trueT)))"
                           "m0")
                          (("1" (assert)
                            (("1" (expand "terminating?")
                              (("1"
                                (expand "terminates_expr" 3)
                                (("1"
                                  (expand "semantic_rel_expr")
                                  (("1"
                                    (expand "semantic_rel_expr" 3 1)
                                    (("1"
                                      (expand "semantic_rel_expr" 3 1)
                                      (("1"
                                        (expand
                                         "semantic_rel_expr"
                                         3
                                         2)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 3 "trueT")
                                            (("1"
                                              (inst 3 "falseT")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst 1 "env")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (hide +)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "from_PVS0")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "from_PVS0")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trans formula-decl nil halting_problem nil)
    (T formal-nonempty-type-decl nil halting_problem nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite adt-constructor-decl
     "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0Expr_adt nil)
    (m0 skolem-const-decl "T" halting_problem nil)
    (falseT skolem-const-decl "T" halting_problem nil)
    (TT const-decl "T" pvs0_lang nil)
    (f skolem-const-decl "(terminating?)" halting_problem nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (trueT skolem-const-decl "T" halting_problem nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (from_PVS0 const-decl "nonempty_set[T]" halting_problem nil)
    (nonempty_set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_lang nil)
    (EvalOp1 type-eq-decl nil pvs0_lang nil)
    (EvalBool type-eq-decl nil pvs0_lang nil)
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (< const-decl "bool" reals nil)
    (mu_soundness formula-decl nil measure_termination nil)
    (rac const-decl "T" more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (append def-decl "list[T]" list_props nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (surjective? const-decl "bool" functions nil))
   nil)))

