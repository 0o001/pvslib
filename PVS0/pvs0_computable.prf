(pvs0_computable
 (level_surjective 0
  (level_surjective-7 "new definition for pvs0_level" 3718232692
   ("" (measure-induct+ "n" "n")
    (("" (case "x!1=0")
      (("1"
        (inst 1 "lambda(n: nat): (false_val, lop1, lop2, nat2PVS0(n))")
        (("1" (expand "surjective?")
          (("1" (skeep)
            (("1" (inst 1 "PVS02nat(y`4)")
              (("1" (rewrite "nat2PVS0_inverse")
                (("1" (typepred "y")
                  (("1" (replace -2)
                    (("1" (expand "pvs0_level")
                      (("1" (prop)
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (replace -1)
            (("2" (expand "pvs0_level") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (inst -1 "x!1-1")
        (("1" (assert)
          (("1"
            (case "let t = (lambda(pvs0: PVS0): pvs0_level(x!1-1)(pvs0) and terminating?(pvs0)) in exists(f: [nat -> (t)]): surjective?(f)")
            (("1" (hide -2)
              (("1" (beta)
                (("1" (skeep)
                  (("1"
                    (inst 2
                     "lambda(n : nat): let p1= nat2tuple(nat2tuple(n)`1)`1, p2 = nat2tuple(nat2tuple(n)`1)`2 , p3 = nat2tuple(n)`2 in (false_val, append(f(p1)`2,(:lambda(x: nat): choose({r :nat | semantic_rel(f(p1),x,r)}):)), append(f(p2)`3, (:lambda(x : [nat,nat]): choose({r:nat | semantic_rel(f(p2),tuple2nat(x),r)}):)), nat2PVS0(p3))")
                    (("1" (expand "surjective?")
                      (("1" (skeep)
                        (("1" (typepred "y")
                          (("1" (expand "pvs0_level")
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst-cp -6 "p")
                                    (("1"
                                      (inst -6 "p!1")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst
                                             2
                                             "tuple2nat(tuple2nat(x!2,x),PVS02nat(y`4))")
                                            (("1"
                                              (rewrite
                                               "nat2tuple_tuple2nat")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "nat2tuple_tuple2nat")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "nat2PVS0_inverse")
                                                      (("1"
                                                        (decompose-equality
                                                         2)
                                                        (("1"
                                                          (rewrite
                                                           "list_extensionality"
                                                           1)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (rewrite
                                                               "length_append")
                                                              (("1"
                                                                (replace
                                                                 -7)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "f(x!2)")
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "terminating?")
                                                                        (("2"
                                                                          (expand
                                                                           "terminates_expr")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x_2")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "nonempty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "val")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (rewrite
                                                                 "nth_append")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "n")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "n=length(f(x!2)`2)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -4
                                                                               "n")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -4
                                                                                     "x!3")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       " choose({r: nat | semantic_rel(f(x!2), x!3, r)})")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "deterministic")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "nth(y`2, n)(x!3)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "f(x!2)")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "terminating?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "terminates_expr")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!3")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nonempty?")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "val")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "f(x!2)")
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "terminating?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "terminates_expr")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!3")
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nonempty?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "val")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "nat2tuple_tuple2nat")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "nat2tuple_tuple2nat")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -4
                                                                                               "x1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skeep)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "nat2tuple_tuple2nat")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "nat2tuple_tuple2nat")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("4"
                                                                                      (typepred
                                                                                       "f(x!2)")
                                                                                      (("4"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("4"
                                                                                          (skeep)
                                                                                          (("4"
                                                                                            (expand
                                                                                             "terminating?")
                                                                                            (("4"
                                                                                              (expand
                                                                                               "terminates_expr")
                                                                                              (("4"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x_2")
                                                                                                (("4"
                                                                                                  (skeep)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "nonempty?")
                                                                                                    (("4"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("4"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "val")
                                                                                                        (("4"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "f(x!2)")
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "terminating?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "terminates_expr")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x_2")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nonempty?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "empty?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "val")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "n")
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "f(x!2)")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "terminating?")
                                                                              (("2"
                                                                                (expand
                                                                                 "terminates_expr")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x_2")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nonempty?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "val")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("3"
                                                                    (typepred
                                                                     "f(x!2)")
                                                                    (("3"
                                                                      (hide
                                                                       -1)
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "terminating?")
                                                                          (("3"
                                                                            (expand
                                                                             "terminates_expr")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "x_2")
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("3"
                                                                                      (inst
                                                                                       -2
                                                                                       "val")
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "f(x!2)")
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "terminating?")
                                                                    (("2"
                                                                      (expand
                                                                       "terminates_expr")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x_2")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("2"
                                                                              (expand
                                                                               "empty?")
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "val")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "list_extensionality"
                                                           1)
                                                          (("1"
                                                            (rewrite
                                                             "length_append")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "n")
                                                                  (("1"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_append")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "n")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "n=length(f(x)`3)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   2
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -7
                                                                                     "n")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -7
                                                                                          -8
                                                                                          2))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "semantic_rel")
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "x!3"
                                                                                               "x!4")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "choose({r: nat |
                                              semantic_rel_expr(f(x)`1, f(x)`2, f(x)`3)
                                                               (f(x)`4, f(x)`4, tuple2nat(x!3, x!4), r)})")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "deterministic")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "tuple2nat(x!3, x!4)"
                                                                                                       "f(x)")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "semantic_rel")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "f(x)")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "terminating?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "terminates_expr")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "tuple2nat(x!3,x!4)")
                                                                                                                (("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "nonempty?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "empty?")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "val")
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "f(x)")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "terminating?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "terminates_expr")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "tuple2nat(x!3,x!4)")
                                                                                                            (("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "nonempty?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "val")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "f(x)")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "terminating?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "terminates_expr")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "tuple2nat(x_2)")
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "val")
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "f(x)")
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "terminating?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "terminates_expr")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "tuple2nat(x_2)")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -2
                                                                                             "val")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "f(x)")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "terminating?")
                                                                            (("2"
                                                                              (expand
                                                                               "terminates_expr")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "tuple2nat(x_2)")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nonempty?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "val")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "f(x)")
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "terminating?")
                                                                      (("2"
                                                                        (expand
                                                                         "terminates_expr")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "tuple2nat(x_2)")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "val")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "f(x)")
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "terminating?")
                                                                    (("2"
                                                                      (expand
                                                                       "terminates_expr")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "tuple2nat(x_2)")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("2"
                                                                              (expand
                                                                               "empty?")
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "val")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "f(x)")
                                                            (("3"
                                                              (hide -1)
                                                              (("3"
                                                                (skeep)
                                                                (("3"
                                                                  (expand
                                                                   "terminating?")
                                                                  (("3"
                                                                    (expand
                                                                     "terminates_expr")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "tuple2nat(x_2)")
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("3"
                                                                            (expand
                                                                             "empty?")
                                                                            (("3"
                                                                              (inst
                                                                               -2
                                                                               "val")
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide-all-but
                                                           1)
                                                          (("4"
                                                            (typepred
                                                             "f(x!2)")
                                                            (("4"
                                                              (hide -1)
                                                              (("4"
                                                                (expand
                                                                 "terminating?")
                                                                (("4"
                                                                  (expand
                                                                   "terminates_expr")
                                                                  (("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (inst
                                                                       -1
                                                                       "x_2")
                                                                      (("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("4"
                                                                            (expand
                                                                             "empty?")
                                                                            (("4"
                                                                              (inst
                                                                               -2
                                                                               "val")
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -5 "length(p!1`3)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-5 1))
                                            (("1"
                                              (expand "terminating?")
                                              (("1"
                                                (expand
                                                 "terminates_expr")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "nat2tuple(env)`1"
                                                     "nat2tuple(env)`2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "(nat2tuple(env)`1, nat2tuple(env)`2) = nat2tuple(env)")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (rewrite
                                                             "tuple2nat_nat2tuple")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "nth(y`3, length(p!1`3))(nat2tuple(env))")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -3 "length(p`2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (-3 1))
                                          (("1"
                                            (expand "terminating?")
                                            (("1"
                                              (expand
                                               "terminates_expr")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -1 "env")
                                                  (("1"
                                                    (inst
                                                     1
                                                     "nth(y`2, length(p`2))(env)")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (skeep)
                        (("2" (skeep)
                          (("2" (replace -1)
                            (("2" (replace -2)
                              (("2"
                                (replace -3)
                                (("2"
                                  (expand "pvs0_level" 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst
                                       1
                                       "f(nat2tuple(nat2tuple(n)`1)`1)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (typepred
                                               "f(nat2tuple(nat2tuple(n)`1)`1)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand
                                                     "terminating?")
                                                    (("1"
                                                      (expand
                                                       "terminates_expr")
                                                      (("1"
                                                        (inst -1 "x")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "nonempty?")
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "val")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (rewrite "nth_append")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred
                                                   "f(nat2tuple(nat2tuple(n)`1)`1)")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "terminating?")
                                                        (("2"
                                                          (expand
                                                           "terminates_expr")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "nonempty?")
                                                                (("2"
                                                                  (expand
                                                                   "empty?")
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "val")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "i=length(f(nat2tuple(nat2tuple(n)`1)`1)`2)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (expand "nth" 2)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (typepred
                                                         "choose[nat]
                                             ({r: nat |
                                                 semantic_rel[nat]
                                                     (f(nat2tuple(nat2tuple(n)`1)`1), env, r)})")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "f(nat2tuple(nat2tuple(n)`1)`1)")
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (expand
                                                                 "terminating?")
                                                                (("2"
                                                                  (expand
                                                                   "terminates_expr")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "env")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("2"
                                                                          (expand
                                                                           "empty?")
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "val")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred
                                                         "f(nat2tuple(nat2tuple(n)`1)`1)")
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "terminating?")
                                                            (("2"
                                                              (expand
                                                               "terminates_expr")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "val")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "i")
                                                (("2"
                                                  (rewrite
                                                   "length_append")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred
                                                         "f(nat2tuple(nat2tuple(n)`1)`1)")
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "terminating?")
                                                            (("2"
                                                              (expand
                                                               "terminates_expr")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "val")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst
                                       1
                                       "f(nat2tuple(nat2tuple(n)`1)`2)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (typepred
                                                 "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand
                                                     "terminating?")
                                                    (("1"
                                                      (expand
                                                       "terminates_expr")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "tuple2nat(x)")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "nonempty?")
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "val")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (rewrite "nth_append")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred
                                                     "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (expand
                                                         "nonempty?")
                                                        (("2"
                                                          (expand
                                                           "empty?")
                                                          (("2"
                                                            (expand
                                                             "terminating?")
                                                            (("2"
                                                              (expand
                                                               "terminates_expr")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "tuple2nat(x)")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "val")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "i=length(f(nat2tuple(nat2tuple(n)`1)`2)`3)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (rewrite
                                                     "nth_append")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (typepred
                                                         " choose[nat]
                                           ({r: nat |
                                               semantic_rel[nat]
                                                   (f(nat2tuple(nat2tuple(n)`1)`2),
                                                    tuple2nat(env1, env2), r)})")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (expand
                                                                 "terminating?")
                                                                (("2"
                                                                  (expand
                                                                   "terminates_expr")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "tuple2nat(env1, env2)")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("2"
                                                                          (expand
                                                                           "empty?")
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "val")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (typepred
                                                         "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "terminating?")
                                                              (("2"
                                                                (expand
                                                                 "terminates_expr")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "tuple2nat(x)")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "nonempty?")
                                                                      (("2"
                                                                        (expand
                                                                         "empty?")
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "val")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "i")
                                                (("2"
                                                  (rewrite
                                                   "length_append")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred
                                                       "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           "terminating?")
                                                          (("2"
                                                            (expand
                                                             "terminates_expr")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "tuple2nat(x)")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "val")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skeep)
                      (("3" (skeep)
                        (("3" (skeep)
                          (("3" (skeep)
                            (("3" (hide-all-but 1)
                              (("3"
                                (typepred "f(p2)")
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (expand "terminating?")
                                    (("3"
                                      (expand "terminates_expr")
                                      (("3"
                                        (inst -1 "tuple2nat(x)")
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (expand "nonempty?")
                                            (("3"
                                              (expand "empty?")
                                              (("3"
                                                (inst -2 "val")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (skeep*)
                      (("4" (hide-all-but 1)
                        (("4" (typepred "f(p1)")
                          (("4" (hide -1)
                            (("4" (expand "terminating?")
                              (("4"
                                (expand "terminates_expr")
                                (("4"
                                  (inst -1 "x")
                                  (("4"
                                    (skeep)
                                    (("4"
                                      (expand "nonempty?")
                                      (("4"
                                        (expand "empty?")
                                        (("4"
                                          (inst -2 "val")
                                          (("4" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (beta)
              (("2" (skeep)
                (("2" (case "injective?(inverse(f))")
                  (("1"
                    (case "EXISTS (f:
                                              [
                                                 (LAMBDA (pvs0: PVS0):
                                                    pvs0_level(x!1 - 1)(pvs0) AND terminating?(pvs0))->nat]):
                                      injective?(f)")
                    (("1" (skeep)
                      (("1" (inst 1 "inverse(f!1)")
                        (("1" (rewrite "surj_inv")
                          (("1" (expand "surjective?" 2)
                            (("1" (skeep) (("1" (inst 1 "y") nil nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "forall(n : nat): exists(x : (LAMBDA (pvs0: PVS0[nat]):
                                                         pvs0_level(n)(pvs0) AND terminating?[nat](pvs0))): true")
                          (("1" (inst -1 "x!1-1") nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (measure-induct+ "n" "n")
                              (("2"
                                (case "x!2=0")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (inst 1 "(false_val,lop1,lop2,vr)")
                                    (("1"
                                      (expand "pvs0_level")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (expand
                                             "semantic_rel_expr"
                                             1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -1 "x!2-1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (typepred "x")
                                        (("1"
                                          (inst
                                           2
                                           "(false_val,append (x`2, (:lambda(n: nat): choose({r: nat | semantic_rel(x,n,r)}):)),append (x`3, (:lambda(n: [nat,nat]): choose({r: nat | semantic_rel(x,tuple2nat(n),r)}):)),vr)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "pvs0_level" 1)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst 1 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "length_append")
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (expand
                                                               "terminating?")
                                                              (("1"
                                                                (expand
                                                                 "terminates_expr")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "n")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (expand
                                                                       "nonempty?")
                                                                      (("1"
                                                                        (expand
                                                                         "empty?")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "val")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (rewrite
                                                             "length_append")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (rewrite
                                                                 "nth_append")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-4
                                                                    1))
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "terminating?")
                                                                      (("2"
                                                                        (expand
                                                                         "terminates_expr")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "n")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "val")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (rewrite
                                                                   "nth_append")
                                                                  (("1"
                                                                    (case
                                                                     "i = length(x`2)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (typepred
                                                                             "choose[nat]({r: nat | semantic_rel[nat](x, env, r)})")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-3
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "terminating?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "terminates_expr")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "env")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "val")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-3
                                                                      1))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "terminating?")
                                                                        (("2"
                                                                          (expand
                                                                           "terminates_expr")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "n")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "nonempty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "val")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-3 1))
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "terminating?")
                                                                  (("2"
                                                                    (expand
                                                                     "terminates_expr")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "n")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("2"
                                                                            (expand
                                                                             "empty?")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "val")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 1 "x")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (rewrite
                                                       "length_append")
                                                      (("1"
                                                        (hide-all-but
                                                         (-2 1))
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "terminating?")
                                                            (("1"
                                                              (expand
                                                               "terminates_expr")
                                                              (("1"
                                                                (expand
                                                                 "nonempty?")
                                                                (("1"
                                                                  (expand
                                                                   "empty?")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "tuple2nat(n)")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "val")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (rewrite
                                                               "nth_append")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-4
                                                                  1))
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "terminating?")
                                                                    (("2"
                                                                      (expand
                                                                       "terminates_expr")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "tuple2nat(n)")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("2"
                                                                              (expand
                                                                               "empty?")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "val")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (rewrite
                                                                 "nth_append")
                                                                (("1"
                                                                  (case
                                                                   "i = length(x`3)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (typepred
                                                                           "choose[nat]({r: nat | semantic_rel[nat](x, tuple2nat(env1,env2), r)})")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "terminating?")
                                                                              (("2"
                                                                                (expand
                                                                                 "terminates_expr")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "tuple2nat(env1,env2)")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nonempty?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "val")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-3
                                                                    1))
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "terminating?")
                                                                      (("2"
                                                                        (expand
                                                                         "terminates_expr")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "tuple2nat(n)")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "val")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1))
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "terminating?")
                                                                (("2"
                                                                  (expand
                                                                   "terminates_expr")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "tuple2nat(n)")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("2"
                                                                          (expand
                                                                           "empty?")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "val")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 1))
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand "terminating?")
                                                (("2"
                                                  (expand
                                                   "terminates_expr")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "tuple2nat(n)")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "nonempty?")
                                                        (("2"
                                                          (expand
                                                           "empty?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "val")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but (-2 1))
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (expand "terminating?")
                                                (("3"
                                                  (expand
                                                   "terminates_expr")
                                                  (("3"
                                                    (inst -1 "n")
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (expand
                                                         "nonempty?")
                                                        (("3"
                                                          (expand
                                                           "empty?")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "val")
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (inst 1 "inverse(f)")
                        (("2" (expand "injective?")
                          (("2" (skeep)
                            (("2" (inst -2 "x1" "x2")
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "inj_inv") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (PVS02nat def-decl "nat" pvs0_to_nat nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat2PVS0_inverse formula-decl nil pvs0_to_nat nil)
    (nat2PVS0 def-decl "PVS0Expr" pvs0_to_nat nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_computable
     nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_computable nil)
    (false_val formal-const-decl "nat" pvs0_computable nil)
    (x!1 skolem-const-decl "nat" pvs0_computable nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (restrict const-decl "R" restrict nil)
    (x skolem-const-decl "(LAMBDA (pvs0: PVS0[nat]):
   pvs0_level(x!2 - 1)(pvs0) AND terminating?[nat](pvs0))"
     pvs0_computable nil)
    (x!2 skolem-const-decl "nat" pvs0_computable nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (surj_inv formula-decl nil function_inverse nil)
    (TRUE const-decl "bool" booleans nil)
    (inj_inv formula-decl nil function_inverse nil)
    (p!1 skolem-const-decl "(pvs0_level(x!1 - 1))" pvs0_computable nil)
    (nat2tuple_tuple2nat formula-decl nil tuple2nat "numbers/")
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (x!4 skolem-const-decl "Val[nat]" pvs0_computable nil)
    (x!3 skolem-const-decl "Val[nat]" pvs0_computable nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (list_extensionality formula-decl nil more_list_props
     "structures/")
    (y skolem-const-decl "(pvs0_level(x!1))" pvs0_computable nil)
    (below type-eq-decl nil nat_types nil)
    (x!3 skolem-const-decl "nat" pvs0_computable nil)
    (deterministic formula-decl nil pvs0_lang nil)
    (nth def-decl "T" list_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "nat" pvs0_computable nil)
    (x!2 skolem-const-decl "nat" pvs0_computable nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (tuple2nat_nat2tuple formula-decl nil tuple2nat "numbers/")
    (p skolem-const-decl "(pvs0_level(x!1 - 1))" pvs0_computable nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (choose const-decl "(p)" sets nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (f skolem-const-decl "[nat ->
   (LAMBDA (pvs0: PVS0): pvs0_level(x!1 - 1)(pvs0) AND terminating?(pvs0))]"
     pvs0_computable nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (surjective? const-decl "bool" functions nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (level_surjective-6 "new definition for pvs0_level" 3716215520
   ("" (measure-induct+ "n" "n")
    (("" (case "x!1=0")
      (("1"
        (inst 1 "lambda(n: nat): (false_val, Op1, Op2, nat2PVS0(n))")
        (("1" (expand "surjective?")
          (("1" (skeep)
            (("1" (inst 1 "PVS02nat(y`4)")
              (("1" (rewrite "nat2PVS0_inverse")
                (("1" (typepred "y")
                  (("1" (replace -2)
                    (("1" (expand "pvs0_level")
                      (("1" (prop)
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (replace -1)
            (("2" (expand "pvs0_level") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (inst -1 "x!1-1")
        (("1" (assert)
          (("1"
            (case "let t = (lambda(pvs0: PVS0): pvs0_level(x!1-1)(pvs0) and terminating?(pvs0)) in exists(f: [nat -> (t)]): surjective?(f)")
            (("1" (hide -2)
              (("1" (beta)
                (("1" (skeep)
                  (("1"
                    (inst 2
                     "lambda(n : nat): let p1= nat2tuple(nat2tuple(n)`1)`1, p2 = nat2tuple(nat2tuple(n)`1)`2 , p3 = nat2tuple(n)`2 in (false_val, append(f(p1)`2,(:lambda(x: nat): choose({r :nat | semantic_rel(f(p1),x,r)}):)), append(f(p2)`3, (:lambda(x : [nat,nat]): choose({r:nat | semantic_rel(f(p2),tuple2nat(x),r)}):)), nat2PVS0(p3))")
                    (("1" (expand "surjective?")
                      (("1" (skeep)
                        (("1" (typepred "y")
                          (("1" (expand "pvs0_level")
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst-cp -6 "p")
                                    (("1"
                                      (inst -6 "p!1")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst
                                             2
                                             "tuple2nat(tuple2nat(x!2,x),PVS02nat(y`4))")
                                            (("1"
                                              (rewrite
                                               "nat2tuple_tuple2nat")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "nat2tuple_tuple2nat")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "nat2PVS0_inverse")
                                                      (("1"
                                                        (decompose-equality
                                                         2)
                                                        (("1"
                                                          (rewrite
                                                           "list_extensionality"
                                                           1)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (rewrite
                                                               "length_append")
                                                              (("1"
                                                                (replace
                                                                 -7)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "f(x!2)")
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "terminating?")
                                                                        (("2"
                                                                          (expand
                                                                           "terminates_expr")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x_2")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "nonempty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "val")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (rewrite
                                                                 "nth_append")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "n")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "n=length(f(x!2)`2)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -4
                                                                               "n")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -4
                                                                                     "x!3")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       " choose({r: nat | semantic_rel(f(x!2), x!3, r)})")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "deterministic")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "nth(y`2, n)(x!3)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "f(x!2)")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "terminating?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "terminates_expr")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!3")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nonempty?")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "empty?")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "val")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "f(x!2)")
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "terminating?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "terminates_expr")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!3")
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nonempty?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "empty?")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "val")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "nat2tuple_tuple2nat")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "nat2tuple_tuple2nat")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -4
                                                                                               "x1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skeep)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "nat2tuple_tuple2nat")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "nat2tuple_tuple2nat")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("4"
                                                                                      (typepred
                                                                                       "f(x!2)")
                                                                                      (("4"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("4"
                                                                                          (skeep)
                                                                                          (("4"
                                                                                            (expand
                                                                                             "terminating?")
                                                                                            (("4"
                                                                                              (expand
                                                                                               "terminates_expr")
                                                                                              (("4"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x_2")
                                                                                                (("4"
                                                                                                  (skeep)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "nonempty?")
                                                                                                    (("4"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("4"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "val")
                                                                                                        (("4"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "f(x!2)")
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "terminating?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "terminates_expr")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x_2")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nonempty?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "empty?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "val")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "n")
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "f(x!2)")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "terminating?")
                                                                              (("2"
                                                                                (expand
                                                                                 "terminates_expr")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x_2")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nonempty?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "val")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("3"
                                                                    (typepred
                                                                     "f(x!2)")
                                                                    (("3"
                                                                      (hide
                                                                       -1)
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "terminating?")
                                                                          (("3"
                                                                            (expand
                                                                             "terminates_expr")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "x_2")
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("3"
                                                                                      (inst
                                                                                       -2
                                                                                       "val")
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "f(x!2)")
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "terminating?")
                                                                    (("2"
                                                                      (expand
                                                                       "terminates_expr")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x_2")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("2"
                                                                              (expand
                                                                               "empty?")
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "val")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "list_extensionality"
                                                           1)
                                                          (("1"
                                                            (rewrite
                                                             "length_append")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "n")
                                                                  (("1"
                                                                    (rewrite
                                                                     "length_append")
                                                                    (("1"
                                                                      (rewrite
                                                                       "nth_append")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "n")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "n=length(f(x)`3)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   2
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -7
                                                                                     "n")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -7
                                                                                          -8
                                                                                          2))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "semantic_rel")
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "x!3"
                                                                                               "x!4")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "choose({r: nat |
                semantic_rel_expr(f(x)`1, f(x)`2, f(x)`3)
                                 (f(x)`4, f(x)`4, tuple2nat(x!3, x!4), r)})")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "deterministic")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "tuple2nat(x!3, x!4)"
                                                                                                       "f(x)")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "semantic_rel")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "f(x)")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "terminating?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "terminates_expr")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "tuple2nat(x!3,x!4)")
                                                                                                                (("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "nonempty?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "empty?")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "val")
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "f(x)")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "terminating?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "terminates_expr")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "tuple2nat(x!3,x!4)")
                                                                                                            (("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "nonempty?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "val")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "f(x)")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "terminating?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "terminates_expr")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "tuple2nat(x_2)")
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "empty?")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "val")
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "f(x)")
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "terminating?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "terminates_expr")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "tuple2nat(x_2)")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -2
                                                                                             "val")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "f(x)")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "terminating?")
                                                                            (("2"
                                                                              (expand
                                                                               "terminates_expr")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "tuple2nat(x_2)")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nonempty?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "val")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "f(x)")
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "terminating?")
                                                                      (("2"
                                                                        (expand
                                                                         "terminates_expr")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "tuple2nat(x_2)")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "val")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "f(x)")
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "terminating?")
                                                                    (("2"
                                                                      (expand
                                                                       "terminates_expr")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "tuple2nat(x_2)")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("2"
                                                                              (expand
                                                                               "empty?")
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "val")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "f(x)")
                                                            (("3"
                                                              (hide -1)
                                                              (("3"
                                                                (skeep)
                                                                (("3"
                                                                  (expand
                                                                   "terminating?")
                                                                  (("3"
                                                                    (expand
                                                                     "terminates_expr")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "tuple2nat(x_2)")
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("3"
                                                                            (expand
                                                                             "empty?")
                                                                            (("3"
                                                                              (inst
                                                                               -2
                                                                               "val")
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide-all-but
                                                           1)
                                                          (("4"
                                                            (typepred
                                                             "f(x!2)")
                                                            (("4"
                                                              (hide -1)
                                                              (("4"
                                                                (expand
                                                                 "terminating?")
                                                                (("4"
                                                                  (expand
                                                                   "terminates_expr")
                                                                  (("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (inst
                                                                       -1
                                                                       "x_2")
                                                                      (("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("4"
                                                                            (expand
                                                                             "empty?")
                                                                            (("4"
                                                                              (inst
                                                                               -2
                                                                               "val")
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -5 "length(p!1`3)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-5 1))
                                            (("1"
                                              (expand "terminating?")
                                              (("1"
                                                (expand
                                                 "terminates_expr")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "nat2tuple(env)`1"
                                                     "nat2tuple(env)`2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "(nat2tuple(env)`1, nat2tuple(env)`2) = nat2tuple(env)")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (rewrite
                                                             "tuple2nat_nat2tuple")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "nth(y`3, length(p!1`3))(nat2tuple(env))")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -3 "length(p`2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (-3 1))
                                          (("1"
                                            (expand "terminating?")
                                            (("1"
                                              (expand
                                               "terminates_expr")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -1 "env")
                                                  (("1"
                                                    (inst
                                                     1
                                                     "nth(y`2, length(p`2))(env)")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (skeep)
                        (("2" (skeep)
                          (("2" (replace -1)
                            (("2" (replace -2)
                              (("2"
                                (replace -3)
                                (("2"
                                  (expand "pvs0_level" 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst
                                       1
                                       "f(nat2tuple(nat2tuple(n)`1)`1)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (typepred
                                               "f(nat2tuple(nat2tuple(n)`1)`1)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand
                                                     "terminating?")
                                                    (("1"
                                                      (expand
                                                       "terminates_expr")
                                                      (("1"
                                                        (inst -1 "x")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "nonempty?")
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "val")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (rewrite "nth_append")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred
                                                   "f(nat2tuple(nat2tuple(n)`1)`1)")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "terminating?")
                                                        (("2"
                                                          (expand
                                                           "terminates_expr")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "nonempty?")
                                                                (("2"
                                                                  (expand
                                                                   "empty?")
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "val")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "i=length(f(nat2tuple(nat2tuple(n)`1)`1)`2)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (expand "nth" 2)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (typepred
                                                         "choose[nat]
                         ({r: nat |
                             semantic_rel[nat]
                                 (f(nat2tuple(nat2tuple(n)`1)`1), env, r)})")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "f(nat2tuple(nat2tuple(n)`1)`1)")
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (expand
                                                                 "terminating?")
                                                                (("2"
                                                                  (expand
                                                                   "terminates_expr")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "env")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("2"
                                                                          (expand
                                                                           "empty?")
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "val")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred
                                                         "f(nat2tuple(nat2tuple(n)`1)`1)")
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "terminating?")
                                                            (("2"
                                                              (expand
                                                               "terminates_expr")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "val")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "i")
                                                (("2"
                                                  (rewrite
                                                   "length_append")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred
                                                         "f(nat2tuple(nat2tuple(n)`1)`1)")
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "terminating?")
                                                            (("2"
                                                              (expand
                                                               "terminates_expr")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "val")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst
                                       1
                                       "f(nat2tuple(nat2tuple(n)`1)`2)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (rewrite "length_append")
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (typepred
                                                 "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand
                                                     "terminating?")
                                                    (("1"
                                                      (expand
                                                       "terminates_expr")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "tuple2nat(x)")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "nonempty?")
                                                            (("1"
                                                              (expand
                                                               "empty?")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "val")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (rewrite "nth_append")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred
                                                     "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (expand
                                                         "nonempty?")
                                                        (("2"
                                                          (expand
                                                           "empty?")
                                                          (("2"
                                                            (expand
                                                             "terminating?")
                                                            (("2"
                                                              (expand
                                                               "terminates_expr")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "tuple2nat(x)")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "val")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "i=length(f(nat2tuple(nat2tuple(n)`1)`2)`3)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (rewrite
                                                     "nth_append")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (typepred
                                                         " choose[nat]
                       ({r: nat |
                           semantic_rel[nat]
                               (f(nat2tuple(nat2tuple(n)`1)`2),
                                tuple2nat(env1, env2), r)})")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (expand
                                                                 "terminating?")
                                                                (("2"
                                                                  (expand
                                                                   "terminates_expr")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "tuple2nat(env1, env2)")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("2"
                                                                          (expand
                                                                           "empty?")
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "val")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (typepred
                                                         "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "terminating?")
                                                              (("2"
                                                                (expand
                                                                 "terminates_expr")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "tuple2nat(x)")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "nonempty?")
                                                                      (("2"
                                                                        (expand
                                                                         "empty?")
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "val")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "i")
                                                (("2"
                                                  (rewrite
                                                   "length_append")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred
                                                       "f(nat2tuple(nat2tuple(n)`1)`2)")
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           "terminating?")
                                                          (("2"
                                                            (expand
                                                             "terminates_expr")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "tuple2nat(x)")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (expand
                                                                       "empty?")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "val")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skeep)
                      (("3" (skeep)
                        (("3" (skeep)
                          (("3" (skeep)
                            (("3" (hide-all-but 1)
                              (("3"
                                (typepred "f(p2)")
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (expand "terminating?")
                                    (("3"
                                      (expand "terminates_expr")
                                      (("3"
                                        (inst -1 "tuple2nat(x)")
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (expand "nonempty?")
                                            (("3"
                                              (expand "empty?")
                                              (("3"
                                                (inst -2 "val")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (skeep*)
                      (("4" (hide-all-but 1)
                        (("4" (typepred "f(p1)")
                          (("4" (hide -1)
                            (("4" (expand "terminating?")
                              (("4"
                                (expand "terminates_expr")
                                (("4"
                                  (inst -1 "x")
                                  (("4"
                                    (skeep)
                                    (("4"
                                      (expand "nonempty?")
                                      (("4"
                                        (expand "empty?")
                                        (("4"
                                          (inst -2 "val")
                                          (("4" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (beta)
              (("2" (skeep)
                (("2" (case "injective?(inverse(f))")
                  (("1"
                    (case "EXISTS (f:
                               [
                                  (LAMBDA (pvs0: PVS0):
                                     pvs0_level(x!1 - 1)(pvs0) AND terminating?(pvs0))->nat]):
                       injective?(f)")
                    (("1" (skeep)
                      (("1" (inst 1 "inverse(f!1)")
                        (("1" (rewrite "surj_inv")
                          (("1" (expand "surjective?" 2)
                            (("1" (skeep) (("1" (inst 1 "y") nil nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "forall(n : nat): exists(x : (LAMBDA (pvs0: PVS0[nat]):
                                      pvs0_level(n)(pvs0) AND terminating?[nat](pvs0))): true")
                          (("1" (inst -1 "x!1-1") nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (measure-induct+ "n" "n")
                              (("2"
                                (case "x!2=0")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (inst 1 "(false_val,Op1,Op2,vr)")
                                    (("1"
                                      (expand "pvs0_level")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (expand
                                             "semantic_rel_expr"
                                             1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -1 "x!2-1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (typepred "x")
                                        (("1"
                                          (inst
                                           2
                                           "(false_val,append (x`2, (:lambda(n: nat): choose({r: nat | semantic_rel(x,n,r)}):)),append (x`3, (:lambda(n: [nat,nat]): choose({r: nat | semantic_rel(x,tuple2nat(n),r)}):)),vr)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "pvs0_level" 1)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst 1 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "length_append")
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (expand
                                                               "terminating?")
                                                              (("1"
                                                                (expand
                                                                 "terminates_expr")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "n")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (expand
                                                                       "nonempty?")
                                                                      (("1"
                                                                        (expand
                                                                         "empty?")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "val")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (rewrite
                                                             "length_append")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (rewrite
                                                                 "nth_append")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-4
                                                                    1))
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "terminating?")
                                                                      (("2"
                                                                        (expand
                                                                         "terminates_expr")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "n")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "val")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (rewrite
                                                                   "nth_append")
                                                                  (("1"
                                                                    (case
                                                                     "i = length(x`2)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (typepred
                                                                             "choose[nat]({r: nat | semantic_rel[nat](x, env, r)})")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-3
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "terminating?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "terminates_expr")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "env")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nonempty?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "val")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-3
                                                                      1))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "terminating?")
                                                                        (("2"
                                                                          (expand
                                                                           "terminates_expr")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "n")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (expand
                                                                                 "nonempty?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "val")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-3 1))
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "terminating?")
                                                                  (("2"
                                                                    (expand
                                                                     "terminates_expr")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "n")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("2"
                                                                            (expand
                                                                             "empty?")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "val")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 1 "x")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (rewrite
                                                       "length_append")
                                                      (("1"
                                                        (hide-all-but
                                                         (-2 1))
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "terminating?")
                                                            (("1"
                                                              (expand
                                                               "terminates_expr")
                                                              (("1"
                                                                (expand
                                                                 "nonempty?")
                                                                (("1"
                                                                  (expand
                                                                   "empty?")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "tuple2nat(n)")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "val")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (rewrite
                                                               "nth_append")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-4
                                                                  1))
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "terminating?")
                                                                    (("2"
                                                                      (expand
                                                                       "terminates_expr")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "tuple2nat(n)")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("2"
                                                                              (expand
                                                                               "empty?")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "val")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (rewrite
                                                                 "nth_append")
                                                                (("1"
                                                                  (case
                                                                   "i = length(x`3)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (typepred
                                                                           "choose[nat]({r: nat | semantic_rel[nat](x, tuple2nat(env1,env2), r)})")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-3
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "terminating?")
                                                                              (("2"
                                                                                (expand
                                                                                 "terminates_expr")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "tuple2nat(env1,env2)")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nonempty?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "val")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-3
                                                                    1))
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "terminating?")
                                                                      (("2"
                                                                        (expand
                                                                         "terminates_expr")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "tuple2nat(n)")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "val")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1))
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "terminating?")
                                                                (("2"
                                                                  (expand
                                                                   "terminates_expr")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "tuple2nat(n)")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "nonempty?")
                                                                        (("2"
                                                                          (expand
                                                                           "empty?")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "val")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 1))
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand "terminating?")
                                                (("2"
                                                  (expand
                                                   "terminates_expr")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "tuple2nat(n)")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "nonempty?")
                                                        (("2"
                                                          (expand
                                                           "empty?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "val")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but (-2 1))
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (expand "terminating?")
                                                (("3"
                                                  (expand
                                                   "terminates_expr")
                                                  (("3"
                                                    (inst -1 "n")
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (expand
                                                         "nonempty?")
                                                        (("3"
                                                          (expand
                                                           "empty?")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "val")
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (inst 1 "inverse(f)")
                        (("2" (expand "injective?")
                          (("2" (skeep)
                            (("2" (inst -2 "x1" "x2")
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "inj_inv") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((PVS02nat def-decl "nat" pvs0_to_nat nil)
    (nat2PVS0_inverse formula-decl nil pvs0_to_nat nil)
    (nat2PVS0 def-decl "PVS0Expr" pvs0_to_nat nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (nat2tuple_tuple2nat formula-decl nil tuple2nat "numbers/")
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (list_extensionality formula-decl nil more_list_props
     "structures/")
    (deterministic formula-decl nil pvs0_lang nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (length_singleton formula-decl nil more_list_props "structures/")
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (tuple2nat_nat2tuple formula-decl nil tuple2nat "numbers/")
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (Val type-eq-decl nil pvs0_expr nil))
   nil)
  (level_surjective-5 "new definition for pvs0_level" 3716042673
   ("" (measure-induct+ "n" "n")
    (("" (case "x!1=0")
      (("1"
        (inst 1 "lambda(n: nat): (false_val, Op1, Op2, nat2PVS0(n))")
        (("1" (expand "surjective?")
          (("1" (skeep)
            (("1" (inst 1 "PVS02nat(y`4)")
              (("1" (rewrite "nat2PVS0_inverse")
                (("1" (typepred "y")
                  (("1" (replace -2)
                    (("1" (expand "pvs0_level")
                      (("1" (prop)
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (replace -1)
            (("2" (expand "pvs0_level") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2"
        (case "EXISTS(codings:[[below(x!1),nat]->PVS0]): FORALL(level:below(x!1)): (FORALL(n:nat): pvs0_level(level)(codings(level,n)) ) AND surjective?[nat,(pvs0_level(level))](LAMBDA(n:nat):codings(level,n))")
        (("1" (skeep -1)
          (("1"
            (name "decoding_for_unary_lfunc"
                  " (LAMBDA(unops: list[nat]):
                       map(LAMBDA (n: nat):
                       IF length(Op1) > 0 THEN
                       LET level = rem(x!1+1)(n),
                                                     			    idx = ndiv(n,x!1+1)
                                                     			   IN IF level = x!1 THEN
                                                     			         nth(Op1,rem(length(Op1))(idx))
                                                     			      ELSE
                                                     			
                                                                            (LAMBDA (i: nat):
                                                                               choose({a: nat |
                                                                                         semantic_rel(codings
                                                                                                      (level,idx),
                                                                                                      i,
                                                                                                      a)})) eNDIF
                       ELSE
                                           LET level = rem(x!1)(n),
                                                     			    idx = ndiv(n,x!1)
                                                     			   IN
                                                                            (LAMBDA (i: nat):
                                                                               choose({a: nat |
                                                                                         semantic_rel(codings
                                                                                                      (level,idx),
                                                                                                      i,
                                                                                                      a)}))
                       ENDIF
                       )
                                                        (unops))
                       ::[list[nat]->list[[nat->nat]]]")
            (("1"
              (name "decoding_for_bunary_lfunc"
                    "(LAMBDA (binops: list[nat]):
                      map(LAMBDA (n: nat):
                            IF length(Op2) > 0
                              THEN LET level = rem(x!1 + 1)(n), idx = ndiv(n, x!1 + 1)
                                     IN
                                     IF level = x!1 THEN nth(Op2, rem(length(Op2))(idx))
                                     ELSE (LAMBDA (i: [nat,nat]):
                                             choose({a: nat
                                                     |
                                                     semantic_rel
                                                     (codings(level, idx), tuple2nat(i), a)}))
                                     ENDIF
                            ELSE LET level = rem(x!1)(n), idx = ndiv(n, x!1) IN
                                   (LAMBDA (i: [nat,nat]):
                                      choose({a: nat |
                                                semantic_rel(codings(level, idx),
                                                             tuple2nat(i),
                                                             a)}))
                            ENDIF)
                         (binops))::[list[nat]->list[[[nat,nat]->nat]]]")
              (("1"
                (name "fun" "LAMBDA(n_:nat):
                                                                LET (unops_code, n__) = nat2tuple(n_),
                                                                   (binops_code, pvs0expr_code) = nat2tuple(n__),
                                                                   unops = nat_list_enum(unops_code),
                                                                   binops = nat_list_enum(binops_code)
                                                                IN (false_val,
                                                                                    decoding_for_unary_lfunc
                                                                                        (unops),
                                                                                   decoding_for_bunary_lfunc
                                                                                        (binops),
                                                                              nat2PVS0(pvs0expr_code))")
                (("1" (hide -2 -3)
                  (("1" (hide -3)
                    (("1" (inst 2 "fun")
                      (("1" (replace -1 2 :dir rl :hide? t)
                        (("1" (expand "surjective?")
                          (("1" (skeep 2)
                            (("1" (typepred "y")
                              (("1"
                                (expand "pvs0_level" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace 1 -2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "EXISTS(unop_codes: list[nat]): y`2 = decoding_for_unary_lfunc
                                                                                                                                                                                       (unop_codes) ")
                                        (("1"
                                          (skeep -1)
                                          (("1"
                                            (case
                                             "EXISTS(binop_codes: list[nat]): y`3 = decoding_for_bunary_lfunc
                                                                                                                                                                                                           (binop_codes) ")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst
                                                 2
                                                 "tuple2nat(nat_list_enum_inv(unop_codes), tuple2nat(nat_list_enum_inv(binop_codes), PVS02nat(y`4)))")
                                                (("1"
                                                  (with-tccs
                                                   (decompose-equality
                                                    2))
                                                  (("1"
                                                    (hide -3 -5 -1 2)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "nat_list_enum_inv_def")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3 -2 -4 2)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "nat2tuple_tuple2nat")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "nat_list_enum_inv_def")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "nat2tuple_tuple2nat")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (rewrite
                                                             "nat2PVS0_inverse")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3 2)
                                              (("2"
                                                (with-tccs
                                                 (name
                                                  "binop_codes"
                                                  "choose({ l:list[nat] |
                                                            length(l)=length(y`3) AND
                                                           FORALL(i:below(length(l))):
                                                             LET op2_code = nth(l,i),
                                                          	     op2      = nth(y`3,i)
                                                          	 IN
                                             IF length(Op2) > 0 THEN
                                             IF EXISTS(idx: below(length(Op2))): nth(Op2,idx) = op2 THEN
                                                          	      rem(x!1+1)(op2_code) = x!1 AND
                                                        	      ndiv(op2_code,x!1+1) < length(Op2) AND
                                                          	      nth(Op2,ndiv(op2_code,x!1+1)) = op2
                                                          	    ELSE
                                                          	      EXISTS(level:below(x!1),p:(pvs0_level(level)),idx:nat):
                                                          	       level = rem(x!1+1)(op2_code) AND
                                                          	       idx = ndiv(op2_code,x!1+1) AND
                                                          	        p = codings(level,idx) AND
                                                          	      FORALL(env:[Val,Val]): semantic_rel(p,tuple2nat(env),op2(env))
                                                                ENDIF
                                             ELSE
                                                          	      EXISTS(level:below(x!1),p:(pvs0_level(level)),idx:nat):
                                                          	       level = rem(x!1)(op2_code) AND
                                                          	       idx = ndiv(op2_code,x!1) AND
                                                          	        p = codings(level,idx) AND
                                                          	      FORALL(env:[Val,Val]): semantic_rel(p,tuple2nat(env),op2(env))
                                             ENDIF
                                             })"))
                                                (("1"
                                                  (inst
                                                   1
                                                   "binop_codes")
                                                  (("1"
                                                    (case
                                                     "y`3 = decoding_for_bunary_lfunc
                                                                                                                                             (binop_codes)")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "list_extensionality[[[nat,nat]->nat]]")
                                                        (("2"
                                                          (inst?
                                                           -1
                                                           :where
                                                           1)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (case
                                                               "length(y`3) = length(decoding_for_bunary_lfunc(binop_codes))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skolem
                                                                   1
                                                                   "i")
                                                                  (("1"
                                                                    (expand
                                                                     "decoding_for_bunary_lfunc")
                                                                    (("1"
                                                                      (with-tccs
                                                                       (rewrite
                                                                        "map_nth_rw"
                                                                        1))
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (typepred
                                                                           "binop_codes")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "i")
                                                                            (("1"
                                                                              (split
                                                                               -3)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (case
                                                                                             "ndiv(nth(binop_codes, i), 1 + x!1) = rem(length(Op2))(ndiv(nth(binop_codes, i), 1 + x!1))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "rem_mod2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (skeep
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (decompose-equality
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "choose({a: nat | semantic_rel(p, tuple2nat(x!2,x!3), a)})")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "deterministic")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "nth(y`3, i)(x!2,x!3)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -5)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (postpone)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (postpone)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep
                                                                                     -1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           2)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "choose({a: nat | semantic_rel(p, tuple2nat(x!2,x!3), a)})")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "deterministic")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "nth(y`3, i)(x!2,x!3)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -5)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (skeep* :preds? t)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -1 -3)
                                            (("2"
                                              (with-tccs
                                               (name
                                                "unop_codes"
                                                "choose({ l:list[nat] |
                                                        length(l)=length(y`2) AND
                                                       FORALL(i:below(length(l))):
                                                         LET op1_code = nth(l,i),
                                                      	     op1      = nth(y`2,i)
                                                      	 IN
                                         IF length(Op1) > 0 THEN
                                         IF EXISTS(idx: below(length(Op1))): nth(Op1,idx) = op1 THEN
                                                      	      rem(x!1+1)(op1_code) = x!1 AND
                                                    	      ndiv(op1_code,x!1+1) < length(Op1) AND
                                                      	      nth(Op1,ndiv(op1_code,x!1+1)) = op1
                                                      	    ELSE
                                                      	      EXISTS(level:below(x!1),p:(pvs0_level(level)),idx:nat):
                                                      	       level = rem(x!1+1)(op1_code) AND
                                                      	       idx = ndiv(op1_code,x!1+1) AND
                                                      	        p = codings(level,idx) AND
                                                      	      FORALL(env:Val): semantic_rel(p,env,op1(env))
                                                            ENDIF
                                         ELSE
                                                      	      EXISTS(level:below(x!1),p:(pvs0_level(level)),idx:nat):
                                                      	       level = rem(x!1)(op1_code) AND
                                                      	       idx = ndiv(op1_code,x!1) AND
                                                      	        p = codings(level,idx) AND
                                                      	      FORALL(env:Val): semantic_rel(p,env,op1(env))
                                         ENDIF
                                         })"))
                                              (("1"
                                                (inst 1 "unop_codes")
                                                (("1"
                                                  (case
                                                   "y`2 = decoding_for_unary_lfunc
                                                                                                                                         (unop_codes)")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "list_extensionality[[nat->nat]]")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         :where
                                                         1)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (case
                                                             "length(y`2) = length(decoding_for_unary_lfunc(unop_codes))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skolem
                                                                 1
                                                                 "i")
                                                                (("1"
                                                                  (expand
                                                                   "decoding_for_unary_lfunc")
                                                                  (("1"
                                                                    (with-tccs
                                                                     (rewrite
                                                                      "map_nth_rw"
                                                                      1))
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "unop_codes")
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "i")
                                                                          (("1"
                                                                            (split
                                                                             -3)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -4
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (case
                                                                                           "ndiv(nth(unop_codes, i), 1 + x!1) = rem(length(Op1))(ndiv(nth(unop_codes, i), 1 + x!1))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "rem_mod2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               2)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "choose({a: nat | semantic_rel(p, x!2, a)})")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "deterministic")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "nth(y`2, i)(x!2)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -5)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         2)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "choose({a: nat | semantic_rel(p, x!2, a)})")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "deterministic")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "nth(y`2, i)(x!2)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?
                                                                                                     -5)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (postpone) nil nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (skeep* :preds? t)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 1 :hide? t :dir rl)
                        (("2" (hide -1)
                          (("2" (skolem 1 "idx")
                            (("2" (expand "pvs0_level")
                              (("2"
                                (assert)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (name
                                       "op1"
                                       "nth(decoding_for_unary_lfunc(nat_list_enum
                                                    (nat2tuple(idx)`1)),
                           i)")
                                      (("1"
                                        (expand
                                         "decoding_for_unary_lfunc"
                                         -1)
                                        (("1"
                                          (lemma
                                           "map_nth_rw[nat,[nat->nat]]")
                                          (("1"
                                            (inst
                                             -1
                                             "(LAMBDA (n: nat):
                IF length(Op1) > 0
                  THEN IF rem(1 + x!1)(n) = x!1
                         THEN nth(Op1, rem(length(Op1))(ndiv(n, 1 + x!1)))
                       ELSE LAMBDA (i: nat):
                              choose({a: nat
                                      |
                                      semantic_rel
                                      (codings
                                       (rem(1 + x!1)(n), ndiv(n, 1 + x!1)),
                                       i,
                                       a)})
                       ENDIF
                ELSE LAMBDA (i: nat):
                       choose({a: nat |
                                 semantic_rel(codings
                                              (rem(x!1)(n), ndiv(n, x!1)),
                                              i,
                                              a)})
                ENDIF)"
                                             "nat_list_enum(nat2tuple(idx)`1)"
                                             "i")
                                            (("1"
                                              (replace -1 -2 :hide? t)
                                              (("1"
                                                (lift-if -1)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "nth_member[[nat->nat]]")
                                                          (("1"
                                                            (inst?
                                                             -1
                                                             :where
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "op1")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst
                                                           3
                                                           "rem
                                        (1 + x!1)
                                        (nth
                                         (nat_list_enum(nat2tuple(idx)`1),
                                          i))"
                                                           "codings(rem
                                        (1 + x!1)
                                        (nth
                                         (nat_list_enum(nat2tuple(idx)`1),
                                          i)),
                                        ndiv
                                        (nth
                                         (nat_list_enum(nat2tuple(idx)`1),
                                          i),
                                         1 + x!1))")
                                                          (("1"
                                                            (expand
                                                             "op1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               3
                                                               :dir
                                                               rl
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (skeep
                                                                 3)
                                                                (("1"
                                                                  (typepred
                                                                   "choose({a: nat |
                             semantic_rel(codings
                                          (rem
                                           (1 + x!1)
                                           (nth
                                            (nat_list_enum
                                             (nat2tuple(idx)`1),
                                             i)),
                                           ndiv
                                           (nth
                                            (nat_list_enum
                                             (nat2tuple(idx)`1),
                                             i),
                                            1 + x!1)),
                                          env,
                                          a)})")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "choose({a: nat |
                             semantic_rel(codings
                                          (rem
                                           (1 + x!1)
                                           (nth
                                            (nat_list_enum
                                             (nat2tuple(idx)`1),
                                             i)),
                                           ndiv
                                           (nth
                                            (nat_list_enum
                                             (nat2tuple(idx)`1),
                                             i),
                                            1 + x!1)),
                                          env,
                                          a)})")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil)
                                             ("4" (postpone) nil nil)
                                             ("5" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil)
               ("4" (assert) nil nil) ("5" (postpone) nil nil)
               ("6" (postpone) nil nil) ("7" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil) ("5" (postpone) nil nil)
             ("6" (postpone) nil nil) ("7" (postpone) nil nil))
            nil))
          nil)
         ("2"
          (name "set_of_functions"
                "LAMBDA(n:below(x!1)): choose({f: [nat -> (pvs0_level(n))] | surjective?[nat,(pvs0_level(n))](f)})")
          (("1"
            (name "codings"
                  "LAMBDA(level:below(x!1), idx:nat): set_of_functions(level)(idx)")
            (("1" (inst 1 "codings")
              (("1" (skeep 1)
                (("1" (split 1)
                  (("1" (skeep) (("1" (assert) nil nil)) nil)
                   ("2" (expand "codings")
                    (("2" (expand "set_of_functions")
                      (("2"
                        (typepred
                         "choose({f: [nat -> (pvs0_level(level))] |
                                        surjective?[nat,(pvs0_level(level))](f)})")
                        (("1" (expand "surjective?")
                          (("1" (propax) nil nil)) nil)
                         ("2" (hide 2)
                          (("2" (expand "nonempty?")
                            (("2" (expand "empty?")
                              (("2"
                                (inst -4 "level")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skeep -4)
                                    (("2"
                                      (inst -1 "f")
                                      (("2"
                                        (hide-all-but (-3 1))
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (1 -1))
            (("2" (skeep :preds? t)
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst -3 "n")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (level_surjective-4 "new definition for pvs0_level" 3716023644
   ("" (measure-induct+ "n" "n")
    (("" (case "x!1=0")
      (("1"
        (inst 1 "lambda(n: nat): (false_val, Op1, Op2, nat2PVS0(n))")
        (("1" (expand "surjective?")
          (("1" (skeep)
            (("1" (inst 1 "PVS02nat(y`4)")
              (("1" (rewrite "nat2PVS0_inverse")
                (("1" (typepred "y")
                  (("1" (replace -2)
                    (("1" (expand "pvs0_level")
                      (("1" (prop)
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (replace -1)
            (("2" (expand "pvs0_level") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2"
        (case "EXISTS(codings:[[below(x!1),nat]->PVS0]): FORALL(level:below(x!1)): (FORALL(n:nat): pvs0_level(level)(codings(level,n)) ) AND surjective?(LAMBDA(n:nat):codings(level,n))")
        (("1" (skeep -1)
          (("1"
            (name "decoding_for_unary_lfunc"
                  " (LAMBDA(unops: list[nat]):
            map(LAMBDA (n: nat):
            IF length(Op1) > 0 THEN
            LET level = rem(x!1+1)(n),
                                          			    idx = ndiv(n,x!1+1)
                                          			   IN IF level = x!1 THEN
                                          			         nth(Op1,rem(length(Op1))(idx))
                                          			      ELSE
                                          			
                                                                 (LAMBDA (i: nat):
                                                                    choose({a: nat |
                                                                              semantic_rel(codings
                                                                                           (level,idx),
                                                                                           i,
                                                                                           a)})) eNDIF
            ELSE
                                LET level = rem(x!1)(n),
                                          			    idx = ndiv(n,x!1)
                                          			   IN
                                                                 (LAMBDA (i: nat):
                                                                    choose({a: nat |
                                                                              semantic_rel(codings
                                                                                           (level,idx),
                                                                                           i,
                                                                                           a)}))
            ENDIF
            )
                                             (unops))

            ::[list[nat]->list[[nat->nat]]]")
            (("1"
              (name "decoding_for_bunary_lfunc"
                    "(LAMBDA (binops: list[nat]):
         map(LAMBDA (n: nat):
               IF length(Op2) > 0
                 THEN LET level = rem(x!1 + 1)(n), idx = ndiv(n, x!1 + 1)
                        IN
                        IF level = x!1 THEN nth(Op2, rem(length(Op2))(idx))
                        ELSE (LAMBDA (i: [nat,nat]):
                                choose({a: nat
                                        |
                                        semantic_rel
                                        (codings(level, idx), tuple2nat(i), a)}))
                        ENDIF
               ELSE LET level = rem(x!1)(n), idx = ndiv(n, x!1) IN
                      (LAMBDA (i: [nat,nat]):
                         choose({a: nat |
                                   semantic_rel(codings(level, idx),
                                                tuple2nat(i),
                                                a)}))
               ENDIF)
            (binops))::[list[nat]->list[[[nat,nat]->nat]]]")
              (("1"
                (name "fun" "LAMBDA(n_:nat):
                                                 LET (unops_code, n__) = nat2tuple(n_),
                                                    (binops_code, pvs0expr_code) = nat2tuple(n__),
                                                    unops = nat_list_enum(unops_code),
                                                    binops = nat_list_enum(binops_code)
                                                 IN (false_val,
                                                                     decoding_for_unary_lfunc
                                                                         (unops),
                                                                    decoding_for_bunary_lfunc
                                                                         (binops),
                                                               nat2PVS0(pvs0expr_code))")
                (("1" (hide -2 -3)
                  (("1" (hide -3)
                    (("1" (inst 2 "fun")
                      (("1" (replace -1 2 :dir rl :hide? t)
                        (("1" (expand "surjective?")
                          (("1" (skeep 2)
                            (("1" (typepred "y")
                              (("1"
                                (expand "pvs0_level" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace 1 -2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "EXISTS(unop_codes: list[nat]): y`2 = decoding_for_unary_lfunc
                                                                                                                                                                      (unop_codes) ")
                                        (("1"
                                          (skeep -1)
                                          (("1"
                                            (case
                                             "EXISTS(binop_codes: list[nat]): y`3 = decoding_for_bunary_lfunc
                                                                                                                                                                                        (binop_codes) ")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst
                                                 2
                                                 "tuple2nat(nat_list_enum_inv(unop_codes), tuple2nat(nat_list_enum_inv(binop_codes), PVS02nat(y`4)))")
                                                (("1"
                                                  (with-tccs
                                                   (decompose-equality
                                                    2))
                                                  (("1"
                                                    (hide -3 -5 -1 2)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "nat_list_enum_inv_def")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3 -2 -4 2)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "nat2tuple_tuple2nat")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "nat_list_enum_inv_def")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "nat2tuple_tuple2nat")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (rewrite
                                                             "nat2PVS0_inverse")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3 2)
                                              (("2"
                                                (with-tccs
                                                 (name
                                                  "binop_codes"
                                                  "choose({ l:list[nat] |
                                      length(l)=length(y`3) AND
                                     FORALL(i:below(length(l))):
                                       LET op2_code = nth(l,i),
                                    	     op2      = nth(y`3,i)
                                    	 IN
                       IF length(Op2) > 0 THEN
                       IF EXISTS(idx: below(length(Op2))): nth(Op2,idx) = op2 THEN
                                    	      rem(x!1+1)(op2_code) = x!1 AND
                                  	      ndiv(op2_code,x!1+1) < length(Op2) AND
                                    	      nth(Op2,ndiv(op2_code,x!1+1)) = op2
                                    	    ELSE
                                    	      EXISTS(level:below(x!1),p:(pvs0_level(level)),idx:nat):
                                    	       level = rem(x!1+1)(op2_code) AND
                                    	       idx = ndiv(op2_code,x!1+1) AND
                                    	        p = codings(level,idx) AND
                                    	      FORALL(env:[Val,Val]): semantic_rel(p,tuple2nat(env),op2(env))
                                          ENDIF
                       ELSE
                                    	      EXISTS(level:below(x!1),p:(pvs0_level(level)),idx:nat):
                                    	       level = rem(x!1)(op2_code) AND
                                    	       idx = ndiv(op2_code,x!1) AND
                                    	        p = codings(level,idx) AND
                                    	      FORALL(env:[Val,Val]): semantic_rel(p,tuple2nat(env),op2(env))
                       ENDIF
                       })"))
                                                (("1"
                                                  (inst
                                                   1
                                                   "binop_codes")
                                                  (("1"
                                                    (case
                                                     "y`3 = decoding_for_bunary_lfunc
                                                                                                                      (binop_codes)")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "list_extensionality[[[nat,nat]->nat]]")
                                                        (("2"
                                                          (inst?
                                                           -1
                                                           :where
                                                           1)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (case
                                                               "length(y`3) = length(decoding_for_bunary_lfunc(binop_codes))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skolem
                                                                   1
                                                                   "i")
                                                                  (("1"
                                                                    (expand
                                                                     "decoding_for_bunary_lfunc")
                                                                    (("1"
                                                                      (with-tccs
                                                                       (rewrite
                                                                        "map_nth_rw"
                                                                        1))
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (typepred
                                                                           "binop_codes")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "i")
                                                                            (("1"
                                                                              (split
                                                                               -3)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (case
                                                                                             "ndiv(nth(binop_codes, i), 1 + x!1) = rem(length(Op2))(ndiv(nth(binop_codes, i), 1 + x!1))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "rem_mod2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (skeep
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (decompose-equality
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "choose({a: nat | semantic_rel(p, tuple2nat(x!2,x!3), a)})")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "deterministic")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "nth(y`3, i)(x!2,x!3)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -5)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (postpone)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (postpone)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep
                                                                                     -1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           2)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "choose({a: nat | semantic_rel(p, tuple2nat(x!2,x!3), a)})")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "deterministic")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "nth(y`3, i)(x!2,x!3)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -5)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (skeep* :preds? t)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -1 -3)
                                            (("2"
                                              (with-tccs
                                               (name
                                                "unop_codes"
                                                "choose({ l:list[nat] |
                                    length(l)=length(y`2) AND
                                   FORALL(i:below(length(l))):
                                     LET op1_code = nth(l,i),
                                  	     op1      = nth(y`2,i)
                                  	 IN
                     IF length(Op1) > 0 THEN
                     IF EXISTS(idx: below(length(Op1))): nth(Op1,idx) = op1 THEN
                                  	      rem(x!1+1)(op1_code) = x!1 AND
                                	      ndiv(op1_code,x!1+1) < length(Op1) AND
                                  	      nth(Op1,ndiv(op1_code,x!1+1)) = op1
                                  	    ELSE
                                  	      EXISTS(level:below(x!1),p:(pvs0_level(level)),idx:nat):
                                  	       level = rem(x!1+1)(op1_code) AND
                                  	       idx = ndiv(op1_code,x!1+1) AND
                                  	        p = codings(level,idx) AND
                                  	      FORALL(env:Val): semantic_rel(p,env,op1(env))
                                        ENDIF
                     ELSE
                                  	      EXISTS(level:below(x!1),p:(pvs0_level(level)),idx:nat):
                                  	       level = rem(x!1)(op1_code) AND
                                  	       idx = ndiv(op1_code,x!1) AND
                                  	        p = codings(level,idx) AND
                                  	      FORALL(env:Val): semantic_rel(p,env,op1(env))
                     ENDIF
                     })"))
                                              (("1"
                                                (inst 1 "unop_codes")
                                                (("1"
                                                  (case
                                                   "y`2 = decoding_for_unary_lfunc
                                                                                                                    (unop_codes)")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "list_extensionality[[nat->nat]]")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         :where
                                                         1)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (case
                                                             "length(y`2) = length(decoding_for_unary_lfunc(unop_codes))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skolem
                                                                 1
                                                                 "i")
                                                                (("1"
                                                                  (expand
                                                                   "decoding_for_unary_lfunc")
                                                                  (("1"
                                                                    (with-tccs
                                                                     (rewrite
                                                                      "map_nth_rw"
                                                                      1))
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "unop_codes")
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "i")
                                                                          (("1"
                                                                            (split
                                                                             -3)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -4
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (case
                                                                                           "ndiv(nth(unop_codes, i), 1 + x!1) = rem(length(Op1))(ndiv(nth(unop_codes, i), 1 + x!1))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "rem_mod2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               2)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "choose({a: nat | semantic_rel(p, x!2, a)})")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "deterministic")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "nth(y`2, i)(x!2)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -5)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         2)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "choose({a: nat | semantic_rel(p, x!2, a)})")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "deterministic")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "nth(y`2, i)(x!2)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?
                                                                                                     -5)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (postpone) nil nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (skeep* :preds? t)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil)
               ("4" (assert) nil nil) ("5" (postpone) nil nil)
               ("6" (postpone) nil nil) ("7" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil) ("5" (postpone) nil nil)
             ("6" (postpone) nil nil) ("7" (postpone) nil nil))
            nil))
          nil)
         ("2"
          (name "set_of_functions"
                "LAMBDA(n:below(x!1)): choose({f: [nat -> (pvs0_level(n))] | surjective?(f)})")
          (("1"
            (name "codings"
                  "LAMBDA(level:below(x!1), idx:nat): set_of_functions(level)(idx)")
            (("1" (inst 1 "codings")
              (("1" (skeep 1)
                (("1" (split 1)
                  (("1" (skeep) (("1" (assert) nil nil)) nil)
                   ("2" (expand "codings")
                    (("2" (expand "set_of_functions")
                      (("2"
                        (typepred
                         "choose({f: [nat -> (pvs0_level(level))] |
                              surjective?(f)})")
                        (("1" (expand "surjective?")
                          (("1" (skeep 1)
                            (("1" (inst -1 "y_1")
                              (("1" (postpone) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (1 -1))
            (("2" (skeep :preds? t)
              (("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst -3 "n")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (level_surjective-3 "new definition for pvs0_level" 3716021898
   ("" (measure-induct+ "n" "n")
    (("" (case "x!1=0")
      (("1"
        (inst 1 "lambda(n: nat): (false_val, Op1, Op2, nat2PVS0(n))")
        (("1" (expand "surjective?")
          (("1" (skeep)
            (("1" (inst 1 "PVS02nat(y`4)")
              (("1" (rewrite "nat2PVS0_inverse")
                (("1" (typepred "y")
                  (("1" (replace -2)
                    (("1" (expand "pvs0_level")
                      (("1" (prop)
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (replace -1)
            (("2" (expand "pvs0_level") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2"
        (case "EXISTS(codings:[[below(x!1),nat]->PVS0]): FORALL(level:below(x!1)): (FORALL(n:nat): pvs0_level(level)(codings(level,n)) ) AND surjective?(LAMBDA(n:nat):codings(level,n))")
        (("1" (skeep -1)
          (("1"
            (with-tccs
             (name "decoding_for_unary_lfunc"
                   "(LAMBDA(unops: list[nat]):  map(LAMBDA (n: nat):
                                        LET level = rem(n)(x!1+1),
                  			    idx = ndiv(n,x!1+1)
                  			   IN IF level = x!1 THEN
                  			         nth(Op1,idx)
                  			      ELSE
                  			
                                         (LAMBDA (i: nat):
                                            choose({a: nat |
                                                      semantic_rel(codings
                                                                   (level,idx),
                                                                   i,
                                                                   a)})) eNDIF )
                     (unops))::[list[nat]->list[[nat->nat]]]"))
            (("1"
              (name "decoding_for_bunary_lfunc"
                    "(LAMBDA(binops: list[nat]):map(LAMBDA(n:nat):
                                             (LAMBDA(k,m:nat): choose({a:nat|
                                          LET (level,idx) = (rem(n)(x!1), ndiv(n,x!1))
                                          IN semantic_rel(codings(level,idx),tuple2nat(k,m),a)})))(binops))::[list[nat]->list[[[nat,nat]->nat]]]")
              (("1"
                (name "fun" "LAMBDA(n_:nat):
                   LET (unops_code, n__) = nat2tuple(n_),
                      (binops_code, pvs0expr_code) = nat2tuple(n__),
                      unops = nat_list_enum(unops_code),
                      binops = nat_list_enum(binops_code)
                   IN (false_val,
                                       decoding_for_unary_lfunc
                                           (unops),
                                      decoding_for_bunary_lfunc
                                           (binops),
                                 nat2PVS0(pvs0expr_code))")
                (("1" (hide -2 -3)
                  (("1" (hide -3)
                    (("1" (inst 2 "fun")
                      (("1" (replace -1 2 :dir rl :hide? t)
                        (("1" (expand "surjective?")
                          (("1" (skeep 2)
                            (("1" (typepred "y")
                              (("1"
                                (expand "pvs0_level" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace 1 -2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "EXISTS(unop_codes: list[nat]): y`2 = decoding_for_unary_lfunc
                                                                                                                                    (unop_codes) ")
                                        (("1"
                                          (skeep -1)
                                          (("1"
                                            (case
                                             "EXISTS(binop_codes: list[nat]): y`3 = decoding_for_bunary_lfunc
                                                                                                                                                  (binop_codes) ")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst
                                                 2
                                                 "tuple2nat(nat_list_enum_inv(unop_codes), tuple2nat(nat_list_enum_inv(binop_codes), PVS02nat(y`4)))")
                                                (("1"
                                                  (with-tccs
                                                   (decompose-equality
                                                    2))
                                                  (("1"
                                                    (hide -3 -5 -1 2)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "nat_list_enum_inv_def")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3 -2 -4 2)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "nat2tuple_tuple2nat")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "nat_list_enum_inv_def")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "nat2tuple_tuple2nat")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (rewrite
                                                             "nat2PVS0_inverse")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3 2)
                                              (("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -1 -3)
                                            (("2"
                                              (with-tccs
                                               (name
                                                "unop_codes"
                                                "choose({ l:list[nat] |
                          length(l)=length(y`2) AND
                         FORALL(i:below(length(l))):
                           LET op1_code = nth(l,i),
                        	     op1      = nth(y`2,i)
                        	 IN IF EXISTS(idx: below(length(Op1))): nth(Op1,idx) = op1 THEN
                        	      rem(op1_code)(x!1+1) = x!1 AND
				      ndiv(op1_code,x!1+1) < length(Op1) AND
                        	      nth(Op1,ndiv(op1_code,x!1+1)) = op1
                        	    ELSE
                        	      EXISTS(level:below(x!1),p:(pvs0_level(level)),idx:nat):
                        	       level = rem(op1_code)(x!1+1) AND
                        	       idx = ndiv(op1_code,x!1+1) AND
                        	        p = codings(level,idx) AND
                        	      FORALL(env:Val): semantic_rel(p,env,op1(env))
                              ENDIF   })"))
                                              (("1"
                                                (inst 1 "unop_codes")
                                                (("1"
                                                  (case
                                                   "y`2 = decoding_for_unary_lfunc
                                                                          (unop_codes)")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "list_extensionality[[nat->nat]]")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         :where
                                                         1)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (case
                                                             "length(y`2) = length(decoding_for_unary_lfunc(unop_codes))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skolem
                                                                 1
                                                                 "i")
                                                                (("1"
                                                                  (expand
                                                                   "decoding_for_unary_lfunc")
                                                                  (("1"
                                                                    (with-tccs
                                                                     (rewrite
                                                                      "map_nth_rw"
                                                                      1))
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "unop_codes")
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "i")
                                                                          (("1"
                                                                            (split
                                                                             -3)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (skeep
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         2)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "choose({a: nat | semantic_rel(p, x!2, a)})")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "deterministic")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "nth(y`2, i)(x!2)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst?
                                                                                                     -5)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (postpone) nil nil)
                                               ("3" (postpone) nil nil)
                                               ("4" (postpone) nil nil)
                                               ("5"
                                                (hide-all-but 1)
                                                (("5"
                                                  (skeep* :preds? t)
                                                  (("5"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil)
               ("4" (postpone) nil nil) ("5" (postpone) nil nil)
               ("6" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil) ("5" (postpone) nil nil)
             ("6" (postpone) nil nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak)
  (level_surjective-2 "" 3715950940
   ("" (measure-induct+ "n" "n")
    (("" (case "x!1=0")
      (("1"
        (inst 1 "lambda(n: nat): (false_val, Op1, Op2, nat2PVS0(n))")
        (("1" (expand "surjective?")
          (("1" (skeep)
            (("1" (inst 1 "PVS02nat(y`4)")
              (("1" (rewrite "nat2PVS0_inverse")
                (("1" (typepred "y")
                  (("1" (replace -2)
                    (("1" (expand "pvs0_level")
                      (("1" (prop)
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (replace -1)
            (("2" (expand "pvs0_level") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2"
        (case "EXISTS(codings:[[below(x!1),nat]->PVS0]): FORALL(level:below(x!1)): (FORALL(n:nat): pvs0_level(level)(codings(level,n)) ) AND surjective?(LAMBDA(n:nat):codings(level,n))")
        (("1" (skeep -1)
          (("1"
            (with-tccs
             (name "decoding_for_unary_lfunc"
                   "(LAMBDA(unops: list[nat]): map(LAMBDA(n:nat):
                                                                           (LAMBDA(i:nat): choose({a:nat|
                        						     LET (level,idx) = (rem(n)(x!1), ndiv(n,x!1)) IN
                        						       semantic_rel(codings(level,idx),i,a)})))
                                                                         (unops))::[list[nat]->list[[nat->nat]]]"))
            (("1"
              (name "decoding_for_bunary_lfunc"
                    "(LAMBDA(binops: list[nat]):map(LAMBDA(n:nat):
                                                                            (LAMBDA(k,m:nat): choose({a:nat|
                         						      LET (level,idx) = (rem(n)(x!1), ndiv(n,x!1))
                         						      IN semantic_rel(codings(level,idx),tuple2nat(k,m),a)})))(binops))::[list[nat]->list[[[nat,nat]->nat]]]")
              (("1"
                (name "fun" "LAMBDA(n_:nat):
                                                   LET (unops_code, n__) = nat2tuple(n_),
                                                       (binops_code, pvs0expr_code) = nat2tuple(n__),
                                                       unops = nat_list_enum(unops_code),
                                                       binops = nat_list_enum(binops_code)
                                                   IN (false_val, 
                                                                        decoding_for_unary_lfunc
                                                                            (unops),
                                                                  
                                                                       decoding_for_bunary_lfunc
                                                                            (binops),
                                                                  nat2PVS0(pvs0expr_code))")
                (("1" (hide -2 -3)
                  (("1" (hide -3)
                    (("1" (inst 2 "fun")
                      (("1" (replace -1 2 :dir rl :hide? t)
                        (("1" (expand "surjective?")
                          (("1" (skeep 2)
                            (("1" (typepred "y")
                              (("1"
                                (expand "pvs0_level" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace 1 -2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "EXISTS(unop_codes: list[nat]): y`2 = decoding_for_unary_lfunc
                                                                                 (unop_codes) ")
                                        (("1"
                                          (skeep -1)
                                          (("1"
                                            (case
                                             "EXISTS(binop_codes: list[nat]): y`3 = decoding_for_bunary_lfunc
                                                                                         (binop_codes) ")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst
                                                 2
                                                 "tuple2nat(nat_list_enum_inv(unop_codes), tuple2nat(nat_list_enum_inv(binop_codes), PVS02nat(y`4)))")
                                                (("1"
                                                  (with-tccs
                                                   (decompose-equality
                                                    2))
                                                  (("1"
                                                    (hide -3 -5 -1 2)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "nat_list_enum_inv_def")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3 -2 -4 2)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "nat2tuple_tuple2nat")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "nat_list_enum_inv_def")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "nat2tuple_tuple2nat")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "nat2tuple_tuple2nat")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (rewrite
                                                             "nat2PVS0_inverse")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3 2)
                                              (("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -1 -3)
                                            (("2"
                                              (with-tccs
                                               (name
                                                "unop_codes"
                                                "choose({ l:list[nat] |
                                           		        length(l)=length(y`2) AND
                                           			FORALL(i:below(length(l))):
                                           			  EXISTS (level: below(x!1), p: (pvs0_level(level))):
                                           			    level = rem(nth(l,i))(x!1)
                                           			    AND
                                           			    (
                                           			    IF i < length(p`2) THEN nth(y`2, i) = nth(p`2, i)
                                                     ELSE FORALL (env: Val): semantic_rel(p, env, nth(y`2, i)(env))
                                                     ENDIF
                                           			    )
                                           			    AND
                                           			    (
                                           			    EXISTS(idx:nat): codings(level,idx) = p AND  idx = ndiv(nth(l,i),x!1)
                                           			    )
                                           			    })"))
                                              (("1"
                                                (inst 1 "unop_codes")
                                                (("1"
                                                  (case
                                                   "y`2 = map(LAMBDA (n: nat):
                                                                                     (LAMBDA (i: nat):
                                                                                        choose({a: nat |
                                                                                                  semantic_rel(codings
                                                                                                               (rem(n)(x!1),
                                                                                             ndiv(n, x!1)),
                                                                                                               i,
                                                                                                               a)})))
                                                                                  (unop_codes)")
                                                  (("1"
                                                    (expand
                                                     "decoding_for_unary_lfunc")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "list_extensionality[[nat->nat]]")
                                                      (("2"
                                                        (inst?
                                                         -1
                                                         :where
                                                         1)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (case
                                                             "length(y`2) =
                                                           length[[nat->nat]](map(LAMBDA (n: nat):
                                                                        (LAMBDA (i: nat):
                                                                           choose({a: nat |
                                                                                     semantic_rel(codings
                                                                                                  (rem(n)(x!1), ndiv(n, x!1)),
                                                                                                  i,
                                                                                                  a)})))
                                                                     (unop_codes))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skolem
                                                                 1
                                                                 "i")
                                                                (("1"
                                                                  (rewrite
                                                                   "map_nth_rw"
                                                                   1)
                                                                  (("1"
                                                                    (typepred
                                                                     "unop_codes")
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "i")
                                                                      (("1"
                                                                        (hide
                                                                         -5)
                                                                        (("1"
                                                                          (skolem
                                                                           -3
                                                                           ("level_of_unary_i"
                                                                            "unary_i_pvs0"))
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               :dir
                                                                               rl
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (skolem
                                                                                 -4
                                                                                 "unary_i_idx")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -5
                                                                                     :dir
                                                                                     rl
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       1)
                                                                                      (("1"
                                                                                        (split
                                                                                         -3)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "unary_i_pvs0")
                                                                                              (("1"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!2")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "choose({a: nat | semantic_rel(unary_i_pvs0, x!2, a)})")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "deterministic")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "nth(y`2, i)(x!2)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (postpone)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (postpone)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (postpone) nil nil)
                                               ("3" (postpone) nil nil)
                                               ("4" (postpone) nil nil)
                                               ("5"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil)
               ("4" (postpone) nil nil) ("5" (postpone) nil nil)
               ("6" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil) ("5" (postpone) nil nil)
             ("6" (postpone) nil nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak)
  (level_surjective-1 nil 3715530916
   ("" (measure-induct+ "n" "n")
    (("" (case "x!1=0")
      (("1"
        (inst 1 "lambda(n: nat): (false_val, Op1, Op2, nat2PVS0(n))")
        (("1" (expand "surjective?")
          (("1" (skeep)
            (("1" (inst 1 "PVS02nat(y`4)")
              (("1" (rewrite "nat2PVS0_inverse")
                (("1" (typepred "y")
                  (("1" (replace -2)
                    (("1" (expand "pvs0_level")
                      (("1" (prop)
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (replace -1)
            (("2" (expand "pvs0_level") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (case "exists(e : nat): e < x!1")
        (("1" (skeep)
          (("1" (inst -2 "e")
            (("1" (assert)
              (("1" (skeep)
                (("1" (expand "surjective?")
                  (("1"
                    (inst 2
                     "lambda(n:nat): (false_val,append(f(nat2tuple(n)`1)`2, (:lambda(k:nat):choose({a:nat| semantic_rel(f(nat2tuple(n)`1),k,a)}):)),append(f(nat2tuple(n)`1)`3, (:lambda(k,m:nat):choose({a:nat| semantic_rel(f(nat2tuple(n)`1),tuple2nat(k,m),a)}):)),nat2PVS0(nat2tuple(n)`2) ) ")
                    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
                     ("3" (postpone) nil nil) ("4" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst 1 "x!1-1")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (level_surjection_TCC1 0
  (level_surjection_TCC1-1 nil 3717850024
   ("" (skeep)
    (("" (lemma "level_surjective")
      (("" (inst?) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((level_surjective formula-decl nil pvs0_computable nil)
    (surjective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (representantion 0
  (representantion-1 nil 3715513884
   ("" (expand "surjective?")
    ((""
      (inst 1
       "lambda(k: nat): level_surjection(nat2tuple(k)`1)(nat2tuple(k)`2)")
      (("1" (skeep)
        (("1" (typepred "y")
          (("1" (skeep)
            (("1"
              (typepred
               "choose({f: [nat -> (pvs0_level(n))] | surjective?(f)})")
              (("1" (expand "surjective?" -1 1)
                (("1" (inst -1 "y")
                  (("1" (skeep)
                    (("1" (inst 1 "tuple2nat(n,x)")
                      (("1" (rewrite "nat2tuple_tuple2nat")
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma "level_surjective")
                  (("2" (inst?)
                    (("2" (skeep)
                      (("2" (expand "nonempty?")
                        (("2" (expand "empty?")
                          (("2" (inst?) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst 1 "nat2tuple(k)`1") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat2tuple def-decl "[nat, nat]" tuple2nat "numbers/")
    (level_surjection const-decl "[nat -> (pvs0_level(n))]"
     pvs0_computable nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0_partial_recursive type-eq-decl nil pvs0_computable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (n skolem-const-decl "nat" pvs0_computable nil)
    (y skolem-const-decl "PVS0_partial_recursive" pvs0_computable nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (nat2tuple_tuple2nat formula-decl nil tuple2nat "numbers/")
    (level_surjective formula-decl nil pvs0_computable nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (surjective? const-decl "bool" functions nil))
   shostak))
 (pvs0_level_computable_TCC1 0
  (pvs0_level_computable_TCC1-1 nil 3718657985
   ("" (skeep*)
    (("" (typepred "p")
      (("" (expand "pvs0_level_computable") (("" (flatten) nil nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pvs0_level_computable inductive-decl "bool" pvs0_computable nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (pvs0_level_computable_TCC2 0
  (pvs0_level_computable_TCC2-1 nil 3718657985
   ("" (skeep*)
    (("" (typepred "p1")
      (("" (expand "pvs0_level_computable") (("" (flatten) nil nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pvs0_level_computable inductive-decl "bool" pvs0_computable nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (pvs0_level_computable_terminating 0
  (pvs0_level_computable_terminating-1 nil 3718659451
   ("" (skeep :preds? t)
    (("" (expand "pvs0_level_computable") (("" (flatten) nil nil))
      nil))
    nil)
   ((pvs0_level_computable inductive-decl "bool" pvs0_computable nil))
   nil))
 (pvs0_level_computable_n 0
  (pvs0_level_computable_n-1 nil 3718659636
   ("" (induct "n")
    (("1" (skeep :preds? t)
      (("1" (expand "pvs0_level_computable")
        (("1" (expand "pvs0_level")
          (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep :preds? t)
        (("2" (expand "pvs0_level" 1)
          (("2" (expand "pvs0_level_computable" -1)
            (("2" (flatten)
              (("2" (assert)
                (("2" (split)
                  (("1" (hide -4)
                    (("1" (skeep -3 :preds? t)
                      (("1" (inst -6 "p")
                        (("1" (inst 1 "p")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (insteep)
                                (("1"
                                  (ground)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (insteep)
                                      (("1"
                                        (lemma "pvs0_eval_correct")
                                        (("1"
                                          (inst? -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -3)
                    (("2" (skeep)
                      (("2" (inst -5 "p")
                        (("2" (insteep)
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (insteep)
                                (("2"
                                  (ground)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (insteep)
                                      (("2"
                                        (lemma "pvs0_eval_correct")
                                        (("2"
                                          (inst? -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p skolem-const-decl "(pvs0_level_computable(1 + j - 1))"
     pvs0_computable nil)
    (j skolem-const-decl "nat" pvs0_computable nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (pvs0_eval_correct formula-decl nil pvs0_eval nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (p skolem-const-decl "(pvs0_level_computable(1 + j - 1))"
     pvs0_computable nil)
    (tuple2nat const-decl "nat" tuple2nat "numbers/")
    (nat_induction formula-decl nil naturalnumbers nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (pvs0_level_computable inductive-decl "bool" pvs0_computable nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (PVS0_computable_is_terminating 0
  (PVS0_computable_is_terminating-1 nil 3718660496
   ("" (skeep :preds? t)
    (("" (skeep)
      (("" (lemma "pvs0_level_computable_terminating")
        (("" (insteep) nil nil)) nil))
      nil))
    nil)
   ((n skolem-const-decl "nat" pvs0_computable nil)
    (x skolem-const-decl "PVS0_computable" pvs0_computable nil)
    (PVS0_computable type-eq-decl nil pvs0_computable nil)
    (pvs0_level_computable inductive-decl "bool" pvs0_computable nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_level_computable_terminating judgement-tcc nil
     pvs0_computable nil))
   nil))
 (PVS0_computable_is_partial_recursive 0
  (PVS0_computable_is_partial_recursive-1 nil 3718660998
   ("" (skeep :preds? t)
    (("" (skeep)
      (("" (insteep)
        (("" (lemma "pvs0_level_computable_n") (("" (insteep) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_level_computable_n judgement-tcc nil pvs0_computable nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (pvs0_level_computable inductive-decl "bool" pvs0_computable nil)
    (PVS0_computable type-eq-decl nil pvs0_computable nil)
    (x skolem-const-decl "PVS0_computable" pvs0_computable nil)
    (n skolem-const-decl "nat" pvs0_computable nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil)))

