(pvs0_to_ccg
 (pvs0_to_ccg_make_cc_TCC1 0
  (pvs0_to_ccg_make_cc_TCC1-1 nil 3650913537 ("" (subtype-tcc) nil nil)
   nil nil))
 (pvs0_to_ccg_make_cc_TCC2 0
  (pvs0_to_ccg_make_cc_TCC2-1 nil 3650913537
   ("" (skeep)
    (("" (expand "pvs0_to_ccg_vertex")
      (("" (expand "make_cc")
        (("" (typepred "path")
          (("" (hide -1) (("" (apply-extensionality) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_ccg_vertex const-decl "bool" pvs0_to_ccg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (PVS0_rec_extensionality formula-decl nil PVS0_adt nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/"))
   nil))
 (pvs0_to_ccg_paths_vertices_TCC1 0
  (pvs0_to_ccg_paths_vertices_TCC1-1 nil 3650913537
   ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Conditions type-eq-decl nil conditions nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/")
    (pvs0_to_ccg_make_cc const-decl "(pvs0_to_ccg_vertex(def, path))"
     pvs0_to_ccg nil)
    (member def-decl "bool" list_props nil))
   nil))
 (pvs0_to_ccg_paths_vertices_TCC2 0
  (pvs0_to_ccg_paths_vertices_TCC2-1 nil 3650913537
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (pvs0_to_ccg_paths_vertices_TCC3 0
  (pvs0_to_ccg_paths_vertices_TCC3-1 nil 3650913537
   ("" (skeep*)
    (("" (expand "pvs0_to_ccg_verts_")
      (("" (expand "pvs0_to_ccg_make_cc")
        (("" (inst 1 "p")
          (("" (expand "pvs0_to_ccg_vertex")
            (("" (expand "make_cc")
              (("" (apply-extensionality) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/")
    (PVS0_rec_extensionality formula-decl nil PVS0_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (p skolem-const-decl "(valid_path[T](get_body[T](def)))"
     pvs0_to_ccg nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (pvs0_to_ccg_vertex const-decl "bool" pvs0_to_ccg nil)
    (pvs0_to_ccg_make_cc const-decl "(pvs0_to_ccg_vertex(def, path))"
     pvs0_to_ccg nil))
   nil))
 (pvs0_to_ccg_paths_vertices_TCC4 0
  (pvs0_to_ccg_paths_vertices_TCC4-1 nil 3650913537
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (pvs0_to_ccg_paths_vertices_TCC5 0
  (pvs0_to_ccg_paths_vertices_TCC5-1 nil 3650913537
   ("" (skeep*)
    (("" (typepred "p_1")
      (("" (hide -1)
        (("" (typepred "v(def,ps)")
          (("" (hide -1)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (inst -1 "p_1")
                  (("1" (assert) nil nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pvs0_to_ccg_make_cc const-decl "(pvs0_to_ccg_vertex(def, path))"
     pvs0_to_ccg nil)
    (pvs0_to_ccg_vertex const-decl "bool" pvs0_to_ccg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil conditions nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil)
    (paths skolem-const-decl "list[(valid_path(get_body(def)))]"
     pvs0_to_ccg nil)
    (p_1 skolem-const-decl
     "{p_1: (valid_path(get_body(def))) | member(p_1, paths)}"
     pvs0_to_ccg nil)
    (ps skolem-const-decl "list[(valid_path(get_body(def)))]"
        pvs0_to_ccg nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/"))
   nil))
 (pvs0_to_ccg_paths_vertices_TCC6 0
  (pvs0_to_ccg_paths_vertices_TCC6-1 nil 3650913537
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (pvs0_to_ccg_paths_vertices_TCC7 0
  (pvs0_to_ccg_paths_vertices_TCC7-1 nil 3650914999
   ("" (skeep*)
    (("" (typepred "p_1")
      (("" (hide -1)
        (("" (typepred "v(def,ps)")
          (("" (hide -1)
            (("" (inst -1 "p_1")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pvs0_to_ccg_make_cc const-decl "(pvs0_to_ccg_vertex(def, path))"
     pvs0_to_ccg nil)
    (pvs0_to_ccg_vertex const-decl "bool" pvs0_to_ccg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil conditions nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil)
    (paths skolem-const-decl "list[(valid_path(get_body(def)))]"
     pvs0_to_ccg nil)
    (p_1 skolem-const-decl
     "{p_1: (valid_path(get_body(def))) | member(p_1, paths)}"
     pvs0_to_ccg nil)
    (ps skolem-const-decl "list[(valid_path(get_body(def)))]"
        pvs0_to_ccg nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/"))
   nil))
 (pvs0_to_ccg_vertices_list_completeness 0
  (pvs0_to_ccg_vertices_list_completeness-1 nil 3650913582
   ("" (skeep)
    (("" (expand "pvs0_to_ccg_vertices_l")
      (("" (typepred "valid_paths(get_body(def))")
        (("" (hide -1)
          (("" (typepred "cc")
            (("" (expand "pvs0_to_ccg_verts_")
              ((""
                (typepred
                 "pvs0_to_ccg_paths_vertices(def, valid_paths(get_body(def)))")
                (("" (hide -1)
                  (("" (skeep -2)
                    (("" (inst -1 "path")
                      (("1" (expand "pvs0_to_ccg_vertex")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (inst -4 "path")
                              (("1"
                                (case
                                 "pvs0_to_ccg_make_cc(def, path) = cc")
                                (("1"
                                  (replace -1 -2)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (typepred
                                   "pvs0_to_ccg_make_cc(def, path)")
                                  (("2"
                                    (expand "pvs0_to_ccg_vertex")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (apply-extensionality)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "path")
                        (("2" (assert)
                          (("2"
                            (typepred
                             "valid_paths[T](get_body[T](def))")
                            (("2" (inst? -2) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_ccg_vertices_l const-decl
     "list[(pvs0_to_ccg_verts_(def))]" pvs0_to_ccg nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil)
    (path skolem-const-decl "(valid_path(get_body(def)))" pvs0_to_ccg
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (pvs0_to_ccg_vertex const-decl "bool" pvs0_to_ccg nil)
    (pvs0_to_ccg_make_cc const-decl "(pvs0_to_ccg_vertex(def, path))"
     pvs0_to_ccg nil)
    (pvs0_to_ccg_paths_vertices def-decl
     "{res: list[(pvs0_to_ccg_verts_(def))] |
         FORALL (p: (valid_path(get_body(def))) | member(p, paths)):
           rec?(subterm_at(get_body(def), p)) IMPLIES
            member(pvs0_to_ccg_make_cc(def, p), res)}" pvs0_to_ccg nil)
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil conditions nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (member def-decl "bool" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
     nil))
   shostak))
 (pvs0_to_ccg_verts_completeness 0
  (pvs0_to_ccg_verts_completeness-2 "" 3650916255
   ("" (skeep)
    (("" (expand "pvs0_to_ccg_verts")
      (("" (use "pvs0_to_ccg_vertices_list_completeness")
        ((""
          (typepred
           "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
          (("" (replaces -2) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pvs0_to_ccg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_ccg nil)
    (pvs0_to_ccg_vertices_l const-decl
     "list[(pvs0_to_ccg_verts_(def))]" pvs0_to_ccg nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil conditions nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (pvs0_to_ccg_vertices_list_completeness formula-decl nil
     pvs0_to_ccg nil))
   shostak)
  (pvs0_to_ccg_verts_completeness-1 nil 3650899233
   ("" (skeep)
    (("" (typepred "cc")
      (("" (expand "pvs0_to_ccg_verts")
        (("" (assert)
          (("" (expand "pvs0_to_ccg_verts_sl")
            ((""
              (typepred
               "list2set(pvs0_to_ccg_verts_rec(get_body(def), emptyset_sl))")
              (("" (replace -2 :hide? t)
                (("" (assert)
                  ((""
                    (typepred
                     "pvs0_to_ccg_verts_rec(get_body(def), emptyset_sl)")
                    (("" (expand "pvs0_to_ccg_verts_")
                      (("" (flatten)
                        (("" (inst?) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (valid_path def-decl "bool" eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (path_conditions def-decl "Conditions" eval_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (emptyset_sl const-decl "list[T]" set_as_list "structures/")
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Conditions type-eq-decl nil conditions nil)
    (CallingContext type-eq-decl nil cc_def "CCG/"))
   shostak))
 (ccg_vert_valid_cc 0
  (ccg_vert_valid_cc-2 nil 3651273891
   ("" (skeep)
    (("" (use "pvs0_to_ccg_verts_completeness")
      (("" (expand "pvs0_to_ccg_verts")
        (("" (expand "pvs0_to_ccg_vertices_l")
          ((""
            (typepred
             "pvs0_to_ccg_paths_vertices(def, valid_paths(get_body(def)))")
            (("" (hide -1)
              (("" (typepred "ccg_vert")
                (("" (expand "pvs0_to_ccg_verts_")
                  (("" (skeep -1)
                    (("" (inst -2 "path")
                      (("1" (expand "pvs0_to_ccg_vertex")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (typepred
                               "pvs0_ccs_rec[T,MT,lt](def)(valid_paths(get_body(def)))")
                              (("1"
                                (hide -1)
                                (("1"
                                  (inst -1 "path")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (inst
                                         1
                                         "(# `path := path,
                      `rec_expr := subterm_at(get_body(def), path),
                      `cnds := path_conditions(get_body(def), path) #)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "path")
                                        (("2"
                                          (typepred
                                           "valid_paths(get_body(def))")
                                          (("2"
                                            (inst -2 "path")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "valid_paths(get_body(def))")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_ccg_verts_completeness formula-decl nil pvs0_to_ccg nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil conditions nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pvs0_to_ccg_vertices_l const-decl
     "list[(pvs0_to_ccg_verts_(def))]" pvs0_to_ccg nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil)
    (path skolem-const-decl "(valid_path(get_body(def)))" pvs0_to_ccg
     nil)
    (MT formal-type-decl nil pvs0_to_ccg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lt formal-const-decl "(well_founded?[MT])" pvs0_to_ccg nil)
    (PVS0_CC type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_valid_cc const-decl "bool" measure_termination_defs nil)
    (path_conditions def-decl "Conditions" eval_props nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" measure_termination_defs nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" eval_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (pvs0_to_ccg_vertex const-decl "bool" pvs0_to_ccg nil)
    (pvs0_to_ccg_make_cc const-decl "(pvs0_to_ccg_vertex(def, path))"
     pvs0_to_ccg nil)
    (pvs0_to_ccg_paths_vertices def-decl
     "{res: list[(pvs0_to_ccg_verts_(def))] |
         FORALL (p: (valid_path(get_body(def))) | member(p, paths)):
           rec?(subterm_at(get_body(def), p)) IMPLIES
            member(pvs0_to_ccg_make_cc(def, p), res)}" pvs0_to_ccg nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
     nil)
    (pvs0_to_ccg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_ccg nil))
   nil))
 (pvs0_to_ccg_edges_TCC1 0
  (pvs0_to_ccg_edges_TCC1-1 nil 3632750218
   ("" (skeep*)
    ((""
      (lemma
       "finite_pred[[(pvs0_to_ccg_verts(def)),(pvs0_to_ccg_verts(def))]]")
      ((""
        (inst -1
         "LAMBDA(x: [(pvs0_to_ccg_verts(def)), (pvs0_to_ccg_verts(def))]): NOT remove_edge(eval_bool, eval_op1, eval_op2)(def, x`1, x`2)")
        (("" (split -1)
          (("1" (expand "is_finite")
            (("1" (skolem! -1)
              (("1" (inst 1 "N!1" "_")
                (("1"
                  (inst 1
                   "LAMBDA(x: {cc1, cc2:CallingContext[Expr, Conditions, (vr?)] |
                     member[CallingContext[Expr, Conditions, (vr?)]](cc1, pvs0_to_ccg_verts(def)) AND
                      member[CallingContext[Expr, Conditions, (vr?)]](cc2, pvs0_to_ccg_verts(def)) AND                       NOT remove_edge(eval_bool, eval_op1, eval_op2)(def, cc1, cc2)}): f!1(x)")
                  (("1" (expand "injective?")
                    (("1" (skeep)
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "x")
                      (("2" (expand "member") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (use "finite_sets@finite_cross[(pvs0_to_ccg_verts(def)), (pvs0_to_ccg_verts(def))].is_finite_cross")
              (("2"
                (use "finite_full[[(pvs0_to_ccg_verts(def)), (pvs0_to_ccg_verts(def))]]")
                (("2" (assert)
                  (("2" (hide-all-but 2)
                    (("2" (typepred "pvs0_to_ccg_verts(def)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_ccg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_ccg nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil conditions nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (finite_pred formula-decl nil finite_sets nil)
    (eval_op2 skolem-const-decl "[nat -> [[T, T] -> T]]" pvs0_to_ccg
     nil)
    (eval_op1 skolem-const-decl "[nat -> [T -> T]]" pvs0_to_ccg nil)
    (eval_bool skolem-const-decl "[T -> bool]" pvs0_to_ccg nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (is_finite_cross formula-decl nil finite_cross "finite_sets/")
    (is_finite_type const-decl "bool" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
     nil)
    (pvs0_to_ccg_paths_vertices def-decl
     "{res: list[(pvs0_to_ccg_verts_(def))] |
         FORALL (p: (valid_path(get_body(def))) | member(p, paths)):
           rec?(subterm_at(get_body(def), p)) IMPLIES
            member(pvs0_to_ccg_make_cc(def, p), res)}" pvs0_to_ccg nil)
    (pvs0_to_ccg_make_cc const-decl "(pvs0_to_ccg_vertex(def, path))"
     pvs0_to_ccg nil)
    (pvs0_to_ccg_vertex const-decl "bool" pvs0_to_ccg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})"
     eval_props nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (valid_path def-decl "bool" eval_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_to_ccg_vertices_l const-decl
     "list[(pvs0_to_ccg_verts_(def))]" pvs0_to_ccg nil)
    (finite_full formula-decl nil finite_sets nil)
    (remove_edge const-decl "bool" pvs0_to_ccg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (pvs0_to_ccg_dg_TCC1 0
  (pvs0_to_ccg_dg_TCC1-1 nil 3602937625 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (pvs0_to_ccg_vertices_l const-decl
     "list[(pvs0_to_ccg_verts_(def))]" pvs0_to_ccg nil)
    (pvs0_to_ccg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_ccg nil)
    (member const-decl "bool" sets nil)
    (eval_conds const-decl "bool" conditions nil)
    (remove_edge const-decl "bool" pvs0_to_ccg nil)
    (pvs0_to_ccg_edges const-decl
     "finite_set[[CallingContext, CallingContext]]" pvs0_to_ccg nil))
   nil))
 (R_wf 0
  (R_wf-1 nil 3647278093
   ("" (skeep)
    (("" (expand "scp_termination_pvs0")
      (("" (expand "scp_termination?")
        (("" (use "no_infinite_descending_sequence")
          (("" (assert)
            (("" (hide 2)
              (("" (expand "empty?")
                (("" (skolem 1 "vals")
                  (("" (expand "member")
                    (("" (expand "descending?")
                      (("" (expand "R")
                        ((""
                          (name "ccs_seq"
                                "LAMBDA(i: nat): epsilon({cc: (pvs0_to_ccg_verts_(def)) |
          eval_conds(eval_bool, eval_op1, eval_op2)
                    (def, cc`conds, LAMBDA (v: (vr?[Val[T]])): vals(i))
           AND
           semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                            (cc`actuals, get_body(def),
                             LAMBDA (v: (vr?[Val[T]])): vals(i),
                             vals(1 + i))})")
                          (("1" (inst -3 "ccs_seq" "vals")
                            (("1" (expand "infinite_seq_ccs")
                              (("1"
                                (skeep)
                                (("1"
                                  (replaces -1 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "epsilon_ax[(pvs0_to_ccg_verts_(def))]")
                                      (("1"
                                        (inst -2 "i")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -1 "0")
                            (("2" (skeep) (("2" (inst 1 "cc") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_termination_pvs0 const-decl "bool" pvs0_to_ccg nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness
     "orders/")
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (Val type-eq-decl nil lang nil)
    (R const-decl "bool" pvs0_to_ccg nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (descending? const-decl "bool" monotone_sequences "orders/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (sequence type-eq-decl nil sequences nil)
    (eval_conds const-decl "bool" conditions nil)
    (Environment type-eq-decl nil lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil conditions nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (epsilon_ax formula-decl nil epsilons nil)
    (seq_val type-eq-decl nil scp "CCG/")
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (scp_termination? const-decl "bool" scp "CCG/"))
   shostak))
 (R_no_desc_inf_branch 0
  (R_no_desc_inf_branch-1 nil 3647272140
   ("" (skeep)
    ((""
      (case "empty?({y: Val[T] | R(eval_bool, eval_op1, eval_op2)(def)(y, x)})")
      (("1" (use " finite_emptyset[Val]")
        (("1" (use "emptyset_is_empty?[Val]") (("1" (assert) nil nil))
          nil))
        nil)
       ("2"
        (name "n_ccs"
              "length[CallingContext](pvs0_to_ccg_vertices_l(def))")
        (("2" (case "EXISTS (x: below(n_ccs)): TRUE")
          (("1" (expand "is_finite")
            (("1"
              (inst 2 "n_ccs"
               "LAMBDA(y:Val | R(eval_bool, eval_op1, eval_op2)(def)(y, x)):
                      epsilon({n:below(n_ccs) |
             	     LET cc = nth[CallingContext](pvs0_to_ccg_vertices_l(def), n)
             	     IN semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                                              (cc`actuals, get_body(def), val2env(x), y)  })")
              (("1" (expand "injective?")
                (("1" (skeep)
                  (("1" (lemma "epsilon_ax[below(n_ccs)]")
                    (("1" (inst? -1 :where -4)
                      (("1" (split -1)
                        (("1"
                          (name-replace "n1"
                           (typechecked "epsilon({n: below(n_ccs) |
           semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                            (nth[CallingContext](pvs0_to_ccg_vertices_l(def), n)`actuals,
                             get_body(def), LAMBDA (v: (vr?[Val[T]])): x, x1)})"
                            "below(n_ccs)"))
                          (("1" (lemma "epsilon_ax[below(n_ccs)]")
                            (("1" (inst? -1 :where -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (name-replace
                                   "n2"
                                   (typechecked
                                    "epsilon({n: below(n_ccs) |
           semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                            (nth[CallingContext](pvs0_to_ccg_vertices_l(def), n)`actuals,
                             get_body(def), LAMBDA (v: (vr?[Val[T]])): x, x2)})"
                                    "below(n_ccs)"))
                                  (("1"
                                    (replaces -5 :dir RL)
                                    (("1"
                                      (name-replace
                                       "e1"
                                       (typechecked
                                        "nth(pvs0_to_ccg_vertices_l(def), n1)`actuals"
                                        "Expr[Val[T]]"))
                                      (("1"
                                        (lemma "deterministic_expr")
                                        (("1"
                                          (inst? -1 :where 2)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "R")
                                    (("2"
                                      (skolem -1 "cc")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "pvs0_to_ccg_verts_completeness")
                                          (("2"
                                            (case
                                             "EXISTS(n2:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n2) = cc")
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst 1 "n2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (use
                                                 "member_nth[CCG@cc_def
                                                                    [Expr, conditions[T].Conditions,
                                                                     (vr?)].CallingContext]")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "pvs0_to_ccg_verts")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (typepred
                                                         "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                        (("2"
                                                          (replaces -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep :preds? t)
                                              (("3"
                                                (replace
                                                 -7
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (replace -4 :dir rl :hide? t)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1")
                          (("2" (expand "R")
                            (("2" (skolem -1 "cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (use
                                   "pvs0_to_ccg_verts_completeness")
                                  (("2"
                                    (case
                                     "EXISTS(n1:below(n_ccs)): nth[CallingContext](pvs0_to_ccg_vertices_l(def),n1) = cc")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst 1 "n1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 -5 1))
                                      (("2"
                                        (use
                                         "member_nth[CCG@cc_def
                                                            [Expr, conditions[T].Conditions,
                                                             (vr?)].CallingContext]")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (replace
                                                   -4
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand
                                               "pvs0_to_ccg_verts")
                                              (("2"
                                                (typepred
                                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep :preds? t)
                                      (("3"
                                        (replace -6 :dir rl :hide? t)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep :preds? t)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) nil nil)
               ("3" (skeep :preds? t)
                (("3" (replace -4 :dir rl :hide? t)
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "0")
            (("2" (expand "empty?")
              (("2" (skolem 2 "x_")
                (("2" (expand "member")
                  (("2" (expand "R")
                    (("2" (skeep)
                      (("2" (use "pvs0_to_ccg_verts_completeness")
                        (("2" (replaces -2 :dir RL)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "pvs0_to_ccg_verts")
                              (("2"
                                (typepred
                                 "list2set[CallingContext](pvs0_to_ccg_vertices_l(def))")
                                (("2"
                                  (replaces -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "member_null[CallingContext]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R const-decl "bool" pvs0_to_ccg nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" set_as_list
     "structures/")
    (finite_emptyset name-judgement "finite_set[T]" set_as_list_props
     "structures/")
    (finite_emptyset judgement-tcc nil finite_sets nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (n_ccs skolem-const-decl "nat" pvs0_to_ccg nil)
    (x skolem-const-decl "Val[T]" pvs0_to_ccg nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil)
    (eval_op2 skolem-const-decl "[nat -> [[T, T] -> T]]" pvs0_to_ccg
     nil)
    (eval_op1 skolem-const-decl "[nat -> [T -> T]]" pvs0_to_ccg nil)
    (eval_bool skolem-const-decl "[T -> bool]" pvs0_to_ccg nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (Environment type-eq-decl nil lang nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (nth def-decl "T" list_props nil)
    (i skolem-const-decl "below(length(pvs0_to_ccg_vertices_l(def)))"
     pvs0_to_ccg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pvs0_to_ccg_verts_completeness formula-decl nil pvs0_to_ccg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "below(length(pvs0_to_ccg_vertices_l(def)))"
     pvs0_to_ccg nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (pvs0_to_ccg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_ccg nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (deterministic_expr formula-decl nil lang nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil)
    (member_null formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil conditions nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (length def-decl "nat" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (pvs0_to_ccg_vertices_l const-decl
     "list[(pvs0_to_ccg_verts_(def))]" pvs0_to_ccg nil))
   nil))
 (scp_tcc_termination_lr_TCC1 0
  (scp_tcc_termination_lr_TCC1-1 nil 3647183898
   ("" (skeep*)
    (("" (use "wf_nat")
      (("" (expand "restrict") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((wf_nat formula-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (scp_tcc_termination_lr 0
  (scp_tcc_termination_lr-1 nil 3647181633
   ("" (skeep*)
    (("" (expand "pvs0_tcc_termination")
      ((""
        (inst 1 "wfm[Val,R(eval_bool,eval_op1,eval_op2)(def)].Omega")
        (("1" (skeep*)
          (("1"
            (use "omega_increasing[Val, R(eval_bool, eval_op1, eval_op2)(def)]")
            (("1" (hide 2)
              (("1" (expand "R")
                (("1" (expand "eval_conds")
                  (("1"
                    (case "env = LAMBDA (v: (vr?[Val[T]])): env(vr[Val[T]])")
                    (("1" (replaces -1 :dir rl)
                      (("1"
                        (inst 1
                         "(# formals := vr, actuals := get_arg(cc`rec_expr) , conds := cc`cnds  #)")
                        (("1" (assert) nil nil)
                         ("2" (expand "pvs0_to_ccg_verts_")
                          (("2" (typepred "cc")
                            (("2" (expand "pvs0_tcc_valid_cc")
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "rec(get_arg[T](cc`rec_expr)) = cc`rec_expr")
                                  (("1"
                                    (inst 1 "cc`path")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "pvs0_to_ccg_vertex")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply-extensionality)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (apply-extensionality) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (use "R_no_desc_inf_branch") nil nil))
              nil)
             ("3" (hide 2)
              (("3" (use "R_wf") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (use "R_no_desc_inf_branch") nil nil)
         ("3" (use "R_wf") (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (R_wf formula-decl nil pvs0_to_ccg nil)
    (R_no_desc_inf_branch formula-decl nil pvs0_to_ccg nil)
    (eval_conds const-decl "bool" conditions nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (pvs0_to_ccg_vertex const-decl "bool" pvs0_to_ccg nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (valid_path def-decl "bool" eval_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (PVS0_rec_extensionality formula-decl nil PVS0_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cc skolem-const-decl "(pvs0_tcc_valid_cc(def))" pvs0_to_ccg nil)
    (pvs0_tcc_valid_cc const-decl "bool" measure_termination_defs nil)
    (PVS0_CC type-eq-decl nil measure_termination_defs nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil conditions nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (Environment type-eq-decl nil lang nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vact skolem-const-decl "Val[T]" pvs0_to_ccg nil)
    (env skolem-const-decl "Environment[T]" pvs0_to_ccg nil)
    (omega_increasing formula-decl nil wfm nil)
    (Omega const-decl "nat" wfm nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (Val type-eq-decl nil lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (R const-decl "bool" pvs0_to_ccg nil)
    (eval_bool skolem-const-decl "[T -> bool]" pvs0_to_ccg nil)
    (eval_op1 skolem-const-decl "[nat -> [T -> T]]" pvs0_to_ccg nil)
    (eval_op2 skolem-const-decl "[nat -> [[T, T] -> T]]" pvs0_to_ccg
     nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil))
   shostak))
 (scp_tcc_termination_rl 0
  (scp_tcc_termination_rl-2 nil 3651273971
   ("" (skeep)
    (("" (expand "pvs0_tcc_termination")
      ((""
        (use "scp_termination[Val,Expr,Conditions,(vr?),[nat->(pvs0_to_ccg_verts_(def))]]")
        ((""
          (inst -1
           "LAMBDA(expr:Expr[Val[T]],env:[(vr?)->Val[T]],val:Val[T]):
            semantic_rel_expr (eval_bool,eval_op1,eval_op2) (expr,get_body(def),env,val)"
           "      LAMBDA(conds:Conditions,env:[(vr?)->Val]):
            eval_conds(eval_bool,eval_op1,eval_op2)(def,conds,env)")
          (("" (expand "scp_termination_pvs0")
            (("" (assert)
              (("" (hide 2)
                (("" (skeep)
                  (("" (expand "infinite_seq_ccs")
                    (("" (skeep -2)
                      ((""
                        (inst 1
                         "lt_val[T,MT,lt](eval_bool, eval_op1, eval_op2)
            (def)(wfm)")
                        (("1" (skeep 1)
                          (("1" (expand "lt_val")
                            (("1" (inst -1 "i")
                              (("1"
                                (flatten)
                                (("1"
                                  (use "ccg_vert_valid_cc")
                                  (("1"
                                    (skeep -1)
                                    (("1"
                                      (inst 1 "cc")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "eval_conds")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -5
                                               "LAMBDA(v:(vr?)): vals(i)")
                                              (("1"
                                                (inst -5 "cc")
                                                (("1"
                                                  (inst -5 "vals(1+i)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "lt_val_wf[T,MT,lt]") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (Environment type-eq-decl nil lang nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (eval_conds const-decl "bool" conditions nil)
    (lt_val_wf formula-decl nil measure_termination nil)
    (ccg_vert_valid_cc formula-decl nil pvs0_to_ccg nil)
    (pvs0_tcc_valid_cc const-decl "bool" measure_termination_defs nil)
    (PVS0_CC type-eq-decl nil measure_termination_defs nil)
    (seq_val type-eq-decl nil scp "CCG/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wfm skolem-const-decl "WFM[T, MT, lt]" pvs0_to_ccg nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil)
    (eval_op2 skolem-const-decl "[nat -> [[T, T] -> T]]" pvs0_to_ccg
     nil)
    (eval_op1 skolem-const-decl "[nat -> [T -> T]]" pvs0_to_ccg nil)
    (eval_bool skolem-const-decl "[T -> bool]" pvs0_to_ccg nil)
    (lt_val const-decl "bool" measure_termination nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (lt formal-const-decl "(well_founded?[MT])" pvs0_to_ccg nil)
    (MT formal-type-decl nil pvs0_to_ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (scp_termination_pvs0 const-decl "bool" pvs0_to_ccg nil)
    (pvs0_to_ccg_verts_ const-decl "bool" pvs0_to_ccg nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Conditions type-eq-decl nil conditions nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (scp_termination formula-decl nil scp "CCG/"))
   nil))
 (scp_termination_terminates_lr 0
  (scp_termination_terminates_lr-1 nil 3647279486
   ("" (skeep)
    (("" (use "scp_tcc_termination_lr")
      (("" (assert)
        (("" (use "pvs0_termination_terminates[T,nat,<]")
          (("1" (assert) nil nil)
           ("2" (use "wf_nat")
            (("2" (assert)
              (("2" (expand "restrict") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_tcc_termination_lr formula-decl nil pvs0_to_ccg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (pvs0_termination_terminates formula-decl nil measure_termination
     nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   shostak)))

