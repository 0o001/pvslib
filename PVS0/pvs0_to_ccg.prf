(pvs0_to_ccg
 (IMP_ccg_def_TCC1 0
  (IMP_ccg_def_TCC1-1 nil 3653212889
   ("" (expand "lt") (("" (rewrite "wf_nat") nil nil)) nil)
   ((wf_nat formula-decl nil naturalnumbers nil)) nil))
 (scp_implies_ccg_pvs0 0
  (scp_implies_ccg_pvs0-1 nil 3653213217
   ("" (skeep)
    (("" (expand "scp_termination_pvs0")
      (("" (expand "ccg_termination_pvs0")
        ((""
          (lemma
           "scp_implies_ccg_termination[Val,PVS0Expr,Conditions,(cc_of_pvs0(def)),semantic_relation(def),eval_conditions(def)]")
          (("1"
            (inst -1 "pvs0_to_dg(eval_bool, eval_op1, eval_op2)(def)")
            (("1" (hide 2)
              (("1" (hide -1)
                (("1" (expand "subset?")
                  (("1" (expand "member")
                    (("1" (expand "pvs0_to_dg")
                      (("1" (use "cc_of_pvs0_soundness")
                        (("1" (skeep) (("1" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 2)
            (("2" (skeep)
              (("2" (expand "is_finite")
                (("2"
                  (inst 1 "1" "LAMBDA(w: ({w: Val[T] |
                     semantic_rel_expr[T]
                         (eval_bool, eval_op1, eval_op2)
                         (expr, get_body[Val[T]](def),
                          LAMBDA (v_1: (vr?[Val[T]])): v, w)})): 0")
                  (("2" (expand "injective?")
                    (("2" (skeep :preds? t)
                      (("2" (use "deterministic_expr")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (propax) nil nil)
           ("4" (hide -1 2)
            (("4" (lemma "finite_subset[CallingContext]")
              (("4"
                (inst -1 "pvs0_to_dg_verts(def)"
                 "(cc_of_pvs0[T](def))")
                (("4" (assert)
                  (("4" (hide 2)
                    (("4" (expand "subset?")
                      (("4" (expand "member")
                        (("4" (use "cc_of_pvs0_completeness")
                          (("4" (skeep) (("4" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil)
    (eval_conds const-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> PVS0Expr]" PVS0_adt nil)
    (eval_op2 formal-const-decl "[nat -> [[T, T] -> T]]" pvs0_to_ccg
     nil)
    (eval_op1 formal-const-decl "[nat -> [T -> T]]" pvs0_to_ccg nil)
    (eval_bool formal-const-decl "[T -> bool]" pvs0_to_ccg nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (Val type-eq-decl nil lang nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Conditions type-eq-decl nil lang nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (PVS0Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (scp_implies_ccg_termination formula-decl nil scp_to_ccg_alt
     "CCG/")
    (scp_termination? const-decl "bool" scp "CCG/")
    (PRED type-eq-decl nil defined_types nil)
    (Val type-eq-decl nil cc_def "CCG/")
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil)
    (x skolem-const-decl "CallingContext[Val, PVS0Expr, Conditions]"
     pvs0_to_ccg nil)
    (cc_of_pvs0_soundness formula-decl nil pvs0_to_dg nil)
    (member const-decl "bool" sets nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_ccg nil)
    (pvs0_to_dg const-decl "digraph" pvs0_to_dg nil)
    (Graph_cc type-eq-decl nil scp_to_ccg_alt "CCG/")
    (subset? const-decl "bool" sets nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (deterministic_expr formula-decl nil lang nil)
    (injective? const-decl "bool" functions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (cc_of_pvs0_completeness formula-decl nil pvs0_to_dg nil)
    (x skolem-const-decl "CallingContext[Val, PVS0Expr, Conditions]"
     pvs0_to_ccg nil)
    (ccg_termination_pvs0 const-decl "bool" pvs0_to_ccg nil))
   shostak))
 (pvs0_tcc_implies_ccg_TCC1 0
  (pvs0_tcc_implies_ccg_TCC1-1 nil 3653212889
   ("" (expand "restrict") (("" (rewrite "wf_nat") nil nil)) nil)
   ((wf_nat formula-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (pvs0_tcc_implies_ccg 0
  (pvs0_tcc_implies_ccg-1 nil 3653213914
   ("" (skeep)
    (("" (use "pvs0_tcc_implies_scp")
      (("" (assert) (("" (rewrite "scp_implies_ccg_pvs0") nil nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_implies_scp formula-decl nil scp_iff_pvs0 nil)
    (T formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (eval_bool formal-const-decl "[T -> bool]" pvs0_to_ccg nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval_op1 formal-const-decl "[nat -> [T -> T]]" pvs0_to_ccg nil)
    (eval_op2 formal-const-decl "[nat -> [[T, T] -> T]]" pvs0_to_ccg
     nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (scp_implies_ccg_pvs0 formula-decl nil pvs0_to_ccg nil))
   shostak)))

