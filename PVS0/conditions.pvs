conditions[T: TYPE+]: THEORY
BEGIN

  IMPORTING lang[T], BoolPVS0[T]

  Conditions : TYPE = list[BoolPVS0[T]]

              eval_bool : VAR [T -> bool]
               eval_op1 : VAR [nat->[T->T]]
               eval_op2 : VAR [nat->[[T,T]->T]]

% ------------------------------------------------------------------------------- %
% functions to evaluate the conditions

  eval_conds_rec(eval_bool,eval_op1,eval_op2)
                (body:Expr,cnds:Conditions,env:Environment) : RECURSIVE bool =
    CASES cnds OF
      null : TRUE,
      cons(a,q) : CASES a OF
                   pvsbool(expr) : EXISTS (val:Val):
                      semantic_rel_expr(eval_bool,eval_op1,eval_op2)
                                       (expr,body,env,val)
                      AND eval_bool(val), 
                   pvsnot(expr) : EXISTS (val:Val) :
                      semantic_rel_expr(eval_bool,eval_op1,eval_op2)
                                       (expr,body,env,val)
                      AND NOT eval_bool(val)
                  ENDCASES AND 
                  eval_conds_rec(eval_bool,eval_op1,eval_op2)(body,q,env)
    ENDCASES
  MEASURE cnds BY <<
    
  eval_conds(eval_bool,eval_op1,eval_op2)
            (def:Def,cnds:Conditions,env:Environment) : bool =  
    eval_conds_rec(eval_bool,eval_op1,eval_op2)(get_body(def),cnds,env)



END conditions
