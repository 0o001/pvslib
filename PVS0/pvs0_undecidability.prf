(pvs0_undecidability
 (to_PVS0 0
  (to_PVS0-1 nil 3666648926 ("" (postpone) nil nil) nil shostak))
 (to_PVS0_TCC1 0
  (to_PVS0_TCC1-1 nil 3666356880
   ("" (lemma "to_PVS0") (("" (skeep) (("" (inst?) nil nil)) nil)) nil)
   ((T formal-nonempty-type-decl nil pvs0_undecidability nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (surjective? const-decl "bool" functions nil)
    (f skolem-const-decl "[T -> PVS0[[T, T]]]" pvs0_undecidability nil)
    (to_PVS0 formula-decl nil pvs0_undecidability nil))
   nil))
 (another_TCC1 0
  (another_TCC1-2 nil 3666811415
   ("" (skolem 1 "v")
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (expand "member")
          ((""
            (name "f1"
                  "(v,LAMBDA(n:nat)(v:Val):v,LAMBDA(n:nat)(v1,v2:Val):v1,vr)")
            ((""
              (name "f2"
                    "(v,LAMBDA(n:nat)(v:Val):v,LAMBDA(n:nat)(v1,v2:Val):v1,op1(0,vr))")
              (("" (case "f1 = f2")
                (("1" (replaces (-2 -3) :dir rl)
                  (("1" (decompose-equality) nil nil)) nil)
                 ("2" (hide -1 -2)
                  (("2" (inst-cp -1 "(from_PVS0(f1),from_PVS0(f2))")
                    (("2" (inst -1 "(from_PVS0(f2),from_PVS0(f1))")
                      (("2" (flatten)
                        (("2" (replaces -1 :dir rl)
                          (("2" (decompose-equality -1)
                            (("2" (typepred "from_PVS0")
                              (("2"
                                (expand "injective?")
                                (("2"
                                  (inst -1 "f1" "f2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (injective? const-decl "bool" functions nil)
    (from_PVS0 const-decl "(injective?[PVS0, T])" pvs0_undecidability
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_undecidability nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (empty? const-decl "bool" sets nil))
   nil)
  (another_TCC1-1 nil 3666811360 ("" (subtype-tcc) nil nil) nil nil))
 (to_Val_TCC1 0
  (to_Val_TCC1-1 nil 3666810952
   ("" (lemma "to_Val")
    (("" (skeep)
      (("" (inst 1 "f")
        (("" (expand "bijective?") (("" (flatten) nil nil)) nil)) nil))
      nil))
    nil)
   ((f skolem-const-decl "[T -> Val[[T, T]]]" pvs0_undecidability nil)
    (surjective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_undecidability nil)
    (to_Val formula-decl nil pvs0_undecidability nil))
   nil))
 (pvs0_undecidability 0
  (pvs0_undecidability-1 nil 3666816836
   ("" (skeep*)
    (("" (name "TTrue" "another(TFalse)")
      (("" (hide -1)
        ((""
          (name "ff"
                "(TFalse,LAMBDA(n:nat):LAMBDA(v:Val):IF semantic_rel(f,(v`1,from_Val(v)),TTrue) THEN TTrue ELSE TFalse ENDIF,LAMBDA(n:nat):LAMBDA(v1,v2:Val):v1,ite(op1(0,vr),rec(vr),cnst(TTrue)))")
          (("" (hide -1)
            (("" (name "eff" "from_PVS0(ff)")
              (("" (inst - "ff" "(eff,eff)")
                (("" (replaces -1)
                  ((""
                    (case "semantic_rel(f, (eff, from_Val(eff, eff)), TTrue)")
                    (("1" (assert)
                      (("1" (expand "TTrue")
                        (("1" (assert)
                          (("1" (lemma "mu_terminates")
                            (("1" (inst -1 "ff" "(eff,eff)")
                              (("1"
                                (skoletin* -1)
                                (("1"
                                  (expand "eval")
                                  (("1"
                                    (expand "ff" -2 (4 5))
                                    (("1"
                                      (expand "eval_expr")
                                      (("1"
                                        (case-replace "mun = 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (name
                                                   "EE"
                                                   "eval_expr(ff`1, ff`2, ff`3)
                                                                                                                               (mun, op1(0, vr),
                                                                                                                                ite(op1(0, vr), rec(vr), cnst(TTrue)),
                                                                                                                                (eff, eff))")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand
                                                       "ff"
                                                       -3
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "eval_expr"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "ff"
                                                           -1
                                                           4)
                                                          (("1"
                                                            (expand
                                                             "eval_expr"
                                                             -1)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "eval_expr"
                                                                   -2)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "eval_expr"
                                                                           -2
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "mu")
                                                                            (("1"
                                                                              (with-tccs
                                                                               (typepred
                                                                                "min({n: nat | some?(eval(ff)(n)(eff, eff))})"))
                                                                              (("1"
                                                                                (replaces
                                                                                 -7
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "mun-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ff"
                                                                                         1
                                                                                         (4
                                                                                          5))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "TTrue")
                      (("2" (assert)
                        (("2" (expand "determined?")
                          (("2" (expand "semantic_rel" 2)
                            (("2" (expand "ff" 2 (4 5))
                              (("2"
                                (expand "semantic_rel_expr" 2)
                                (("2"
                                  (expand "semantic_rel_expr" 2 1)
                                  (("2"
                                    (expand "semantic_rel_expr" 2 1)
                                    (("2"
                                      (expand "semantic_rel_expr" 2 2)
                                      (("2"
                                        (expand "ff" 2 (1 2))
                                        (("2"
                                          (inst 2 "TTrue")
                                          (("2"
                                            (inst 2 "TFalse")
                                            (("2"
                                              (inst 2 "(eff,eff)")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand "TTrue")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((another const-decl "{v: Val | v /= val}" pvs0_undecidability nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_undecidability nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite adt-constructor-decl
     "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" PVS0Expr_adt nil)
    (from_Val const-decl "(injective?[Val, T])" pvs0_undecidability
     nil)
    (injective? const-decl "bool" functions nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (from_PVS0 const-decl "(injective?[PVS0, T])" pvs0_undecidability
     nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(false_val, eval_op1, eval_op2)
                        (m, expr, body, env))}" pvs0_undecidability
     nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(false_val, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}"
     pvs0_undecidability nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ff skolem-const-decl
     "[Val[[T, T]], [nat -> [Val[[T, T]] -> Val[[T, T]]]],
 [nat -> [[Val[[T, T]], Val[[T, T]]] -> Val[[T, T]]]], (ite?)]"
     pvs0_undecidability nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mu_terminates formula-decl nil pvs0_lang nil)
    (TTrue skolem-const-decl "{v: Val | v /= TFalse}"
     pvs0_undecidability nil))
   nil)))

