;; patch to evaluate pvs0_to_cd using pvsio
(defmethod formals-sans-usings (null) nil)

(defstep inst-tccs (fnum &rest terms)
  (with-fresh-labels
   ((all_ (^ fnum) :tccs) (f_ fnum))
   (inst f_ :terms terms))
  "Intantiates quantifer in FNUM and automatically discharges TCCs"
  "Instantiating quantifier in ~a, TCCs are automatically discharged")

(defstep mm (fun)
  (let ((funname       (format nil "~a_ccg`dg`data" fun))
	(ccg_name      (format nil "~a_ccg" fun))
	(measures_name (format nil "~a_measures" fun)))
    (then (rewrite "indi_f_equiv")
	(expand "indi_f_sound_iter")
	(eval-expr funname)
	(replaces -1)
	(branch (prop)
		((then
		  (repeat
		   (then
		    (expand "indi_f_sound_iter")
		    (expand "indi_f_sound_all_vertex")))
		  (split)
		  (flatten)
		  (eval-formula -1)
		  ;; Main proof
		  (expand "gt")
		  (skeep)
		  (expand ccg_name)
		  (expand "make_ccg")
		  (expand measures_name)
		  (expand "restrict")
		  (expand "ge")
		  (expand "le"))))))
  "Proves mm judgement"
  "Proving mm judgment")

;  (""
; (rewrite "indi_f_equiv")
; (Expand "indi_f_sound_iter")
; (eval-expr "factorial_ccg`dg`data")
; (replace -1)
; (split)
; (("1"
;   (expand "indi_f_sound_all_vertex")
;   (split)
;   (("1"
;     (flatten)
;     (expand "gt")
;     (skeep)
;     (expand "factorial_ccg")
;     (expand "make_ccg")
;     (expand "factorial_measures")
;     (expand "restrict")
;     (expand "ge")
;     (expand "le")
;     (expand "M")
;     (expand "semantic_rel_expr")
;     (expand "semantic_rel_expr")
;     (skeep -3)
;     (expand "pvs0_factorial")
;     (expand "eop1")
;     (case-replace "valarg = 0")
;     (("1"
;       (replaces -4 :dir rl)
;       (replaces -4)
;       (hide-all-but -3)
;       (expand "eval_conds")
;       (expand "eval_conds_rec")
;       (flatten)
;       (expand "eval_conds_rec" -2)
;       (assert)
;       (skeep -1)
;       (expand "semantic_rel_expr")
;       (assert))
;      ("2" (assert))))
;    ("2" (flatten) (eval-formula -1))
;    ("3" (expand "indi_f_sound_all_vertex") (propax))))
;  ("2"
;   (expand "indi_f_sound_iter")
;   (expand "indi_f_sound_iter")
;   (propax))))
