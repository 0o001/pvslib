(defstep inst-tccs (fnum &rest terms)
  (with-fresh-labels
   ((all_ (^ fnum) :tccs) (f_ fnum))
   (inst f_ :terms terms))
  "Intantiates quantifer in FNUM and automatically discharges TCCs"
  "Instantiating quantifier in ~a, TCCs are automatically discharged")

(defstep mm (fun)
  (let ((fun_data     (format nil "~a_ccg`dg`data" fun))
	(fun_ccg      (format nil "~a_ccg" fun))
	(fun_measures (format nil "~a_measures" fun))
	(fun_false    (format nil "~a_false" fun))
	(fun_op1      (format nil "~a_op1" fun))
	(fun_op2      (format nil "~a_op2" fun))
	(pvs0_fun     (format nil "pvs0_~a" fun)))
    (then
     (rewrite "indi_f_equiv")
     (repeat (expand "indi_f_sound_iter"))
     (eval-expr fun_data)
     (replaces -1)
     (branch (prop)
	     ((then
	       (repeat (expand "indi_f_sound_all_vertex"))
	       (split)
	       (flatten)
	       (eval-formula -1)
	       (hide -1)
	       ;; Main proof
	       (expand "gt")
	       (expand fun_ccg)
	       (expand "make_ccg")
	       (expand fun_measures)
	       (expand "restrict")
	       (expand "ge")
	       (expand "le")
	       (expand "eval_conds")
	       (repeat (expand "eval_conds_rec"))
	       (expand* pvs0_fun fun_false)
	       (skosimp*)
	       ;;(repeat (expand "semantic_rel_expr"))
	       ;;(skosimp*)
	       ;;(ground)
	       )))))
  "Proves mm judgement"
  "Proving mm judgment")
