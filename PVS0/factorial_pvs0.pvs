factorial_pvs0 : THEORY

  BEGIN

  IMPORTING pvs0_cc[nat]

  eop1(op:nat)(n:nat):Val =
    IF n=0 THEN 1 ELSE n-1 ENDIF

  eop2(op : nat)(n,m:nat) : nat = n*m

  pvs0_factorial : PVS0 = (0,
  		      	   eop1,
			   eop2,
			   ite(vr,
			       op2(0,vr,rec(op1(1,vr))),
			       cnst(1)))

  %IMPORTING factorial_pvs0_defs

  MT : TYPE = nat
  lt(m,n:nat) : MACRO bool = m < n
  N  : MACRO nat = 1

  IMPORTING CCG@ccg_to_mwg[Val[nat], PVS0Expr[Val[nat]], Conditions[nat],
             MT,lt,N,
             LAMBDA (expr: PVS0Expr[Val[nat]], env, val: Val[nat]):
             semantic_rel_expr(pvs0_factorial`1,pvs0_factorial`2,pvs0_factorial`3)
                              (expr, pvs0_factorial`4,
                               env, val),
             LAMBDA (conds: Conditions[nat], env: Val[nat]):
             eval_conds(pvs0_factorial, conds, env)]
	     
  M : MACRO FunMeasure = LAMBDA (n:nat): n

  factorial_measures : FunMeasures = LAMBDA (n:nat): M

  IMPORTING ccg_to_pvs0 [nat,MT,lt,N],
            scp_iff_pvs0[nat],
	    CCG@bounding_circuits[CallingContext,N]

  A: Measure_Matrix = (:(:1:):)

  factorial_dg : (cdigraph)= pvs0_to_dg(pvs0_factorial)

  factorial_ccg : CCG = make_ccg(factorial_dg, factorial_measures)

  factorial_mm: (indi_f_sound(factorial_ccg)) =
  	LAMBDA( v:vert(dg(factorial_ccg))): A
	
  factorial_wgd: wdg = ccg_to_mwg(factorial_ccg)(factorial_mm)

  pvs0_factorial_tcc_termination: JUDGEMENT
    pvs0_factorial HAS_TYPE (pvs0_tcc_termination)

  factorial_msr : LEMMA
    EXISTS (m: WFM): pvs0_tcc_termination_pred(pvs0_factorial)(m) 

  factorial_terminates : LEMMA terminating?(pvs0_factorial)

  factorial_wfm : (pvs0_tcc_termination_pred(pvs0_factorial))

  factorial_pvs0(n:nat): nat = Omega_eval(pvs0_factorial)(n)

  END factorial_pvs0
