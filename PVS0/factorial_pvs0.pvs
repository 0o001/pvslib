factorial_pvs0 : THEORY

  BEGIN

  IMPORTING pvs0_prelude,
            pvs0_cc[nat]

  factorial_false: MACRO nat = 0

  factorial_op1(op:nat)(n:nat): MACRO Val = IF n=0 THEN 1 ELSE n-1 ENDIF

  factorial_op2(op:nat)(n,m:nat): MACRO nat = n*m

  pvs0_factorial : PVS0 = (factorial_false,
  		      	   factorial_op1,
			   factorial_op2,
			   ite(vr,
			       op2(0,vr,rec(op1(1,vr))),
			       cnst(1)))

  N  : MACRO nat = 1

  IMPORTING CCG@ccg_to_mwg[Val, PVS0Expr[Val], Conditions, Path,
            MT,lt,N,
            LAMBDA (expr: PVS0Expr[Val], env, val: Val):
            semantic_rel_expr(pvs0_factorial`1,pvs0_factorial`2,pvs0_factorial`3)
                             (expr, pvs0_factorial`4,
                              env, val),
            LAMBDA (conds: Conditions, env: Val):
            eval_conds(pvs0_factorial, conds, env)]
	     
  M : MACRO FunMeasure = LAMBDA (n:nat): n

  factorial_measures : FunMeasures = LAMBDA (n:below(N)): M

  IMPORTING ccg_to_pvs0[nat,MT,lt,N],
            pvs0_eval[nat],
	    CCG@bounding_circuits[CallingContext,N]

  A: Measure_Matrix = (:(:1:):)

  factorial_dg : (sound_ccg_digraph(pvs0_factorial)) = pvs0_to_fully_connected_dg(pvs0_factorial)

  factorial_ccg : MACRO CCG = make_ccg(factorial_dg,factorial_measures)

  factorial_mm: (indi_f_sound(factorial_ccg)) =
  	LAMBDA(v:vert(dg(factorial_ccg))): A
	
  pvs0_factorial_terminating: JUDGEMENT
    pvs0_factorial HAS_TYPE (terminating?)

  pvs0_factorial_tcc_termination: JUDGEMENT
    pvs0_factorial HAS_TYPE (pvs0_tcc_termination)

  factorial_msr : LEMMA
    EXISTS (m: WFM): pvs0_tcc_termination_pred(pvs0_factorial)(m) 

  factorial_wfm : (pvs0_tcc_termination_pred(pvs0_factorial))

  factorial_pvs0(n:nat): MACRO nat = pvs0_eval(pvs0_factorial)(n)

END factorial_pvs0
