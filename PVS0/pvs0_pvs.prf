(pvs0_pvs
 (make_pvs0_TCC1 0
  (make_pvs0_TCC1-1 nil 3665710400
   ("" (skeep)
    (("" (expand "terminating?")
      (("" (expand "terminates_expr")
        (("" (skeep)
          (("" (expand "semantic_rel_expr")
            (("" (expand "semantic_rel_expr")
              (("" (inst 1 "(TT`1, pvs(env`1))")
                (("" (inst 1 "env") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((terminating? const-decl "bool" pvs0_lang nil)
    (TT const-decl "T" pvs0_lang nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T2 formal-nonempty-type-decl nil pvs0_pvs nil)
    (T1 formal-nonempty-type-decl nil pvs0_pvs nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (terminates_expr const-decl "bool" pvs0_expr nil))
   nil))
 (from_pvs_to_pvs0 0
  (from_pvs_to_pvs0-1 nil 3665710591
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (expand "make_pvs0")
        (("" (expand "semantic_rel_expr")
          (("" (expand "semantic_rel_expr")
            (("" (inst 1 "(t1,TT`2)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel const-decl "bool" pvs0_lang nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (T1 formal-nonempty-type-decl nil pvs0_pvs nil)
    (T2 formal-nonempty-type-decl nil pvs0_pvs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (TT const-decl "T" pvs0_lang nil)
    (make_pvs0 const-decl "(terminating?)" pvs0_pvs nil))
   shostak))
 (pvs_in_pvs0 0
  (pvs_in_pvs0-1 nil 3665710885
   ("" (skeep)
    (("" (inst 1 "make_pvs0(pvs)")
      (("" (skeep)
        (("" (lemma "from_pvs_to_pvs0")
          (("" (insteep -1)
            (("" (expand "semantic_rel")
              (("" (expand "make_pvs0")
                (("" (expand "semantic_rel_expr")
                  (("" (expand "semantic_rel_expr")
                    (("" (skeep)
                      (("" (expand "mu_eval")
                        (("" (expand "eval")
                          (("" (expand "eval_expr")
                            (("" (expand "eval_expr")
                              ((""
                                (lift-if)
                                ((""
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T1 formal-nonempty-type-decl nil pvs0_pvs nil)
    (T2 formal-nonempty-type-decl nil pvs0_pvs nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (EvalBool type-eq-decl nil pvs0_lang nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_lang nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (make_pvs0 const-decl "(terminating?)" pvs0_pvs nil)
    (from_pvs_to_pvs0 formula-decl nil pvs0_pvs nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (mu_eval const-decl "Val" pvs0_lang nil))
   shostak)))

