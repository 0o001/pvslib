pvs0_expr[T:TYPE+]: THEORY
BEGIN

  Val : TYPE = T

  IMPORTING PVS0Expr[Val], structures@Maybe

  EvalOp1  : TYPE = list[[Val->Val]]
  EvalOp2  : TYPE = list[[[Val,Val]->Val]]

  false_val : VAR Val
  eval_op1 : VAR EvalOp1
  eval_op2 : VAR EvalOp2

  semantic_rel_expr (false_val,eval_op1,eval_op2)
                    (expr,body:PVS0Expr,env:Val,val:Val) : INDUCTIVE bool =
    (cnst?(expr) AND val = get_val(expr)) OR
    (vr?(expr) AND val = env) OR
    (op1?(expr) AND EXISTS (valarg:Val) : 
       semantic_rel_expr(false_val,eval_op1,eval_op2)(get_arg(expr),body,env,valarg) AND
              IF get_op(expr) < length(eval_op1) THEN val=nth(eval_op1,get_op(expr))(valarg)
              ELSE val = false_val
	      ENDIF) OR
    (op2?(expr) AND EXISTS (valarg1,valarg2:Val) : 
      semantic_rel_expr(false_val,eval_op1,eval_op2)(get_arg1(expr),body,env,valarg1) AND
      semantic_rel_expr(false_val,eval_op1,eval_op2)(get_arg2(expr),body,env,valarg2) AND
        IF get_op(expr) < length(eval_op2) THEN val=nth(eval_op2,get_op(expr))(valarg1,valarg2)
              ELSE val = false_val
              ENDIF)  OR
    (ite?(expr) AND EXISTS (valarg:Val) : 
      semantic_rel_expr(false_val,eval_op1,eval_op2)(get_cond(expr),body,env,valarg) AND
      IF false_val /= valarg THEN       
        semantic_rel_expr(false_val,eval_op1,eval_op2)(get_if(expr),body,env,val) 
      ELSE semantic_rel_expr(false_val,eval_op1,eval_op2)(get_else(expr),body,env,val)
      ENDIF) OR
    (rec?(expr) AND EXISTS (valarg:Val) : 
      semantic_rel_expr(false_val,eval_op1,eval_op2)(get_arg(expr),body,env,valarg) AND
      semantic_rel_expr(false_val,eval_op1,eval_op2)(body,body,valarg,val))

  terminates_expr(false_val,eval_op1,eval_op2)(expr,body:PVS0Expr) : bool = 
    FORALL (env:Val): 
      EXISTS (val:Val) : semantic_rel_expr(false_val,eval_op1,eval_op2)(expr,body,env,val)

% This builds a measure according to the seven cases in the data structure pvs0.
% See also use of reduce_nat in the PVS library file ordstruct_adt.

  sizepvs0: [PVS0Expr -> nat] = 
    reduce_nat(LAMBDA(v:Val):1, 1, LAMBDA(m,n:nat):2+n, LAMBDA(m,n,l:nat):2+n+l, 
               LAMBDA(m:nat):1+m, LAMBDA(m,n,l:nat):1+m+n+l)

  eval_expr(false_val,eval_op1,eval_op2)(i:nat,expr,body:PVS0Expr,env:Val) : RECURSIVE Maybe[Val] =
    IF i = 0 Then None
    ELSE CASES expr OF
      cnst(v) : Some(v),
      vr : Some(env),
      op1(op,arg) : LET v = eval_expr(false_val,eval_op1,eval_op2)(i,arg,body,env) IN
        	    IF some?(v) THEN
		       Some(IF get_op(expr) < length(eval_op1) THEN nth(eval_op1,get_op(expr))(val(v))
              	       ELSE false_val ENDIF)
		    ELSE None ENDIF,
      op2(op,arg1,arg2) :  LET v1 = eval_expr(false_val,eval_op1,eval_op2)(i,arg1,body,env),
                               v2 = eval_expr(false_val,eval_op1,eval_op2)(i,arg2,body,env) IN
                           IF some?(v1) AND some?(v2) THEN
			   Some( IF get_op(expr) < length(eval_op2) THEN nth(eval_op2,get_op(expr))(val(v1),val(v2))
              		         ELSE false_val ENDIF) 
                           ELSE None ENDIF,
      ite(cnd,arg1,arg2) : LET vc = eval_expr(false_val,eval_op1,eval_op2)(i,cnd,body,env) IN
                           IF some?(vc) THEN
                             IF false_val /= val(vc) THEN
                               eval_expr(false_val,eval_op1,eval_op2)(i,arg1,body,env)
                             ELSE
                               eval_expr(false_val,eval_op1,eval_op2)(i,arg2,body,env)
                             ENDIF
                           ELSE None
                           ENDIF,
      rec(arg) : LET v = eval_expr(false_val,eval_op1,eval_op2)(i,arg,body,env) IN 
                 IF some?(v) THEN
                   eval_expr(false_val,eval_op1,eval_op2)(i-1,body,body,val(v))
                 ELSE None
                 ENDIF
    ENDCASES
    ENDIF
  MEASURE lex2(i,sizepvs0(expr))

  eval_expr_ge_n_j : RECURSIVE JUDGEMENT 
    eval_expr(false_val,eval_op1,eval_op2)(n:nat,expr,body:PVS0Expr,env:Val) HAS_TYPE
      { myv : Maybe[Val] | some?(myv) IMPLIES n > 0 AND 
        FORALL (m:upfrom(n)): myv = eval_expr(false_val,eval_op1,eval_op2)(m,expr,body,env) }

  eval_expr_gt_0: LEMMA
    FORALL(n:nat,expr,body:PVS0Expr,env:Val):
      LET myv = eval_expr(false_val,eval_op1,eval_op2)(n,expr,body,env) IN
        some?(myv) IMPLIES n > 0

  eval_expr_ge_n : LEMMA
    FORALL (false_val,eval_op1,eval_op2)(n:nat,m:upfrom(n),expr,body:PVS0Expr,env:Val):
       LET myv = eval_expr(false_val,eval_op1,eval_op2)(n,expr,body,env) IN
        some?(myv) IMPLIES myv = eval_expr(false_val,eval_op1,eval_op2)(m,expr,body,env)

  semantic_rel_eval_expr : LEMMA
    FORALL (false_val,eval_op1,eval_op2)(expr,body:PVS0Expr,env:Val,val:Val) :
      semantic_rel_expr(false_val,eval_op1,eval_op2)(expr,body,env,val)
      IMPLIES
      EXISTS (n:nat): LET myv = eval_expr(false_val,eval_op1,eval_op2)(n,expr,body,env) IN
        some?(myv) AND val = val(myv)

 eval_expr_n?(false_val,eval_op1,eval_op2)(expr,body:PVS0Expr,env:Val)(n:nat) : MACRO bool =
   LET myv = eval_expr(false_val,eval_op1,eval_op2)(n,expr,body,env) IN
     some?(myv)

  eval_expr_n_pos: LEMMA
  FORALL (false_val,eval_op1,eval_op2)(expr,body:PVS0Expr,env:Val)(n:nat):
    eval_expr_n?(false_val,eval_op1,eval_op2)(expr,body,env)(n) 
    IMPLIES n>0 

  deterministic_expr : LEMMA
    FORALL (false_val,eval_op1,eval_op2)
           (env:Val,expr,body:PVS0Expr,val1,val2:Val): 
      semantic_rel_expr(false_val,eval_op1,eval_op2)(expr,body,env,val1) AND
      semantic_rel_expr(false_val,eval_op1,eval_op2)(expr,body,env,val2) IMPLIES
      val1 = val2

  eval_expr_semantic_rel_j : RECURSIVE JUDGEMENT 
    eval_expr(false_val,eval_op1,eval_op2)(n:nat,expr,body:PVS0Expr,env:Val) HAS_TYPE
      { myv : Maybe[Val] | some?(myv) IMPLIES
        semantic_rel_expr(false_val,eval_op1,eval_op2)(expr,body,env,val(myv)) }

  eval_expr_semantic_rel : LEMMA
    FORALL (false_val,eval_op1,eval_op2)(env:Val,expr,body:PVS0Expr,val:Val)(n:nat) :
      LET myv = eval_expr(false_val,eval_op1,eval_op2)(n,expr,body,env) IN
        some?(myv) AND val = val(myv) IMPLIES 
        semantic_rel_expr(false_val,eval_op1,eval_op2)(expr,body,env,val)

  %%% Termination for expr and body 

  eval_expr_termination(false_val,eval_op1,eval_op2)(expr,body:PVS0Expr) : bool =
    FORALL (env:Val):
      EXISTS (n:nat): eval_expr_n?(false_val,eval_op1,eval_op2)(expr,body,env)(n) 

  eval_expr_terminates: LEMMA
   FORALL (expr,body:PVS0Expr): 
      eval_expr_termination(false_val,eval_op1,eval_op2)(expr,body) 
      IFF terminates_expr(false_val,eval_op1,eval_op2)(expr,body)

END pvs0_expr
