%********************************************************************************%
%   Construction of a digraph of calling context for a PVS0 definition           %
%										 %
%   Authors:									 %
%   										 %
%       Andréia Borges Avelar -- Universidade  de  Brasília  - Brasil  		 %
%       Mauricio Ayala-Rincon -- Universidade  de  Brasília  - Brasil  		 %
%                 Cesar Muñoz -- NASA  Langley  Research  Center - US		 %
%	   Mariano M. Moscato -- National Institute of Aerospace - US            %
%		  	      	      	      	       	      			 %
%********************************************************************************%
pvs0_to_dg[T:TYPE+] : THEORY
BEGIN
  IMPORTING pvs0_props[T],
            CCG@cc_def[Val,PVS0Expr,Conditions,Path]

  IMPORTING structures@set_as_list,
	    structures@more_list_props

                      n : VAR nat
               cc1, cc2 : VAR CallingContext
                    def : VAR PVS0Expr
              false_val : VAR [T -> bool]
               eval_op1 : VAR [nat->[T->T]]
               eval_op2 : VAR [nat->[[T,T]->T]]
	           expr : VAR PVS0Expr

% ------------------------------------------------------------------------------- %
% functions to build the list and then the set of vertices

  pvs0_to_dg_vertex((def), path:(valid_path(def)))(cc: CallingContext) : bool =
    cc`nid = path AND
    subterm_at(def,path) = rec(cc`actuals) AND
    path_conditions(def, path) = cc`conds
    
  cc_of_pvs0(def)(cc: CallingContext): bool =
    EXISTS(path: (valid_path(def))): pvs0_to_dg_vertex(def, path)(cc)

  pvs0_to_dg_make_cc( (def), path: (valid_path(def)) | 
				    rec?(subterm_at(def, path)) ) 
  : (pvs0_to_dg_vertex(def, path)) =
    make_cc(path, get_arg(subterm_at(def, path)), path_conditions(def, path))

  % Computable calculation of pvs0 calling contexts given valid paths of a definition
  pvs0_to_dg_paths_vertices(def: PVS0Expr, paths: list[(valid_path(def))]) : RECURSIVE 
    { res: list[ (cc_of_pvs0(def)) ] | 
      	FORALL(p: (valid_path(def)) | member(p, paths)):
	  rec?(subterm_at(def, p)) 
	  IMPLIES member(pvs0_to_dg_make_cc(def, p), res) } = 
    CASES paths OF
      null: null,
      cons(p, ps): LET subexpr = subterm_at(def, p) 
                   IN IF rec?(subexpr) 
  		      THEN cons( pvs0_to_dg_make_cc(def, p), 
		                 pvs0_to_dg_paths_vertices(def, ps) )
  		      ELSE pvs0_to_dg_paths_vertices(def, ps) ENDIF
    ENDCASES
  MEASURE paths BY <<

  pvs0_to_dg_vertices_l(def): list[(cc_of_pvs0(def))] =
    pvs0_to_dg_paths_vertices(def, valid_paths(def))
  
  pvs0_to_dg_vertices_completeness: LEMMA
    FORALL(def: PVS0Expr, cc: (cc_of_pvs0(def))): 
      member[CallingContext](cc, pvs0_to_dg_vertices_l(def))

  pvs0_to_dg_verts(def): finite_set[CallingContext] =
    list2set[CallingContext](pvs0_to_dg_vertices_l(def))

  cc_of_pvs0_soundness: LEMMA
    FORALL(def: PVS0Expr, cc: (pvs0_to_dg_verts(def))): (cc_of_pvs0(def))(cc)

  cc_of_pvs0_completeness: LEMMA
    FORALL(def: PVS0Expr, cc: (cc_of_pvs0(def))): pvs0_to_dg_verts(def)(cc)

  pvs0_ccs_rec(def: PVS0Expr)(paths: list[(valid_path(def))]) 
    : RECURSIVE { res: list[ (pvs0_tcc_valid_cc(def)) ] | 
      	      	FORALL(p: (valid_path(def))):
  		LET subexpr = subterm_at(def, p) IN
  		member(p, paths) AND
  		rec?(subexpr) IMPLIES
  		LET cc: (pvs0_tcc_valid_cc(def)) = (# `path := p, 
  		       	    `rec_expr := subexpr, 
  		   	    `cnds     := path_conditions(def, p)  #) 
  	        IN member(cc, res) }
    = CASES paths OF
        null: null,
        cons(p, ps): LET subexpr = subterm_at(def, p) IN
        	      	   IF rec?(subexpr) 
  		   THEN cons( (# `rec_expr := subexpr, 
  		   	      	 `cnds     := path_conditions(def, p),
  				 `path     := p #) , pvs0_ccs_rec(def)(ps) )
  		   ELSE pvs0_ccs_rec(def)(ps) ENDIF
      ENDCASES 
    MEASURE paths BY <<

  pvs0_ccs(def: PVS0Expr) : list[ (pvs0_tcc_valid_cc(def)) ] =
    pvs0_ccs_rec(def)(valid_paths(def))

  pvs0_ccs_completness: LEMMA
    FORALL(def: PVS0Expr, cc: (pvs0_tcc_valid_cc(def))): member(cc, pvs0_ccs(def))

  dg_vert_valid_cc: LEMMA
   FORALL(dg_vert: (cc_of_pvs0(def))): 
    EXISTS(cc: (pvs0_tcc_valid_cc(def))): 
      dg_vert`actuals = get_arg(cc`rec_expr) AND 
      dg_vert`conds = cc`cnds

% ------------------------------------------------------------------------------- %
% function to buid the digraph of calling contexts given a PVS0 definition

  IMPORTING digraphs@c_digraphs[CallingContext]

  pvs0: VAR PVS0

  sound_ccg_digraph(pvs0)(dg:(cdigraph)): bool =
    (FORALL(cc: (cc_of_pvs0(pvs0`4))): vert(dg)(cc)) AND
    (FORALL(cc1,cc2: (cc_of_pvs0(pvs0`4)))(v1,v2: Val):
      eval_conds(pvs0,cc1`conds,v1) AND
      semantic_rel_expr(pvs0`1,pvs0`2,pvs0`3)
		  (cc1`actuals,pvs0`4,v1,v2) AND
      eval_conds(pvs0,cc2`conds,v2)
      IMPLIES edges(dg)(cc1,cc2))

  IMPORTING set_as_list

  pvs0_to_dg(pvs0): (cdigraph)
  = make_fully_connected(reduce_sl[CallingContext](pvs0_to_dg_vertices_l(pvs0`4)))

  pvso_to_dg_sound_ccg: JUDGEMENT
    pvs0_to_dg(pvs0) HAS_TYPE (sound_ccg_digraph(pvs0))

END pvs0_to_dg
