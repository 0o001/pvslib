%********************************************************************************%
%   Construction of a digraph of calling context for a PVS0 definition           %
%										 %
%   Authors:									 %
%   										 %
%       Andréia Borges Avelar -- Universidade  de  Brasília  - Brasil  		 %
%       Mauricio Ayala-Rincon -- Universidade  de  Brasília  - Brasil  		 %
%                 Cesar Muñoz -- NASA  Langley  Research  Center - US		 %
%	   Mariano M. Moscato -- National Institute of Aerospace - US            %
%		  	      	      	      	       	      			 %
%********************************************************************************%
pvs0_to_dg[Val:TYPE+] : THEORY
BEGIN
  IMPORTING pvs0_props[Val],
            CCG@cc_def[Val,PVS0Expr,Conditions,Path],
	    structures@set_as_list,
	    structures@more_list_props

                      n : VAR nat
               cc1, cc2 : VAR CallingContext
                    pvs0: VAR PVS0

% ------------------------------------------------------------------------------- %
% functions to build the list and then the set of vertices

  pvs0_to_dg_vertex(expr:PVS0Expr, path:(valid_path(expr)))(cc: CallingContext) : bool =
    cc`nid = path AND
    subterm_at(expr,path) = rec(cc`actuals) AND
    path_conditions(expr, path) = cc`conds
    
  cc_of_pvs0(expr:PVS0Expr)(cc: CallingContext): bool =
    EXISTS(path: (valid_path(expr))): pvs0_to_dg_vertex(expr, path)(cc)

  pvs0_to_dg_make_cc(expr:PVS0Expr, path: (valid_path(expr)) | 
				    rec?(subterm_at(expr, path)) ) 
  : (pvs0_to_dg_vertex(expr, path)) =
    make_cc(path, get_arg(subterm_at(expr, path)), path_conditions(expr, path))

  % Computable calculation of pvs0 calling contexts given valid paths of a definition
  pvs0_to_dg_paths_vertices(expr: PVS0Expr, paths: list[(valid_path(expr))]) : RECURSIVE 
    { res: list[ (cc_of_pvs0(expr)) ] | 
      	FORALL(p: (valid_path(expr)) | member(p, paths)):
	  rec?(subterm_at(expr, p)) 
	  IMPLIES member(pvs0_to_dg_make_cc(expr, p), res) } = 
    CASES paths OF
      null: null,
      cons(p, ps): LET subexpr = subterm_at(expr, p) 
                   IN IF rec?(subexpr) 
  		      THEN cons( pvs0_to_dg_make_cc(expr, p), 
		                 pvs0_to_dg_paths_vertices(expr, ps) )
  		      ELSE pvs0_to_dg_paths_vertices(expr, ps) ENDIF
    ENDCASES
  MEASURE paths BY <<

  pvs0_to_dg_vertices_l(expr:PVS0Expr): list[(cc_of_pvs0(expr))] =
    pvs0_to_dg_paths_vertices(expr, valid_paths(expr))
  
  pvs0_to_dg_vertices_completeness: LEMMA
    FORALL(expr: PVS0Expr, cc: (cc_of_pvs0(expr))): 
      member[CallingContext](cc, pvs0_to_dg_vertices_l(expr))

  pvs0_to_dg_verts(expr:PVS0Expr): finite_set[CallingContext] =
    list2set[CallingContext](pvs0_to_dg_vertices_l(expr))

  cc_of_pvs0_soundness: LEMMA
    FORALL(expr: PVS0Expr, cc: (pvs0_to_dg_verts(expr))): (cc_of_pvs0(expr))(cc)

  cc_of_pvs0_completeness: LEMMA
    FORALL(expr: PVS0Expr, cc: (cc_of_pvs0(expr))): pvs0_to_dg_verts(expr)(cc)

  pvs0_ccs_rec(expr: PVS0Expr)(paths: list[(valid_path(expr))]) 
    : RECURSIVE { res: list[ (pvs0_tcc_valid_cc(expr)) ] | 
      	      	FORALL(p: (valid_path(expr))):
  		LET subexpr = subterm_at(expr, p) IN
  		member(p, paths) AND
  		rec?(subexpr) IMPLIES
  		LET cc: (pvs0_tcc_valid_cc(expr)) = (# `path := p, 
  		       	    `rec_expr := subexpr, 
  		   	    `cnds     := path_conditions(expr, p)  #) 
  	        IN member(cc, res) }
    = CASES paths OF
        null: null,
        cons(p, ps): LET subexpr = subterm_at(expr, p) IN
        	      	   IF rec?(subexpr) 
  		   THEN cons( (# `rec_expr := subexpr, 
  		   	      	 `cnds     := path_conditions(expr, p),
  				 `path     := p #) , pvs0_ccs_rec(expr)(ps) )
  		   ELSE pvs0_ccs_rec(expr)(ps) ENDIF
      ENDCASES 
    MEASURE paths BY <<

  pvs0_ccs(expr: PVS0Expr) : list[ (pvs0_tcc_valid_cc(expr)) ] =
    pvs0_ccs_rec(expr)(valid_paths(expr))

  pvs0_ccs_completness: LEMMA
    FORALL(expr: PVS0Expr, cc: (pvs0_tcc_valid_cc(expr))): member(cc, pvs0_ccs(expr))

  dg_vert_valid_cc: LEMMA
   FORALL (expr:PVS0Expr)(dg_vert: (cc_of_pvs0(expr))): 
    EXISTS(cc: (pvs0_tcc_valid_cc(expr))): 
      dg_vert`actuals = get_arg(cc`rec_expr) AND 
      dg_vert`conds = cc`cnds

% ------------------------------------------------------------------------------- %
% function to buid the digraph of calling contexts given a PVS0 definition

  IMPORTING digraphs@c_digraphs[CallingContext]

  sound_ccg_digraph(pvs0)(dg:(cdigraph)): bool =
    (FORALL(cc: (cc_of_pvs0(get_body(pvs0)))): vert(dg)(cc)) AND
    (FORALL(cc1,cc2: (cc_of_pvs0(get_body(pvs0))))(v1,v2: Val):
      eval_conds(pvs0)(cc1`conds,v1) AND
      semantic_rel_expr(pvs0)(cc1`actuals,v1,v2) AND
      eval_conds(pvs0)(cc2`conds,v2)
      IMPLIES edges(dg)(cc1,cc2))

  IMPORTING set_as_list

  pvs0_to_fully_connected_dg(pvs0): (cdigraph) =
    make_fully_connected(reduce_sl[CallingContext](pvs0_to_dg_vertices_l(get_body(pvs0))))

  pvs0_to_fully_connected_dg_sound_ccg: JUDGEMENT
    pvs0_to_fully_connected_dg(pvs0) HAS_TYPE (sound_ccg_digraph(pvs0))

END pvs0_to_dg
