(ack_pvs
 (ack_TCC1 0
  (ack_TCC1-1 nil 3643739441
   ("" (expand "restrict") (("" (rewrite "well_founded_le") nil nil))
    nil)
   ((well_founded_le formula-decl nil ordinals nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (ack_TCC2 0
  (ack_TCC2-1 nil 3643739441 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_lang nil)
    (boole const-decl "Val" ack_pvs0 nil)
    (eop1 const-decl "Val" ack_pvs0 nil)
    (ebool const-decl "bool" ack_pvs0 nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          n > 0 AND
           (FORALL (m: upfrom(n)):
              myv =
               eval_expr(eval_bool, eval_op1, eval_op2)
                        (m, expr, body, env))}" ack_pvs0 nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[Val] |
         some?(myv) IMPLIES
          semantic_rel_expr(eval_bool, eval_op1, eval_op2)
                           (expr, body, env, val(myv))}" ack_pvs0 nil)
    (pvs0_ack const-decl "Def" ack_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (Omega const-decl "nat" omega "orders/")
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (MT type-eq-decl nil ack_pvs0 nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (T type-eq-decl nil ack_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Omega_eval const-decl "Val" measure_termination nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil))
   nil))
 (ack_TCC3 0
  (ack_TCC3-1 nil 3643739441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ack_TCC4 0
  (ack_TCC4-1 nil 3653236532
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "ack_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "val2env((m, n))")
            (("" (eval-expr "pvs0_ccs(pvs0_ack)")
              (("" (typepred "pvs0_ccs(pvs0_ack)")
                (("" (replaces -2)
                  (("" (expand "every")
                    (("" (expand "every")
                      (("" (expand "every")
                        (("" (expand "every")
                          (("" (flatten)
                            (("" (hide (-2 -3))
                              ((""
                                (inst? -2 :where -1)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide (-1 3))
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "semantic_rel_expr")
                                          (("1"
                                            (expand
                                             "semantic_rel_expr")
                                            (("1"
                                              (expand "eop1")
                                              (("1"
                                                (inst 1 "(m,n)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "eval_conds_rec")
                                          (("2"
                                            (expand
                                             "semantic_rel_expr")
                                            (("2"
                                              (expand "eval_conds_rec")
                                              (("2"
                                                (expand
                                                 "semantic_rel_expr")
                                                (("2"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("2"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("2"
                                                      (expand "eop1")
                                                      (("2"
                                                        (expand
                                                         "boole")
                                                        (("2"
                                                          (expand
                                                           "ebool")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "(1,0)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "(m,n)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               1
                                                               "(0,0)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "(m,n)")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2"
                                    (expand "every")
                                    (("2"
                                      (expand "every")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (pvs0_ack_tcc_termination name-judgement
     "(pvs0_tcc_termination(ebool, eop1, eop2))" ack_pvs0 nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (op2 adt-constructor-decl "[[nat, Expr, Expr] -> (op2?)]" PVS0_adt
     nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m skolem-const-decl "nat" ack_pvs nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (boole const-decl "Val" ack_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_lang nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Environment type-eq-decl nil pvs0_lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T type-eq-decl nil ack_pvs0 nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (MT type-eq-decl nil ack_pvs0 nil) (< def-decl "bool" ordinals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (ebool const-decl "bool" ack_pvs0 nil)
    (eop1 const-decl "Val" ack_pvs0 nil)
    (eop2 const-decl "Val" ack_pvs0 nil)
    (pvs0_ack const-decl "Def" ack_pvs0 nil)
    (ack_wfm const-decl
     "(pvs0_tcc_termination_pred(ebool, eop1, eop2)(pvs0_ack))"
     ack_pvs0 nil))
   nil))
 (ack_TCC5 0
  (ack_TCC5-1 nil 3653236532
   ("" (skeep)
    (("" (typepred "v(m-1,1)")
      (("1" (replaces -1)
        (("1" (lemma "ack_pvs0_m_n")
          (("1" (insteep -1)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil)
    (ack_wfm const-decl
     "(pvs0_tcc_termination_pred(ebool, eop1, eop2)(pvs0_ack))"
     ack_pvs0 nil)
    (pvs0_ack const-decl "Def" ack_pvs0 nil)
    (eop2 const-decl "Val" ack_pvs0 nil)
    (eop1 const-decl "Val" ack_pvs0 nil)
    (ebool const-decl "bool" ack_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T type-eq-decl nil ack_pvs0 nil) (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (MT type-eq-decl nil ack_pvs0 nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ack_pvs0_m_n formula-decl nil ack_pvs0 nil))
   nil))
 (ack_TCC6 0
  (ack_TCC6-1 nil 3653236532 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ack_TCC7 0
  (ack_TCC7-1 nil 3653236532 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ack_TCC8 0
  (ack_TCC8-2 nil 3653241823
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "ack_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "val2env((m, n))")
            (("" (eval-expr "pvs0_ccs(pvs0_ack)")
              (("" (typepred "pvs0_ccs(pvs0_ack)")
                (("" (replaces -2)
                  (("" (expand "every")
                    (("" (expand "every")
                      (("" (expand "every")
                        (("" (expand "every")
                          (("" (flatten)
                            (("" (hide (-1 -2))
                              ((""
                                (inst? -2 :where -1)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide (-1 4))
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "semantic_rel_expr")
                                          (("1"
                                            (expand
                                             "semantic_rel_expr")
                                            (("1"
                                              (inst 1 "(m,n)")
                                              (("1"
                                                (expand "eop1")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "eval_conds_rec")
                                          (("2"
                                            (expand
                                             "semantic_rel_expr")
                                            (("2"
                                              (expand
                                               "semantic_rel_expr")
                                              (("2"
                                                (expand
                                                 "eval_conds_rec")
                                                (("2"
                                                  (expand
                                                   "eval_conds_rec")
                                                  (("2"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("2"
                                                      (expand
                                                       "semantic_rel_expr")
                                                      (("2"
                                                        (expand "eop1")
                                                        (("2"
                                                          (expand
                                                           "boole")
                                                          (("2"
                                                            (expand
                                                             "ebool")
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "(0,0)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "(m,n)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 1
                                                                 "(0,0)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "(m,n)")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every")
                                  (("2"
                                    (expand "every")
                                    (("2"
                                      (expand "every")
                                      (("2"
                                        (expand "every")
                                        (("2"
                                          (expand "every")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (pvs0_ack_tcc_termination name-judgement
     "(pvs0_tcc_termination(ebool, eop1, eop2))" ack_pvs0 nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (op2 adt-constructor-decl "[[nat, Expr, Expr] -> (op2?)]" PVS0_adt
     nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" ack_pvs nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (boole const-decl "Val" ack_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_lang nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Environment type-eq-decl nil pvs0_lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T type-eq-decl nil ack_pvs0 nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (MT type-eq-decl nil ack_pvs0 nil) (< def-decl "bool" ordinals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (ebool const-decl "bool" ack_pvs0 nil)
    (eop1 const-decl "Val" ack_pvs0 nil)
    (eop2 const-decl "Val" ack_pvs0 nil)
    (pvs0_ack const-decl "Def" ack_pvs0 nil)
    (ack_wfm const-decl
     "(pvs0_tcc_termination_pred(ebool, eop1, eop2)(pvs0_ack))"
     ack_pvs0 nil))
   nil)
  (ack_TCC8-1 nil 3653236532
   ("" (skeep) (("" (termination-tcc) (("" (postpone) nil nil)) nil))
    nil)
   nil nil))
 (ack_TCC9 0
  (ack_TCC9-2 nil 3653242678
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "v(m,n-1)")
        (("1" (replaces -1)
          (("1" (typepred "ack_wfm")
            (("1" (expand "pvs0_tcc_termination_pred")
              (("1" (inst -1 "val2env((m, n))")
                (("1" (eval-expr "pvs0_ccs(pvs0_ack)")
                  (("1" (typepred "pvs0_ccs(pvs0_ack)")
                    (("1" (replaces -2)
                      (("1" (expand "every")
                        (("1" (expand "every")
                          (("1" (expand "every")
                            (("1" (expand "every")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide (-1 -3))
                                  (("1"
                                    (inst? -2 :where -1)
                                    (("1"
                                      (inst? -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide (-1 4))
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand
                                               "semantic_rel_expr")
                                              (("1"
                                                (expand
                                                 "semantic_rel_expr"
                                                 1
                                                 1)
                                                (("1"
                                                  (inst 1 "(m,n)" _)
                                                  (("1"
                                                    (expand "eop2" 1 2)
                                                    (("1"
                                                      (expand
                                                       "ack_pvs0")
                                                      (("1"
                                                        (inst
                                                         1
                                                         "Omega_eval(ebool, eop1, eop2)(pvs0_ack)(m, n - 1)")
                                                        (("1"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("1"
                                                            (expand
                                                             "semantic_rel_expr"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "semantic_rel_expr"
                                                               1
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "(m,n-1)")
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "(m,n)")
                                                                    (("1"
                                                                      (expand
                                                                       "eop1")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "Omega_eval_correct")
                                                                    (("2"
                                                                      (expand
                                                                       "semantic_rel")
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "restrict")
                                                                          (("2"
                                                                            (rewrite
                                                                             "well_founded_le")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "restrict")
                                                          (("2"
                                                            (rewrite
                                                             "well_founded_le")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "eval_conds_rec")
                                              (("2"
                                                (expand
                                                 "semantic_rel_expr")
                                                (("2"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("2"
                                                    (expand
                                                     "eval_conds_rec")
                                                    (("2"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel_expr")
                                                        (("2"
                                                          (expand
                                                           "semantic_rel_expr")
                                                          (("2"
                                                            (expand
                                                             "eop1")
                                                            (("2"
                                                              (expand
                                                               "boole")
                                                              (("2"
                                                                (expand
                                                                 "ebool")
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "(0,0)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "(m,n)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     1
                                                                     "(0,0)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "(m,n)")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "every")
                                      (("2"
                                        (expand "every")
                                        (("2"
                                          (expand "every")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (pvs0_ack_tcc_termination name-judgement
     "(pvs0_tcc_termination(ebool, eop1, eop2))" ack_pvs0 nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (op2 adt-constructor-decl "[[nat, Expr, Expr] -> (op2?)]" PVS0_adt
     nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvsnot adt-constructor-decl "[Expr[T] -> (pvsnot?)]" BoolPVS0_adt
     nil)
    (pvsnot? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0_adt nil)
    (op1 adt-constructor-decl "[[nat, Expr] -> (op1?)]" PVS0_adt nil)
    (pvsbool adt-constructor-decl "[Expr[T] -> (pvsbool?)]"
     BoolPVS0_adt nil)
    (pvsbool? adt-recognizer-decl "[BoolPVS0 -> boolean]" BoolPVS0_adt
     nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
              nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (m skolem-const-decl "nat" ack_pvs nil)
    (n skolem-const-decl "nat" ack_pvs nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (boole const-decl "Val" ack_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_lang nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (well_founded_le formula-decl nil ordinals nil)
    (Omega_eval_correct formula-decl nil measure_termination nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (Omega_eval const-decl "Val" measure_termination nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Environment type-eq-decl nil pvs0_lang nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (MT type-eq-decl nil ack_pvs0 nil) (< def-decl "bool" ordinals nil)
    (T type-eq-decl nil ack_pvs0 nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (ebool const-decl "bool" ack_pvs0 nil)
    (eop1 const-decl "Val" ack_pvs0 nil)
    (eop2 const-decl "Val" ack_pvs0 nil)
    (pvs0_ack const-decl "Def" ack_pvs0 nil)
    (ack_wfm const-decl
     "(pvs0_tcc_termination_pred(ebool, eop1, eop2)(pvs0_ack))"
     ack_pvs0 nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil)
  (ack_TCC9-1 nil 3653236532
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "v(m,n-1)")
        (("1" (replaces -1) (("1" (postpone) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil))
 (ack_TCC10 0
  (ack_TCC10-1 nil 3653236532
   ("" (skeep)
    (("" (typepred "v(m,n-1)")
      (("1" (replaces -1)
        (("1" (typepred "v(m - 1, ack_pvs0(m, n - 1))")
          (("1" (replaces -1)
            (("1" (lemma "ack_pvs0_m_n")
              (("1" (insteep -1)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ack_pvs0 const-decl "nat" ack_pvs0 nil)
    (ack_wfm const-decl
     "(pvs0_tcc_termination_pred(ebool, eop1, eop2)(pvs0_ack))"
     ack_pvs0 nil)
    (pvs0_ack const-decl "Def" ack_pvs0 nil)
    (eop2 const-decl "Val" ack_pvs0 nil)
    (eop1 const-decl "Val" ack_pvs0 nil)
    (ebool const-decl "bool" ack_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T type-eq-decl nil ack_pvs0 nil) (< def-decl "bool" ordinals nil)
    (restrict const-decl "R" restrict nil)
    (MT type-eq-decl nil ack_pvs0 nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ack_pvs0_m_n formula-decl nil ack_pvs0 nil))
   nil)))

