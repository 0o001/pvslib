pvs0_termination[Val:TYPE+, MT:TYPE, lt:(well_founded?[MT])] : THEORY
BEGIN
  IMPORTING PVS0Bool[Val],
            structures@set_as_list,
	    structures@more_list_props[nat],
	    pvs0_to_dg[Val],
            measure_termination_defs[Val,MT,lt]
	    
  pvs0: VAR PVS0
  wfm:  VAR WFM

  % Using lt it is possible to define a relation on values (Val)
  % that is well founded and has no descendent infinite branching.
  
  lt_val(pvs0)(wfm)(v1,v2: Val): bool =
    EXISTS(cc: (pvs0_tcc_valid_cc(get_body(pvs0)))):
      semantic_rel_expr(pvs0)(get_arg(cc`rec_expr), v2, v1)
      AND eval_conds(pvs0)(cc`cnds, v2)
      AND lt(wfm(v1), wfm(v2))
  
  lt_val_wf: LEMMA
    well_founded?(lt_val(pvs0)(wfm))

  IMPORTING structures@more_list_props

  lt_val_no_desc_inf_branch: LEMMA
    FORALL(x:Val): is_finite({y: Val | lt_val(pvs0)(wfm) (y,x)})

  IMPORTING orders@lex2_generic, 
            orders@omega
  
  % This lemma states that Omega is an upper bound for the nat parameter of eval
  
  omega_is_eval_ub: LEMMA
    pvs0_tcc_termination_pred(pvs0)(wfm) 
    IMPLIES
     FORALL(expr: PVS0Expr, env: Val, path: (valid_path(get_body(pvs0)))):
      expr = subterm_at(get_body(pvs0), path) AND
      eval_conds(pvs0)(path_conditions(get_body(pvs0), path),env)
      IMPLIES
        EXISTS (n: nat | n <= Omega[Val,lt_val(pvs0)(wfm)](env)):
          some?(eval_expr(pvs0)(n, expr, env)) AND
          semantic_rel_expr(pvs0)(expr, env, val(eval_expr(pvs0)(n,expr,env)))

  omega_is_eval_ub_bis: COROLLARY
    pvs0_tcc_termination_pred(pvs0)(wfm) 
    IMPLIES
     FORALL(env: Val, path: (valid_path(get_body(pvs0)))):
      LET expr = subterm_at(get_body(pvs0), path) IN
      eval_conds(pvs0)(path_conditions(get_body(pvs0), path),env)
      IMPLIES
        EXISTS (n: nat | n <= Omega[Val,lt_val(pvs0)(wfm)](env)):
          some?(eval_expr(pvs0)(n, expr, env)) AND
          semantic_rel_expr(pvs0)(expr, env,
	                          val(eval_expr(pvs0)(n,expr,env)))

  pvs0_tcc_implies_terminates : THEOREM
   pvs0_tcc_termination(pvs0) IMPLIES terminating?(pvs0)

  pvs0_tcc_termination_j : JUDGEMENT
    (pvs0_tcc_termination) SUBTYPE_OF (terminating?)

  mu_le_omega: LEMMA
    FORALL((pvs0|pvs0_tcc_termination_pred(pvs0)(wfm)), v:Val): 
      LET n = Omega[Val,lt_val(pvs0)(wfm)](v) IN
        mu(pvs0)(v) <= n

  Omega_n(pvs0:(pvs0_tcc_termination),arg:Val) : posnat =
    Omega[Val,lt_val(pvs0)(wfm_tcc(pvs0))](arg)  

  Omega_preval(pvs0:(pvs0_tcc_termination))(arg:Val) : (some?[Val]) =
    LET n = Omega_n(pvs0,arg) IN
    eval(pvs0)(n)(arg)

  %% Uses Omega to evaluate a terminating PVS0 function
  Omega_eval(pvs0:(pvs0_tcc_termination))(arg:Val) : Val =
    val(Omega_preval(pvs0)(arg))

  Omega_eval_correct : THEOREM
    FORALL (pvs0:(pvs0_tcc_termination))(arg,val:Val):
      semantic_rel(pvs0)(arg,val) IFF val = Omega_eval(pvs0)(arg)

END pvs0_termination
