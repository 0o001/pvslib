fibo_pvs0 : THEORY

  BEGIN

  IMPORTING pvs0_prelude,
            pvs0_cc[[nat,nat,nat]]

  false_val : MACRO [nat,nat,nat] = (0,0,0)
  true_val  : MACRO [nat,nat,nat] = (1,1,1)

  boole(b:bool) : MACRO [nat,nat,nat] = IF b THEN true_val ELSE false_val ENDIF

  fibo_op1 : MACRO list[[[nat,nat,nat]->[nat,nat,nat]]] = 
    (: LAMBDA(f0,f1,n: nat): boole(n=0),
       LAMBDA(f0,f1,n: nat): boole(n=1),
       LAMBDA(f0,f1,n: nat): (0,f0,0),
       LAMBDA(f0,f1,n: nat): (0,f1,0),
       LAMBDA(f0,f1,n: nat): IF n /= 0 THEN (f1,f0+f1,n-1) ELSE false_val ENDIF,
       LAMBDA(f0,f1,n: nat): false_val :)

  fibo_op2 : MACRO list[[[[nat,nat,nat],[nat,nat,nat]]->[nat,nat,nat]]] = (: :)

  pvs0_fibo : PVS0 = (
                      fibo_op1,fibo_op2,false_val,
   	              ite(op1(0,vr), op1(2,vr),
                          ite(op1(1,vr),op1(3,vr),
                              rec(op1(4,vr)))))

  N  : MACRO posnat = 1

  IMPORTING CCG@ccg_to_mwg[[nat,nat,nat], PVS0Expr[[nat,nat,nat]], Conditions, Path,
             MT,lt,N,
             semantic_rel_expr(pvs0_fibo),
             eval_conds(pvs0_fibo)]

  M : MACRO FunMeasure = LAMBDA (v:[nat,nat,nat]) : v`3

  fibo_measures: FunMeasures = LAMBDA (n:below(N)): M

  IMPORTING ccg_to_pvs0 [[nat,nat,nat],MT,lt,N],
  	    pvs0_eval[[nat,nat,nat]],
            CCG@bounding_circuits[CallingContext,N]

  A: Measure_Matrix = (:(:1:):)
  
  fibo_dg : (sound_ccg_digraph(pvs0_fibo)) = pvs0_to_fully_connected_dg(pvs0_fibo)

  fibo_ccg: MACRO CCG = make_ccg(fibo_dg,fibo_measures)

  fibo_mm: (indi_f_sound(fibo_ccg)) =
    LAMBDA(v:vert(dg(fibo_ccg))): A

  pvs0_fibo_terminating: JUDGEMENT
    pvs0_fibo HAS_TYPE (terminating?)

  pvs0_fibo_tcc_termination: JUDGEMENT
    pvs0_fibo HAS_TYPE (pvs0_tcc_termination)

  fibo_msr : LEMMA
    EXISTS (m:WFM): pvs0_tcc_termination_pred(pvs0_fibo)(m)
    
  fibo_wfm  : (pvs0_tcc_termination_pred(pvs0_fibo))

  fibo_pvs0(f0,f1,n:nat): MACRO nat = pvs0_eval(pvs0_fibo)(f0,f1,n)`2

END fibo_pvs0
