(ccg_to_pvs0
 (ccg_implies_scp_pvs0 0
  (ccg_implies_scp_pvs0-2 nil 3653156797
   ("" (skeep)
    (("" (expand "ccg_termination_pvs0")
      (("" (expand "scp_termination_pvs0")
        ((""
          (lemma
           "ccg_termination_implies_scp[Val,Expr,Conditions,MT,lt,N,semantic_relation(def),eval_conditions(def)]")
          (("" (inst? -1)
            (("" (split -)
              (("1" (hide -2)
                (("1" (expand "scp_termination?")
                  (("1" (skeep)
                    (("1" (insteep -)
                      (("1" (rewrite "semantic_relation" :dir rl)
                        (("1" (rewrite "eval_conditions" :dir rl)
                          (("1" (expand "infinite_seq_ccs")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (rewrite "semantic_relation" :dir rl)
                          (("2" (rewrite "eval_conditions" :dir rl)
                            (("2" (typepred "ccs(i)")
                              (("2"
                                (expand "infinite_seq_ccs")
                                (("2"
                                  (expand "pvs0_to_dg")
                                  (("2"
                                    (expand "pvs0_to_dg_edges")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use
                                           "cc_of_pvs0_completeness")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "ccs(i+1)")
                                              (("2"
                                                (lemma
                                                 "cc_of_pvs0_completeness")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "def"
                                                   "ccs(i+1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "remove_edge")
                                                      (("2"
                                                        (inst
                                                         -5
                                                         "val2env(vals(i))"
                                                         "vals(i+1)")
                                                        (("2"
                                                          (expand
                                                           "eval_conditions")
                                                          (("2"
                                                            (inst-cp
                                                             -6
                                                             "i")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "semantic_relation")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "i+1")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 nil)
    (eval_conds const-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (eval_op2 formal-const-decl "[nat -> [[T, T] -> T]]" ccg_to_pvs0
     nil)
    (eval_op1 formal-const-decl "[nat -> [T -> T]]" ccg_to_pvs0 nil)
    (eval_bool formal-const-decl "[T -> bool]" ccg_to_pvs0 nil)
    (semantic_rel_expr inductive-decl "bool" lang nil)
    (Environment type-eq-decl nil lang nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_pvs0 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg_to_pvs0 nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_pvs0 nil)
    (Conditions type-eq-decl nil lang nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil ccg_to_pvs0 nil)
    (ccg_termination_implies_scp formula-decl nil ccg "CCG/")
    (scp_termination? const-decl "bool" scp "CCG/")
    (Seq_val type-eq-decl nil cc_def "CCG/")
    (Seq_cc type-eq-decl nil ccg "CCG/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ccs skolem-const-decl "[nat -> (cc_of_pvs0(def))]" ccg_to_pvs0
     nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (def skolem-const-decl "Def[Val[T]]" ccg_to_pvs0 nil)
    (eval_conditions macro-decl "bool" scp_iff_pvs0 nil)
    (infinite_seq_ccs const-decl "bool" scp "CCG/")
    (semantic_relation macro-decl "bool" scp_iff_pvs0 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (cc_of_pvs0_completeness formula-decl nil pvs0_to_dg nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (remove_edge const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_edges const-decl
     "finite_set[[CallingContext, CallingContext]]" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (pvs0_to_dg const-decl "digraph" pvs0_to_dg nil)
    (scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil))
   nil)
  (ccg_implies_scp_pvs0-1 nil 3653156775 ("" (postpone) nil nil) nil
   shostak))
 (ccg_implies_pvs0_tcc_TCC1 0
  (ccg_implies_pvs0_tcc_TCC1-1 nil 3653169156
   ("" (skeep)
    (("" (expand "restrict") (("" (rewrite "wf_nat") nil nil)) nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   nil))
 (ccg_implies_pvs0_tcc 0
  (ccg_implies_pvs0_tcc-1 nil 3653157358
   ("" (skeep)
    (("" (rewrite "scp_implies_pvs0_tcc")
      (("" (hide 2) (("" (rewrite "ccg_implies_scp_pvs0") nil nil))
        nil))
      nil))
    nil)
   ((scp_implies_pvs0_tcc formula-decl nil scp_iff_pvs0 nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (T formal-nonempty-type-decl nil ccg_to_pvs0 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (eval_bool formal-const-decl "[T -> bool]" ccg_to_pvs0 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval_op1 formal-const-decl "[nat -> [T -> T]]" ccg_to_pvs0 nil)
    (eval_op2 formal-const-decl "[nat -> [[T, T] -> T]]" ccg_to_pvs0
     nil)
    (ccg_implies_scp_pvs0 formula-decl nil ccg_to_pvs0 nil))
   shostak)))

