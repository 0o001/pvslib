pvs0_cc[T:TYPE+] : THEORY  
BEGIN

  IMPORTING pvs0_lang[T],
            PVS0Bool[T]

  false_val : VAR Val
  eval_op1 : VAR EvalOp1
  eval_op2 : VAR EvalOp2

  % Conditions 
  Conditions : TYPE = list[PVS0Bool[T]]

  Path : TYPE = list[nat]

  % Calling contexts for pvs0
  PVS0Expr_CC: TYPE = [# rec_expr: (rec?)    % PVS0 recursive call: R(...)
  	   	       , cnds: Conditions    % Path conditions that leads to the
		                             %  recursive call (rec_expr)
  		       , path: Path #]       % Position of rec_expr (in a wrapping
		                             %  expression)

  pvs0_bool_expr(bexpr:PVS0Bool[T]) : PVS0Expr[T] =
    CASES bexpr OF
      pvs0bool(expr) : expr,
      pvs0not(expr) : expr
   ENDCASES

  eval_conds_rec(false_val,eval_op1,eval_op2)
                (body:PVS0Expr,cnds:Conditions,env:Val) : RECURSIVE bool =
    CASES cnds OF
      null : TRUE,
      cons(a,q) : CASES a OF
                   pvs0bool(expr) : EXISTS (val:Val):
                      semantic_rel_expr(false_val,eval_op1,eval_op2)
                                       (expr,body,env,val)
                      AND NOT false_val = val, 
                   pvs0not(expr) : EXISTS (val:Val) :
                      semantic_rel_expr(false_val,eval_op1,eval_op2)
                                       (expr,body,env,val)
                      AND  false_val = val
                  ENDCASES AND 
                  eval_conds_rec(false_val,eval_op1,eval_op2)(body,q,env)
    ENDCASES
  MEASURE cnds BY <<
    
  eval_conds(def:PVS0,cnds:Conditions,env:Val) : bool =  
    eval_conds_rec(def`1,def`2,def`3)(def`4,cnds,env)

  % Paths
  IMPORTING structures@more_list_props[nat]

  valid_path(expr: PVS0Expr)(path: Path): RECURSIVE bool
  = CASES expr OF
      vr         : null?(path),
      cnst(cval) : null?(path),
      op1(o,a)   : null?(path) OR (rac(path) = 0 AND valid_path(a)(rdc(path))),
      op2(o,a1,a2) : null?(path) 
      		     OR (rac(path) = 0 AND valid_path(a1)(rdc(path)))
		     OR (rac(path) = 1 AND valid_path(a2)(rdc(path))),
      rec(a)       : null?(path) OR (rac(path) = 0 AND valid_path(a)(rdc(path))),
      ite(c,t,e)   : null?(path) 
      		     OR (rac(path) = 0 AND valid_path(c)(rdc(path)))
		     OR (rac(path) = 1 AND valid_path(t)(rdc(path)))
		     OR (rac(path) = 2 AND valid_path(e)(rdc(path)))
    ENDCASES
  MEASURE expr by <<
  
  subterm_at(expr: PVS0Expr, path: (valid_path(expr))): RECURSIVE ({res: PVS0Expr | subterm(res,expr)})
  = IF null?(path) THEN expr
    ELSE CASES expr OF
          op1(o,a)  : subterm_at(a, rdc(path)),
	  op2(o,a,b): IF rac(path) = 0 THEN subterm_at(a, rdc(path))
	  	      ELSE subterm_at(b, rdc(path)) ENDIF,
          rec(a)    : subterm_at(a, rdc(path)),
	  ite(c,t,e): subterm_at( IF rac(path) = 0 THEN c 
	  	      		  ELSIF rac(path) = 1 THEN t 
				  ELSE e ENDIF , rdc(path))
	  ELSE expr
        ENDCASES ENDIF
    MEASURE expr BY <<

  path_conditions(expr: PVS0Expr, path: (valid_path(expr))): RECURSIVE Conditions
  = CASES path OF
      null: null,
      cons(n,path_): append( IF NOT ite?(subterm_at(expr,path_)) OR n=0
   	   	   THEN null
  		   ELSE IF n=1 
		   	THEN (: pvs0bool(get_cond(subterm_at(expr,path_))) :)
  		    	ELSE (: pvs0not(get_cond(subterm_at(expr,path_))) :) ENDIF ENDIF,
  	           path_conditions(expr,path_) )
     ENDCASES
  MEASURE path BY <<

  %% Given a definition (def: PVS0) a calling context (cc) is said to be valid 
  %  when the expression cc`rec_expr appears in def, in the position determined
  %  by cc`path and the conditions cc`conds need to be true to reach cc`expr 
  %  during a computation.
  pvs0_tcc_valid_cc(def: PVS0Expr)(cc: PVS0Expr_CC): bool =
    valid_path(def)(cc`path) AND
    cc`rec_expr = subterm_at(def, cc`path) AND 
    cc`cnds = path_conditions(def, cc`path)

END pvs0_cc
