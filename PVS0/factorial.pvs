factorial : THEORY
BEGIN

  factorial(n:nat) : RECURSIVE nat =
    IF n = 0 THEN 1
    ELSE n*factorial(n-1)
    ENDIF
  MEASURE n

  IMPORTING lang[nat]

  ebool(n:nat) : bool = n /= 0

  boole(b:bool) : nat = IF NOT b THEN 0 ELSE 1 ENDIF

  eop1(op:nat)(n:nat) : nat = 
    COND op = 0 -> boole(n = 0),
         op = 1 -> IF n = 0 THEN 0 ELSE n-1 ENDIF,
         ELSE -> n
    ENDCOND

  eop2(op:nat)(n,m:nat) : nat = n*m

% Interpretation:
%   vr      : n
%   bool(n) : n /= 0
%   op1 0   : n -> bool(n=0)
%   op1 1   : n -> n-1 
%   op2 0   : n,m -> n*m

  pvs0_factorial : PVS0 =
    def(ite(op1(0,vr),cnst(1),op2(0,vr,rec(op1(1,vr)))))

  eval_factorial(n:nat) : nat =
    LET v = eval(ebool,eop1,eop2)(n+1,pvs0_factorial)(val2env(n)) IN
    IF some?(v) THEN val(v)
    ELSE 0
    ENDIF

  pvs0_fact6 : LEMMA
    factorial(6) = eval_factorial(6)



  IMPORTING pvs0_to_ccg[nat,nat,<,2]

END factorial
