(pvs0_to_dg
 (pvs0_to_dg_make_cc_TCC1 0
  (pvs0_to_dg_make_cc_TCC1-1 nil 3650913537 ("" (subtype-tcc) nil nil)
   nil nil))
 (pvs0_to_dg_make_cc_TCC2 0
  (pvs0_to_dg_make_cc_TCC2-1 nil 3650913537
   ("" (skeep)
    (("" (expand "pvs0_to_dg_vertex")
      (("" (expand "make_cc")
        (("" (typepred "path")
          (("" (hide -1) (("" (apply-extensionality) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (PVS0_rec_extensionality formula-decl nil PVS0_adt nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/"))
   nil))
 (pvs0_to_dg_paths_vertices_TCC1 0
  (pvs0_to_dg_paths_vertices_TCC1-1 nil 3650913537 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/")
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(def, path))"
     pvs0_to_dg nil)
    (member def-decl "bool" list_props nil))
   nil))
 (pvs0_to_dg_paths_vertices_TCC2 0
  (pvs0_to_dg_paths_vertices_TCC2-1 nil 3650913537
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (pvs0_to_dg_paths_vertices_TCC3 0
  (pvs0_to_dg_paths_vertices_TCC3-1 nil 3650913537
   ("" (skeep*)
    (("" (expand "cc_of_pvs0")
      (("" (expand "pvs0_to_dg_make_cc")
        (("" (inst 1 "p")
          (("" (expand "pvs0_to_dg_vertex")
            (("" (expand "make_cc")
              (("" (apply-extensionality) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/")
    (PVS0_rec_extensionality formula-decl nil PVS0_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0 | rec?(x) OR op1?(x)} -> Expr]" PVS0_adt nil)
    (p skolem-const-decl "(valid_path[T](get_body[T](def)))" pvs0_to_dg
     nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_dg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(def, path))"
     pvs0_to_dg nil))
   nil))
 (pvs0_to_dg_paths_vertices_TCC4 0
  (pvs0_to_dg_paths_vertices_TCC4-1 nil 3650913537
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (pvs0_to_dg_paths_vertices_TCC5 0
  (pvs0_to_dg_paths_vertices_TCC5-1 nil 3650913537
   ("" (skeep*)
    (("" (typepred "p_1")
      (("" (hide -1)
        (("" (typepred "v(def,ps)")
          (("" (hide -1)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (inst -1 "p_1")
                  (("1" (assert) nil nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(def, path))"
     pvs0_to_dg nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil pvs0_cc nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_dg nil)
    (paths skolem-const-decl "list[(valid_path(get_body(def)))]"
     pvs0_to_dg nil)
    (p_1 skolem-const-decl
     "{p_1: (valid_path(get_body(def))) | member(p_1, paths)}"
     pvs0_to_dg nil)
    (ps skolem-const-decl "list[(valid_path(get_body(def)))]"
        pvs0_to_dg nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/"))
   nil))
 (pvs0_to_dg_paths_vertices_TCC6 0
  (pvs0_to_dg_paths_vertices_TCC6-1 nil 3650913537
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (pvs0_to_dg_paths_vertices_TCC7 0
  (pvs0_to_dg_paths_vertices_TCC7-1 nil 3650914999
   ("" (skeep*)
    (("" (typepred "p_1")
      (("" (hide -1)
        (("" (typepred "v(def,ps)")
          (("" (hide -1)
            (("" (inst -1 "p_1")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(def, path))"
     pvs0_to_dg nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil pvs0_cc nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_dg nil)
    (paths skolem-const-decl "list[(valid_path(get_body(def)))]"
     pvs0_to_dg nil)
    (p_1 skolem-const-decl
     "{p_1: (valid_path(get_body(def))) | member(p_1, paths)}"
     pvs0_to_dg nil)
    (ps skolem-const-decl "list[(valid_path(get_body(def)))]"
        pvs0_to_dg nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/"))
   nil))
 (pvs0_to_dg_vertices_completeness 0
  (pvs0_to_dg_vertices_completeness-1 nil 3650913582
   ("" (skeep)
    (("" (expand "pvs0_to_dg_vertices_l")
      (("" (typepred "valid_paths(get_body(def))")
        (("" (hide -1)
          (("" (typepred "cc")
            (("" (expand "cc_of_pvs0")
              ((""
                (typepred
                 "pvs0_to_dg_paths_vertices(def, valid_paths(get_body(def)))")
                (("" (hide -1)
                  (("" (skeep -2)
                    (("" (inst -1 "path")
                      (("1" (expand "pvs0_to_dg_vertex")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (inst -4 "path")
                              (("1"
                                (case
                                 "pvs0_to_dg_make_cc(def, path) = cc")
                                (("1"
                                  (replace -1 -2)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (typepred
                                   "pvs0_to_dg_make_cc(def, path)")
                                  (("2"
                                    (expand "pvs0_to_dg_vertex")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (apply-extensionality)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "path")
                        (("2" (assert)
                          (("2"
                            (typepred
                             "valid_paths[T](get_body[T](def))")
                            (("2" (inst? -2) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_dg nil)
    (path skolem-const-decl "(valid_path(get_body(def)))" pvs0_to_dg
     nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(def, path))"
     pvs0_to_dg nil)
    (pvs0_to_dg_paths_vertices def-decl "{res: list[(cc_of_pvs0(def))] |
         FORALL (p: (valid_path(get_body(def))) | member(p, paths)):
           rec?(subterm_at(get_body(def), p)) IMPLIES
            member(pvs0_to_dg_make_cc(def, p), res)}" pvs0_to_dg nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil pvs0_cc nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (member def-decl "bool" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
     nil))
   shostak))
 (cc_of_pvs0_soundness 0
  (cc_of_pvs0_soundness-1 nil 3653219772
   ("" (skeep :preds? t)
    (("" (expand "pvs0_to_dg_verts")
      (("" (typepred "pvs0_to_dg_vertices_l(def)")
        (("" (use "every_nth[CallingContext]")
          (("" (assert)
            ((""
              (typepred
               "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
              (("" (replace -2 -6)
                (("" (assert)
                  (("" (use "member_nth[CallingContext]")
                    (("" (assert)
                      (("" (skeep -1)
                        (("" (inst?) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil)
    (every_nth formula-decl nil list_props nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil))
   shostak))
 (cc_of_pvs0_completeness 0
  (cc_of_pvs0_completeness-2 "" 3650916255
   ("" (skeep)
    (("" (expand "pvs0_to_dg_verts")
      (("" (use "pvs0_to_dg_vertices_completeness")
        ((""
          (typepred
           "list2set[CallingContext](pvs0_to_dg_vertices_l(def))")
          (("" (replaces -2) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (pvs0_to_dg_vertices_completeness formula-decl nil pvs0_to_dg nil))
   shostak)
  (cc_of_pvs0_completeness-1 nil 3650899233
   ("" (skeep)
    (("" (typepred "cc")
      (("" (expand "pvs0_to_dg_verts")
        (("" (assert)
          (("" (expand "cc_of_pvs0sl")
            ((""
              (typepred
               "list2set(cc_of_pvs0rec(get_body(def), emptyset_sl))")
              (("" (replace -2 :hide? t)
                (("" (assert)
                  ((""
                    (typepred
                     "cc_of_pvs0rec(get_body(def), emptyset_sl)")
                    (("" (expand "cc_of_pvs0")
                      (("" (flatten)
                        (("" (inst?) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (rec adt-constructor-decl "[Expr -> (rec?)]" PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (emptyset_sl const-decl "list[T]" set_as_list "structures/")
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (CallingContext type-eq-decl nil cc_def "CCG/"))
   shostak))
 (pvs0_ccs_rec_TCC1 0
  (pvs0_ccs_rec_TCC1-1 nil 3653150658 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil))
   nil))
 (pvs0_ccs_rec_TCC2 0
  (pvs0_ccs_rec_TCC2-1 nil 3653150658 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (member def-decl "bool" list_props nil))
   nil))
 (pvs0_ccs_rec_TCC3 0
  (pvs0_ccs_rec_TCC3-1 nil 3653150658 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil))
   nil))
 (pvs0_ccs_rec_TCC4 0
  (pvs0_ccs_rec_TCC4-2 nil 3653150997
   ("" (skeep*)
    (("" (expand "member" -4)
      (("" (assert)
        (("" (split -4)
          (("1" (replace -2 -1)
            (("1" (assert)
              (("1" (replace -1 :hide? t)
                (("1" (expand "member" 1) (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -2 -1)
            (("2" (assert)
              (("2" (typepred "v(def)(ps)")
                (("2" (inst -2 "p_1")
                  (("2" (assert)
                    (("2" (expand "member" 1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil))
   nil))
 (pvs0_ccs_rec_TCC5 0
  (pvs0_ccs_rec_TCC5-2 nil 3653151036
   ("" (skeep*)
    (("" (typepred "v(def)(ps)")
      (("" (inst -2 "p_1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (pvs0_ccs_completness 0
  (pvs0_ccs_completness-1 nil 3653150770
   ("" (skeep)
    (("" (expand "pvs0_ccs")
      (("" (typepred "valid_paths(get_body(def))")
        (("" (hide -1)
          (("" (typepred "cc")
            (("" (expand "pvs0_tcc_valid_cc")
              (("" (flatten)
                ((""
                  (typepred
                   "pvs0_ccs_rec(def)(valid_paths(get_body(def)))")
                  (("" (hide -1)
                    (("" (inst -1 "cc`path")
                      (("" (assert)
                        (("" (inst -5 "cc`path")
                          (("" (assert)
                            ((""
                              (case "(# `path := cc`path, `rec_expr := subterm_at(get_body(def), cc`path), `cnds := path_conditions(get_body(def), cc`path) #) = cc")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 -2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (apply-extensionality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
     nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" pvs0_to_dg nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (member def-decl "bool" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
     nil))
   nil))
 (dg_vert_valid_cc 0
  (dg_vert_valid_cc-1 nil 3653150704
   ("" (skeep)
    (("" (use "cc_of_pvs0_completeness")
      (("" (expand "pvs0_to_dg_verts")
        (("" (expand "pvs0_to_dg_vertices_l")
          ((""
            (typepred
             "pvs0_to_dg_paths_vertices(def, valid_paths(get_body(def)))")
            (("" (hide -1)
              (("" (typepred "dg_vert")
                (("" (expand "cc_of_pvs0")
                  (("" (skeep -1)
                    (("" (inst -2 "path")
                      (("1" (expand "pvs0_to_dg_vertex")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (typepred
                               "pvs0_ccs_rec(def)(valid_paths(get_body(def)))")
                              (("1"
                                (hide -1)
                                (("1"
                                  (inst -1 "path")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (inst
                                         1
                                         "(# `path := path,
                            `rec_expr := subterm_at(get_body(def), path),
                            `cnds := path_conditions(get_body(def), path) #)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "path")
                                        (("2"
                                          (typepred
                                           "valid_paths(get_body(def))")
                                          (("2"
                                            (inst -2 "path")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "valid_paths(get_body(def))")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cc_of_pvs0_completeness formula-decl nil pvs0_to_dg nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_dg nil)
    (path skolem-const-decl "(valid_path(get_body(def)))" pvs0_to_dg
     nil)
    (PVS0_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" pvs0_to_dg nil)
    (make_cc const-decl "CallingContext" cc_def "CCG/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(def, path))"
     pvs0_to_dg nil)
    (pvs0_to_dg_paths_vertices def-decl "{res: list[(cc_of_pvs0(def))] |
         FORALL (p: (valid_path(get_body(def))) | member(p, paths)):
           rec?(subterm_at(get_body(def), p)) IMPLIES
            member(pvs0_to_dg_make_cc(def, p), res)}" pvs0_to_dg nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
     nil)
    (pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil))
   nil))
 (pvs0_to_dg_edges_TCC1 0
  (pvs0_to_dg_edges_TCC1-3 nil 3651316910
   ("" (skeep*)
    ((""
      (lemma
       "finite_pred[[(pvs0_to_dg_verts(def)),(pvs0_to_dg_verts(def))]]")
      ((""
        (inst -1
         "LAMBDA(x: [(pvs0_to_dg_verts(def)), (pvs0_to_dg_verts(def))]): NOT remove_edge(eval_bool, eval_op1, eval_op2)(def, x`1, x`2)")
        (("" (split -1)
          (("1" (expand "is_finite")
            (("1" (skolem! -1)
              (("1" (inst 1 "N!1" "_")
                (("1"
                  (inst 1
                   "LAMBDA(x: {cc1, cc2:CallingContext[Val,Expr, Conditions] |
                                         member[CallingContext[Val,Expr, Conditions]](cc1, pvs0_to_dg_verts(def)) AND
                                          member[CallingContext[Val,Expr, Conditions]](cc2, pvs0_to_dg_verts(def)) AND                       NOT remove_edge(eval_bool, eval_op1, eval_op2)(def, cc1, cc2)}): f!1(x)")
                  (("1" (expand "injective?")
                    (("1" (skeep)
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "x")
                      (("2" (expand "member") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (use "finite_sets@finite_cross[(pvs0_to_dg_verts(def)), (pvs0_to_dg_verts(def))].is_finite_cross")
              (("2"
                (use "finite_full[[(pvs0_to_dg_verts(def)), (pvs0_to_dg_verts(def))]]")
                (("2" (assert)
                  (("2" (hide-all-but 2)
                    (("2" (typepred "pvs0_to_dg_verts(def)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (finite_pred formula-decl nil finite_sets nil)
    (eval_op2 skolem-const-decl "[nat -> [[T, T] -> T]]" pvs0_to_dg
     nil)
    (eval_op1 skolem-const-decl "[nat -> [T -> T]]" pvs0_to_dg nil)
    (eval_bool skolem-const-decl "[T -> bool]" pvs0_to_dg nil)
    (def skolem-const-decl "Def[Val[T]]" pvs0_to_dg nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (is_finite_cross formula-decl nil finite_cross "finite_sets/")
    (is_finite_type const-decl "bool" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
     nil)
    (pvs0_to_dg_paths_vertices def-decl "{res: list[(cc_of_pvs0(def))] |
         FORALL (p: (valid_path(get_body(def))) | member(p, paths)):
           rec?(subterm_at(get_body(def), p)) IMPLIES
            member(pvs0_to_dg_make_cc(def, p), res)}" pvs0_to_dg nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(def, path))"
     pvs0_to_dg nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" pvs0_cc
     nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil)
    (finite_full formula-decl nil finite_sets nil)
    (remove_edge const-decl "bool" pvs0_to_dg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (pvs0_to_dg_edges_TCC1-2 nil 3651316543
   ("" (skeep*)
    ((""
      (lemma
       "finite_pred[[(pvs0_to_dg_verts(def)),(pvs0_to_dg_verts(def))]]")
      ((""
        (inst -1
         "LAMBDA(x: [(pvs0_to_dg_verts(def)), (pvs0_to_dg_verts(def))]): NOT remove_edge(eval_bool, eval_op1, eval_op2)(def, x`1, x`2)")
        (("" (split -1)
          (("1" (expand "is_finite")
            (("1" (skolem! -1)
              (("1" (inst 1 "N!1" "_")
                (("1"
                  (inst 1
                   "LAMBDA(x: {cc1, cc2:CallingContext[Expr, Condition, (vr?)] |
                         member[CallingContext[Expr, Condition, (vr?)]](cc1, pvs0_to_dg_verts(def)) AND
                          member[CallingContext[Expr, Condition, (vr?)]](cc2, pvs0_to_dg_verts(def)) AND                       NOT remove_edge(eval_bool, eval_op1, eval_op2)(def, cc1, cc2)}): f!1(x)")
                  (("1" (expand "injective?")
                    (("1" (skeep)
                      (("1" (inst?) (("1" (assert) nil)))))))
                   ("2" (skeep)
                    (("2" (typepred "x")
                      (("2" (expand "member")
                        (("2" (assert) nil)))))))))))))))
           ("2" (hide 2)
            (("2"
              (use "finite_sets@finite_cross[(pvs0_to_dg_verts(def)), (pvs0_to_dg_verts(def))].is_finite_cross")
              (("2"
                (use "finite_full[[(pvs0_to_dg_verts(def)), (pvs0_to_dg_verts(def))]]")
                (("2" (assert)
                  (("2" (hide-all-but 2)
                    (("2" (typepred "pvs0_to_dg_verts(def)")
                      (("2" (grind) nil))))))))))))))))))))
    nil)
   nil nil)
  (pvs0_to_dg_edges_TCC1-1 nil 3632750218
   ("" (skeep*)
    ((""
      (lemma
       "finite_pred[[(pvs0_to_dg_verts(def)),(pvs0_to_dg_verts(def))]]")
      ((""
        (inst -1
         "LAMBDA(x: [(pvs0_to_dg_verts(def)), (pvs0_to_dg_verts(def))]): NOT remove_edge(eval_bool, eval_op1, eval_op2)(def, x`1, x`2)")
        (("" (split -1)
          (("1" (expand "is_finite")
            (("1" (skolem! -1)
              (("1" (inst 1 "N!1" "_")
                (("1"
                  (inst 1
                   "LAMBDA(x: {cc1, cc2:CallingContext[Expr, Conditions, (vr?)] |
                     member[CallingContext[Expr, Conditions, (vr?)]](cc1, pvs0_to_dg_verts(def)) AND
                      member[CallingContext[Expr, Conditions, (vr?)]](cc2, pvs0_to_dg_verts(def)) AND                       NOT remove_edge(eval_bool, eval_op1, eval_op2)(def, cc1, cc2)}): f!1(x)")
                  (("1" (expand "injective?")
                    (("1" (skeep)
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "x")
                      (("2" (expand "member") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (use "finite_sets@finite_cross[(pvs0_to_dg_verts(def)), (pvs0_to_dg_verts(def))].is_finite_cross")
              (("2"
                (use "finite_full[[(pvs0_to_dg_verts(def)), (pvs0_to_dg_verts(def))]]")
                (("2" (assert)
                  (("2" (hide-all-but 2)
                    (("2" (typepred "pvs0_to_dg_verts(def)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (is_finite_cross formula-decl nil finite_cross "finite_sets/")
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
     nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/"))
   nil))
 (pvs0_to_dg_TCC1 0
  (pvs0_to_dg_TCC1-1 nil 3653141382 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil pvs0_lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(def))]"
     pvs0_to_dg nil)
    (pvs0_to_dg_verts const-decl "finite_set[CallingContext]"
     pvs0_to_dg nil)
    (member const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil pvs0_to_dg nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (remove_edge const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_edges const-decl
     "finite_set[[CallingContext, CallingContext]]" pvs0_to_dg nil))
   nil)))

