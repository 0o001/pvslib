ack_pvs0 : THEORY

  BEGIN

  IMPORTING pvs0_prelude,
            pvs0_cc[[nat,nat]]

  false_val : MACRO [nat,nat] = (0,0)
  true_val  : MACRO [nat,nat] = (1,1)

  boole(b:bool) : MACRO [nat,nat] = IF b THEN true_val ELSE false_val ENDIF

  ack_op1 : MACRO list[[[nat,nat]->[nat,nat]]] = 
    (:LAMBDA(m,n:nat): boole(m=0),
      LAMBDA(m,n:nat): boole(n=0),
      LAMBDA(m,n:nat): (n+1,0),
      LAMBDA(m,n:nat): IF m /= 0 THEN (m-1,1) ELSE false_val ENDIF,
      LAMBDA(m,n:nat): IF n /= 0 THEN (m,n-1) ELSE false_val ENDIF,
      LAMBDA(m,n:nat):false_val:)

  ack_op2 : MACRO list[[[[nat,nat],[nat,nat]]->[nat,nat]]] = 
    (:LAMBDA(v1,v2: [nat,nat]):IF v1`1 > 0 THEN (v1`1-1,v2`1) ELSE false_val ENDIF:)

  pvs0_ack : PVS0 = (ack_op1,ack_op2,false_val,
  	             ite(op1(0,vr), op1(2,vr),
                         ite(op1(1,vr),rec(op1(3,vr)),
                             rec(op2(0,vr,rec(op1(4,vr)))))))

  N  : MACRO posnat = 2

  IMPORTING CCG@ccg_to_mwg[[nat,nat], PVS0Expr[[nat,nat]], Conditions, Path,
             MT,lt,N,
             semantic_rel_expr(pvs0_ack),
             eval_conds(pvs0_ack)]

  M1 : MACRO FunMeasure = LAMBDA (v:[nat,nat]) : v`1
  M2 : MACRO FunMeasure = LAMBDA (v:[nat,nat]) : v`2

  ack_measures: FunMeasures = 
     LAMBDA (i:below(N)): 
       IF i = 0 THEN M1
       ELSE M2
       ENDIF 

  IMPORTING ccg_to_pvs0 [[nat,nat],MT,lt,N],
  	    pvs0_eval[[nat,nat]],
            CCG@bounding_circuits[CallingContext,N]

  A0: Measure_Matrix = (: (:  1 ,  0 :),
      		          (: -1 , -1 :) :)
  
  A1: Measure_Matrix = (: (:  1 , -1 :),
      		          (: -1 , -1 :) :)

  A2: Measure_Matrix = (: (:  0 , -1 :),
      		          (: -1 , 1 :) :)
 
  ack_dg : (sound_ccg_digraph(pvs0_ack)) =
    pvs0_to_fully_connected_dg(pvs0_ack)

  ack_ccg: MACRO CCG = make_ccg(ack_dg,ack_measures)

  ack_mm: (indi_f_sound(ack_ccg)) =
   LAMBDA(v: vert(dg(ack_ccg))):
     IF v`nid = (: 1, 2 :) THEN A0
     ELSIF v`nid =  (: 2, 2 :) THEN A1
     ELSE A2
     ENDIF

  pvs0_ack_terminating: JUDGEMENT
    pvs0_ack HAS_TYPE (terminating?)

  pvs0_ack_tcc_termination: JUDGEMENT
    pvs0_ack HAS_TYPE (pvs0_tcc_termination)

  ack_msr : LEMMA
    EXISTS (m:WFM): pvs0_tcc_termination_pred(pvs0_ack)(m)
    
  ack_wfm  : (pvs0_tcc_termination_pred(pvs0_ack))

  ack_pvs0(m,n:nat): MACRO nat = pvs0_eval(pvs0_ack)(m,n)`1

END ack_pvs0
