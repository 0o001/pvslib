ack_pvs0 : THEORY
BEGIN
% ------------------------------------------------------------------------------ 
% Part0: Definition of ack in PVS0 
%
  IMPORTING lang[[nat,nat]]

  ebool(m,n:nat) : bool = m /= 0

  boole(b:bool) : Val = (IF NOT b THEN 0 ELSE 1 ENDIF,0)

  eop1(op:nat)(m,n:nat) : Val = 
    COND op = 0 -> boole(m=0),
         op = 1 -> boole(n=0),
         op = 2 -> (n+1,0),
         op = 3 -> IF m /= 0 THEN (m-1,1) ELSE (m,n) ENDIF,
	 op = 4 -> IF n /= 0 THEN (m,n-1) ELSE (m,n) ENDIF,
         ELSE -> (m,n)
    ENDCOND

  eop2(op:nat)(v1,v2:Val) : Val = 
    IF v1`1 > 0 THEN (v1`1-1,v2`1) ELSE v1 ENDIF

  % Interpretation:
  %   vr        : (m,n)
  %   bool(m,n) : m /= 0
  %   op1 0     : (m,n) -> bool(m=0)
  %   op1 1     : (m,n) -> bool(n=0)
  %   op1 2     : (m,n) -> (n+1,0)
  %   op1 3     : (m,n) -> (m-1,1)
  %   op1 4     : (m,n) -> (m,n-1)
  %   op2 0     : (m1,n1),(m2,n2) -> (m1-1,m2)

  pvs0_ack : PVS0 = def(ite(op1(0,vr),
                            op1(2,vr),
                            ite(op1(1,vr),
                                rec(op1(3,vr)),
                                rec(op2(0,vr,rec(op1(4,vr)))))))

% ------------------------------------------------------------------------------ 
% Part1: Proof of termination via pvs0_tccs
%    

  IMPORTING measure_termination_defs
  	    [ [nat,nat]  % Base type
	    , ordinal    % Measure type
	    , ordinals.< % Measure relation
	    ] AS mt_lex2

  % This lemma assures that there are one measure type and one measure relation 
  % that can be used to prove termination via pvs0_tcc.
  pvs0_ack_tcc_termination: LEMMA
    mt_lex2.pvs0_tcc_termination(ebool,eop1,eop2)(pvs0_ack)

% ------------------------------------------------------------------------------ 
% Part2: Any measure fulfilling pvs0_tcc can be used to prove PVS's tccs.
%
  MT_: TYPE+
  R_ : (well_founded?[MT_])

  IMPORTING measure_termination_defs
  	    [ [nat,nat]  % Base type
	    , MT_        % Measure type
	    , R_         % Measure relation
	    ] AS mt_gen

  wfm_ack_: mt_gen.WFM

  pvs0_ack_pvs0_tcc_gen_termination: AXIOM
    mt_gen.pvs0_tcc_termination_(ebool,eop1,eop2)(pvs0_ack)(wfm_ack_)

  % By proving the TCCs generated by this importing clause, we are proving that any
  % measure type and any relation such that pvs0_tcc_termination is valid, can be
  % used to prove termination via TCC in PVS.
  IMPORTING ack_ax {{ MT := MT_, R := R_ , wfm_ack := wfm_ack_}}

% ------------------------------------------------------------------------------ 
% Part3: Semantic equivalence between definitions.
%
  IMPORTING measure_termination
  	    [ [nat,nat]  % Base type
  	    , ordinal    % Measure type
  	    , ordinals.< % Measure relation
  	    ] AS termination_concrete

  mf: mt_lex2.WFM = LAMBDA(m,n:nat): lex2(m, n)

  lt_concrete_val(p1,p2: [nat,nat]) : bool = 
    termination_concrete.lt_val(ebool,eop1,eop2)(pvs0_ack)(mf)(p1,p2)

  IMPORTING orders@omega[[nat,nat], lt_concrete_val]

  Omega_ack(m,n: nat) : nat = Omega(m,n)

  ack_pvs0(m,n:nat) : nat =
    val(eval(ebool,eop1,eop2)(Omega_ack(m,n),pvs0_ack)(val2env(m,n)))`1

  pvs0_ack_eval : LEMMA
    FORALL(m,n: nat):
      ack(m,n) = ack_pvs0(m,n)  
 
% ------------------------------------------------------------------------------ 
% Part4: Termination by CCG
%

  IMPORTING pvs0_to_ccg[[nat,nat],nat,LAMBDA(n,m:nat):n < m,2]

% ...

END ack_pvs0
