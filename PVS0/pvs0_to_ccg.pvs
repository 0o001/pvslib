%********************************************************************************%
%										 %
%   Authors:									 %
%   										 %
%       Andréia Borges Avelar -- Universidade  de  Brasília  - Brasil  		 %
%       Mauricio Ayala-Rincon -- Universidade  de  Brasília  - Brasil  		 %
%                 Cesar Muñoz -- NASA  Langley  Research  Center - US		 %
%	   Mariano M. Moscato -- National Institute of Aerospace - US            %
%		  	      	      	      	       	      			 %
%********************************************************************************%
pvs0_to_ccg[T:TYPE+,MT:TYPE,lt:(well_founded?[MT]),N:posnat] : THEORY
BEGIN

  IMPORTING lang[T],
            BoolPVS0[T],
            structures@set_as_list,
            CCG@ccg_def[Val,Expr,Conditions,MT,lt,N]


                      n : VAR nat
               cc1, cc2 : VAR CallingContext
                    def : VAR Def
              eval_bool : VAR [T -> bool]
               eval_op1 : VAR [nat->[T->T]]
               eval_op2 : VAR [nat->[[T,T]->T]]
	           expr : VAR Expr

% ------------------------------------------------------------------------------- %
% functions to build the list and then the set of vertices

  IMPORTING eval_props[T]

  pvs0_to_ccg_vertex((def), path:(valid_path(get_body(def))))(cc: CallingContext) : bool =
    subterm_at(get_body(def),path) = rec(cc`actuals) AND
    path_conditions(get_body(def), path) = cc`conds
    
  cc_of_pvs0(def)(cc: CallingContext): bool =
    EXISTS(path: (valid_path(get_body(def)))): pvs0_to_ccg_vertex(def, path)(cc)

  pvs0_to_ccg_make_cc( (def), path: (valid_path(get_body(def))) | 
				    rec?(subterm_at(get_body(def), path)) ) 
  : (pvs0_to_ccg_vertex(def, path)) =
    make_cc(get_arg(subterm_at(get_body(def), path)), path_conditions(get_body(def), path))

  % Computable calculation of pvs0 ccg vertices given valid paths of a definition
  pvs0_to_ccg_paths_vertices(def: Def, paths: list[(valid_path(get_body(def)))]) : RECURSIVE 
    { res: list[ (cc_of_pvs0(def)) ] | 
      	FORALL(p: (valid_path(get_body(def))) | member(p, paths)):
	  rec?(subterm_at(get_body(def), p)) 
	  IMPLIES member(pvs0_to_ccg_make_cc(def, p), res) } = 
    CASES paths OF
      null: null,
      cons(p, ps): LET subexpr = subterm_at(get_body(def), p) 
                   IN IF rec?(subexpr) 
  		      THEN cons( pvs0_to_ccg_make_cc(def, p), 
		                 pvs0_to_ccg_paths_vertices(def, ps) )
  		      ELSE pvs0_to_ccg_paths_vertices(def, ps) ENDIF
    ENDCASES
  MEASURE paths BY <<

  pvs0_to_ccg_vertices_l(def): list[(cc_of_pvs0(def))] =
    pvs0_to_ccg_paths_vertices(def, valid_paths(get_body(def)))
  
  pvs0_to_ccg_vertices_list_completeness: LEMMA
    FORALL(def: Def, cc: (cc_of_pvs0(def))): member[CallingContext](cc, pvs0_to_ccg_vertices_l(def))

  pvs0_to_ccg_verts(def): finite_set[CallingContext] =
    list2set[CallingContext](pvs0_to_ccg_vertices_l(def))

  cc_of_pvs0_completeness: LEMMA
    FORALL(def: Def, cc: (cc_of_pvs0(def))): pvs0_to_ccg_verts(def)(cc)

  % equivalence between ccg_verts and pvs0_ccs
  IMPORTING measure_termination_defs

  ccg_vert_valid_cc: LEMMA
   FORALL(ccg_vert: (cc_of_pvs0(def))): 
    EXISTS(cc: (pvs0_tcc_valid_cc(def))): 
      ccg_vert`actuals = get_arg(cc`rec_expr) AND 
      ccg_vert`conds = cc`cnds

% ------------------------------------------------------------------------------- %
% function to remove edges

  remove_edge(eval_bool,eval_op1,eval_op2)(def,cc1,cc2) : bool =
    FORALL(env:Environment,val:Val): 
      eval_conds(eval_bool,eval_op1,eval_op2)(def,cc1`conds,env) AND
      semantic_rel_expr(eval_bool,eval_op1,eval_op2)
                       (cc1`actuals,get_body(def),env,val) IMPLIES
        NOT eval_conds(eval_bool,eval_op1,eval_op2)(def,cc2`conds,val2env(val))


% ------------------------------------------------------------------------------- %
% function to built the set of edges

  IMPORTING finite_sets@finite_cross % to prove TCC of pvs0_to_ccg_edges

  pvs0_to_ccg_edges(eval_bool,eval_op1,eval_op2)(def):
  finite_set[[CallingContext,CallingContext]] =
    {(cc1,cc2) | member(cc1,pvs0_to_ccg_verts(def)) AND
     member(cc2,pvs0_to_ccg_verts(def)) AND
     NOT remove_edge(eval_bool,eval_op1,eval_op2)(def,cc1,cc2)}


% ------------------------------------------------------------------------------- %
% function to built the ccg given a PVS0 definition

  pvs0_to_ccg_dg(eval_bool,eval_op1,eval_op2)(def): digraph =
    (# vert  := pvs0_to_ccg_verts(def),
       edges := pvs0_to_ccg_edges(eval_bool,eval_op1,eval_op2)(def)
     #)

  measures: VAR FunMeasures

  pvs0_to_ccg(eval_bool,eval_op1,eval_op2)(def,measures): CCG =
    (# dg := pvs0_to_ccg_dg(eval_bool,eval_op1,eval_op2)(def),
       ms := measures #)


% ------------------------------------------------------------------------------- %
%

  IMPORTING CCG@scp

  scp_termination_pvs0(eval_bool,eval_op1,eval_op2)(def) : bool =
    scp_termination?[Val,Expr,Conditions,[nat->(cc_of_pvs0(def))]](
      LAMBDA(expr:Expr[Val[T]],env:Val[T],val:Val[T]):
        semantic_rel_expr (eval_bool,eval_op1,eval_op2) (expr,get_body(def),LAMBDA(vr:(vr?)):env,val),
      LAMBDA(conds:Conditions,env:Val[T]):
        eval_conds(eval_bool,eval_op1,eval_op2)(def,conds,LAMBDA(vr:(vr?)):env))

  x,y: VAR Val 

  R(eval_bool,eval_op1,eval_op2)(def)(x,y): bool = 
    EXISTS(cc: (cc_of_pvs0(def))):
      eval_conds(eval_bool,eval_op1,eval_op2)(def,cc`conds,val2env(y)) AND
      semantic_rel_expr(eval_bool,eval_op1,eval_op2) (cc`actuals,get_body(def),val2env(y),x)

  IMPORTING orders@well_foundedness[Val]

  R_wf: LEMMA
    scp_termination_pvs0(eval_bool,eval_op1,eval_op2)(def)
    IMPLIES well_founded?(R(eval_bool, eval_op1, eval_op2)(def))

  R_no_desc_inf_branch: LEMMA
    FORALL (x: Val[T]):
      is_finite({y: Val[T] | R(eval_bool, eval_op1, eval_op2)(def)(y, x)})    

  IMPORTING orders@omega AS OmegaTh

  scp_tcc_termination_lr : THEOREM
    scp_termination_pvs0(eval_bool,eval_op1,eval_op2)(def) 
    IMPLIES pvs0_tcc_termination[T,nat,<](eval_bool,eval_op1,eval_op2)(def)

  IMPORTING measure_termination

  scp_tcc_termination_rl : THEOREM
    pvs0_tcc_termination[T,nat,<](eval_bool,eval_op1,eval_op2)(def)
    IMPLIES scp_termination_pvs0(eval_bool,eval_op1,eval_op2)(def) 

  scp_termination_terminates : THEOREM
    scp_termination_pvs0(eval_bool,eval_op1,eval_op2)(def) 
    IFF 
    terminates(eval_bool,eval_op1,eval_op2)(def)

% ------------------------------------------------------------------------------- %
%
  IMPORTING CCG@ccg

  ccg_termination_pvs0(eval_bool,eval_op1,eval_op2)(def) : bool =
    EXISTS (measures):
      LET G = pvs0_to_ccg(eval_bool,eval_op1,eval_op2)(def,measures) IN
        ccg_termination?[Val,Expr,Conditions,MT,lt,N,
           LAMBDA(expr:Expr,val_e,val_a:Val): 
             semantic_rel_expr (eval_bool,eval_op1,eval_op2)
			       (expr,get_body(def),val2env(val_e),val_a),
           LAMBDA(conds:Conditions,val_e:Val):
             eval_conds(eval_bool,eval_op1,eval_op2)(def,conds,val2env(val_e))](G)

 IMPORTING structures@more_list_props

 ccg_termination_measure_termination: THEOREM
    ccg_termination_pvs0(eval_bool,eval_op1,eval_op2)(def) 
    IFF 
    pvs0_tcc_termination[T,nat,<](eval_bool,eval_op1,eval_op2)(def) 

%%%%%%%%%% TO BE PROVEN %%%%%%%%%%%%%%%%

%  terminates_ccg_criterion_one : THEOREM
%    FORALL (eval_bool,eval_op1,eval_op2,measures)(pvs:Def):
%       LET ccg = pvs0_to_ccg(eval_bool,eval_op1,eval_op2)(pvs,measures) IN
%         criterion_one?(....)
%         IMPLIES
%         terminates(pvs)

%  terminates_ccg_criterion_two : THEOREM
%    FORALL (eval_bool,eval_op1,eval_op2,measures)(pvs:Def):
%       LET ccg = pvs0_to_ccg(eval_bool,eval_op1,eval_op2)(pvs,measures) IN
%         criterion_two?(....)
%         IMPLIES
%         terminates(pvs)

END pvs0_to_ccg
