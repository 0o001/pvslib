(orders_more_props
 (first_lt_existence 0
  (first_lt_existence-1 nil 3643104550
   ("" (expand "is_first_lt")
    (("" (case "well_founded?(lt)")
      (("1" (expand "well_founded?")
        (("1" (inst -1 "LAMBDA(p:T):TRUE")
          (("1" (split -1)
            (("1" (skolem -1 "min")
              (("1" (inst 1 "min")
                (("1" (skeep)
                  (("1" (inst -1 "y")
                    (("1" (case "trichotomous?(lt)")
                      (("1" (expand "trichotomous?")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (typepred "lt") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (inst 1 "epsilon({x:T | TRUE})") nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (typepred "lt") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((lt formal-const-decl "(well_ordered?[T])" orders_more_props nil)
    (well_ordered? const-decl "bool" orders nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil orders_more_props nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (trichotomous? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (strict_total_order? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (is_first_lt const-decl "bool" orders_more_props nil))
   shostak))
 (prev_lt_existence 0
  (prev_lt_existence-1 nil 3643106214 ("" (postpone) nil nil) nil
   shostak))
 (nth_from_TCC1 0
  (nth_from_TCC1-1 nil 3643046398
   ("" (use "wf_nat") (("" (grind) nil nil)) nil)
   ((restrict const-decl "R" restrict nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   nil))
 (nth_from_TCC2 0
  (nth_from_TCC2-1 nil 3643046398 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (has_prev const-decl "bool" orders_more_props nil))
   nil))
 (nth_from_TCC3 0
  (nth_from_TCC3-1 nil 3643046398 ("" (subtype-tcc) nil nil)
   ((has_prev const-decl "bool" orders_more_props nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (is_height_lt_gt0 0
  (is_height_lt_gt0-1 nil 3643057015
   ("" (skeep)
    (("" (expand "is_height_lt")
      (("" (case "h=0")
        (("1" (hide 1)
          (("1" (replaces -1)
            (("1" (typepred "y")
              (("1" (expand "nth_from")
                (("1" (replaces -2)
                  (("1" (expand "has_prev")
                    (("1" (skeep)
                      (("1" (case "x/=first_lt")
                        (("1" (use "first_lt_def")
                          (("1" (expand "is_first_lt")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (case "transitive?(lt)")
                                  (("1"
                                    (expand "transitive?")
                                    (("1"
                                      (inst -1 "x" "first_lt" "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "irreflexive?(lt)")
                                          (("1"
                                            (expand "irreflexive?")
                                            (("1" (inst?) nil nil))
                                            nil)
                                           ("2"
                                            (typepred "lt")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "lt")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "/=")
                          (("2" (replaces -1)
                            (("2" (case "irreflexive?(lt)")
                              (("1"
                                (expand "irreflexive?")
                                (("1" (inst?) nil nil))
                                nil)
                               ("2"
                                (typepred "lt")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((is_height_lt const-decl "bool" orders_more_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil orders_more_props nil)
    (has_prev const-decl "bool" orders_more_props nil)
    (first_lt_def formula-decl nil orders_more_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (pred type-eq-decl nil defined_types nil)
    (well_ordered? const-decl "bool" orders nil)
    (lt formal-const-decl "(well_ordered?[T])" orders_more_props nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (strict_total_order? const-decl "bool" orders nil)
    (well_founded? const-decl "bool" orders nil)
    (is_first_lt const-decl "bool" orders_more_props nil)
    (first_lt const-decl "T" orders_more_props nil)
    (/= const-decl "boolean" notequal nil)
    (nth_from def-decl "T" orders_more_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (is_height_lt_dec_TCC1 0
  (is_height_lt_dec_TCC1-1 nil 3643056306 ("" (subtype-tcc) nil nil)
   ((is_height_lt const-decl "bool" orders_more_props nil)) nil))
 (is_height_lt_dec 0
  (is_height_lt_dec-1 nil 3643057294
   ("" (skeep)
    (("" (expand "is_height_lt" -1)
      (("" (expand "nth_from")
        (("" (expand "is_height_lt") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((is_height_lt const-decl "bool" orders_more_props nil)
    (nth_from def-decl "T" orders_more_props nil))
   shostak))
 (height_lt_TCC1 0
  (height_lt_TCC1-1 nil 3643052387
   ("" (measure-induct "y" "y" :order "lt")
    (("" (skolem 1 "x")
      (("" (flatten)
        (("" (expand "nonempty?" 1)
          (("" (expand "empty?")
            (("" (case "has_prev(x)")
              (("1" (expand "member")
                (("1" (expand "is_height_lt" -3)
                  (("1" (expand "nth_from")
                    (("1" (inst -2 "prev_lt(x)")
                      (("1" (assert)
                        (("1" (split -2)
                          (("1" (expand "is_height_lt")
                            (("1" (expand "nonempty?")
                              (("1"
                                (expand "empty?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (inst -3 "x_1 + 1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "0")
                            (("2" (use "prev_lt_def")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "is_prev_lt")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 "0")
                (("2" (hide -1)
                  (("2" (expand "member")
                    (("2" (expand "is_height_lt")
                      (("2" (expand "nth_from")
                        (("2" (expand "has_prev")
                          (("2" (use "first_lt_def")
                            (("2" (inst 1 "first_lt")
                              (("2"
                                (expand "is_first_lt")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((has_prev const-decl "bool" orders_more_props nil)
    (x skolem-const-decl "T" orders_more_props nil)
    (prev_lt const-decl "T" orders_more_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (prev_lt_def formula-decl nil orders_more_props nil)
    (is_prev_lt const-decl "bool" orders_more_props nil)
    (nth_from def-decl "T" orders_more_props nil)
    (member const-decl "bool" sets nil)
    (first_lt const-decl "T" orders_more_props nil)
    (is_first_lt const-decl "bool" orders_more_props nil)
    (first_lt_def formula-decl nil orders_more_props nil)
    (empty? const-decl "bool" sets nil)
    (is_height_lt const-decl "bool" orders_more_props nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_ordered?[T])" orders_more_props nil)
    (well_ordered? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil orders_more_props nil)
    (measure_induction formula-decl nil measure_induction nil))
   nil))
 (height_lt_dec 0
  (height_lt_dec-1 nil 3643052464
   ("" (skeep)
    (("" (expand "height_lt")
      (("" (typepred "min(is_height_lt(y))")
        (("" (use "is_height_lt_dec")
          (("1" (assert)
            (("1" (typepred "min(is_height_lt(prev_lt(y)))")
              (("1" (inst? -2 :where -3)
                (("1" (assert) nil nil)
                 ("2" (use "is_height_lt_gt0") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "is_height_lt_gt0") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((height_lt const-decl "nat" orders_more_props nil)
    (is_height_lt_dec formula-decl nil orders_more_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (y skolem-const-decl "(has_prev)" orders_more_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (prev_lt const-decl "T" orders_more_props nil)
    (is_height_lt_gt0 formula-decl nil orders_more_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil orders_more_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_height_lt const-decl "bool" orders_more_props nil)
    (has_prev const-decl "bool" orders_more_props nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil))
   shostak))
 (Omega_set_TCC1 0
  (Omega_set_TCC1-1 nil 3643046398
   ("" (skeep) (("" (use "height_lt_dec") nil nil)) nil)
   ((has_prev const-decl "bool" orders_more_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil orders_more_props nil)
    (height_lt_dec formula-decl nil orders_more_props nil))
   nil))
 (Omega_set_TCC2 0
  (Omega_set_TCC2-1 nil 3643046398
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(prev_lt(y))")
        (("" (expand "add")
          (("" (split 1)
            (("1" (flatten)
              (("1" (assert)
                (("1" (inst?)
                  (("1" (expand "member")
                    (("1" (assert)
                      (("1" (split -)
                        (("1" (replaces -1)
                          (("1" (use "prev_lt_def")
                            (("1" (assert)
                              (("1"
                                (expand "is_prev_lt")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "prev_lt_def")
                          (("2" (assert)
                            (("2" (expand "is_prev_lt")
                              (("2"
                                (flatten)
                                (("2"
                                  (case "transitive?(lt)")
                                  (("1"
                                    (expand "transitive?")
                                    (("1"
                                      (inst? -1 :where 2)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "lt")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (expand "member")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (use "prev_lt_def")
                        (("2" (assert)
                          (("2" (expand "is_prev_lt")
                            (("2" (flatten)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (PRED type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (strict_total_order? const-decl "bool" orders nil)
    (well_founded? const-decl "bool" orders nil)
    (injective? const-decl "bool" functions nil)
    (is_prev_lt const-decl "bool" orders_more_props nil)
    (prev_lt_def formula-decl nil orders_more_props nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil orders_more_props nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (height_lt const-decl "nat" orders_more_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (well_ordered? const-decl "bool" orders nil)
    (lt formal-const-decl "(well_ordered?[T])" orders_more_props nil)
    (has_prev const-decl "bool" orders_more_props nil)
    (prev_lt const-decl "T" orders_more_props nil))
   nil))
 (Omega_set_TCC3 0
  (Omega_set_TCC3-1 nil 3643046398 ("" (subtype-tcc) nil nil)
   ((T formal-nonempty-type-decl nil orders_more_props nil)
    (has_prev const-decl "bool" orders_more_props nil)
    (singleton const-decl "(singleton?)" sets nil))
   nil)))

