(pvs0_expressibility
 (TerminationExpressible 0
  (TerminationExpressible-1 nil 3666647414
   ("" (skeep)
    ((""
      (inst 1
       "make_pvs0(LAMBDA(pvs0:PVS0[T]):IF terminating?(pvs0) THEN PVS0True ELSE PVS0False ENDIF)")
      (("" (skeep)
        (("" (use "from_pvs_to_pvs0")
          (("" (case-replace "terminating?(pvs0_1)")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2"
                (name-replace "ff" "make_pvs0(LAMBDA (pvs0: PVS0[T]):
                               IF terminating?(pvs0) THEN PVS0True
                               ELSE PVS0False
                               ENDIF)")
                (("2" (lemma "deterministic")
                  (("2" (inst?)
                    (("2" (inst -1 "PVS0True") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil pvs0_expressibility nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (make_pvs0 const-decl "(terminating?)" pvs0_pvs_T nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (from_pvs_to_pvs0 formula-decl nil pvs0_pvs_T nil)
    (deterministic formula-decl nil pvs0_lang nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak)))

