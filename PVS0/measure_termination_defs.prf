(measure_termination_defs
 (pvs0_ccs_rec_TCC1 0
  (pvs0_ccs_rec_TCC1-1 nil 3643194100 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (T formal-nonempty-type-decl nil measure_termination_defs nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil))
   nil))
 (pvs0_ccs_rec_TCC2 0
  (pvs0_ccs_rec_TCC2-1 nil 3643194100 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (member def-decl "bool" list_props nil))
   nil))
 (pvs0_ccs_rec_TCC3 0
  (pvs0_ccs_rec_TCC3-1 nil 3643194100 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (T formal-nonempty-type-decl nil measure_termination_defs nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil))
   nil))
 (pvs0_ccs_rec_TCC4 0
  (pvs0_ccs_rec_TCC4-1 nil 3643194100 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (pvs0_ccs_rec_TCC5 0
  (pvs0_ccs_rec_TCC5-2 nil 3643368943
   ("" (skeep*)
    (("" (expand "member" -4)
      (("" (assert)
        (("" (split -4)
          (("1" (replace -2 -1)
            (("1" (assert)
              (("1" (replace -1 :hide? t)
                (("1" (expand "member" 1) (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -2 -1)
            (("2" (assert)
              (("2" (typepred "v(def)(ps)")
                (("2" (inst -2 "p_1")
                  (("2" (assert)
                    (("2" (expand "member" 1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil measure_termination_defs nil)
    (Conditions type-eq-decl nil lang nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil) (Val type-eq-decl nil lang nil)
    (PVS0 type-decl nil PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (valid_path def-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" lang nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (path_conditions def-decl "Conditions" lang nil))
   nil)
  (pvs0_ccs_rec_TCC5-1 nil 3643194100 ("" (subtype-tcc) nil nil) nil
   nil))
 (pvs0_ccs_rec_TCC6 0
  (pvs0_ccs_rec_TCC6-1 nil 3643194100 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" lang nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil))
   nil))
 (pvs0_ccs_rec_TCC7 0
  (pvs0_ccs_rec_TCC7-2 nil 3643368991
   ("" (skeep*)
    (("" (typepred "v(def)(ps)")
      (("" (inst -2 "p_1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((path_conditions def-decl "Conditions" lang nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" lang nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (valid_path def-decl "bool" lang nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (PVS0 type-decl nil PVS0_adt nil) (Val type-eq-decl nil lang nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Conditions type-eq-decl nil lang nil)
    (T formal-nonempty-type-decl nil measure_termination_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (pvs0_ccs_rec_TCC7-1 nil 3643194100 ("" (subtype-tcc) nil nil) nil
   nil))
 (pvs0_ccs_completness 0
  (pvs0_ccs_completness-1 nil 3643391091
   ("" (skeep)
    (("" (expand "pvs0_ccs")
      (("" (typepred "valid_paths(get_body(def))")
        (("" (hide -1)
          (("" (typepred "cc")
            (("" (expand "pvs0_tcc_valid_cc")
              (("" (flatten)
                ((""
                  (typepred
                   "pvs0_ccs_rec(def)(valid_paths(get_body(def)))")
                  (("" (hide -1)
                    (("" (inst -1 "cc`path")
                      (("" (assert)
                        (("" (inst -5 "cc`path")
                          (("" (assert)
                            ((""
                              (case "(# `path := cc`path, `rec_expr := subterm_at(get_body(def), cc`path), `cnds := path_conditions(get_body(def), cc`path) #) = cc")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 -2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (apply-extensionality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]"
     measure_termination_defs nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(def))] |
         FORALL (p: (valid_path(get_body(def)))):
           LET subexpr = subterm_at(get_body(def), p) IN
             member(p, paths) AND rec?(subexpr) IMPLIES
              LET cc: (pvs0_tcc_valid_cc(def)) =
                    (# `path := p,
                       `rec_expr := subexpr,
                       `cnds := path_conditions(get_body(def), p) #)
                IN member(cc, res)}" measure_termination_defs nil)
    (path_conditions def-decl "Conditions" lang nil)
    (BoolPVS0 type-decl nil BoolPVS0_adt nil)
    (subterm_at def-decl "({res: Expr | subterm(res, expr)})" lang nil)
    (subterm adt-def-decl "boolean" PVS0_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_tcc_valid_cc const-decl "bool" lang nil)
    (PVS0_CC type-eq-decl nil lang nil)
    (Conditions type-eq-decl nil lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil measure_termination_defs nil)
    (Val type-eq-decl nil lang nil) (PVS0 type-decl nil PVS0_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (vr? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op1? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (op2? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (rec? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (ite? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Expr type-eq-decl nil PVS0_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_path def-decl "bool" lang nil)
    (def? adt-recognizer-decl "[PVS0 -> boolean]" PVS0_adt nil)
    (Def type-eq-decl nil PVS0_adt nil)
    (get_body adt-accessor-decl "[Def -> Expr]" PVS0_adt nil)
    (member def-decl "bool" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
         FORALL (p: (valid_path(expr))): member(p, res)}" eval_props
     nil))
   shostak)))

