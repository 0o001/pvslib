pvs0_props[T:TYPE+] : THEORY
BEGIN

 IMPORTING structures@set_as_list, 
	   structures@set_as_list_props,
	   pvs0_cc[T], 
	   structures@more_list_props[nat], 
	   structures@more_list_props[BoolPVS0[T]]

  eval_bool : VAR [Val -> bool] 
  eval_op1 : VAR [nat->[Val->Val]]
  eval_op2 : VAR [nat->[[Val,Val]->Val]]

  subterm_transitive : LEMMA  FORALL(exa,exb,exc : Expr) : 
  subterm(exa,exb) AND subterm(exb,exc) IMPLIES subterm(exa,exc)

  null_path: LEMMA
  FORALL(expr: Expr): valid_path(expr)(null)

  valid_paths_subexpr : LEMMA
  FORALL (expr : Expr, path : (valid_path(expr))):
   LET sterm = subterm_at(expr, path) IN
    FORALL (path2 :  (valid_path(sterm))) : 
      valid_path(expr)(append(path2, path) )

  subterm_append: LEMMA 
  FORALL (expr : Expr, path : (valid_path(expr))):
   LET sterm = subterm_at(expr, path) IN
   FORALL (path2: (valid_path(sterm))):
     subterm_at(expr, append(path2,path)) = subterm_at(sterm, path2)

  valid_0_path_ext: LEMMA
  FORALL (expr : Expr, path : (valid_path(expr))):
   LET sterm = subterm_at(expr, path) IN
   (op1?(sterm) OR op2?(sterm) OR rec?(sterm) OR ite?(sterm))
   IMPLIES valid_path(expr)(cons(0,path))
  
  valid_1_path_ext: LEMMA
  FORALL (expr : Expr, path : (valid_path(expr))):
   LET sterm = subterm_at(expr, path) IN
   (op2?(sterm) OR ite?(sterm))
   IMPLIES valid_path(expr)(cons(1,path))
  
  valid_2_path_ext: LEMMA
  FORALL (expr : Expr, path : (valid_path(expr))):
   LET sterm = subterm_at(expr, path) IN
   ite?(sterm)
   IMPLIES valid_path(expr)(cons(2,path))

 app_prefix_of_path_ext: LEMMA
  FORALL (expr : Expr, path : (valid_path(expr)), path_ext : (valid_path(expr)) | suffix?(path,path_ext) ):
   LET sterm = subterm_at(expr, path) IN 
     EXISTS (p: (valid_path(sterm))): append(p, path) = path_ext

  cnst_vr_path_ext: LEMMA  
  FORALL (expr : Expr, path_ext,path : (valid_path(expr))):
   LET sterm = subterm_at(expr, path) IN
   (cnst?(sterm) OR vr?(sterm)) AND 
   suffix?(path, path_ext)
   IMPLIES path=path_ext
  
  op1_rec_path_ext: LEMMA
  FORALL (expr : Expr, path_ext,path : (valid_path(expr))):
   LET sterm = subterm_at(expr, path) IN
   (op1?(sterm) OR rec?(sterm)) AND 
   suffix?[nat](path, path_ext) AND
   path /= path_ext
   IMPLIES suffix?[nat](cons(0, path), path_ext)
  
  op2_path_ext: LEMMA
  FORALL (expr : Expr, path_ext,path : (valid_path(expr))):
   LET sterm = subterm_at(expr, path) IN
   op2?(sterm) AND 
   suffix?(path, path_ext) AND
   path /= path_ext
   IMPLIES suffix?(cons(0, path), path_ext) OR suffix?(cons(1, path), path_ext)
 
  ite_path_ext: LEMMA
  FORALL (expr : Expr, path_ext,path : (valid_path(expr))):
   LET sterm = subterm_at(expr, path) IN
   ite?(sterm) AND 
   suffix?(path, path_ext) AND
   path /= path_ext
   IMPLIES suffix?(cons(0, path), path_ext) OR suffix?(cons(1, path), path_ext) OR suffix?(cons(2, path), path_ext)

  valid_paths(expr: Expr): RECURSIVE { res: list[(valid_path(expr))] | 
    		    FORALL(p: (valid_path(expr))): member(p, res) }
    = 
      CASES expr OF
        op1(o,a)   : cons(null, map(LAMBDA(l:list[nat]): append[nat](l, (: 0 :)))(valid_paths(a)) ),
        op2(o,a,b) : cons(null, append[list[nat]]( map(LAMBDA(l:list[nat]): append[nat](l, (: 0 :)))
		     				      (valid_paths(a)) 
        		              	         , map(LAMBDA(l:list[nat]): append[nat](l, (: 1 :)))
                                                      (valid_paths(b)) ) ),
        rec(a)     : cons(null, map(LAMBDA(l:list[nat]): append[nat](l, (: 0 :)))(valid_paths(a)) ),
        ite(a,b,c) : cons(null, append[list[nat]]( append[list[nat]]( map(LAMBDA(l:list[nat]): append[nat](l, (: 0 :)))(valid_paths(a)) 
        		   	         , map(LAMBDA(l:list[nat]): append[nat](l, (: 1 :)))(valid_paths(b)) )
  			 , map(LAMBDA(l:list[nat]): append[nat](l, (: 2 :)))(valid_paths(c)) ) )
        ELSE (: null :)
      ENDCASES 
    MEASURE expr By <<

  subset_member_sl: LEMMA
  FORALL(l1, l2 :Conditions):
  subset_sl?(l1,l2) <=>
  (FORALL(e :BoolPVS0): member(e,l1) => member(e,l2))

  suffix_subset_sl: LEMMA
  FORALL(l1, l2: Conditions):
  suffix?(l1,l2) => subset_sl?(l1,l2)

% Auxiliary function used only to simplify next lemma.
  path_conds_aux((n : posnat | n<=2 ), (expr: Expr | ite?(expr))) : BoolPVS0 =
  IF n=1 
  THEN pvsbool(get_cond(expr))
  ELSE pvsnot(get_cond(expr))
  ENDIF

% Invariance of conditions in a path when a new ite condition is added
  path_conditions_cons: LEMMA
  FORALL(body: Expr)(path: (valid_path(body)))(n: nat):
   LET expr = subterm_at(body, path) IN
    ite?(expr) AND (n>=1 AND n<=2)
     IMPLIES
      path_conditions(body, cons(n, path)) 
      = cons(path_conds_aux(n,expr),
         path_conditions(body, path))

  path_conditions_unmodified: LEMMA
  FORALL(body: Expr)(path: (valid_path(body)))(n: nat):
  LET expr = subterm_at(body, path) IN
  (NOT vr?(expr) AND NOT cnst?(expr) AND n=0)
  IMPLIES
  path_conditions(body, cons(n, path)) 
  = path_conditions(body, path)

  path_conditions_unmodified2: LEMMA
  FORALL(body: Expr)(path: (valid_path(body)))(n: nat):
  LET expr = subterm_at(body, path) IN
  (op2?(expr) AND n=1)
  IMPLIES
  path_conditions(body, cons(n, path)) 
  = path_conditions(body, path)

  
 % Conditions over a path are preserved.
  suffix_path_cnds_suffix : LEMMA
  FORALL(expr: Expr)(path,path_ext: (valid_path(expr))):
  suffix?(path, path_ext) IMPLIES
  suffix?(path_conditions(expr, path), path_conditions(expr, path_ext))

% Conditions over a path are preserved in conditions of extensions of the path.
  suffix_path_cnds : LEMMA
  FORALL(expr: Expr)(path,path_ext: (valid_path(expr))):
  suffix?(path, path_ext) IMPLIES
  subset_sl?(path_conditions(expr, path), path_conditions(expr, path_ext))

% True chains of conditions have conditions that are true.
  member_conds_rec: LEMMA
  FORALL(env:Environment)(expr: Expr)(cnds: Conditions, e: BoolPVS0):
  member(e, cnds) AND
  eval_conds_rec(eval_bool, eval_op1, eval_op2)
                (expr, cnds, env)
  IMPLIES eval_conds_rec(eval_bool, eval_op1, eval_op2)
                        (expr, (: e :), env)

% All conditions in a chain are true implies the whole chain is true.
  member_conds_rec2: LEMMA
  FORALL(env:Environment)(expr: Expr)(cnds: Conditions):
  (FORALL(e: BoolPVS0| member(e, cnds)):
  eval_conds_rec(eval_bool, eval_op1, eval_op2)
                        (expr, (: e :), env))
  IMPLIES eval_conds_rec(eval_bool, eval_op1, eval_op2)
                (expr, cnds, env)

% Subsequences of true chains of conditions are also true.
  suffix_conds_rec : COROLLARY
  FORALL(env:Environment)(expr: Expr)(suffcnds, cnds: Conditions):
  subset_sl?(suffcnds, cnds) AND
  eval_conds_rec(eval_bool, eval_op1, eval_op2)
                (expr, cnds, env)
  IMPLIES eval_conds_rec(eval_bool, eval_op1, eval_op2)
                        (expr, suffcnds, env)

% True chains of conditions over and extended path of the subterm
% of a body implies the chain of conditions over the path is also true.
  suffix_conds_valid_sub : COROLLARY
  FORALL(env:Environment)(body: Expr, (sub_body: Expr | subterm(sub_body,body)))(path,path_ext: (valid_path(sub_body))):
  eval_conds_rec(eval_bool,eval_op1,eval_op2)(body,path_conditions(sub_body, path_ext),env) AND
  suffix?(path, path_ext) 
  IMPLIES eval_conds_rec(eval_bool,eval_op1,eval_op2)(body,path_conditions(sub_body, path),env)

% The same than the previous Corollary, but considering the whole body af
% subterm of itself.
  suffix_conds_valid : COROLLARY
  FORALL(env:Environment)(body: Expr)(path,path_ext: (valid_path(body))):
  eval_conds_rec(eval_bool,eval_op1,eval_op2)(body,path_conditions(body, path_ext),env) AND
  suffix?(path, path_ext) 
  IMPLIES eval_conds_rec(eval_bool,eval_op1,eval_op2)(body,path_conditions(body, path),env)

  rec_decreasing : LEMMA
  FORALL(env:Environment)(n: posnat)(expr, body: Expr)(path,path_ext: (valid_path(body))):
  LET conds = path_conditions(body, path_ext),
      subexpr = subterm_at(body, path_ext) IN
  expr  = subterm_at(body,path) AND
  some?(eval_expr(eval_bool,eval_op1,eval_op2)(n,expr,body,env)) AND
  suffix?(path, path_ext) AND
  eval_conds_rec(eval_bool,eval_op1,eval_op2)(body,conds,env) AND
  rec?(subexpr) 
  IMPLIES LET valarg = eval_expr(eval_bool,eval_op1,eval_op2)(n,get_arg(subexpr),body,env) IN
  	  some?(valarg) AND 
  	  some?(eval_expr(eval_bool,eval_op1,eval_op2)(n-1,body,body,val2env(val(valarg))))

  rec_mu_decreasing : LEMMA
  FORALL(env:Environment)(n: posnat)(def: Terminating(eval_bool,eval_op1,eval_op2))(path_ext: (valid_path(get_body(def)))):
  LET body    = get_body(def),
      conds   = path_conditions(body, path_ext),
      subexpr = subterm_at(body, path_ext) IN
  mu(eval_bool,eval_op1,eval_op2)(def)(env(vr)) = n AND
  eval_conds_rec(eval_bool,eval_op1,eval_op2)(body,conds,env) AND
  rec?(subexpr) 
  IMPLIES FORALL(vact: Val):
          semantic_rel_expr (eval_bool,eval_op1,eval_op2)
	  		    (get_arg(subexpr),body,env,vact) 
	  IMPLIES mu(eval_bool,eval_op1,eval_op2)(def)(vact) < n 

  decreasing_rec : LEMMA
  FORALL(body:Expr)
	(n:posnat, expr:Expr)(path:(valid_path(body)))(env:Environment) :
    expr = subterm_at(body,path) IMPLIES
      (FORALL(path_ext: (valid_path(body))):
        LET conds   = path_conditions(body, path_ext),
            subexpr = subterm_at(body, path_ext) IN
        suffix?(path, path_ext) AND
        eval_conds_rec(eval_bool,eval_op1,eval_op2)(body,conds,env) AND
        (NOT rec?(subexpr) IMPLIES 
	    some?(eval_expr(eval_bool,eval_op1,eval_op2)(n,subexpr,body,env))) AND
        (rec?(subexpr) IMPLIES 
            LET vact = eval_expr(eval_bool,eval_op1,eval_op2)(n,get_arg(subexpr),body,env) IN
	    some?(vact) AND
	    some?(eval_expr(eval_bool,eval_op1,eval_op2)(n-1,body,body
		, val2env(val(vact))))))
        IMPLIES 
      some?(eval_expr(eval_bool,eval_op1,eval_op2)(n,expr,body,env))
  
END pvs0_props
