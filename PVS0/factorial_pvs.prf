(factorial_pvs
 (factorial_TCC1 0
  (factorial_TCC1-1 nil 3681216163
   ("" (use "wf_nat")
    (("" (expand "restrict") (("" (propax) nil nil)) nil)) nil)
   ((restrict const-decl "R" restrict nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   nil))
 (factorial_TCC2 0
  (factorial_TCC2-1 nil 3681216163 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (factorial_TCC3 0
  (factorial_TCC3-1 nil 3681216163
   ("" (skeep)
    (("" (expand "restrict")
      (("" (typepred "factorial_wfm")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (inst -1 "n")
            (("" (eval-expr "pvs0_ccs(pvs0_factorial`4)")
              (("" (inst -2 "car(pvs0_ccs(pvs0_factorial`4))")
                (("1" (inst -2 "n-1")
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (expand "pvs0_factorial")
                        (("1" (replace -1 :hide? t)
                          (("1" (assert)
                            (("1" (expand "semantic_rel_expr")
                              (("1"
                                (expand "semantic_rel_expr")
                                (("1"
                                  (expand "eop1")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 :hide? t)
                        (("2" (expand "eval_conds")
                          (("2" (expand "eval_conds_rec")
                            (("2" (expand "eval_conds_rec")
                              (("2"
                                (expand "semantic_rel_expr")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (expand "pvs0_factorial")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (every adt-def-decl "boolean" PVS0Bool_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
     nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" factorial_pvs nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eop1 const-decl "Val" factorial_pvs0 nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pvs0_factorial_tcc_termination name-judgement
     "(pvs0_tcc_termination)" factorial_pvs0 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (< const-decl "bool" reals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (factorial_wfm const-decl
     "(pvs0_tcc_termination_pred(pvs0_factorial))" factorial_pvs0 nil))
   nil)))

