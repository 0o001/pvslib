(seq_existence
 (f_existence 0
  (f_existence-1 nil 3643452538
   ("" (inst 1 "LAMBDA(n: nat): epsilon(P(n))")
    (("1" (skeep)
      (("1" (use "epsilon_ax[T]")
        (("1" (assert) (("1" (use "p_existence") nil nil)) nil)
         ("2" (use "p_existence")
          (("2" (skeep) (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (use "p_existence")
      (("2" (inst -1 "0") (("2" (skeep) (("2" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((p_existence formula-decl nil seq_existence nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (P const-decl "bool" seq_existence nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T type-decl nil seq_existence nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))

