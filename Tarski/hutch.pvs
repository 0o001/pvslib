hutch: THEORY
BEGIN

% Systems of Polynomials 

IMPORTING Sturm@compute_sturm,structures@array2list,poly_system_strategy

  a,r,g : VAR [nat->int]
  ar: VAR [nat->real]
  p : VAR [nat->[nat->int]] % The poly system
  relseq: VAR [nat->RealOrder] % Orders of the system
  n : VAR [nat->nat] % The degrees
  known_signs: VAR [nat->int] % -1 if known neg, 1 if known pos, 0 if known to have 0
  
  d,i,j,k : VAR nat % k is number of polynomials
  m: VAR posnat
  %m : VAR posnat
  x,y,c,b : VAR real
  babove,bbelow,bbelow2,babove2: VAR bool
  low,high: VAR real
  RelF6,TQRow: VAR [nat->subrange(0,5)]
  psq: VAR [nat->int]
  nsq: VAR posnat
  slseq: VAR list[list[list[int]]]
  sqsl: VAR list[list[int]]

  BoolTuple(NumTerms:nat): TYPE = [upto(NumTerms)->bool]

  BoolExpr(NumTerms:nat): TYPE = [BoolTuple(NumTerms)->bool]

  SystemSat?(NumTerms:nat,k:nat,be:BoolExpr(NumTerms),RelF6:[nat->subrange(0,5)],
    PolyTerms:[upto(NumTerms)->upto(k)],p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),
    realpred:[real->bool]): bool =
    EXISTS (x:real):
      realpred(x) AND
      be(LAMBDA (i:upto(NumTerms)): rel5(RelF6(i))(polynomial(p(PolyTerms(i)),n(PolyTerms(i)))(x),0))

  Eq_computed_remainder_seq?(k,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0))(slseq:list[list[list[int]]]): bool =
    slseq = array2list[list[list[int]]](k+1)(LAMBDA (j:nat):IF j<=k THEN sturm_chain(LAMBDA (i:nat):
         IF i<=n(j) THEN p(j)(i) ELSE 0 ENDIF,n(j)) ELSE cons[list[int]](cons[int](0,null[int]),null[list[int]]) ENDIF)

  sturm_chain_list(k,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0)): (Eq_computed_remainder_seq?(k,p,n)) =
    array2list[list[list[int]]](k+1)(LAMBDA (j:nat):IF j<=k THEN sturm_chain(LAMBDA (i:nat):
         IF i<=n(j) THEN p(j)(i) ELSE 0 ENDIF,n(j)) ELSE cons[list[int]](cons[int](0,null[int]),null[list[int]]) ENDIF)


  roots_in_int(a,(d:posnat|a(d)/=0),low,high,(sl:(Eq_computed_remainder?(a,d)))): nat=
    LET I:RealInt=(# lb:=low,ub:=high,bounded_below:=True,
    		     bounded_above:=True,closed_below:=True,
		     closed_above:=True #) IN
      number_roots_interval(a,d,I,sl)

  sound_signs?(k,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),low,high)(known_signs): bool =
    FORALL (i:upto(k)):
      (known_signs(i)=0 IFF EXISTS (x:real): low<=x AND x<=high AND polynomial(p(i),n(i))(x)=0) AND
      (known_signs(i)<0 IFF FORALL (x:real): low<=x AND x<=high IMPLIES polynomial(p(i),n(i))(x)<0) AND
      (known_signs(i)>0 IFF FORALL (x:real): low<=x AND x<=high IMPLIES polynomial(p(i),n(i))(x)>0) AND abs(known_signs(i))<=1

  decidable_interval(k,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),
 			    psq:[nat->int],(nsq:posnat|psq(nsq)/=0),low,high,
    (known_signs:(sound_signs?(k,p,n,low,high))),(slseq:(Eq_computed_remainder_seq?(k,p,n))),
      (sqsl:(Eq_computed_remainder?(psq,nsq)))): bool =
    (FORALL (i:upto(k)): known_signs(i)=0 IMPLIES roots_in_int(p(i),n(i),low,high,nth(slseq,i))=1) AND
      ((EXISTS (i:upto(k)): known_signs(i)=0) IMPLIES roots_in_int(psq,nsq,low,high,sqsl)=1)

  sum_square_zero_havers(k,p,(n|FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),known_signs,
    (i:upto(k))): RECURSIVE [# sqlist:list[int],sqdeg:nat #] =
    LET nz = (known_signs(i)/=0),
        thissq = (IF nz THEN (LAMBDA (d:nat): 0) ELSE polynomial_prod(p(i),n(i),p(i),n(i)) ENDIF),
    	thisdeg = (IF nz THEN 0 ELSE 2*n(i) ENDIF),
	other = (IF i>0 THEN sum_square_zero_havers(k,p,n,known_signs,i-1) 
	      	    ELSE (# sqlist:=cons[int](0,null[int]),sqdeg:=0 #) ENDIF),
	otherarray = (LAMBDA (d:nat): IF d<length(other`sqlist) THEN nth(other`sqlist,d) ELSE 0 ENDIF),
	totaldeg = max(thisdeg,other`sqdeg),
	totalarray = (LAMBDA (d:nat): thissq(d)+otherarray(d)),
	totallist = array2list[int](totaldeg+1)(totalarray)
    IN (# sqlist:=totallist,sqdeg:=totaldeg #) MEASURE i

  sum_square_zero_havers_def: LEMMA FORALL (k,p,(n|FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),(i:nat)):
    i<=k IMPLIES LET sszh = sum_square_zero_havers(k,p,n,known_signs,i),
    	 	     poly = list2array[int](0)(sszh`sqlist) IN
    ((EXISTS (z:upto(i)): known_signs(z)=0) IMPLIES (sszh`sqdeg>0 AND sszh`sqdeg=length(sszh`sqlist)-1 AND poly(sszh`sqdeg)>0)) AND
    ((NOT EXISTS (z:upto(i)): known_signs(z)=0) IMPLIES (sszh`sqdeg=0 AND sszh`sqlist=cons[int](0,null[int])
       AND (poly = (LAMBDA (jj:nat): 0)))) AND
    FORALL (x:real):
    polynomial(poly,sszh`sqdeg)(x)=sigma(0,i,LAMBDA (j:nat):  IF j>i OR known_signs(j)/=0 THEN 0 ELSE
      sq(polynomial(p(j),n(j))(x)) ENDIF)

  decidable_interval_sq(k,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),low,high,(known_signs:(sound_signs?(k,p,n,low,high))),
    (slseq:(Eq_computed_remainder_seq?(k,p,n)))): bool =
    (FORALL (i:upto(k)): known_signs(i)=0 IMPLIES roots_in_int(p(i),n(i),low,high,nth(slseq,i))=1) AND
      ((EXISTS (i:upto(k)): known_signs(i)=0) IMPLIES
        (LET sszh = sum_square_zero_havers(k,p,n,known_signs,k),
    	   spoly = (LAMBDA (d:nat): IF d<length(sszh`sqlist) THEN nth(sszh`sqlist,d) ELSE 0 ENDIF),
	   sl = sturm_chain(LAMBDA (i:nat): IF i<=sszh`sqdeg THEN spoly(i) ELSE 0 ENDIF,sszh`sqdeg)
       IN roots_in_int(spoly,sszh`sqdeg,low,high,sl)=1))

 decidable_interval_def: LEMMA FORALL (sumsquares:bool,n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0):
   sound_signs?(k,p,n,low,high)(known_signs) IMPLIES
   LET psql = prod_polynomials_list(p,n,LAMBDA i: 1,k), nsq = length(psql)-1,
       psq = list2array[int](0)(psql) IN
   FORALL ((slseq:(Eq_computed_remainder_seq?(k,p,n))),(sqsl|(not sumsquares) IMPLIES Eq_computed_remainder?(psq,nsq)(sqsl))):
   (((not sumsquares) AND decidable_interval(k,p,n,psq,nsq,low,high,known_signs,slseq,sqsl)) OR
    (sumsquares AND decidable_interval_sq(k,p,n,low,high,known_signs,slseq))) IMPLIES
   ((FORALL (i,j:upto(k),zz,ww:real): low<=zz AND zz<=high AND low<=ww AND ww<=high AND
         polynomial(p(i),n(i))(zz)=0 AND polynomial(p(j),n(j))(ww)=0 IMPLIES zz=ww) AND
   (FORALL (x:real): low<=x AND x<=high IMPLIES
     ((FORALL (i:upto(k)): sign_ext(polynomial(p(i),n(i))(x))=sign_ext(polynomial(p(i),n(i))(low))) OR
      (FORALL (i:upto(k)): sign_ext(polynomial(p(i),n(i))(x))=sign_ext(polynomial(p(i),n(i))(high))) OR
      (FORALL (i:upto(k)): sign_ext(polynomial(p(i),n(i))(x))=sign_ext(known_signs(i))))))

  unsatl?: VAR bool

  decide_interval(NumTerms:nat,k:nat,be:BoolExpr(NumTerms),RelF6:[nat->subrange(0,5)],
    PolyTerms:[upto(NumTerms)->upto(k)],
    p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),low,high,
    (known_signs:(sound_signs?(k,p,n,low,high))),unsatl?:bool,(slseq:(Eq_computed_remainder_seq?(k,p,n)))): bool =
    ((NOT unsatl?) AND be(LAMBDA (i:upto(NumTerms)): rel5(RelF6(i))(polynomial(p(PolyTerms(i)),n(PolyTerms(i)))(low),0))) OR
    be(LAMBDA (i:upto(NumTerms)): rel5(RelF6(i))(polynomial(p(PolyTerms(i)),n(PolyTerms(i)))(high),0)) OR
    be(LAMBDA (i:upto(NumTerms)): rel5(RelF6(i))(known_signs(PolyTerms(i)),0))

  decide_interval_def: LEMMA FORALL (sumsquares:bool,NumTerms:nat,k:nat,be:BoolExpr(NumTerms),RelF6:[nat->subrange(0,5)],
    PolyTerms:[upto(NumTerms)->upto(k)],
    p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),low,high,
    (known_signs:(sound_signs?(k,p,n,low,high)))):
    LET psql = prod_polynomials_list(p,n,LAMBDA i: 1,k) IN FORALL (slseq:(Eq_computed_remainder_seq?(k,p,n)),
      (sqsl|(not sumsquares) IMPLIES LET nsq = length(psql)-1,
       psq = list2array[int](0)(psql) IN Eq_computed_remainder?(psq,nsq)(sqsl))):
    (((not sumsquares) AND LET nsq = length(psql)-1,
       psq = list2array[int](0)(psql) IN decidable_interval(k,p,n,psq,nsq,low,high,known_signs,slseq,sqsl)) OR
     (sumsquares AND decidable_interval_sq(k,p,n,low,high,known_signs,slseq))) AND low<=high AND 
     (unsatl? IMPLIES (NOT be(LAMBDA (i:upto(NumTerms)): rel5(RelF6(i))(polynomial(p(PolyTerms(i)),n(PolyTerms(i)))(low),0)))) IMPLIES
    (decide_interval(NumTerms,k,be,RelF6,PolyTerms,p,n,low,high,known_signs,unsatl?,slseq) IFF
     SystemSat?(NumTerms,k,be,RelF6,PolyTerms,p,n,LAMBDA (qz:real):low<=qz AND qz<=high))

  decidable_intervals_exist: LEMMA FORALL (k,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),(slseq:(Eq_computed_remainder_seq?(k,p,n)))):
    EXISTS (eps: posreal): FORALL (low,high): low<high AND high-low<=eps IMPLIES
      LET psql = prod_polynomials_list(p,n,LAMBDA i: 1,k), nsq = length(psql)-1,
       psq = list2array[int](0)(psql) IN
      FORALL (known_signs:(sound_signs?(k,p,n,low,high)),(sqsl:(Eq_computed_remainder?(psq,nsq)))):
      decidable_interval(k,p,n,psq,nsq,low,high,known_signs,slseq,sqsl)

  decidable_intervals_sq_exist: LEMMA FORALL (k,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),(slseq:(Eq_computed_remainder_seq?(k,p,n)))):
    EXISTS (eps: posreal): FORALL (low,high): low<high AND high-low<=eps IMPLIES
      FORALL (known_signs:(sound_signs?(k,p,n,low,high))):
      decidable_interval_sq(k,p,n,low,high,known_signs,slseq)

  hutch_int_meas(sumsquares:bool,k:nat,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),psq:[nat->int]|(not sumsquares) IMPLIES psq=list2array[int](0)(prod_polynomials_list(p,n,LAMBDA i: 1,k)),(nsq:posnat|(not sumsquares) IMPLIES psq(nsq)/=0 AND nsq=length(prod_polynomials_list(p,n,LAMBDA i: 1,k))-1),low,(high|low<high),(slseq:(Eq_computed_remainder_seq?(k,p,n))),(sqsl|(not sumsquares) IMPLIES Eq_computed_remainder?(psq,nsq)(sqsl))): nat =
       LET psql = IF sumsquares THEN null[int] ELSE prod_polynomials_list(p,n,LAMBDA i: 1,k) ENDIF, nsq = length(psql)-1,
       psq = list2array[int](0)(psql),
       Aset = (LAMBDA (d:nat): FORALL (low1,high1:real): low1<high1 AND high1-low1<=(high-low)/(2^d) IMPLIES
               FORALL (known_signs:(sound_signs?(k,p,n,low1,high1))):
      	       	      ((not sumsquares) AND decidable_interval(k,p,n,psq,nsq,low1,high1,known_signs,slseq,sqsl)) OR
		      (sumsquares AND decidable_interval_sq(k,p,n,low1,high1,known_signs,slseq)))
       IN min(Aset)

  signs_upd(k,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),low,high,known_signs, % from a previous run
    (slseq:(Eq_computed_remainder_seq?(k,p,n)))): [nat->int] =
      LET ksl =
      array2list[int](k+1)(LAMBDA (i:nat): IF i>k THEN 0 ELSIF known_signs(i)/=0 THEN known_signs(i)
        ELSIF roots_in_int(p(i),n(i),low,high,nth(slseq,i))/=0 THEN 0
  	ELSIF polynomial(p(i),n(i))(low)>0 THEN 1
  	ELSE -1 ENDIF) IN
      list2array[int](0)(ksl)

  signs_upd_sound: LEMMA FORALL ((n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),
    slseq:(Eq_computed_remainder_seq?(k,p,n))):
    sound_signs?(k,p,n,low,high)(known_signs) IMPLIES
    FORALL (low1,high1:real): low<=low1 AND low1<high1 AND high1<=high IMPLIES
    sound_signs?(k,p,n,low1,high1)(signs_upd(k,p,n,low1,high1,known_signs,slseq))

  hutch_int_basic(sumsquares:bool,NumTerms:nat,k:nat,be:BoolExpr(NumTerms),RelF6:[nat->subrange(0,5)],
    PolyTerms:[upto(NumTerms)->upto(k)],
    p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),psq:[nat->int]|(not sumsquares) IMPLIES psq=list2array[int](0)(prod_polynomials_list(p,n,LAMBDA i: 1,k)),(nsq:posnat|(not sumsquares) IMPLIES psq(nsq)/=0 AND nsq=length(prod_polynomials_list(p,n,LAMBDA i: 1,k))-1),low,(high|low<high),
    (known_signs:(sound_signs?(k,p,n,low,high))),unsatl?,(slseq:(Eq_computed_remainder_seq?(k,p,n))),
      (sqsl|(not sumsquares) IMPLIES Eq_computed_remainder?(psq,nsq)(sqsl))): RECURSIVE {bb:bool| (unsatl? IMPLIES
      (NOT be(LAMBDA (i:upto(NumTerms)): rel5(RelF6(i))(polynomial(p(PolyTerms(i)),n(PolyTerms(i)))(low),0)))) IMPLIES (bb IFF 
        SystemSat?(NumTerms,k,be,RelF6,PolyTerms,p,n,LAMBDA (qz:real): low<=qz AND qz<=high))} =
        IF ((not sumsquares) AND decidable_interval(k,p,n,psq,nsq,low,high,known_signs,slseq,sqsl)) OR
	   (sumsquares AND decidable_interval_sq(k,p,n,low,high,known_signs,slseq)) THEN
  	   decide_interval(NumTerms,k,be,RelF6,PolyTerms,p,n,low,high,known_signs,unsatl?,slseq)
  	ELSE
	  hutch_int_basic(sumsquares,NumTerms,k,be,RelF6,PolyTerms,p,n,psq,nsq,low,(low+high)/2,
		    signs_upd(k,p,n,low,(low+high)/2,known_signs,slseq),unsatl?,slseq,sqsl) OR
	  hutch_int_basic(sumsquares,NumTerms,k,be,RelF6,PolyTerms,p,n,psq,nsq,(low+high)/2,high,
		    signs_upd(k,p,n,(low+high)/2,high,known_signs,slseq),TRUE,slseq,sqsl)
	ENDIF MEASURE hutch_int_meas(sumsquares,k,p,n,psq,nsq,low,high,slseq,sqsl)

  % need function that bounds every root of system

  Knuth_total(k:nat,p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0),i:nat): RECURSIVE posreal = 
    IF i>k THEN Knuth_total(k,p,n,k)
    ELSIF i=0 THEN Knuth_poly_root_strict_bound(p(0),n(0))
    ELSE max(Knuth_poly_root_strict_bound(p(i),n(i)),Knuth_total(k,p,n,i-1)) ENDIF MEASURE i

  hutch_int(sumsquares:bool,NumTerms:nat,k:nat,be:BoolExpr(NumTerms),RelF6:[nat->subrange(0,5)],
    PolyTerms:[upto(NumTerms)->upto(k)],p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0)): bool =
      LET ppl = IF sumsquares THEN null[int] ELSE prod_polynomials_list(p,n,LAMBDA i: 1,k) ENDIF,
      	  psq = list2array[int](0)(ppl),
	  nsq = IF sumsquares THEN 1 ELSE length(ppl)-1 ENDIF,
	  root_bound = Knuth_total(k,p,n,k),
	  slseq = array2list[list[list[int]]](k+1)(LAMBDA (j:nat):IF j<=k THEN sturm_chain(LAMBDA (i:nat):
          	  					  IF i<=n(j) THEN p(j)(i) ELSE 0 ENDIF,n(j)) ELSE 
							  cons[list[int]](cons[int](0,null[int]),null[list[int]]) ENDIF),
	  known_signs = signs_upd(k,p,n,-root_bound,root_bound,(LAMBDA (i:nat): 0),slseq),
	  sqsl = IF (not sumsquares) THEN sturm_chain(psq,nsq) ELSE null[list[int]] ENDIF
      IN hutch_int_basic(sumsquares,NumTerms,k,be,RelF6,PolyTerms,p,n,psq,nsq,-root_bound,root_bound,known_signs,FALSE,slseq,sqsl)

  hutch_int_def: LEMMA FORALL (sumsquares:bool,NumTerms:nat,k:nat,be:BoolExpr(NumTerms),RelF6:[nat->subrange(0,5)],
    PolyTerms:[upto(NumTerms)->upto(k)],p,(n| FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0)):
    hutch_int(sumsquares,NumTerms,k,be,RelF6,PolyTerms,p,n) IFF
    SystemSat?(NumTerms,k,be,RelF6,PolyTerms,p,n,LAMBDA (qz:real): TRUE)

  % RATIONAL POLYNOMIALS

  poly_system_list(k,p,(n|FORALL (j:upto(k)): p(j)(n(j))/=0 AND n(j)>0)): {lli : list[list[int]] |
    length[list[int]](lli) = k+1 AND (FORALL (i:upto(k)): length[int](nth[list[int]](lli,i)) = n(i)+1) AND
    (FORALL (j:upto(k),i:upto(n(j))): nth[int](nth[list[int]](lli,j),i)=p(j)(i))} =
      array2list[list[int]](k+1)(LAMBDA (j:nat): array2list[int](n(j)+1)(p(j)))

  pq: VAR [nat->[nat->rat]]

  hutch(sumsquares:bool,NumTerms:nat,k:nat,be:BoolExpr(NumTerms),RelF6:[nat->subrange(0,5)],
    PolyTerms:[upto(NumTerms)->upto(k)],pq,(n| FORALL (j:upto(k)): pq(j)(n(j))/=0 AND n(j)>0)): bool =
    LET pi = (LAMBDA (j): rat_poly_to_int(pq(j),n(j))),
    	pl = poly_system_list(k,pi,n),
	p = (LAMBDA (i): LAMBDA (j): IF i<=k AND j<=n(i) THEN nth[int](nth[list[int]](pl,i),j) ELSE 0 ENDIF)
    IN hutch_int(sumsquares,NumTerms,k,be,RelF6,PolyTerms,p,n)

  SystemSatRat?(NumTerms:nat,k:nat,be:BoolExpr(NumTerms),RelF6:[nat->subrange(0,5)],
    PolyTerms:[upto(NumTerms)->upto(k)],pq,(n| FORALL (j:upto(k)): pq(j)(n(j))/=0 AND n(j)>0)): bool =
    EXISTS (x:real):
      be(LAMBDA (i:upto(NumTerms)): rel5(RelF6(i))(polynomial(pq(PolyTerms(i)),n(PolyTerms(i)))(x),0))

  hutch_def: LEMMA FORALL (sumsquares:bool,NumTerms:nat,k:nat,be:BoolExpr(NumTerms),RelF6:[nat->subrange(0,5)],
    PolyTerms:[upto(NumTerms)->upto(k)],pq,(n| FORALL (j:upto(k)): pq(j)(n(j))/=0 AND n(j)>0)):
    hutch(sumsquares,NumTerms,k,be,RelF6,PolyTerms,pq,n) IFF
    SystemSatRat?(NumTerms,k,be,RelF6,PolyTerms,pq,n)

  test : LEMMA
    LET N=10,ddeg = 10 IN
    FORALL (x:real): x>0 AND x^ddeg<N IMPLIES
    EXISTS (k:nat): k<=N AND
    (x^ddeg-k)*(x^ddeg-(k+1))<=0
  
END hutch
