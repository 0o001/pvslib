#!/bin/sh

if [ ! -z "$PVS_DIR" ]; then
    provethem="$PVS_DIR/provethem"
else
    provethem=`which provethem`
    if [ ! $provethem  ]; then
	printf "The script 'provethem' could not be located. Either define \$PVS_DIR to point to the PVS directory or add the PVS directory to the environment variable \$PATH.\n"
	exit 1;
    fi
fi

readVersion() {
    if ! type "$provethem" > /dev/null 2>&1  || ! VERSION=$($provethem --version) ; then
	printf "The script 'provethem' could not be located. Either define \$PVS_DIR to point to the PVS directory or add the PVS directory to the environment variable \$PATH.\n"
	exit 1;
    fi
}

usage() {
    readVersion
    
    echo "NAME
  typecheck-all $VERSION -- Typechecks the PVS libraries in the current folder.

SYNOPSIS

  typecheck-all <options>

DESCRIPTION
  
  Uses provethem to typecheck all the libraries in the current directory. 

  As in provethem, the scope of application can be controlled using 
  the options --after, --before, --but, --do, --from, and --to detailed below. The order 
  implicitly referred to by all these options is the one induced by the applicable 
  all-theories file.

OPTIONS

  --after=<dir>           typecheck all libraries after <dir>, exclusive
  --before=<dir>          typecheck all libraries before <dir>, exclusive
  --but=<dir1>,..,<dirn>  do not typecheck libraries <dir1>,...,<dirn>
  --dir <dir>             use <dir> as default directory of summary files
  --do=<dir1>,..,<dirn>   typecheck libraries <dir1>,...,<dirn>
  --ext <ext>             use <ext> as default extension of summary files
  --from=<dir>            prove all libraries from <dir>, inclusive.
  --log                   log all information generated by PVS in <file>.log 
  --out <outfile>         save output to <outfile>
  --to=<dir>              typecheck all libraries to <dir>, inclusive.
  --top <th>              use <th>.pvs instead of top.pvs as top theory  
  --verbose               print summary information for all theories

  -h|--help               print this message
  --version               print version information and exit

SEE ALSO
  provethem -- for iterating commands on a list of directories
"
}

ADDITIONALARGS=

while [ $# -gt 0 ]
do
  case $1 in
    -h|-help|--help) 
	usage
	exit 0;;
    -version|--version)
	readVersion
	echo $VERSION
	exit 0;;
    -force|--force)
	FORCE=--force;;
    # valid options
    --after=*|-after=*\
	|--before=*|-before=*\
	|--but=*|-but=*\
	|--do=*|-do=*\
	|--from=*|-from=*\
	|--to=*|-to=*\
	|--log\
	|--verbose)
	ADDITIONALARGS="$ADDITIONALARGS $1";;	
    --after|-after\
	|--before|-before\
	|--but|-but\
	|--do|-do\
	|--from|-from\
	|--to|-to\
	|--dir|-dir\
	|--ext|-ext\
	|--out|-out\
	|--top|-top)
	if [[ $2 == -* ]]; then
	    if [[ $1 =~ ^-[^-].*$ ]]; then
		echo "Warning: missing values for $1 option (expected syntax is $1 <values>)"
	    else
		echo "Warning: missing values for $1 option (expected syntax is $1=<values>)"
	    fi;
	else
	    ADDITIONALARGS="$ADDITIONALARGS $1 $2"
	    shift
	fi;;
    # invalid options
    *)
	echo "Warning: omitting unrecognized option $1";;
  esac
  shift 
done

all_theories_file="nasalib.all"
if [ ! -f $all_theories_file ]; then 
    all_theories_file="all-theories";
    if [ ! -f $all_theories_file ]; then 
	echo "Error: $all_theories_file not found.";
	exit 1;
    fi
fi

if [ "$provethem" ]; then
  $provethem --clean-only $* $all_theories_file
  $provethem  $ADDITIONALARGS --clearpath --addpath --typecheck $* $all_theories_file
else
  echo "Directory where PVS is installed must be in the environment variable PATH for this command to work"
fi

