(LTL_semantics
 (semantic_rel_TCC1 0
  (semantic_rel_TCC1-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC2 0
  (semantic_rel_TCC2-1 nil 3857123412
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)) nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC3 0
  (semantic_rel_TCC3-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC4 0
  (semantic_rel_TCC4-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC5 0
  (semantic_rel_TCC5-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC6 0
  (semantic_rel_TCC6-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC7 0
  (semantic_rel_TCC7-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].not?(x) OR LTL_adt[LTL_semantics.State].next?(x) OR LTL_adt[LTL_semantics.State].globally?(x) OR LTL_adt[LTL_semantics.State].globally_bd?(x) OR LTL_adt[LTL_semantics.State].finally?(x) OR LTL_adt[LTL_semantics.State].finally_bd?(x) OR LTL_adt[LTL_semantics.State].previous?(x) OR LTL_adt[LTL_semantics.State].zeta?(x) OR LTL_adt[LTL_semantics.State].historically?(x) OR LTL_adt[LTL_semantics.State].historically_bd?(x) OR LTL_adt[LTL_semantics.State].once?(x) OR LTL_adt[LTL_semantics.State].once_bd?(x)}")))
 (semantic_rel_TCC8 0
  (semantic_rel_TCC8-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC9 0
  (semantic_rel_TCC9-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC10 0
  (semantic_rel_TCC10-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC11 0
  (semantic_rel_TCC11-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC12 0
  (semantic_rel_TCC12-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC13 0
  (semantic_rel_TCC13-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC14 0
  (semantic_rel_TCC14-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC15 0
  (semantic_rel_TCC15-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC16 0
  (semantic_rel_TCC16-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC17 0
  (semantic_rel_TCC17-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC18 0
  (semantic_rel_TCC18-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC19 0
  (semantic_rel_TCC19-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC20 0
  (semantic_rel_TCC20-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC21 0
  (semantic_rel_TCC21-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC22 0
  (semantic_rel_TCC22-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC23 0
  (semantic_rel_TCC23-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].not?(x) OR LTL_adt[LTL_semantics.State].next?(x) OR LTL_adt[LTL_semantics.State].globally?(x) OR LTL_adt[LTL_semantics.State].globally_bd?(x) OR LTL_adt[LTL_semantics.State].finally?(x) OR LTL_adt[LTL_semantics.State].finally_bd?(x) OR LTL_adt[LTL_semantics.State].previous?(x) OR LTL_adt[LTL_semantics.State].zeta?(x) OR LTL_adt[LTL_semantics.State].historically?(x) OR LTL_adt[LTL_semantics.State].historically_bd?(x) OR LTL_adt[LTL_semantics.State].once?(x) OR LTL_adt[LTL_semantics.State].once_bd?(x)}")))
 (semantic_rel_TCC24 0
  (semantic_rel_TCC24-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC25 0
  (semantic_rel_TCC25-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].not?(x) OR LTL_adt[LTL_semantics.State].next?(x) OR LTL_adt[LTL_semantics.State].globally?(x) OR LTL_adt[LTL_semantics.State].globally_bd?(x) OR LTL_adt[LTL_semantics.State].finally?(x) OR LTL_adt[LTL_semantics.State].finally_bd?(x) OR LTL_adt[LTL_semantics.State].previous?(x) OR LTL_adt[LTL_semantics.State].zeta?(x) OR LTL_adt[LTL_semantics.State].historically?(x) OR LTL_adt[LTL_semantics.State].historically_bd?(x) OR LTL_adt[LTL_semantics.State].once?(x) OR LTL_adt[LTL_semantics.State].once_bd?(x)}")))
 (semantic_rel_TCC26 0
  (semantic_rel_TCC26-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC27 0
  (semantic_rel_TCC27-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL | booleans.OR(LTL_adt[LTL_semantics.State].globally_bd?(x), booleans.OR(LTL_adt[LTL_semantics.State].finally_bd?(x), booleans.OR(LTL_adt[LTL_semantics.State].historically_bd?(x), LTL_adt[LTL_semantics.State].once_bd?(x))))}")))
 (semantic_rel_TCC28 0
  (semantic_rel_TCC28-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC29 0
  (semantic_rel_TCC29-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].not?(x) OR LTL_adt[LTL_semantics.State].next?(x) OR LTL_adt[LTL_semantics.State].globally?(x) OR LTL_adt[LTL_semantics.State].globally_bd?(x) OR LTL_adt[LTL_semantics.State].finally?(x) OR LTL_adt[LTL_semantics.State].finally_bd?(x) OR LTL_adt[LTL_semantics.State].previous?(x) OR LTL_adt[LTL_semantics.State].zeta?(x) OR LTL_adt[LTL_semantics.State].historically?(x) OR LTL_adt[LTL_semantics.State].historically_bd?(x) OR LTL_adt[LTL_semantics.State].once?(x) OR LTL_adt[LTL_semantics.State].once_bd?(x)}")))
 (semantic_rel_TCC30 0
  (semantic_rel_TCC30-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC31 0
  (semantic_rel_TCC31-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL | booleans.OR(LTL_adt[LTL_semantics.State].globally_bd?(x), booleans.OR(LTL_adt[LTL_semantics.State].finally_bd?(x), booleans.OR(LTL_adt[LTL_semantics.State].historically_bd?(x), LTL_adt[LTL_semantics.State].once_bd?(x))))}")))
 (semantic_rel_TCC32 0
  (semantic_rel_TCC32-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC33 0
  (semantic_rel_TCC33-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC34 0
  (semantic_rel_TCC34-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC35 0
  (semantic_rel_TCC35-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC36 0
  (semantic_rel_TCC36-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC37 0
  (semantic_rel_TCC37-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC38 0
  (semantic_rel_TCC38-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC39 0
  (semantic_rel_TCC61-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC40 0
  (semantic_rel_TCC39-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC41 0
  (semantic_rel_TCC64-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC42 0
  (semantic_rel_TCC60-1 nil 3857123412 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC43 0
  (semantic_rel_TCC63-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC44 0
  (semantic_rel_TCC42-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC45 0
  (semantic_rel_TCC45-1 nil 3857821603 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC46 0
  (semantic_rel_TCC67-1 nil 3857821603 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC47 0
  (semantic_rel_TCC45-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].not?(x) OR LTL_adt[LTL_semantics.State].next?(x) OR LTL_adt[LTL_semantics.State].globally?(x) OR LTL_adt[LTL_semantics.State].globally_bd?(x) OR LTL_adt[LTL_semantics.State].finally?(x) OR LTL_adt[LTL_semantics.State].finally_bd?(x) OR LTL_adt[LTL_semantics.State].previous?(x) OR LTL_adt[LTL_semantics.State].zeta?(x) OR LTL_adt[LTL_semantics.State].historically?(x) OR LTL_adt[LTL_semantics.State].historically_bd?(x) OR LTL_adt[LTL_semantics.State].once?(x) OR LTL_adt[LTL_semantics.State].once_bd?(x)}")))
 (semantic_rel_TCC48 0
  (semantic_rel_TCC40-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC49 0
  (semantic_rel_TCC41-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (semantic_rel subtype "(number_fields.-)(LTL_semantics.t, 1)"
    "nat")))
 (semantic_rel_TCC50 0
  (semantic_rel_TCC52-1 nil 3857123412 ("" (skeep) nil nil) nil nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].not?(x) OR LTL_adt[LTL_semantics.State].next?(x) OR LTL_adt[LTL_semantics.State].globally?(x) OR LTL_adt[LTL_semantics.State].globally_bd?(x) OR LTL_adt[LTL_semantics.State].finally?(x) OR LTL_adt[LTL_semantics.State].finally_bd?(x) OR LTL_adt[LTL_semantics.State].previous?(x) OR LTL_adt[LTL_semantics.State].zeta?(x) OR LTL_adt[LTL_semantics.State].historically?(x) OR LTL_adt[LTL_semantics.State].historically_bd?(x) OR LTL_adt[LTL_semantics.State].once?(x) OR LTL_adt[LTL_semantics.State].once_bd?(x)}")))
 (semantic_rel_TCC51 0
  (semantic_rel_TCC43-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC52 0
  (semantic_rel_TCC44-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel subtype "(number_fields.-)(LTL_semantics.t, 1)"
    "nat")))
 (semantic_rel_TCC53 0
  (semantic_rel_TCC47-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].not?(x) OR LTL_adt[LTL_semantics.State].next?(x) OR LTL_adt[LTL_semantics.State].globally?(x) OR LTL_adt[LTL_semantics.State].globally_bd?(x) OR LTL_adt[LTL_semantics.State].finally?(x) OR LTL_adt[LTL_semantics.State].finally_bd?(x) OR LTL_adt[LTL_semantics.State].previous?(x) OR LTL_adt[LTL_semantics.State].zeta?(x) OR LTL_adt[LTL_semantics.State].historically?(x) OR LTL_adt[LTL_semantics.State].historically_bd?(x) OR LTL_adt[LTL_semantics.State].once?(x) OR LTL_adt[LTL_semantics.State].once_bd?(x)}")))
 (semantic_rel_TCC54 0
  (semantic_rel_TCC46-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC55 0
  (semantic_rel_TCC54-1 nil 3857123412 ("" (skeep) nil nil) nil nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL | booleans.OR(LTL_adt[LTL_semantics.State].globally_bd?(x), booleans.OR(LTL_adt[LTL_semantics.State].finally_bd?(x), booleans.OR(LTL_adt[LTL_semantics.State].historically_bd?(x), LTL_adt[LTL_semantics.State].once_bd?(x))))}")))
 (semantic_rel_TCC56 0
  (semantic_rel_TCC48-1 nil 3857123412
   ("" (skeep)
    (("" (typepred "interval[State](f)")
      (("" (hide-all-but (-1 21))
        (("" (expand "propIntNatLB?")
          (("" (assert)
            (("" (split) (("1" (skeep) nil nil) ("2" (skeep) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((interval shared-adt-accessor-decl "[{x: LTL |
    globally_bd?(x) OR
     finally_bd?(x) OR historically_bd?(x) OR once_bd?(x)} ->
   (propIntNatLB?)]" LTL_adt nil)
    (once_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (historically_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt
     nil)
    (finally_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (globally_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (LTL type-decl nil LTL_adt nil)
    (State formal-nonempty-type-decl nil LTL_semantics nil)
    (propIntNatLB? const-decl "bool" IntervalsNatural nil)
    (IntNat type-eq-decl nil IntervalsNatural nil)
    (UpperBound type-decl nil IntervalsNatural nil)
    (LowerBound type-decl nil IntervalsNatural nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel subtype
    "LTL_adt[LTL_semantics.State].interval(LTL_semantics.f)`lb"
    "(IntervalsNatural.lowerBound?)")))
 (semantic_rel_TCC57 0
  (semantic_rel_TCC49-1 nil 3857123412
   ("" (skeep) (("" (hide-all-but (-1 21)) (("" (grind) nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)) nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC58 0
  (semantic_rel_TCC50-1 nil 3857123412
   ("" (skeep)
    (("" (hide-all-but 22)
      (("" (typepred "interval[State](f)")
        (("" (expand "propIntNatLB?") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (LowerBound type-decl nil IntervalsNatural nil)
    (UpperBound type-decl nil IntervalsNatural nil)
    (IntNat type-eq-decl nil IntervalsNatural nil)
    (propIntNatLB? const-decl "bool" IntervalsNatural nil)
    (State formal-nonempty-type-decl nil LTL_semantics nil)
    (LTL type-decl nil LTL_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (globally_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (finally_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (historically_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt
     nil)
    (once_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (interval shared-adt-accessor-decl "[{x: LTL |
    globally_bd?(x) OR
     finally_bd?(x) OR historically_bd?(x) OR once_bd?(x)} ->
   (propIntNatLB?)]" LTL_adt nil))
   nil
   (semantic_rel subtype
    "LTL_adt[LTL_semantics.State].interval(LTL_semantics.f)`lb"
    "(IntervalsNatural.lowerBound?)")))
 (semantic_rel_TCC59 0
  (semantic_rel_TCC51-1 nil 3857123412
   ("" (skeep)
    (("" (hide-all-but (-1 22)) (("" (skeep) (("" (tcc) nil nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC60 0
  (semantic_rel_TCC59-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].not?(x) OR LTL_adt[LTL_semantics.State].next?(x) OR LTL_adt[LTL_semantics.State].globally?(x) OR LTL_adt[LTL_semantics.State].globally_bd?(x) OR LTL_adt[LTL_semantics.State].finally?(x) OR LTL_adt[LTL_semantics.State].finally_bd?(x) OR LTL_adt[LTL_semantics.State].previous?(x) OR LTL_adt[LTL_semantics.State].zeta?(x) OR LTL_adt[LTL_semantics.State].historically?(x) OR LTL_adt[LTL_semantics.State].historically_bd?(x) OR LTL_adt[LTL_semantics.State].once?(x) OR LTL_adt[LTL_semantics.State].once_bd?(x)}")))
 (semantic_rel_TCC61 0
  (semantic_rel_TCC53-1 nil 3857123412
   ("" (skeep) (("" (hide-all-but (-1 22)) (("" (tcc) nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)) nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC62 0
  (semantic_rel_TCC62-1 nil 3857123412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL | booleans.OR(LTL_adt[LTL_semantics.State].globally_bd?(x), booleans.OR(LTL_adt[LTL_semantics.State].finally_bd?(x), booleans.OR(LTL_adt[LTL_semantics.State].historically_bd?(x), LTL_adt[LTL_semantics.State].once_bd?(x))))}")))
 (semantic_rel_TCC63 0
  (semantic_rel_TCC55-1 nil 3857123412
   ("" (skeep)
    (("" (hide-all-but 23)
      (("" (skeep)
        (("" (typepred "interval[State](f)")
          (("" (expand "propIntNatLB?") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((interval shared-adt-accessor-decl "[{x: LTL |
    globally_bd?(x) OR
     finally_bd?(x) OR historically_bd?(x) OR once_bd?(x)} ->
   (propIntNatLB?)]" LTL_adt nil)
    (once_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (historically_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt
     nil)
    (finally_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (globally_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (LTL type-decl nil LTL_adt nil)
    (State formal-nonempty-type-decl nil LTL_semantics nil)
    (propIntNatLB? const-decl "bool" IntervalsNatural nil)
    (IntNat type-eq-decl nil IntervalsNatural nil)
    (UpperBound type-decl nil IntervalsNatural nil)
    (LowerBound type-decl nil IntervalsNatural nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel subtype
    "LTL_adt[LTL_semantics.State].interval(LTL_semantics.f)`lb"
    "(IntervalsNatural.lowerBound?)")))
 (semantic_rel_TCC64 0
  (semantic_rel_TCC56-1 nil 3857123412
   ("" (skeep)
    (("" (hide-all-but (-1 23)) (("" (skeep) (("" (tcc) nil nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC65 0
  (semantic_rel_TCC57-1 nil 3857123412
   ("" (skeep)
    (("" (hide-all-but 24)
      (("" (typepred "interval[State](f)")
        (("" (expand "propIntNatLB?") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (LowerBound type-decl nil IntervalsNatural nil)
    (UpperBound type-decl nil IntervalsNatural nil)
    (IntNat type-eq-decl nil IntervalsNatural nil)
    (propIntNatLB? const-decl "bool" IntervalsNatural nil)
    (State formal-nonempty-type-decl nil LTL_semantics nil)
    (LTL type-decl nil LTL_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (globally_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (finally_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (historically_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt
     nil)
    (once_bd? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (interval shared-adt-accessor-decl "[{x: LTL |
    globally_bd?(x) OR
     finally_bd?(x) OR historically_bd?(x) OR once_bd?(x)} ->
   (propIntNatLB?)]" LTL_adt nil))
   nil
   (semantic_rel subtype
    "LTL_adt[LTL_semantics.State].interval(LTL_semantics.f)`lb"
    "(IntervalsNatural.lowerBound?)")))
 (semantic_rel_TCC66 0
  (semantic_rel_TCC58-1 nil 3857123412 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC67 0
  (semantic_rel_TCC66-1 nil 3857821603 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC68 0
  (semantic_rel_TCC70-1 nil 3857821603 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC69 0
  (semantic_rel_TCC68-1 nil 3857821603 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC70 0
  (semantic_rel_TCC69-1 nil 3857821603 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel subtype "LTL_semantics.f"
    "{x: LTL_adt[LTL_semantics.State].LTL |      LTL_adt[LTL_semantics.State].and?(x) OR LTL_adt[LTL_semantics.State].or?(x) OR LTL_adt[LTL_semantics.State].xor?(x) OR LTL_adt[LTL_semantics.State].xnor?(x) OR LTL_adt[LTL_semantics.State].implies?(x) OR LTL_adt[LTL_semantics.State].equiv?(x) OR LTL_adt[LTL_semantics.State].until?(x) OR LTL_adt[LTL_semantics.State].weak_until?(x) OR LTL_adt[LTL_semantics.State].release?(x) OR LTL_adt[LTL_semantics.State].strong_release?(x) OR LTL_adt[LTL_semantics.State].since?(x) OR LTL_adt[LTL_semantics.State].triggered?(x)}")))
 (semantic_rel_TCC71 0
  (semantic_rel_TCC71-1 nil 3858432431 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be2(LTL_semantics.f))"
    "nil")))
 (semantic_rel_TCC72 0
  (semantic_rel_TCC71-1 nil 3857821603 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[LTL])" LTL_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "IntNat" IntervalsNatural nil)
    (shiftIntNat const-decl "IntNat" IntervalsNatural nil)
    (contains? const-decl "bool" IntervalsNatural nil)
    (|##| const-decl "bool" IntervalsNatural nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (semantic_rel termination
    "LTL_semantics.semantic_rel(LTL_adt[LTL_semantics.State].be1(LTL_semantics.f))"
    "nil"))))

