(LTL_basic_prop
 (and_equiv 0
  (and_equiv-1 nil 3858082083
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel" 1)
        (("" (replace -1)
          (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((equiv const-decl "bool" LTL_semantics nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (or_equiv 0
  (or_equiv-1 nil 3858082084
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel" 1)
        (("" (replace -1)
          (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (equiv const-decl "bool" LTL_semantics nil))
   shostak))
 (not_equiv 0
  (not_equiv-1 nil 3858082084
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel" 1)
        (("" (replace -1) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (equiv const-decl "bool" LTL_semantics nil))
   shostak))
 (xor_equiv 0
  (xor_equiv-1 nil 3858082084
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel" 1)
        (("" (replace -1)
          (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (equiv const-decl "bool" LTL_semantics nil))
   shostak))
 (xnor_equiv 0
  (xnor_equiv-1 nil 3858082084
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel" 1)
        (("" (replace -1)
          (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (equiv const-decl "bool" LTL_semantics nil))
   shostak))
 (implies_equiv 0
  (implies_equiv-1 nil 3858082085
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel" 1)
        (("" (replace -1)
          (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (equiv const-decl "bool" LTL_semantics nil))
   shostak))
 (equiv_equiv 0
  (equiv_equiv-1 nil 3858082085
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel" 1)
        (("" (replace -1)
          (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (equiv const-decl "bool" LTL_semantics nil))
   shostak))
 (and_reflexive 0
  (and_reflexive-1 nil 3858082085
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel")
        (("" (decompose-equality)
          (("" (decompose-equality)
            (("" (iff) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((equiv const-decl "bool" LTL_semantics nil)
    (Trace type-eq-decl nil LTL_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (LTL type-decl nil LTL_adt nil)
    (State formal-nonempty-type-decl nil LTL_basic_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (or_reflexive 0
  (or_reflexive-1 nil 3858082086
   ("" (skeep) (("" (expand "equiv") (("" (propax) nil nil)) nil)) nil)
   ((equiv const-decl "bool" LTL_semantics nil)) shostak))
 (DeMorgans_LTL 0
  (DeMorgans_LTL-1 nil 3858082086
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel")
        (("" (decompose-equality)
          (("" (decompose-equality)
            (("" (expand "semantic_rel") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equiv const-decl "bool" LTL_semantics nil)
    (Trace type-eq-decl nil LTL_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (LTL type-decl nil LTL_adt nil)
    (and? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (AND_LTL adt-constructor-decl "[[LTL, LTL] -> (and?)]" LTL_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (not? adt-recognizer-decl "[LTL -> boolean]" LTL_adt nil)
    (NOT_LTL adt-constructor-decl "[LTL -> (not?)]" LTL_adt nil)
    (State formal-nonempty-type-decl nil LTL_basic_prop nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (double_not_LTL 0
  (double_not_LTL-1 nil 3858082086
   ("" (skeep)
    (("" (expand "equiv")
      (("" (expand "semantic_rel" 1 1)
        (("" (expand "semantic_rel" 1 1)
          (("" (decompose-equality) (("" (decompose-equality) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equiv const-decl "bool" LTL_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (State formal-nonempty-type-decl nil LTL_basic_prop nil)
    (LTL type-decl nil LTL_adt nil)
    (Trace type-eq-decl nil LTL_semantics nil)
    (semantic_rel def-decl "bool" LTL_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak)))

