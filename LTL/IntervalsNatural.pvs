IntervalsNatural : THEORY
  BEGIN 

   UpperBound : DATATYPE 
    BEGIN
      plusInf  : plusInf? 
      upperBound(value:nat) : upperBound? 
    END UpperBound

   LowerBound : DATATYPE 
    BEGIN
      minusInf  : minusInf? 
      lowerBound(value:nat) : lowerBound? 
    END LowerBound

    IntNat : Type =[# lb:LowerBound, ub: UpperBound #]

    propIntNat?(I: IntNat) : bool = 
      (lowerBound?(I`lb) AND upperBound?(I`ub)) IMPLIES value(I`lb) <= value(I`ub)

    propIntNatLB?(I: IntNat) : bool = 
      (lowerBound?(I`lb) AND upperBound?(I`ub) AND value(I`lb) <= value(I`ub))
      OR 
      (lowerBound?(I`lb) AND plusInf?(I`ub))

    contains?(I: IntNat)(x:nat) : bool =
        IF (lowerBound?(I`lb) AND upperBound?(I`ub)) THEN x<= value(I`ub) AND value(I`lb) <= x
        ELSIF (lowerBound?(I`lb) AND plusInf?(I`ub)) THEN value(I`lb) <= x
        ELSIF (upperBound?(I`ub) AND minusInf?(I`lb)) THEN value(I`ub) >= x
        ELSE TRUE
        ENDIF

    intNatLB(I:(propIntNatLB?)): nat = value(I`lb)
    
    ;##(x:nat,I:IntNat) : bool = contains?(I)(x)

    ;[||](x:LowerBound,y:UpperBound) : IntNat = (# lb:=x,ub:=y #) 
    
    shiftIntNat(x:nat,I:IntNat) : IntNat = 
      IF (lowerBound?(I`lb) AND upperBound?(I`ub))
        THEN [| lowerBound(value(I`lb)+x), upperBound(value(I`lb)+x) |]
      ELSIF (lowerBound?(I`lb) AND plusInf?(I`ub))
        THEN [| lowerBound(value(I`lb)+x), plusInf |]
      ELSIF (upperBound?(I`ub) AND minusInf?(I`lb))
        THEN [| minusInf, upperBound(value(I`ub)+x) |]
      ELSE I
      ENDIF



  END IntervalsNatural