LTL_basic_prop[State: TYPE+]: THEORY
  BEGIN

  IMPORTING LTL[State],
            LTL_semantics[State]
           
  f1,f2,g1,g2 : VAR LTL
  interval: VAR (propIntNatLB?)
 
  and_equiv :  LEMMA 
    (equiv(f1,f2) AND equiv(g1,g2))
      IMPLIES equiv(AND_LTL(f1,g1),AND_LTL(f2,g2))

  or_equiv: LEMMA 
    (equiv(f1,f2) AND equiv(g1,g2) )
      IMPLIES equiv(OR_LTL(f1,g1),OR_LTL(f2,g2))

  not_equiv : LEMMA 
    (equiv(f1,f2))
      IMPLIES equiv(NOT_LTL(f1), NOT_LTL(f2))

  xor_equiv : LEMMA 
    (equiv(f1,f2) AND equiv(g1,g2))
      IMPLIES equiv(XOR_LTL(f1,g1), XOR_LTL(f2,g2))

  xnor_equiv : LEMMA 
    (equiv(f1,f2) AND equiv(g1,g2))
      IMPLIES equiv(XNOR_LTL(f1,g1), XNOR_LTL(f2,g2))

  implies_equiv : LEMMA 
    (equiv(f1,f2) AND equiv(g1,g2))
      IMPLIES equiv(IMPLIES_LTL(f1,g1), IMPLIES_LTL(f2,g2))
  
  equiv_equiv : LEMMA 
    (equiv(f1,f2) AND equiv(g1,g2))
      IMPLIES equiv(EQUIV(f1,g1), EQUIV(f2,g2))

  and_reflexive : THEOREM  
     equiv(AND_LTL(f1,f2),AND_LTL(f2,f1))

  or_reflexive : THEOREM 
     equiv(OR_LTL(f1,f2),OR_LTL(f1,f2))

  DeMorgans_LTL  : THEOREM 
    equiv(NOT_LTL(AND_LTL(f1,f2)),OR_LTL(NOT_LTL(f1), NOT_LTL(f2)))

  double_not_LTL: THEOREM 
    equiv(NOT_LTL(NOT_LTL(f1)),f1)

END LTL_basic_prop
