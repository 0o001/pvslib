(bernstein_minmax
 (Heart_TCC1 0
  (Heart_TCC1-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil nil
   (Heart subtype "3"
    "{i: integers.int | booleans.OR(bernstein_minmax.x6 /= 0, reals.>=(i, 0))}")))
 (Heart_TCC2 0
  (Heart_TCC2-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil nil
   (Heart subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x7 /= 0, reals.>=(i, 0))}")))
 (Heart_minmax_TCC1 0
  (Heart_minmax_TCC1-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Heart_minmax subtype "3"
    "{i: integers.int | booleans.OR(bernstein_minmax.x7 /= 0, reals.>=(i, 0))}")))
 (Heart_minmax_TCC2 0
  (Heart_minmax_TCC2-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Heart_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x6 /= 0, reals.>=(i, 0))}")))
 (Heart_minmax_TCC3 0
  (Heart_minmax_TCC3-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Heart_minmax subtype "3"
    "{i: integers.int | booleans.OR(bernstein_minmax.x5 /= 0, reals.>=(i, 0))}")))
 (Heart_minmax_TCC4 0
  (Heart_minmax_TCC4-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Heart_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x8 /= 0, reals.>=(i, 0))}")))
 (Heart_minmax_TCC5 0
  (Heart_minmax_TCC5-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Heart_minmax subtype "3"
    "{i: integers.int | booleans.OR(bernstein_minmax.x8 /= 0, reals.>=(i, 0))}")))
 (Heart_minmax_TCC6 0
  (Heart_minmax_TCC6-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Heart_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x5 /= 0, reals.>=(i, 0))}")))
 (Heart_minmax 0
  (Heart_minmax-1 nil 3828709089
   ("" (then (skeep) (bernstein-minmax (! 1 l)) (assert)) nil)
   ((Coeff type-eq-decl nil util Bernstein)
    (DegreeMono type-eq-decl nil util Bernstein)
    (MultiPolynomial type-eq-decl nil util Bernstein)
    (MPoly type-eq-decl nil MPoly Bernstein)
    (multipoly_eval const-decl "real" multi_polynomial Bernstein)
    (Vars type-eq-decl nil util Bernstein)
    (Polyproduct type-eq-decl nil util Bernstein)
    (Polynomial type-eq-decl nil util Bernstein)
    (polyproduct_eval const-decl "real" multi_polynomial Bernstein)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (MVars type-eq-decl nil MPoly Bernstein)
    (IntervalEndpoints type-eq-decl nil util Bernstein)
    (boxbetween? const-decl "bool" util Bernstein)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (interval_between? const-decl "bool" util Bernstein)
    (multipoly_minmax_sound formula-decl nil strat_util Bernstein)
    (forall_X_poly_between const-decl "bool" multi_polynomial
     Bernstein)
    (boxbetween_eq_bnd formula-decl nil util Bernstein)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (sound_poly_fin? const-decl "bool" poly_minmax Bernstein)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein)
    (multipoly_minmax const-decl "Outminmax" strat_util Bernstein)
    (Outminmax type-eq-decl nil minmax Bernstein)
    (VarSelector type-eq-decl nil vardirselector Bernstein)
    (MultiBernstein type-eq-decl nil util Bernstein)
    (list type-decl nil list_adt nil))
   shostak))
 (Butcher_minmax_TCC1 0
  (Butcher_minmax_TCC1-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Butcher_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x2 /= 0, reals.>=(i, 0))}")))
 (Butcher_minmax_TCC2 0
  (Butcher_minmax_TCC2-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Butcher_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x3 /= 0, reals.>=(i, 0))}")))
 (Butcher_minmax_TCC3 0
  (Butcher_minmax_TCC3-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Butcher_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x4 /= 0, reals.>=(i, 0))}")))
 (Butcher_minmax_TCC4 0
  (Butcher_minmax_TCC4-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Butcher_minmax subtype "3"
    "{i: integers.int | booleans.OR(bernstein_minmax.x4 /= 0, reals.>=(i, 0))}")))
 (Butcher_minmax 0
  (Butcher_minmax-1 nil 3828709089
   ("" (then (skeep) (bernstein-minmax (! 1 l)) (assert)) nil)
   ((boxbetween_eq_bnd formula-decl nil util Bernstein)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (forall_X_poly_between const-decl "bool" multi_polynomial
     Bernstein)
    (sound_poly_fin? const-decl "bool" poly_minmax Bernstein)
    (multipoly_minmax_sound formula-decl nil strat_util Bernstein)
    (list type-decl nil list_adt nil)
    (MultiBernstein type-eq-decl nil util Bernstein)
    (VarSelector type-eq-decl nil vardirselector Bernstein)
    (Outminmax type-eq-decl nil minmax Bernstein)
    (multipoly_minmax const-decl "Outminmax" strat_util Bernstein)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Coeff type-eq-decl nil util Bernstein)
    (DegreeMono type-eq-decl nil util Bernstein)
    (MultiPolynomial type-eq-decl nil util Bernstein)
    (MPoly type-eq-decl nil MPoly Bernstein)
    (multipoly_eval const-decl "real" multi_polynomial Bernstein)
    (Vars type-eq-decl nil util Bernstein)
    (Polyproduct type-eq-decl nil util Bernstein)
    (Polynomial type-eq-decl nil util Bernstein)
    (polyproduct_eval const-decl "real" multi_polynomial Bernstein)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (MVars type-eq-decl nil MPoly Bernstein)
    (IntervalEndpoints type-eq-decl nil util Bernstein)
    (boxbetween? const-decl "bool" util Bernstein)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (interval_between? const-decl "bool" util Bernstein))
   shostak))
 (Trid_TCC1 0
  (Trid_TCC1-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil nil
   (Trid subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(bernstein_minmax.x1, 1)) /= 0, reals.>=(i, 0))}")))
 (Trid_minmax_TCC1 0
  (Trid_minmax_TCC1-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil nil
   (Trid_minmax subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(bernstein_minmax.x2, 1)) /= 0, reals.>=(i, 0))}")))
 (Trid_minmax_TCC2 0
  (Trid_minmax_TCC2-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil nil
   (Trid_minmax subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(bernstein_minmax.x3, 1)) /= 0, reals.>=(i, 0))}")))
 (Trid_minmax_TCC3 0
  (Trid_minmax_TCC3-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil nil
   (Trid_minmax subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(bernstein_minmax.x4, 1)) /= 0, reals.>=(i, 0))}")))
 (Trid_minmax 0
  (Trid_minmax-1 nil 3828709089
   ("" (then (skeep) (bernstein-minmax (! 1 l)) (assert)) nil)
   ((interval_between? const-decl "bool" util Bernstein)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (boxbetween? const-decl "bool" util Bernstein)
    (IntervalEndpoints type-eq-decl nil util Bernstein)
    (MVars type-eq-decl nil MPoly Bernstein)
    (sigma def-decl "real" sigma reals)
    (product def-decl "real" product reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (polyproduct_eval const-decl "real" multi_polynomial Bernstein)
    (Polynomial type-eq-decl nil util Bernstein)
    (Polyproduct type-eq-decl nil util Bernstein)
    (Vars type-eq-decl nil util Bernstein)
    (multipoly_eval const-decl "real" multi_polynomial Bernstein)
    (Coeff type-eq-decl nil util Bernstein)
    (DegreeMono type-eq-decl nil util Bernstein)
    (MultiPolynomial type-eq-decl nil util Bernstein)
    (MPoly type-eq-decl nil MPoly Bernstein)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein)
    (multipoly_minmax const-decl "Outminmax" strat_util Bernstein)
    (Outminmax type-eq-decl nil minmax Bernstein)
    (VarSelector type-eq-decl nil vardirselector Bernstein)
    (MultiBernstein type-eq-decl nil util Bernstein)
    (list type-decl nil list_adt nil)
    (multipoly_minmax_sound formula-decl nil strat_util Bernstein)
    (sound_poly_fin? const-decl "bool" poly_minmax Bernstein)
    (forall_X_poly_between const-decl "bool" multi_polynomial
     Bernstein)
    (boxbetween_eq_bnd formula-decl nil util Bernstein))
   shostak))
 (AdaptiveLV_minmax_TCC1 0
  (AdaptiveLV_minmax_TCC1-1 nil 3828709080 ("" (subtype-tcc) nil nil)
   nil nil
   (AdaptiveLV_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x2 /= 0, reals.>=(i, 0))}")))
 (AdaptiveLV_minmax_TCC2 0
  (AdaptiveLV_minmax_TCC2-1 nil 3828709080 ("" (subtype-tcc) nil nil)
   nil nil
   (AdaptiveLV_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x3 /= 0, reals.>=(i, 0))}")))
 (AdaptiveLV_minmax_TCC3 0
  (AdaptiveLV_minmax_TCC3-1 nil 3828709080 ("" (subtype-tcc) nil nil)
   nil nil
   (AdaptiveLV_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x4 /= 0, reals.>=(i, 0))}")))
 (AdaptiveLV_minmax 0
  (AdaptiveLV_minmax-1 nil 3828709089
   ("" (then (skeep) (bernstein-minmax (! 1 l)) (assert)) nil)
   ((boxbetween_eq_bnd formula-decl nil util Bernstein)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (forall_X_poly_between const-decl "bool" multi_polynomial
     Bernstein)
    (sound_poly_fin? const-decl "bool" poly_minmax Bernstein)
    (multipoly_minmax_sound formula-decl nil strat_util Bernstein)
    (list type-decl nil list_adt nil)
    (MultiBernstein type-eq-decl nil util Bernstein)
    (VarSelector type-eq-decl nil vardirselector Bernstein)
    (Outminmax type-eq-decl nil minmax Bernstein)
    (multipoly_minmax const-decl "Outminmax" strat_util Bernstein)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Coeff type-eq-decl nil util Bernstein)
    (DegreeMono type-eq-decl nil util Bernstein)
    (MultiPolynomial type-eq-decl nil util Bernstein)
    (MPoly type-eq-decl nil MPoly Bernstein)
    (multipoly_eval const-decl "real" multi_polynomial Bernstein)
    (Vars type-eq-decl nil util Bernstein)
    (Polyproduct type-eq-decl nil util Bernstein)
    (Polynomial type-eq-decl nil util Bernstein)
    (polyproduct_eval const-decl "real" multi_polynomial Bernstein)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (MVars type-eq-decl nil MPoly Bernstein)
    (IntervalEndpoints type-eq-decl nil util Bernstein)
    (boxbetween? const-decl "bool" util Bernstein)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (interval_between? const-decl "bool" util Bernstein))
   shostak))
 (Caprasse_minmax_TCC1 0
  (Caprasse_minmax_TCC1-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Caprasse_minmax subtype "3"
    "{i: integers.int | booleans.OR(bernstein_minmax.x3 /= 0, reals.>=(i, 0))}")))
 (Caprasse_minmax_TCC2 0
  (Caprasse_minmax_TCC2-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Caprasse_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x3 /= 0, reals.>=(i, 0))}")))
 (Caprasse_minmax_TCC3 0
  (Caprasse_minmax_TCC3-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Caprasse_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x4 /= 0, reals.>=(i, 0))}")))
 (Caprasse_minmax_TCC4 0
  (Caprasse_minmax_TCC4-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Caprasse_minmax subtype "3"
    "{i: integers.int | booleans.OR(bernstein_minmax.x4 /= 0, reals.>=(i, 0))}")))
 (Caprasse_minmax 0
  (Caprasse_minmax-1 nil 3828709089
   ("" (then (skeep) (bernstein-minmax (! 1 l)) (assert)) nil)
   ((MPoly type-eq-decl nil MPoly Bernstein)
    (MultiPolynomial type-eq-decl nil util Bernstein)
    (DegreeMono type-eq-decl nil util Bernstein)
    (Coeff type-eq-decl nil util Bernstein)
    (multipoly_eval const-decl "real" multi_polynomial Bernstein)
    (Vars type-eq-decl nil util Bernstein)
    (Polyproduct type-eq-decl nil util Bernstein)
    (Polynomial type-eq-decl nil util Bernstein)
    (polyproduct_eval const-decl "real" multi_polynomial Bernstein)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (MVars type-eq-decl nil MPoly Bernstein)
    (IntervalEndpoints type-eq-decl nil util Bernstein)
    (boxbetween? const-decl "bool" util Bernstein)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (interval_between? const-decl "bool" util Bernstein)
    (multipoly_minmax_sound formula-decl nil strat_util Bernstein)
    (forall_X_poly_between const-decl "bool" multi_polynomial
     Bernstein)
    (boxbetween_eq_bnd formula-decl nil util Bernstein)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (sound_poly_fin? const-decl "bool" poly_minmax Bernstein)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein)
    (multipoly_minmax const-decl "Outminmax" strat_util Bernstein)
    (Outminmax type-eq-decl nil minmax Bernstein)
    (VarSelector type-eq-decl nil vardirselector Bernstein)
    (MultiBernstein type-eq-decl nil util Bernstein)
    (list type-decl nil list_adt nil))
   shostak))
 (Schwefel_TCC1 0
  (Schwefel_TCC1-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil nil
   (Schwefel subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(bernstein_minmax.x1, exponentiation.^(bernstein_minmax.x2, 2))) /= 0, reals.>=(i, 0))}")))
 (Schwefel_minmax_TCC1 0
  (Schwefel_minmax_TCC1-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Schwefel_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x2 /= 0, reals.>=(i, 0))}")))
 (Schwefel_minmax_TCC2 0
  (Schwefel_minmax_TCC2-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Schwefel_minmax subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(bernstein_minmax.x2, 1)) /= 0, reals.>=(i, 0))}")))
 (Schwefel_minmax_TCC3 0
  (Schwefel_minmax_TCC3-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Schwefel_minmax subtype "2"
    "{i: integers.int | booleans.OR(bernstein_minmax.x3 /= 0, reals.>=(i, 0))}")))
 (Schwefel_minmax_TCC4 0
  (Schwefel_minmax_TCC4-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Schwefel_minmax subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(bernstein_minmax.x1, exponentiation.^(bernstein_minmax.x3, 2))) /= 0, reals.>=(i, 0))}")))
 (Schwefel_minmax_TCC5 0
  (Schwefel_minmax_TCC5-1 nil 3828709080 ("" (subtype-tcc) nil nil) nil
   nil
   (Schwefel_minmax subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(bernstein_minmax.x3, 1)) /= 0, reals.>=(i, 0))}")))
 (Schwefel_minmax 0
  (Schwefel_minmax-1 nil 3828709089
   ("" (then (skeep) (bernstein-minmax (! 1 l)) (assert)) nil)
   ((MPoly type-eq-decl nil MPoly Bernstein)
    (MultiPolynomial type-eq-decl nil util Bernstein)
    (DegreeMono type-eq-decl nil util Bernstein)
    (Coeff type-eq-decl nil util Bernstein)
    (multipoly_eval const-decl "real" multi_polynomial Bernstein)
    (Vars type-eq-decl nil util Bernstein)
    (Polyproduct type-eq-decl nil util Bernstein)
    (Polynomial type-eq-decl nil util Bernstein)
    (polyproduct_eval const-decl "real" multi_polynomial Bernstein)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (MVars type-eq-decl nil MPoly Bernstein)
    (IntervalEndpoints type-eq-decl nil util Bernstein)
    (boxbetween? const-decl "bool" util Bernstein)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (interval_between? const-decl "bool" util Bernstein)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector Bernstein)
    (multipoly_minmax const-decl "Outminmax" strat_util Bernstein)
    (Outminmax type-eq-decl nil minmax Bernstein)
    (VarSelector type-eq-decl nil vardirselector Bernstein)
    (MultiBernstein type-eq-decl nil util Bernstein)
    (list type-decl nil list_adt nil)
    (multipoly_minmax_sound formula-decl nil strat_util Bernstein)
    (sound_poly_fin? const-decl "bool" poly_minmax Bernstein)
    (forall_X_poly_between const-decl "bool" multi_polynomial
     Bernstein)
    (boxbetween_eq_bnd formula-decl nil util Bernstein))
   shostak)))

