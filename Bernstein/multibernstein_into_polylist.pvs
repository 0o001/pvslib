multibernstein_into_polylist[nterms,
                             nvars:posnat,
                             (IMPORTING util) dm: DegreeMono]: THEORY
BEGIN

  IMPORTING a2l__util

  IMPORTING structures@arrays_INTO_lists[Coefficient,
                                         Coefficient,
                                         =
                                         ] AS polynomial

  IMPORTING structures@arrays_INTO_lists[Polynomial,
                                         PolynomialList,
                                         polynomial.represents
                                         ] AS polyproduct

  IMPORTING structures@arrays_INTO_lists[Polyproduct,
                                         PolyproductList,
                                         polyproduct.represents
                                         ] AS multipolynomial

  represents(pl: PolyList, mb: MultiBernstein): bool =
    multipolynomial.represents(pl,mb) AND
    nterms = length(pl) AND
    (FORALL (pp_i: below(nterms)): nvars = length(nth(pl,pp_i))) AND
    (FORALL (pp_i: below(nterms), var_i: below(nvars)):
      length(nth(nth(pl,pp_i),var_i)) = dm(var_i) + 1)

  represents?(pl: PolyList): bool =
    EXISTS (A: MultiBernstein): represents(pl,A)

  polynomial__represents(pl: PolynomialList, p: Polynomial): bool =
    polynomial.represents(pl,p)

  polyproduct__represents(ppl: PolyproductList, pp: Polyproduct): bool =
    polyproduct.represents(ppl,pp) AND 
    nvars = length(ppl) AND
    (FORALL (var_i: below(nvars)):
      length(nth(ppl,var_i)) = dm(var_i) + 1)

  polyproduct__represents?(ppl: PolyproductList): bool =
    EXISTS (PP: Polyproduct): polyproduct__represents(ppl, PP)

  multipolynomial__represents(pl: PolyList, mb: MultiBernstein): bool =
    represents(pl,mb)

  represents_polylist_multipolynomial(pl: PolyList, mp: MultiBernstein): MACRO bool =
    represents(pl,mp)

  multipolynomial_represents?(pl: PolyList): bool =
    represents?(pl)



 
  polylist__represents_multibernstein: LEMMA
    FORALL(mb: MultiBernstein):
      represents(polylist(mb, dm, nvars, nterms),mb)

  representation__is_canonical: LEMMA
    FORALL(pl1,pl2: PolyList, mb: MultiBernstein):
      represents(pl1,mb) AND represents(pl2,mb) IMPLIES pl1 = pl2

END multibernstein_into_polylist
