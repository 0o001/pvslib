tests : THEORY
BEGIN

  IMPORTING strat_util

  x,y,z : VAR real

  zeroseq: Polynomial = 
    LAMBDA (i:nat): 0

  pseqex(n:nat) : Polynomial = 
    LAMBDA(i:nat): IF i=n THEN 1 ELSE 0 ENDIF

  pprodzero : Polyproduct = 
    LAMBDA (i:nat): zeroseq

  %%% Simple Test  

  % Polynomial 6*x^2*y^3 + 2.134*x + 4.44*x^3*y

  pprodex1 : Polyproduct = 
    LAMBDA (i:nat): IF i=0 THEN pseqex(2) elsif i=1 then pseqex(3) else zeroseq endif

  pprodex2 : Polyproduct = 
    LAMBDA (i:nat): IF i=0 THEN pseqex(1) elsif i=1 then pseqex(0) else zeroseq endif

  pprodex3 : Polyproduct = 
    LAMBDA (i:nat): IF i=0 THEN pseqex(3) elsif i=1 then pseqex(1) else zeroseq endif

  cfex1  : Coeff = 
    LAMBDA (i:nat): IF i=0 THEN 6 ELSIF i=1 THEN 2.134 ELSIF i=2 THEN 4.44 ELSE 0 ENDIF

  XYex1  : Vars = 
    LAMBDA (i:nat): IF i=0 THEN 53.2 ELSIF i=1 THEN 7.65 ELSE 0 ENDIF

  mvpex1 : MultiPolynomial = 
    LAMBDA (i:nat): IF i=0 THEN pprodex1 ELSIF i=1 THEN pprodex2 ELSIF i=2 THEN pprodex3 ELSE pprodzero 
                    ENDIF

  dgmex1 : DegreeMono =
    LAMBDA (i:nat): IF i<=1 THEN 3 ELSE 0 ENDIF

  pseq1  : Polynomial = LAMBDA (i:nat): IF i=1 THEN 3.44 ELSE 0 ENDIF
  pseq2  : Polynomial = LAMBDA (i:nat): IF i=2 THEN 5.55 ELSE 0 ENDIF
  pseq3  : Polynomial = LAMBDA (i:nat): IF i=3 THEN 3.476 ELSE 0 ENDIF
  pseq4  : Polynomial = LAMBDA (i:nat): IF i=4 THEN 0.12 ELSE 0 ENDIF
  pseq55 : Polynomial = LAMBDA (i:nat): IF i<=1 THEN 18 ELSIF i=2 THEN 2.22 ELSE 0 ENDIF
  pseq66 : Polynomial = LAMBDA (i:nat): IF i<=2 THEN 0.45 ELSIF i=5 THEN 1 ELSE 0 ENDIF

  pprod1 : Polyproduct = LAMBDA (i:nat): IF    i=0 THEN pseq1 
                                         ELSIF i=1 THEN pseq2 
                                         ELSIF i=2 THEN pseq4 
                                         ELSE  zeroseq 
                                         ENDIF
  pprod2 : Polyproduct = LAMBDA (i:nat): IF    i=0 THEN pseq3 
                                         ELSIF i=1 THEN pseq4 
					 ELSIF i=2 THEN pseq66
					 ELSE  zeroseq ENDIF
  pprod3 : Polyproduct = LAMBDA (i:nat): IF i=0 THEN pseq55 
  	   	       	 		 ELSIF i=1 THEN pseq66 
					 ELSIF i=2 THEN pseq66 
					 ELSE  zeroseq ENDIF
  pprod4 : Polyproduct = LAMBDA (i:nat): IF    i=0 THEN pseq55 
  	   	       	 		 ELSIF i=1 THEN pseq1 
					 ELSIF i=2 THEN pseq2 
					 ELSE zeroseq ENDIF

  cfs1   : Coeff = LAMBDA (i:nat): IF    i=0 THEN 0.345 
  	   	   	  	   ELSIF i=1 THEN 56.7 
				   ELSIF i=2 THEN 2.212 
				   ELSIF i=3 THEN 7.234 
				   ELSE  0 ENDIF

  XY1	 : Vars  = LAMBDA (i:nat): IF    i=0 THEN 53.2 
  	   	   	  	   ELSIF i=1 THEN 7.65 
				   ELSIF i=2 THEN 5.432 
				   ELSE  0 ENDIF

  XY2	 : Vars  = LAMBDA (i:nat): IF    i=0 THEN 45.4 
  	   	   	  	   ELSIF i=1 THEN 55.6 
				   ELSIF i=2 THEN 121 
				   ELSE  0 ENDIF

  mvp1   : MultiPolynomial = LAMBDA (i:nat): IF    i=0 THEN pprod1 
  	   		     	    	     ELSIF i=1 THEN pprod2 
					     ELSIF i=2 THEN pprod3 
					     ELSIF i=3 THEN pprod4 
					     ELSE pprodzero ENDIF

  dgm    : DegreeMono = LAMBDA (i:nat): IF i<=2 THEN 5 ELSE 0 ENDIF

  bsdgm  : DegreeMono = LAMBDA (i:nat): IF i<=2 THEN 6 ELSE 0 ENDIF

  %%% Evaluating Polynomials 

  multipoly_eval_test_1 : LEMMA
    multipoly_eval(mvp1,dgm,cfs1,3,4)(XY1) =
    4568167327011310777310267633081979777 / 76293945312500000000000 

  multipoly_eval_test2: LEMMA 
    multipoly_eval(mvpex1,dgmex1,cfex1,2,3)(XYex1) = 
    6*53.2^2*7.65^3 + 2.134*53.2 + 4.44*53.2^3*7.65

  multipoly_eval_test3: LEMMA 
    multipoly_eval(mvpex1,dgmex1,cfex1,2,3)
                  (LAMBDA(i:nat): IF i=0 THEN x ELSIF i=1 THEN y ELSE 0 ENDIF) = 
    6*x^2*y^3 + 2.134*x + 4.44*x^3*y

  %%% Testing of Bernstein Evaluation 

  bspoly_convert_poly_test: LEMMA 
    multipoly_eval(mvp1,dgm,cfs1,3,4)(XY2) = 
    multibs_eval(bs_convert_poly(mvp1,dgm,bsdgm,3,4),bsdgm,cfs1,3,4)(XY2)

  %%% Examples of Bernstein strategies are available in
  %%% examples/bernstein_examples.pvs and examples/bernstein_minmax.pvs 

END tests
