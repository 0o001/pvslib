(examples
 (zumkeller1a__TCC1 0
  (zumkeller1a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (zumkeller1a__TCC2 0
  (zumkeller1a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (zumkeller1a__TCC3 0
  (zumkeller1a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (zumkeller1a__TCC4 0
  (zumkeller1a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (zumkeller1a__TCC5 0
  (zumkeller1a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (zumkeller1a_ 0
  (zumkeller1a_-1 nil 3517323621
   ("" (relabel "bp:" 1)
    ((""
      (name "vsPb__"
            "mk_mvars(2,LAMBDA (i:nat): IF i=0 THEN -5 ELSIF i=1 THEN -5 ELSE 0 ENDIF,LAMBDA (i:nat): IF i=0 THEN 5 ELSIF i=1 THEN 5 ELSE 0 ENDIF,LAMBDA (i:nat): IF i=0 THEN (true,true) ELSIF i=1 THEN (true,true) ELSE (false,false) ENDIF,LAMBDA (i:nat): IF i=0 THEN (true,true) ELSIF i=1 THEN (true,true) ELSE (false,false) ENDIF)")
      (("" (label "vsPb__:" -1)
        (("" (hide "vsPb__:")
          ((""
            (name "Pb__"
                  "mk_mpoly(LAMBDA (i:nat)(j:nat)(k:nat): IF i=0 AND j=0 AND k=0 THEN 1 ELSIF i=0 AND j=1 AND k=0 THEN 1 ELSIF i=1 AND j=0 AND k=0 THEN 1 ELSIF i=1 AND j=1 AND k=4 THEN 1 ELSIF i=2 AND j=0 AND k=0 THEN 1 ELSIF i=2 AND j=1 AND k=2 THEN 1 ELSIF i=3 AND j=0 AND k=1 THEN 1 ELSIF i=3 AND j=1 AND k=1 THEN 1 ELSIF i=4 AND j=0 AND k=6 THEN 1 ELSIF i=4 AND j=1 AND k=0 THEN 1 ELSIF i=5 AND j=0 AND k=4 THEN 1 ELSIF i=5 AND j=1 AND k=0 THEN 1 ELSIF i=6 AND j=0 AND k=2 THEN 1 ELSIF i=6 AND j=1 AND k=0 THEN 1 ELSE 0 ENDIF,LAMBDA(i:nat): IF i=0 THEN 6 ELSIF i=1 THEN 4 ELSE 0 ENDIF,7,LAMBDA(i:nat): IF i=0 THEN 13941776395527295/13510798882111488 ELSIF i=1 THEN 4 ELSIF i=2 THEN -4 ELSIF i=3 THEN 1 ELSIF i=4 THEN 1/3 ELSIF i=5 THEN -21/10 ELSIF i=6 THEN 4 ELSE 0 ENDIF,>=)")
            (("" (label "Pb__:" -1)
              (("" (hide "Pb__:")
                ((""
                  (eval-expr
                   "a2l__multipoly_strategy(Pb__,vsPb__,100,a2l__MaxVarMinDir,true)")
                  (("" (lemma "a2l__multipoly_strategy_true")
                    (("" (inst? -1)
                      (("" (assert)
                        (("" (split -1)
                          (("1" (hide -2)
                            (("1" (relabel "bp:" -1)
                              (("1"
                                (skolem "bp:" ("x__" "y__"))
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "forall_X_poly_interval")
                                    (("1"
                                      (name
                                       "vars_Pb__"
                                       "LAMBDA(i:nat): IF i=0 THEN x__ ELSIF i=1 THEN y__ ELSE 0 ENDIF")
                                      (("1"
                                        (label "vars_Pb__:" -1)
                                        (("1"
                                          (hide "vars_Pb__:")
                                          (("1"
                                            (inst -1 "vars_Pb__")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (name-replace
                                                 "mp_7"
                                                 "Pb__`mpoly")
                                                (("1"
                                                  (name-replace
                                                   "md_8"
                                                   "Pb__`mdeg")
                                                  (("1"
                                                    (name-replace
                                                     "mc_9"
                                                     "Pb__`mcoeff")
                                                    (("1"
                                                      (expand*
                                                       "Pb__"
                                                       "vsPb__")
                                                      (("1"
                                                        (expand
                                                         "multipoly_eval")
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (expand
                                                             "sigma")))
                                                          (("1"
                                                            (expand
                                                             "polyproduct_eval")
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (expand*
                                                                 "product"
                                                                 "vars_Pb__")))
                                                              (("1"
                                                                (expand
                                                                 "mc_9"
                                                                 :assert?
                                                                 none)
                                                                (("1"
                                                                  (expand
                                                                   "Pb__"
                                                                   :assert?
                                                                   nil)
                                                                  (("1"
                                                                    (expand
                                                                     "md_8"
                                                                     :assert?
                                                                     none)
                                                                    (("1"
                                                                      (expand
                                                                       "Pb__"
                                                                       :assert?
                                                                       nil)
                                                                      (("1"
                                                                        (expand
                                                                         "polynomial"
                                                                         :assert?
                                                                         none)
                                                                        (("1"
                                                                          (expand
                                                                           "mp_7"
                                                                           :assert?
                                                                           none)
                                                                          (("1"
                                                                            (expand
                                                                             "Pb__"
                                                                             :assert?
                                                                             nil)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (expand
                                                                                 "sigma"
                                                                                 :assert?
                                                                                 nil)))
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (rewrite
                                                                                   "expt_x1")))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "vars_Pb__")
                                                (("2"
                                                  (expand*
                                                   "boxbetween?"
                                                   "interval_between?")
                                                  (("2"
                                                    (skosimp*
                                                     :preds?
                                                     t)
                                                    (("2"
                                                      (expand "vsPb__")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (eval-formula) nil nil)
                           ("3" (eval-formula) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (ge_realorder name-judgement "RealOrder" util nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_9 skolem-const-decl "Coeff" examples nil)
    (md_8 skolem-const-decl "DegreeMono" examples nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (expt_x1 formula-decl nil exponentiation nil)
    (le_realorder name-judgement "RealOrder" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mp_7 skolem-const-decl "MultiPolynomial" examples nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" examples nil)
    (product def-decl "real" product "reals/")
    (sigma def-decl "real" sigma "reals/")
    (Pb__ skolem-const-decl "MPolyRel" examples nil)
    (vsPb__ skolem-const-decl "MVars" examples nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector
     nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (PolyList type-eq-decl nil util nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Outcome type-decl nil Outcome_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   shostak))
 (zumkeller1b_ 0
  (zumkeller1b_-1 nil 3517323621 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (list2array def-decl "T" array2list "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (Coeff type-eq-decl nil util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil))
   shostak))
 (zumkeller2__TCC1 0
  (zumkeller2__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (zumkeller2__TCC2 0
  (zumkeller2__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)) nil))
 (zumkeller2__TCC3 0
  (zumkeller2__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (zumkeller2_ 0
  (zumkeller2_-1 nil 3517323621 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (ge_realorder name-judgement "RealOrder" util nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (le_realorder name-judgement "RealOrder" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (product def-decl "real" product "reals/")
    (sigma def-decl "real" sigma "reals/")
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (Outcome type-decl nil Outcome_adt nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (MultiBernstein type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil))
   shostak))
 (smith__TCC1 0
  (smith__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (smith__TCC2 0
  (smith__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (smith__TCC3 0
  (smith__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (smith__TCC4 0
  (smith__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (smith__TCC5 0
  (smith__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (smith__TCC6 0
  (smith__TCC6-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (smith_ 0
  (smith_-1 nil 3517323621 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (le_realorder name-judgement "RealOrder" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interval_between? const-decl "bool" util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (expt_x1 formula-decl nil exponentiation nil)
    (product def-decl "real" product "reals/")
    (sigma def-decl "real" sigma "reals/")
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (MaxVarMaxDir const-decl "[bool, nat]" vardirselector nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MultiBernstein type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil))
   shostak))
 (beale1a__TCC1 0
  (beale1a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (beale1a__TCC2 0
  (beale1a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (beale1a__TCC3 0
  (beale1a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (beale1a__TCC4 0
  (beale1a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (beale1a__TCC5 0
  (beale1a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil))
   nil))
 (beale1a_ 0
  (beale1a_-1 nil 3517323621 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (ge_realorder name-judgement "RealOrder" util nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interval_between? const-decl "bool" util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (le_realorder name-judgement "RealOrder" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (product def-decl "real" product "reals/")
    (sigma def-decl "real" sigma "reals/")
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (Outcome type-decl nil Outcome_adt nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (MultiBernstein type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil))
   shostak))
 (beale1b_ 0
  (beale1b_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (gt_realorder name-judgement "RealOrder" util nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]"
     Outcome_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MultiBernstein type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil))
   shostak))
 (crespo1a__TCC1 0
  (crespo1a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1a__TCC2 0
  (crespo1a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1a__TCC3 0
  (crespo1a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1a__TCC4 0
  (crespo1a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1a__TCC5 0
  (crespo1a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1a_ 0
  (crespo1a_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (le_realorder name-judgement "RealOrder" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (product def-decl "real" product "reals/")
    (sigma def-decl "real" sigma "reals/")
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (Outcome type-decl nil Outcome_adt nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (MultiBernstein type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (MaxVarMaxDir const-decl "[bool, nat]" vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil))
   shostak))
 (crespo1b__TCC1 0
  (crespo1b__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1b__TCC2 0
  (crespo1b__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1b__TCC3 0
  (crespo1b__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1b__TCC4 0
  (crespo1b__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1b__TCC5 0
  (crespo1b__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo1b_ 0
  (crespo1b_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (gt_realorder name-judgement "RealOrder" util nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]"
     Outcome_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MultiBernstein type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil))
   shostak))
 (crespo2a__TCC1 0
  (crespo2a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2a__TCC2 0
  (crespo2a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2a__TCC3 0
  (crespo2a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2a__TCC4 0
  (crespo2a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2a__TCC5 0
  (crespo2a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2a__TCC6 0
  (crespo2a__TCC6-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2a_ 0
  (crespo2a_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (le_realorder name-judgement "RealOrder" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interval_between? const-decl "bool" util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (expt_x1 formula-decl nil exponentiation nil)
    (product def-decl "real" product "reals/")
    (sigma def-decl "real" sigma "reals/")
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (Outcome type-decl nil Outcome_adt nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (MultiBernstein type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (MaxVarMaxDir const-decl "[bool, nat]" vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil))
   shostak))
 (crespo2b__TCC1 0
  (crespo2b__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2b__TCC2 0
  (crespo2b__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2b__TCC3 0
  (crespo2b__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2b__TCC4 0
  (crespo2b__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2b__TCC5 0
  (crespo2b__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2b__TCC6 0
  (crespo2b__TCC6-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo2b_ 0
  (crespo2b_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]"
     Outcome_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (MaxVarMaxDir const-decl "[bool, nat]" vardirselector nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MultiBernstein type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil))
   shostak))
 (crespo3a__TCC1 0
  (crespo3a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3a__TCC2 0
  (crespo3a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3a__TCC3 0
  (crespo3a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3a__TCC4 0
  (crespo3a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3a__TCC5 0
  (crespo3a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3a_ 0
  (crespo3a_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (le_realorder name-judgement "RealOrder" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interval_between? const-decl "bool" util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (expt_x1 formula-decl nil exponentiation nil)
    (product def-decl "real" product "reals/")
    (sigma def-decl "real" sigma "reals/")
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (Outcome type-decl nil Outcome_adt nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (MultiBernstein type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (MaxVarMaxDir const-decl "[bool, nat]" vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil))
   shostak))
 (crespo3b__TCC1 0
  (crespo3b__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3b__TCC2 0
  (crespo3b__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3b__TCC3 0
  (crespo3b__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3b__TCC4 0
  (crespo3b__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3b__TCC5 0
  (crespo3b__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (crespo3b_ 0
  (crespo3b_-1 nil 3517323623 ("" (bernstein) nil nil)
   ((FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (gt_realorder name-judgement "RealOrder" util nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]"
     Outcome_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (MaxVarMinDir const-decl "[bool, nat]" vardirselector nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MultiBernstein type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil))
   shostak)))

