(tests2
 (foo 0
  (foo-1 nil 3521195245
   ("" (skeep) (("" (expand "*") (("" (bernstein) nil nil)) nil)) nil)
   ((* const-decl "real" vectors_2D "vectors/")
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MVars type-eq-decl nil strat_util nil)
    (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (le_realorder name-judgement "RealOrder" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Coeff type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (RealOrder type-eq-decl nil util nil)
    (MPolyRel type-eq-decl nil strat_util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (multipoly_strategy_true formula-decl nil strategy nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc9__ skolem-const-decl "Coeff" tests2 nil)
    (md8__ skolem-const-decl "DegreeMono" tests2 nil)
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (expt_x1 formula-decl nil exponentiation nil)
    (mp7__ skolem-const-decl "MultiPolynomial" tests2 nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" tests2 nil)
    (product def-decl "real" product "reals/")
    (sigma def-decl "real" sigma "reals/")
    (Pb__ skolem-const-decl "MPolyRel" tests2 nil)
    (vsPb__ skolem-const-decl "MVars" tests2 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interval_between? const-decl "bool" util nil)
    (Outcome type-decl nil Outcome_adt nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (MultiBernstein type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (VarSelector type-eq-decl nil vardirselector nil)
    (multipoly_strategy const-decl "Outcome" strategy nil)
    (MaxVarMaxDir const-decl "[bool, nat]" vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt
     nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil))
   shostak))
 (test_forall_TCC1 0
  (test_forall_TCC1-1 nil 3521195244 ("" (subtype-tcc) nil nil) nil
   nil))
 (test_forall_TCC2 0
  (test_forall_TCC2-1 nil 3521195244 ("" (subtype-tcc) nil nil) nil
   nil))
 (test_forall_TCC3 0
  (test_forall_TCC3-1 nil 3521195244 ("" (subtype-tcc) nil nil) nil
   nil))
 (test_forall_TCC4 0
  (test_forall_TCC4-1 nil 3521195244 ("" (subtype-tcc) nil nil) nil
   nil))
 (test_forall_TCC5 0
  (test_forall_TCC5-1 nil 3521195244 ("" (subtype-tcc) nil nil) nil
   nil))
 (test_exists_open_TCC1 0
  (test_exists_open_TCC1-1 nil 3521195244 ("" (subtype-tcc) nil nil)
   nil nil))
 (test_forall_unbounded_TCC1 0
  (test_forall_unbounded_TCC1-1 nil 3521195244
   ("" (subtype-tcc) nil nil) nil nil))
 (test_exists_unbounded_TCC1 0
  (test_exists_unbounded_TCC1-1 nil 3521195244
   ("" (subtype-tcc) nil nil) nil nil))
 (test_exists_unbounded_TCC2 0
  (test_exists_unbounded_TCC2-1 nil 3521195244
   ("" (subtype-tcc) nil nil) nil nil))
 (test_exists_unbounded_TCC3 0
  (test_exists_unbounded_TCC3-1 nil 3521195244
   ("" (subtype-tcc) nil nil) nil nil)))

