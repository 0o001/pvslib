(strategy (multipoly_minmax_sound 0
           (multipoly_minmax_sound-1 nil 3509989257
            ("" (skeep)
             (("" (expand "multipoly_minmax")
               ((""
                 (typepred "multipolynomial_minmax(mp`mpoly,
                                                   mp`mdeg,
                                                   mv`numvars,
                                                   mp`terms,
                                                   mp`mcoeff,
                                                   mv`vars_lb,
                                                   mv`vars_ub,
                                                   depth,
                                                   eps_localexit(precision),
                                                   false_globalexit,
                                                   mv`iepts,
                                                   LAMBDA (i: nat): (TRUE, TRUE),
                                                   varselect)")
                 ((""
                   (name-replace "SPF" "multipolynomial_minmax(mp`mpoly,
                                                   mp`mdeg,
                                                   mv`numvars,
                                                   mp`terms,
                                                   mp`mcoeff,
                                                   mv`vars_lb,
                                                   mv`vars_ub,
                                                   depth,
                                                   eps_localexit(precision),
                                                   false_globalexit,
                                                   mv`iepts,
                                                   LAMBDA (i: nat): (TRUE, TRUE),
                                                   varselect)")
                   (("" (expand "sound_poly?")
                     (("" (assert)
                       (("" (split -1)
                         (("1" (flatten)
                           (("1" (hide-all-but 1)
                             (("1" (grind) nil nil)) nil))
                           nil)
                          ("2" (hide-all-but 1) (("2" (grind) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ((multipoly_minmax const-decl "Outminmax" strategy nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (bounded_points_exclusive? const-decl "bool" util nil)
             (bounded_points_true? const-decl "bool" util nil)
             (boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (Polynomial type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (> const-decl "bool" reals nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (Coeff type-eq-decl nil util nil)
             (Vars type-eq-decl nil util nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (list type-decl nil list_adt nil)
             (Outminmax type-eq-decl nil minmax nil)
             (sound_poly? const-decl "bool" poly_minmax nil)
             (MPoly type-eq-decl nil strat_util nil)
             (MVars type-eq-decl nil strat_util nil)
             (TRUE const-decl "bool" booleans nil)
             (MultiBernstein type-eq-decl nil util nil)
             (VarSelector type-eq-decl nil vardirselector nil)
             (multipolynomial_minmax const-decl
               "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil)
             (nonneg_real nonempty-type-eq-decl nil real_types nil)
             (posreal nonempty-type-eq-decl nil real_types nil)
             (eps_localexit const-decl "bool" minmax nil)
             (false_globalexit const-decl "bool" minmax nil))
            shostak))
          (multipoly_strategy_TCC1 0
           (multipoly_strategy_TCC1-1 nil 3509445920
            ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (Polynomial type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (> const-decl "bool" reals nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (Coeff type-eq-decl nil util nil)
             (Vars type-eq-decl nil util nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (list type-decl nil list_adt nil)
             (Outminmax type-eq-decl nil minmax nil)
             (sound_poly? const-decl "bool" poly_minmax nil)
             (RealOrder type-eq-decl nil util nil)
             (MPolyRel type-eq-decl nil strat_util nil)
             (MVars type-eq-decl nil strat_util nil)
             (rel_localexit const-decl "bool" minmax nil)
             (rel_counterex const-decl "bool" minmax nil)
             (sound_poly_inf? const-decl "bool" poly_minmax nil)
             (inf_box_poly_ub? const-decl "bool" poly_minmax nil)
             (inf_box_poly_lb? const-decl "bool" poly_minmax nil)
             (forall_X_poly_rel const-decl "bool" multi_polynomial nil)
             (sound_poly_fin? const-decl "bool" poly_minmax nil)
             (length_eq? const-decl "bool" minmax nil)
             (box_poly_ub? const-decl "bool" poly_minmax nil)
             (box_poly_lb? const-decl "bool" poly_minmax nil)
             (forall_X_poly_between const-decl "bool" multi_polynomial
              nil)
             (multipoly_eval const-decl "real" multi_polynomial nil)
             (polyproduct_eval const-decl "real" multi_polynomial nil)
             (polynomial const-decl "[real -> real]" polynomials
              "reals/")
             (^ const-decl "real" exponentiation nil)
             (boxbetween? const-decl "bool" util nil)
             (interval_between? const-decl "bool" util nil)
             (bounded_points_true? const-decl "bool" util nil)
             (bounded_points_exclusive? const-decl "bool" util nil)
             (lt_below? const-decl "bool" util nil)
             (ge_realorder name-judgement "RealOrder" util nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (rel_localexit_inv application-judgement
              "(localexit_inv?)" minmax nil)
             (int_minus_int_is_int application-judgement "int" integers
              nil)
             (le_realorder name-judgement "RealOrder" util nil)
             (real_le_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (lt_realorder name-judgement "RealOrder" util nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (single_outminmax const-decl "Outminmax" minmax nil)
             (empty_minmax const-decl "Outminmax" minmax nil)
             (Bernstein_minmax const-decl
                               "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))"
                               bernstein_minmax nil)
             (denormalize_listreal const-decl "listn[real](length(l))"
                                   util nil)
             (multipolynomial_minmax const-decl
               "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil)
             (minus_odd_is_odd application-judgement "odd_int" integers
              nil)
             (real_times_real_is_real application-judgement "real"
              reals nil)
             (minus_real_is_real application-judgement "real" reals
              nil))
            nil))
          (multipoly_strategy_TCC2 0
           (multipoly_strategy_TCC2-1 nil 3509445920
            ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (Polynomial type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (> const-decl "bool" reals nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (Coeff type-eq-decl nil util nil)
             (Vars type-eq-decl nil util nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (list type-decl nil list_adt nil)
             (Outminmax type-eq-decl nil minmax nil)
             (sound_poly? const-decl "bool" poly_minmax nil)
             (RealOrder type-eq-decl nil util nil)
             (MPolyRel type-eq-decl nil strat_util nil)
             (MVars type-eq-decl nil strat_util nil)
             (rel_localexit const-decl "bool" minmax nil)
             (rel_counterex const-decl "bool" minmax nil)
             (sound_poly_inf? const-decl "bool" poly_minmax nil)
             (inf_box_poly_ub? const-decl "bool" poly_minmax nil)
             (inf_box_poly_lb? const-decl "bool" poly_minmax nil)
             (forall_X_poly_rel const-decl "bool" multi_polynomial nil)
             (sound_poly_fin? const-decl "bool" poly_minmax nil)
             (length_eq? const-decl "bool" minmax nil)
             (box_poly_ub? const-decl "bool" poly_minmax nil)
             (box_poly_lb? const-decl "bool" poly_minmax nil)
             (forall_X_poly_between const-decl "bool" multi_polynomial
              nil)
             (multipoly_eval const-decl "real" multi_polynomial nil)
             (polyproduct_eval const-decl "real" multi_polynomial nil)
             (polynomial const-decl "[real -> real]" polynomials
              "reals/")
             (^ const-decl "real" exponentiation nil)
             (boxbetween? const-decl "bool" util nil)
             (interval_between? const-decl "bool" util nil)
             (bounded_points_true? const-decl "bool" util nil)
             (bounded_points_exclusive? const-decl "bool" util nil)
             (lt_below? const-decl "bool" util nil)
             (ge_realorder name-judgement "RealOrder" util nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (rel_localexit_inv application-judgement
              "(localexit_inv?)" minmax nil)
             (int_minus_int_is_int application-judgement "int" integers
              nil)
             (le_realorder name-judgement "RealOrder" util nil)
             (real_le_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (lt_realorder name-judgement "RealOrder" util nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (single_outminmax const-decl "Outminmax" minmax nil)
             (empty_minmax const-decl "Outminmax" minmax nil)
             (Bernstein_minmax const-decl
                               "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))"
                               bernstein_minmax nil)
             (denormalize_listreal const-decl "listn[real](length(l))"
                                   util nil)
             (multipolynomial_minmax const-decl
               "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil)
             (minus_odd_is_odd application-judgement "odd_int" integers
              nil)
             (real_times_real_is_real application-judgement "real"
              reals nil)
             (minus_real_is_real application-judgement "real" reals
              nil))
            nil))
          (multipoly_strategy_true 0
           (multipoly_strategy_true-1 nil 3509487957
            ("" (skeep)
             (("" (expand "multipoly_strategy" :assert? none)
               (("" (beta)
                 ((""
                   (name-replace "mm" "multipolynomial_minmax(mpr`mpoly,
                                                             mpr`mdeg,
                                                             mv`numvars,
                                                             mpr`terms,
                                                             mpr`mcoeff,
                                                             mv`vars_lb,
                                                             mv`vars_ub,
                                                             depth,
                                                             rel_localexit(mpr`rel),
                                                             rel_globalexit(mpr`rel,depth,true),
                                                             mv`iepts,
                                                             mv`bdpts,
                                                             varselect)")
                   (("" (lift-if)
                     (("" (assert)
                       (("" (split -3)
                         (("1" (typepred "mm")
                           (("1" (expand "rel_localexit")
                             (("1" (lemma "sound_poly_lb_le_ub")
                               (("1"
                                 (inst?)
                                 (("1"
                                   (assert)
                                   (("1"
                                     (label "lbleub" -1)
                                     (("1"
                                       (hide "lbleub")
                                       (("1"
                                         (expand "sound_poly?")
                                         (("1"
                                           (split -1)
                                           (("1"
                                             (flatten)
                                             (("1"
                                               (expand
                                                "sound_poly_fin?")
                                               (("1"
                                                 (flatten)
                                                 (("1"
                                                   (expand
                                                    "forall_X_poly_interval")
                                                   (("1"
                                                     (expand
                                                      "forall_X_poly_between")
                                                     (("1"
                                                       (skeep)
                                                       (("1"
                                                         (inst? -)
                                                         (("1"
                                                           (assert)
                                                           (("1"
                                                             (flatten)
                                                             (("1"
                                                               (name-replace
                                                                "meval"
                                                                "multipoly_eval(mpr`mpoly, mpr`mdeg, mpr`mcoeff, mv`numvars,
                                                                                mpr`terms)
                                                                               (X)")
                                                               (("1"
                                                                 (hide-all-but
                                                                  (-2
                                                                   -3
                                                                   -7
                                                                   1))
                                                                 (("1"
                                                                   (typepred
                                                                    "mpr`rel")
                                                                   (("1"
                                                                     (expand
                                                                      "realorder?")
                                                                     (("1"
                                                                       (grind)
                                                                       nil
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (flatten)
                                             (("2"
                                               (expand
                                                "sound_poly_inf?")
                                               (("2"
                                                 (inst? -1)
                                                 (("2"
                                                   (flatten)
                                                   (("2"
                                                     (hide -2 -3)
                                                     (("2"
                                                       (typepred
                                                        "mpr`rel")
                                                       (("2"
                                                         (expand
                                                          "realorder?")
                                                         (("2"
                                                           (split -2)
                                                           (("1"
                                                             (expand
                                                              "forall_X_poly_interval")
                                                             (("1"
                                                               (expand
                                                                "forall_X_poly_rel")
                                                               (("1"
                                                                 (propax)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (reveal
                                                              "lbleub")
                                                             (("2"
                                                               (expand
                                                                "lb_le_ub?")
                                                               (("2"
                                                                 (hide-all-but
                                                                  (-1
                                                                   -2
                                                                   -4
                                                                   -5
                                                                   1))
                                                                 (("2"
                                                                   (grind)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil)
                                                            ("3"
                                                             (reveal
                                                              "lbleub")
                                                             (("3"
                                                               (expand
                                                                "lb_le_ub?")
                                                               (("3"
                                                                 (hide-all-but
                                                                  (-1
                                                                   -2
                                                                   -4
                                                                   -5
                                                                   1))
                                                                 (("3"
                                                                   (grind)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (propax) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ((multipoly_strategy const-decl "Outcome" strategy nil)
             (real nonempty-type-from-decl nil reals nil)
             (number nonempty-type-decl nil numbers nil)
             (boolean nonempty-type-decl nil booleans nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (list type-decl nil list_adt nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (Outminmax type-eq-decl nil minmax nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (>= const-decl "bool" reals nil)
             (Polynomial type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (> const-decl "bool" reals nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (Coeff type-eq-decl nil util nil)
             (Vars type-eq-decl nil util nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (MultiBernstein type-eq-decl nil util nil)
             (VarSelector type-eq-decl nil vardirselector nil)
             (sound_poly? const-decl "bool" poly_minmax nil)
             (multipolynomial_minmax const-decl
               "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil)
             (RealOrder type-eq-decl nil util nil)
             (MPolyRel type-eq-decl nil strat_util nil)
             (MVars type-eq-decl nil strat_util nil)
             (realorder? const-decl "bool" util nil)
             (rel_localexit const-decl "bool" minmax nil)
             (rel_globalexit const-decl "bool" minmax nil)
             (TRUE const-decl "bool" booleans nil)
             (rel_localexit_inv application-judgement
              "(localexit_inv?)" minmax nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (sound_poly_lb_le_ub formula-decl nil poly_minmax nil)
             (sound_poly_fin? const-decl "bool" poly_minmax nil)
             (forall_X_poly_interval const-decl "bool" multi_polynomial
              nil)
             (multipoly_eval const-decl "real" multi_polynomial nil)
             (le_realorder name-judgement "RealOrder" util nil)
             (real_le_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (ge_realorder name-judgement "RealOrder" util nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (lt_realorder name-judgement "RealOrder" util nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (gt_realorder name-judgement "RealOrder" util nil)
             (real_gt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (forall_X_poly_between const-decl "bool" multi_polynomial
              nil)
             (sound_poly_inf? const-decl "bool" poly_minmax nil)
             (forall_X_poly_rel const-decl "bool" multi_polynomial nil)
             (lb_le_ub? const-decl "bool" minmax nil))
            shostak))
          (multipoly_strategy_false 0
           (multipoly_strategy_false-2 nil 3509800905
            ("" (skeep)
             (("" (expand "multipoly_strategy" :assert? none)
               (("" (beta)
                 ((""
                   (name-replace "mm" "multipolynomial_minmax
                                                              (mpr`mpoly,
                                                               mpr`mdeg,
                                                               mv`numvars,
                                                               mpr`terms,
                                                               mpr`mcoeff,
                                                               mv`vars_lb,
                                                               mv`vars_ub,
                                                               depth,
                                                               rel_localexit(mpr`rel),
                                                               rel_globalexit
                                                               (mpr`rel, depth, FALSE),
                                                               mv`iepts,
                                                               mv`bdpts,
                                                               varselect)")
                   (("" (lift-if)
                     (("" (assert)
                       (("" (ground)
                         (("" (expand "forall_X_poly_interval")
                           (("" (expand "rel_counterex")
                             (("" (ground)
                               (("1"
                                 (inst - "list2array(0)(mm`ub_var)")
                                 (("1"
                                   (split -)
                                   (("1"
                                     (typepred "mm")
                                     (("1"
                                       (expand "sound_poly?")
                                       (("1"
                                         (split -)
                                         (("1"
                                           (flatten)
                                           (("1"
                                             (expand "sound_poly_fin?")
                                             (("1"
                                               (flatten)
                                               (("1"
                                                 (expand
                                                  "box_poly_ub?")
                                                 (("1"
                                                   (ground)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (flatten)
                                           (("2"
                                             (expand "sound_poly_inf?")
                                             (("2"
                                               (inst - "mpr`rel")
                                               (("2"
                                                 (flatten)
                                                 (("2"
                                                   (expand
                                                    "inf_box_poly_ub?")
                                                   (("2"
                                                     (ground)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (typepred "mm")
                                     (("2"
                                       (expand "sound_poly?")
                                       (("2"
                                         (expand "sound_poly_fin?")
                                         (("2"
                                           (expand "sound_poly_inf?")
                                           (("2"
                                             (expand "boxbetween?")
                                             (("2"
                                               (expand "box_poly_ub?")
                                               (("2"
                                                 (expand
                                                  "inf_box_poly_ub?")
                                                 (("2"
                                                   (ground)
                                                   (("2"
                                                     (inst - "<")
                                                     (("2"
                                                       (ground)
                                                       nil
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (inst - "list2array(0)(mm`lb_var)")
                                 (("2"
                                   (split -)
                                   (("1"
                                     (typepred "mm")
                                     (("1"
                                       (expand "sound_poly?")
                                       (("1"
                                         (split -)
                                         (("1"
                                           (flatten)
                                           (("1"
                                             (expand "sound_poly_fin?")
                                             (("1"
                                               (flatten)
                                               (("1"
                                                 (expand
                                                  "box_poly_lb?")
                                                 (("1"
                                                   (ground)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (flatten)
                                           (("2"
                                             (expand "sound_poly_inf?")
                                             (("2"
                                               (inst - "mpr`rel")
                                               (("2"
                                                 (flatten)
                                                 (("2"
                                                   (expand
                                                    "inf_box_poly_lb?")
                                                   (("2"
                                                     (ground)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (typepred "mm")
                                     (("2"
                                       (expand "sound_poly?")
                                       (("2"
                                         (expand "sound_poly_fin?")
                                         (("2"
                                           (expand "sound_poly_inf?")
                                           (("2"
                                             (expand "boxbetween?")
                                             (("2"
                                               (expand "box_poly_lb?")
                                               (("2"
                                                 (expand
                                                  "inf_box_poly_lb?")
                                                 (("2"
                                                   (ground)
                                                   (("2"
                                                     (inst - ">")
                                                     (("2"
                                                       (ground)
                                                       nil
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ((multipoly_strategy const-decl "Outcome" strategy nil)
             (real nonempty-type-from-decl nil reals nil)
             (number nonempty-type-decl nil numbers nil)
             (boolean nonempty-type-decl nil booleans nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (list type-decl nil list_adt nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (Outminmax type-eq-decl nil minmax nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (>= const-decl "bool" reals nil)
             (Polynomial type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (> const-decl "bool" reals nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (Coeff type-eq-decl nil util nil)
             (Vars type-eq-decl nil util nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (MultiBernstein type-eq-decl nil util nil)
             (VarSelector type-eq-decl nil vardirselector nil)
             (sound_poly? const-decl "bool" poly_minmax nil)
             (multipolynomial_minmax const-decl
               "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil)
             (RealOrder type-eq-decl nil util nil)
             (MPolyRel type-eq-decl nil strat_util nil)
             (MVars type-eq-decl nil strat_util nil)
             (realorder? const-decl "bool" util nil)
             (rel_localexit const-decl "bool" minmax nil)
             (rel_globalexit const-decl "bool" minmax nil)
             (FALSE const-decl "bool" booleans nil)
             (rel_localexit_inv application-judgement
              "(localexit_inv?)" minmax nil)
             (forall_X_poly_interval const-decl "bool" multi_polynomial
              nil)
             (inf_box_poly_ub? const-decl "bool" poly_minmax nil)
             (sound_poly_inf? const-decl "bool" poly_minmax nil)
             (box_poly_ub? const-decl "bool" poly_minmax nil)
             (sound_poly_fin? const-decl "bool" poly_minmax nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (< const-decl "bool" reals nil)
             (lt_realorder name-judgement "RealOrder" util nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (boxbetween? const-decl "bool" util nil)
             (PRED type-eq-decl nil defined_types nil)
             (every adt-def-decl "boolean" list_adt nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (list2array const-decl "T" array2list "structures/")
             (inf_box_poly_lb? const-decl "bool" poly_minmax nil)
             (box_poly_lb? const-decl "bool" poly_minmax nil)
             (gt_realorder name-judgement "RealOrder" util nil)
             (real_gt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (rel_counterex const-decl "bool" minmax nil))
            nil)
           (multipoly_strategy_false-1 nil 3509798902
            ("" (postpone) nil nil) nil shostak))
          (multipoly_strategy_counterexample 0
           (multipoly_strategy_counterexample-1 nil 3509877763
            ("" (skeep)
             (("" (expand "multipoly_strategy" :assert? none)
               (("" (beta)
                 ((""
                   (name-replace "mm" "multipolynomial_minmax
                                                                            (mpr`mpoly,
                                                                             mpr`mdeg,
                                                                             mv`numvars,
                                                                             mpr`terms,
                                                                             mpr`mcoeff,
                                                                             mv`vars_lb,
                                                                             mv`vars_ub,
                                                                             depth,
                                                                             rel_localexit(mpr`rel),
                                                                             rel_globalexit
                                                                             (mpr`rel, depth, FALSE),
                                                                             mv`iepts,
                                                                             mv`bdpts,
                                                                             varselect)")
                   (("" (flatten)
                     (("" (lift-if)
                       (("" (ground)
                         (("1" (expand "rel_counterex")
                           (("1" (flatten)
                             (("1" (typepred "mm")
                               (("1"
                                 (expand "sound_poly?")
                                 (("1"
                                   (split -)
                                   (("1"
                                     (flatten)
                                     (("1"
                                       (expand "sound_poly_fin?")
                                       (("1"
                                         (flatten)
                                         (("1"
                                           (expand "box_poly_ub?")
                                           (("1" (ground) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (flatten)
                                     (("2"
                                       (expand "sound_poly_inf?")
                                       (("2"
                                         (inst - "mpr`rel")
                                         (("2"
                                           (flatten)
                                           (("2"
                                             (expand
                                              "inf_box_poly_ub?")
                                             (("2" (ground) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (typepred "mm")
                           (("2" (expand "sound_poly?")
                             (("2" (expand "sound_poly_fin?")
                               (("2"
                                 (expand "sound_poly_inf?")
                                 (("2"
                                   (expand "boxbetween?")
                                   (("2"
                                     (expand "box_poly_ub?")
                                     (("2"
                                       (expand "inf_box_poly_ub?")
                                       (("2"
                                         (expand "rel_counterex")
                                         (("2"
                                           (ground)
                                           (("2"
                                             (inst - "<")
                                             (("2" (ground) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("3" (expand "rel_counterex")
                           (("3" (flatten)
                             (("3" (typepred "mm")
                               (("3"
                                 (expand "sound_poly?")
                                 (("3"
                                   (split -)
                                   (("1"
                                     (flatten)
                                     (("1"
                                       (expand "sound_poly_fin?")
                                       (("1"
                                         (flatten)
                                         (("1"
                                           (expand "box_poly_lb?")
                                           (("1" (ground) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (flatten)
                                     (("2"
                                       (expand "sound_poly_inf?")
                                       (("2"
                                         (inst - "mpr`rel")
                                         (("2"
                                           (flatten)
                                           (("2"
                                             (expand
                                              "inf_box_poly_lb?")
                                             (("2" (ground) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("4" (typepred "mm")
                           (("4" (expand "sound_poly?")
                             (("4" (expand "sound_poly_fin?")
                               (("4"
                                 (expand "sound_poly_inf?")
                                 (("4"
                                   (expand "boxbetween?")
                                   (("4"
                                     (expand "box_poly_lb?")
                                     (("4"
                                       (expand "inf_box_poly_lb?")
                                       (("4"
                                         (expand "rel_counterex")
                                         (("4"
                                           (ground)
                                           (("4"
                                             (inst - ">")
                                             (("4" (ground) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ((multipoly_strategy const-decl "Outcome" strategy nil)
             (real nonempty-type-from-decl nil reals nil)
             (number nonempty-type-decl nil numbers nil)
             (boolean nonempty-type-decl nil booleans nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (list type-decl nil list_adt nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (Outminmax type-eq-decl nil minmax nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (>= const-decl "bool" reals nil)
             (Polynomial type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (> const-decl "bool" reals nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (Coeff type-eq-decl nil util nil)
             (Vars type-eq-decl nil util nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (MultiBernstein type-eq-decl nil util nil)
             (VarSelector type-eq-decl nil vardirselector nil)
             (sound_poly? const-decl "bool" poly_minmax nil)
             (multipolynomial_minmax const-decl
               "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil)
             (RealOrder type-eq-decl nil util nil)
             (MPolyRel type-eq-decl nil strat_util nil)
             (MVars type-eq-decl nil strat_util nil)
             (realorder? const-decl "bool" util nil)
             (rel_localexit const-decl "bool" minmax nil)
             (rel_globalexit const-decl "bool" minmax nil)
             (FALSE const-decl "bool" booleans nil)
             (gt_realorder name-judgement "RealOrder" util nil)
             (real_gt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (box_poly_lb? const-decl "bool" poly_minmax nil)
             (inf_box_poly_lb? const-decl "bool" poly_minmax nil)
             (boxbetween? const-decl "bool" util nil)
             (< const-decl "bool" reals nil)
             (lt_realorder name-judgement "RealOrder" util nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (rel_counterex const-decl "bool" minmax nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (sound_poly_fin? const-decl "bool" poly_minmax nil)
             (box_poly_ub? const-decl "bool" poly_minmax nil)
             (sound_poly_inf? const-decl "bool" poly_minmax nil)
             (inf_box_poly_ub? const-decl "bool" poly_minmax nil)
             (rel_localexit_inv application-judgement
              "(localexit_inv?)" minmax nil))
            nil))
          (test_forall_1_TCC1 0
           (test_forall_1_TCC1-1 nil 3509578812
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_forall_1_TCC2 0
           (test_forall_1_TCC2-1 nil 3509578812
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_forall_1_TCC3 0
           (test_forall_1_TCC3-1 nil 3509578812
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_forall_1_TCC4 0
           (test_forall_1_TCC4-1 nil 3509578812
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_forall_1_TCC5 0
           (test_forall_1_TCC5-1 nil 3509578812
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_forall_1 0
           (test_forall_1-1 nil 3509578817
            ("" (relabel "bp:" 1)
             ((""
               (name "vsPb__"
                     "mk_mvars(2,LAMBDA (i:nat): IF i=0 THEN 0 ELSIF i=1 THEN 0 ELSE 0 ENDIF,LAMBDA (i:nat): IF i=0 THEN 1 ELSIF i=1 THEN 1 ELSE 0 ENDIF,LAMBDA (i:nat): IF i=0 THEN (true,true) ELSIF i=1 THEN (true,true) ELSE (false,false) ENDIF,LAMBDA (i:nat): IF i=0 THEN (true,true) ELSIF i=1 THEN (true,true) ELSE (false,false) ENDIF)")
               (("" (label "vsPb__:" -1)
                 (("" (hide "vsPb__:")
                   ((""
                     (name "Pb__"
                           "mk_mpoly(LAMBDA (i:nat)(j:nat)(k:nat): IF i=0 AND j=0 AND k=0 THEN 1 ELSIF i=0 AND j=1 AND k=0 THEN 1 ELSIF i=1 AND j=0 AND k=0 THEN 1 ELSIF i=1 AND j=1 AND k=4 THEN 1 ELSIF i=2 AND j=0 AND k=0 THEN 1 ELSIF i=2 AND j=1 AND k=2 THEN 1 ELSIF i=3 AND j=0 AND k=1 THEN 1 ELSIF i=3 AND j=1 AND k=1 THEN 1 ELSIF i=4 AND j=0 AND k=6 THEN 1 ELSIF i=4 AND j=1 AND k=0 THEN 1 ELSIF i=5 AND j=0 AND k=4 THEN 1 ELSIF i=5 AND j=1 AND k=0 THEN 1 ELSIF i=6 AND j=0 AND k=2 THEN 1 ELSIF i=6 AND j=1 AND k=0 THEN 1 ELSE 0 ENDIF,LAMBDA (i:nat): IF i=0 THEN 6 ELSIF i=1 THEN 4 ELSE 0 ENDIF,7,LAMBDA (i:nat): IF i=0 THEN 11/10 ELSIF i=1 THEN 4 ELSIF i=2 THEN -4 ELSIF i=3 THEN 1 ELSIF i=4 THEN 1/3 ELSIF i=5 THEN -21/10 ELSIF i=6 THEN 4 ELSE 0 ENDIF,>=)")
                     (("" (label "Pb__:" -1)
                       (("" (hide "Pb__:")
                         ((""
                           (eval-expr
                            "multipoly_strategy(Pb__,vsPb__,100,MaxVarMinDir,true)")
                           (("" (lemma "multipoly_strategy_true")
                             (("" (inst? -1)
                               ((""
                                 (assert)
                                 ((""
                                   (split -1)
                                   (("1"
                                     (hide -2)
                                     (("1"
                                       (relabel "bp:" -1)
                                       (("1"
                                         (skolem "bp:" ("x__" "y__"))
                                         (("1"
                                           (flatten)
                                           (("1"
                                             (expand
                                              "forall_X_poly_interval")
                                             (("1"
                                               (name
                                                "vars_Pb__"
                                                "LAMBDA (i:nat): IF i=0 THEN x__ ELSIF i=1 THEN y__ ELSE 0 ENDIF")
                                               (("1"
                                                 (label
                                                  "vars_Pb__:"
                                                  -1)
                                                 (("1"
                                                   (hide "vars_Pb__:")
                                                   (("1"
                                                     (inst
                                                      -1
                                                      "vars_Pb__")
                                                     (("1"
                                                       (split -1)
                                                       (("1"
                                                         (name-replace
                                                          "mp4__"
                                                          "Pb__`mpoly")
                                                         (("1"
                                                           (name-replace
                                                            "md5__"
                                                            "Pb__`mdeg")
                                                           (("1"
                                                             (name-replace
                                                              "mc6__"
                                                              "Pb__`mcoeff")
                                                             (("1"
                                                               (expand*
                                                                "Pb__"
                                                                "vsPb__")
                                                               (("1"
                                                                 (expand
                                                                  "multipoly_eval")
                                                                 (("1"
                                                                   (apply
                                                                    (repeat
                                                                     (expand
                                                                      "sigma")))
                                                                   (("1"
                                                                     (expand
                                                                      "polyproduct_eval")
                                                                     (("1"
                                                                       (apply
                                                                        (repeat
                                                                         (expand*
                                                                          "product"
                                                                          "vars_Pb__")))
                                                                       (("1"
                                                                         (expand
                                                                          "mc6__"
                                                                          :assert?
                                                                          none)
                                                                         (("1"
                                                                           (expand
                                                                            "Pb__"
                                                                            :assert?
                                                                            nil)
                                                                           (("1"
                                                                             (expand
                                                                              "md5__"
                                                                              :assert?
                                                                              none)
                                                                             (("1"
                                                                               (expand
                                                                                "Pb__"
                                                                                :assert?
                                                                                nil)
                                                                               (("1"
                                                                                 (expand
                                                                                  "polynomial"
                                                                                  :assert?
                                                                                  none)
                                                                                 (("1"
                                                                                   (expand
                                                                                    "mp4__"
                                                                                    :assert?
                                                                                    none)
                                                                                   (("1"
                                                                                     (expand
                                                                                      "Pb__"
                                                                                      :assert?
                                                                                      nil)
                                                                                     (("1"
                                                                                       (apply
                                                                                        (repeat
                                                                                         (expand
                                                                                          "sigma"
                                                                                          :assert?
                                                                                          nil)))
                                                                                       (("1"
                                                                                         (apply
                                                                                          (repeat
                                                                                           (rewrite
                                                                                            "expt_x1")))
                                                                                         (("1"
                                                                                           (assert)
                                                                                           nil
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil)
                                                        ("2"
                                                         (expand
                                                          "vars_Pb__")
                                                         (("2"
                                                           (expand*
                                                            "boxbetween?"
                                                            "interval_between?")
                                                           (("2"
                                                             (skosimp*
                                                              :preds?
                                                              t)
                                                             (("2"
                                                               (expand
                                                                "vsPb__")
                                                               (("2"
                                                                 (ground)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2" (eval-formula) nil nil)
                                    ("3" (eval-formula) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ((FALSE const-decl "bool" booleans nil)
             (TRUE const-decl "bool" booleans nil)
             (IF const-decl "[boolean, T, T -> T]" if_def nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (boolean nonempty-type-decl nil booleans nil)
             (MVars type-eq-decl nil strat_util nil)
             (Vars type-eq-decl nil util nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
             (istrue? adt-recognizer-decl "[Outcome -> boolean]"
              Outcome_adt nil)
             (MaxVarMinDir const-decl "[bool, nat]" vardirselector nil)
             (multipoly_strategy const-decl "Outcome" strategy nil)
             (VarSelector type-eq-decl nil vardirselector nil)
             (> const-decl "bool" reals nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (MultiBernstein type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (Polynomial type-eq-decl nil util nil)
             (Outcome type-decl nil Outcome_adt nil)
             (vsPb__ skolem-const-decl "MVars" strategy nil)
             (Pb__ skolem-const-decl "MPolyRel" strategy nil)
             (sigma def-decl "real" sigma "reals/")
             (product def-decl "real" product "reals/")
             (vars_Pb__ skolem-const-decl "[nat -> real]" strategy nil)
             (mp4__ skolem-const-decl "MultiPolynomial" strategy nil)
             (minus_nzrat_is_nzrat application-judgement "nzrat"
              rationals nil)
             (real_le_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (le_realorder name-judgement "RealOrder" util nil)
             (expt_x1 formula-decl nil exponentiation nil)
             (polynomial const-decl "[real -> real]" polynomials
              "reals/")
             (md5__ skolem-const-decl "DegreeMono" strategy nil)
             (mc6__ skolem-const-decl "Coeff" strategy nil)
             (polyproduct_eval const-decl "real" multi_polynomial nil)
             (multipoly_eval const-decl "real" multi_polynomial nil)
             (interval_between? const-decl "bool" util nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (lt_realorder name-judgement "RealOrder" util nil)
             (boxbetween? const-decl "bool" util nil)
             (below type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (forall_X_poly_interval const-decl "bool" multi_polynomial
              nil)
             (minus_odd_is_odd application-judgement "odd_int" integers
              nil)
             (real_times_real_is_real application-judgement "real"
              reals nil)
             (real_plus_real_is_real application-judgement "real" reals
              nil)
             (real_minus_real_is_real application-judgement "real"
              reals nil)
             (multipoly_strategy_true formula-decl nil strategy nil)
             (nzrat_div_nzrat_is_nzrat application-judgement "nzrat"
              rationals nil)
             (posrat_div_posrat_is_posrat application-judgement
              "posrat" rationals nil)
             (minus_nzint_is_nzint application-judgement "nzint"
              integers nil)
             (minus_even_is_even application-judgement "even_int"
              integers nil)
             (ge_realorder name-judgement "RealOrder" util nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (Coeff type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (RealOrder type-eq-decl nil util nil)
             (MPolyRel type-eq-decl nil strat_util nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (/= const-decl "boolean" notequal nil)
             (nznum nonempty-type-eq-decl nil number_fields nil)
             (/ const-decl "[numfield, nznum -> numfield]"
                number_fields nil)
             (- const-decl "[numfield -> numfield]" number_fields nil))
            shostak))
          (test_exists_1_TCC1 0
           (test_exists_1_TCC1-1 nil 3509578878
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_exists_1_TCC2 0
           (test_exists_1_TCC2-1 nil 3509578878
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_exists_1_TCC3 0
           (test_exists_1_TCC3-1 nil 3509578878
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_exists_1_TCC4 0
           (test_exists_1_TCC4-1 nil 3509578878
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_exists_1_TCC5 0
           (test_exists_1_TCC5-1 nil 3509578878
            ("" (subtype-tcc) nil nil)
            ((/= const-decl "boolean" notequal nil)) nil))
          (test_exists_1 0
           (test_exists_1-1 nil 3509578879
            ("" (relabel "bp:" 1)
             ((""
               (name "vsPb__"
                     "mk_mvars(2,LAMBDA (i:nat): IF i=0 THEN -1 ELSIF i=1 THEN -2 ELSE 0 ENDIF,LAMBDA (i:nat): IF i=0 THEN 1 ELSIF i=1 THEN 2 ELSE 0 ENDIF,LAMBDA (i:nat): IF i=0 THEN (true,true) ELSIF i=1 THEN (true,true) ELSE (false,false) ENDIF,LAMBDA (i:nat): IF i=0 THEN (true,true) ELSIF i=1 THEN (true,true) ELSE (false,false) ENDIF)")
               (("" (label "vsPb__:" -1)
                 (("" (hide "vsPb__:")
                   ((""
                     (name "Pb__"
                           "mk_mpoly(LAMBDA (i:nat)(j:nat)(k:nat): IF i=0 AND j=0 AND k=0 THEN 1 ELSIF i=0 AND j=1 AND k=0 THEN 1 ELSIF i=1 AND j=0 AND k=1 THEN 1 ELSIF i=1 AND j=1 AND k=1 THEN 1 ELSIF i=2 AND j=0 AND k=1 THEN 1 ELSIF i=2 AND j=1 AND k=3 THEN 1 ELSIF i=3 AND j=0 AND k=2 THEN 1 ELSIF i=3 AND j=1 AND k=3 THEN 1 ELSIF i=4 AND j=0 AND k=4 THEN 1 ELSIF i=4 AND j=1 AND k=2 THEN 1 ELSIF i=5 AND j=0 AND k=5 THEN 1 ELSIF i=5 AND j=1 AND k=1 THEN 1 ELSE 0 ENDIF,LAMBDA (i:nat): IF i=0 THEN 5 ELSIF i=1 THEN 3 ELSE 0 ENDIF,6,LAMBDA (i:nat): IF i=0 THEN 3023/200 ELSIF i=1 THEN 1/2 ELSIF i=2 THEN -2 ELSIF i=3 THEN -1 ELSIF i=4 THEN 1 ELSIF i=5 THEN 2 ELSE 0 ENDIF,>)")
                     (("" (label "Pb__:" -1)
                       (("" (hide "Pb__:")
                         ((""
                           (eval-expr
                            "multipoly_strategy(Pb__,vsPb__,100,MaxVarMinDir,false)")
                           ((""
                             (name "cex_Pb__"
                                   "list2array(0)((: 61 / 64, 2 :))")
                             ((""
                               (inst "bp:" "cex_Pb__(0)" "cex_Pb__(1)")
                               (("" (eval-formula "bp:") nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ((FALSE const-decl "bool" booleans nil)
             (TRUE const-decl "bool" booleans nil)
             (- const-decl "[numfield -> numfield]" number_fields nil)
             (IF const-decl "[boolean, T, T -> T]" if_def nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (boolean nonempty-type-decl nil booleans nil)
             (MVars type-eq-decl nil strat_util nil)
             (Vars type-eq-decl nil util nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (minus_odd_is_odd application-judgement "odd_int" integers
              nil)
             (minus_even_is_even application-judgement "even_int"
              integers nil)
             (minus_nzint_is_nzint application-judgement "nzint"
              integers nil)
             (Outcome type-decl nil Outcome_adt nil)
             (Polynomial type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (MultiBernstein type-eq-decl nil util nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (VarSelector type-eq-decl nil vardirselector nil)
             (multipoly_strategy const-decl "Outcome" strategy nil)
             (MaxVarMinDir const-decl "[bool, nat]" vardirselector nil)
             (list type-decl nil list_adt nil)
             (PRED type-eq-decl nil defined_types nil)
             (every adt-def-decl "boolean" list_adt nil)
             (cons? adt-recognizer-decl "[list -> boolean]" list_adt
              nil)
             (isfalse? adt-recognizer-decl "[Outcome -> boolean]"
              Outcome_adt nil)
             (Counterexample adt-constructor-decl
              "[(cons?) -> (isfalse?)]" Outcome_adt nil)
             (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                   list_adt nil)
             (null? adt-recognizer-decl "[list -> boolean]" list_adt
              nil)
             (null adt-constructor-decl "(null?)" list_adt nil)
             (list2array const-decl "T" array2list "structures/")
             (> const-decl "bool" reals nil)
             (/ const-decl "[numfield, nznum -> numfield]"
                number_fields nil)
             (nznum nonempty-type-eq-decl nil number_fields nil)
             (/= const-decl "boolean" notequal nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (MPolyRel type-eq-decl nil strat_util nil)
             (RealOrder type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (Coeff type-eq-decl nil util nil)
             (real_gt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (gt_realorder name-judgement "RealOrder" util nil)
             (posrat_div_posrat_is_posrat application-judgement
              "posrat" rationals nil))
            shostak))
          (test_forall_2 0
           (test_forall_2-1 nil 3509578949 ("" (bernstein -1) nil nil)
            ((FALSE const-decl "bool" booleans nil)
             (TRUE const-decl "bool" booleans nil)
             (- const-decl "[numfield -> numfield]" number_fields nil)
             (IF const-decl "[boolean, T, T -> T]" if_def nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (boolean nonempty-type-decl nil booleans nil)
             (MVars type-eq-decl nil strat_util nil)
             (Vars type-eq-decl nil util nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (minus_odd_is_odd application-judgement "odd_int" integers
              nil)
             (minus_even_is_even application-judgement "even_int"
              integers nil)
             (minus_nzint_is_nzint application-judgement "nzint"
              integers nil)
             (posrat_div_posrat_is_posrat application-judgement
              "posrat" rationals nil)
             (le_realorder name-judgement "RealOrder" util nil)
             (real_le_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (Coeff type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (RealOrder type-eq-decl nil util nil)
             (MPolyRel type-eq-decl nil strat_util nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (/= const-decl "boolean" notequal nil)
             (nznum nonempty-type-eq-decl nil number_fields nil)
             (/ const-decl "[numfield, nznum -> numfield]"
                number_fields nil)
             (<= const-decl "bool" reals nil)
             (list2array const-decl "T" array2list "structures/")
             (null adt-constructor-decl "(null?)" list_adt nil)
             (null? adt-recognizer-decl "[list -> boolean]" list_adt
              nil)
             (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                   list_adt nil)
             (Counterexample adt-constructor-decl
              "[(cons?) -> (isfalse?)]" Outcome_adt nil)
             (isfalse? adt-recognizer-decl "[Outcome -> boolean]"
              Outcome_adt nil)
             (cons? adt-recognizer-decl "[list -> boolean]" list_adt
              nil)
             (every adt-def-decl "boolean" list_adt nil)
             (PRED type-eq-decl nil defined_types nil)
             (list type-decl nil list_adt nil)
             (MaxVarMaxDir const-decl "[bool, nat]" vardirselector nil)
             (multipoly_strategy const-decl "Outcome" strategy nil)
             (VarSelector type-eq-decl nil vardirselector nil)
             (> const-decl "bool" reals nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (MultiBernstein type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (Polynomial type-eq-decl nil util nil)
             (Outcome type-decl nil Outcome_adt nil))
            shostak))
          (test_exists_2 0
           (test_exists_2-1 nil 3509578848 ("" (bernstein -1) nil nil)
            ((FALSE const-decl "bool" booleans nil)
             (TRUE const-decl "bool" booleans nil)
             (IF const-decl "[boolean, T, T -> T]" if_def nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (boolean nonempty-type-decl nil booleans nil)
             (MVars type-eq-decl nil strat_util nil)
             (Vars type-eq-decl nil util nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (IntervalEndpoints type-eq-decl nil util nil)
             (- const-decl "[numfield -> numfield]" number_fields nil)
             (/ const-decl "[numfield, nznum -> numfield]"
                number_fields nil)
             (nznum nonempty-type-eq-decl nil number_fields nil)
             (/= const-decl "boolean" notequal nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (MPolyRel type-eq-decl nil strat_util nil)
             (RealOrder type-eq-decl nil util nil)
             (MultiPolynomial type-eq-decl nil util nil)
             (DegreeMono type-eq-decl nil util nil)
             (Coeff type-eq-decl nil util nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (ge_realorder name-judgement "RealOrder" util nil)
             (minus_even_is_even application-judgement "even_int"
              integers nil)
             (minus_nzint_is_nzint application-judgement "nzint"
              integers nil)
             (posrat_div_posrat_is_posrat application-judgement
              "posrat" rationals nil)
             (nzrat_div_nzrat_is_nzrat application-judgement "nzrat"
              rationals nil)
             (multipoly_strategy_true formula-decl nil strategy nil)
             (real_minus_real_is_real application-judgement "real"
              reals nil)
             (real_plus_real_is_real application-judgement "real" reals
              nil)
             (real_times_real_is_real application-judgement "real"
              reals nil)
             (minus_odd_is_odd application-judgement "odd_int" integers
              nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (< const-decl "bool" reals nil)
             (below type-eq-decl nil naturalnumbers nil)
             (boxbetween? const-decl "bool" util nil)
             (interval_between? const-decl "bool" util nil)
             (multipoly_eval const-decl "real" multi_polynomial nil)
             (polyproduct_eval const-decl "real" multi_polynomial nil)
             (mc3__ skolem-const-decl "Coeff" strategy nil)
             (md2__ skolem-const-decl "DegreeMono" strategy nil)
             (polynomial const-decl "[real -> real]" polynomials
              "reals/")
             (expt_x1 formula-decl nil exponentiation nil)
             (le_realorder name-judgement "RealOrder" util nil)
             (real_le_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (lt_realorder name-judgement "RealOrder" util nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (minus_nzrat_is_nzrat application-judgement "nzrat"
              rationals nil)
             (mp1__ skolem-const-decl "MultiPolynomial" strategy nil)
             (vars_Pb__ skolem-const-decl "[nat -> real]" strategy nil)
             (product def-decl "real" product "reals/")
             (sigma def-decl "real" sigma "reals/")
             (Pb__ skolem-const-decl "MPolyRel" strategy nil)
             (vsPb__ skolem-const-decl "MVars" strategy nil)
             (forall_X_poly_interval const-decl "bool" multi_polynomial
              nil)
             (Outcome type-decl nil Outcome_adt nil)
             (Polynomial type-eq-decl nil util nil)
             (Polyproduct type-eq-decl nil util nil)
             (MultiBernstein type-eq-decl nil util nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (> const-decl "bool" reals nil)
             (VarSelector type-eq-decl nil vardirselector nil)
             (multipoly_strategy const-decl "Outcome" strategy nil)
             (MaxVarMinDir const-decl "[bool, nat]" vardirselector nil)
             (istrue? adt-recognizer-decl "[Outcome -> boolean]"
              Outcome_adt nil)
             (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil))
            shostak)))

