(multibernstein_into_polylist
 (represents_TCC1 0
  (represents_TCC1-1 nil 3687377901 ("" (subtype-tcc) nil nil)
   ((PolyList type-eq-decl nil util nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nterms formal-const-decl "posnat" multibernstein_into_polylist
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (restrict const-decl "R" restrict nil)
    (Coefficient type-eq-decl nil a2l__util nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (represents const-decl "bool" arrays_INTO_lists "structures/")
    (equal const-decl "bool" array_equality_up_to_n "structures/")
    (nvars formal-const-decl "posnat" multibernstein_into_polylist nil)
    (dm formal-const-decl "DegreeMono" multibernstein_into_polylist
     nil)
    (DegreeMono type-eq-decl nil util nil)
    (maximum_degree def-decl
     "{n: nat | FORALL (i: below(nvars)): coeffmono(i) <= n}" a2l__util
     nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (CoeffMono type-eq-decl nil util nil)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Polynomial type-eq-decl nil util nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (Polyproduct type-eq-decl nil util nil))
   nil))
 (represents_TCC2 0
  (represents_TCC2-1 nil 3687377901 ("" (subtype-tcc) nil nil)
   ((PolyList type-eq-decl nil util nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nterms formal-const-decl "posnat" multibernstein_into_polylist
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (restrict const-decl "R" restrict nil)
    (Coefficient type-eq-decl nil a2l__util nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (represents const-decl "bool" arrays_INTO_lists "structures/")
    (equal const-decl "bool" array_equality_up_to_n "structures/")
    (nvars formal-const-decl "posnat" multibernstein_into_polylist nil)
    (dm formal-const-decl "DegreeMono" multibernstein_into_polylist
     nil)
    (DegreeMono type-eq-decl nil util nil)
    (maximum_degree def-decl
     "{n: nat | FORALL (i: below(nvars)): coeffmono(i) <= n}" a2l__util
     nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (CoeffMono type-eq-decl nil util nil)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Polynomial type-eq-decl nil util nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (Polyproduct type-eq-decl nil util nil))
   nil))
 (polyproduct__represents_TCC1 0
  (polyproduct__represents_TCC1-1 nil 3687377901
   ("" (subtype-tcc) nil nil)
   ((PolyproductList type-eq-decl nil a2l__util nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (restrict const-decl "R" restrict nil)
    (Coefficient type-eq-decl nil a2l__util nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (represents const-decl "bool" arrays_INTO_lists "structures/")
    (equal const-decl "bool" array_equality_up_to_n "structures/")
    (nvars formal-const-decl "posnat" multibernstein_into_polylist nil)
    (dm formal-const-decl "DegreeMono" multibernstein_into_polylist
     nil)
    (DegreeMono type-eq-decl nil util nil)
    (maximum_degree def-decl
     "{n: nat | FORALL (i: below(nvars)): coeffmono(i) <= n}" a2l__util
     nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (CoeffMono type-eq-decl nil util nil)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Polynomial type-eq-decl nil util nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (polylist__represents_multibernstein 0
  (polylist__represents_multibernstein-7 nil 3687545209
   ("" (skeep)
    (("" (expand "represents")
      (("" (case "nterms = length(polylist(mb, dm, nvars, nterms))")
        (("1"
          (case "FORALL (pp_i: below(nterms)):
                                                                                         nvars = length(nth(polylist(mb, dm, nvars, nterms), pp_i))")
          (("1"
            (case "FORALL (pp_i: below(nterms), var_i: below(nvars)):
                                                                                                           length(nth(nth(polylist(mb, dm, nvars, nterms), pp_i), var_i)) =
                                                                                                            1 + dm(var_i)")
            (("1" (label "length_polylist" -3)
              (("1" (label "length_nth_polylist" -2)
                (("1" (label "length_nth_nth_polylist" -1)
                  (("1" (assert)
                    (("1" (hide -1 -2 -3)
                      (("1" (split)
                        (("1" (expand "represents")
                          (("1" (skeep :preds? t)
                            (("1" (expand "represents")
                              (("1"
                                (skeep :preds? t)
                                (("1"
                                  (expand "represents")
                                  (("1"
                                    (skeep :preds? t)
                                    (("1"
                                      (expand "polylist" 1)
                                      (("1"
                                        (invoke
                                         (typepred "%1")
                                         (! 1 1 1 1 1))
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst? -2 :where 1)
                                            (("1"
                                              (replace
                                               -2
                                               1
                                               RL
                                               :hide?
                                               t)
                                              (("1"
                                                (invoke
                                                 (typepred "%1")
                                                 (! 1 1 1 1))
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst? -2 :where 1)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       1
                                                       RL
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (invoke
                                                         (typepred
                                                          "%1")
                                                         (! 1 1 1))
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst?
                                                             -2
                                                             :where
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               RL
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (reveal
                                                                   "length_nth_nth_polylist")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i"
                                                                     "i_1")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (reveal
                                                                       "length_nth_polylist")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "i")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("2"
                                                                            (reveal
                                                                             "length_nth_polylist")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "length_nth_polylist")
                                                      (("2"
                                                        (inst - "i")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal "length_nth_polylist")
                          (("2" (propax) nil nil)) nil)
                         ("3" (reveal "length_nth_nth_polylist")
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep :preds? t)
                (("2" (expand "polylist" 1)
                  (("2" (invoke (typepred "%1") (! 1 1 1 1 1))
                    (("2" (hide -1)
                      (("2" (inst? -2 :where 1)
                        (("2" (replace -2 1 RL :hide? t)
                          (("2" (invoke (typepred "%1") (! 1 1 1 1))
                            (("2" (hide -1)
                              (("2"
                                (inst? -2 :where 1)
                                (("2"
                                  (replace -2 1 RL :hide? t)
                                  (("2"
                                    (invoke (typepred "%1") (! 1 1 1))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep :preds? t)
                (("3" (inst? -3 :where 1) (("3" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep :preds? t) (("4" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep :preds? t)
              (("2" (expand "polylist" 1)
                (("2" (invoke (typepred "%1") (! 1 2 1 1))
                  (("2" (hide -1)
                    (("2" (inst? -2 :where 1)
                      (("2" (replace -2 1 RL :hide? t)
                        (("2" (invoke (typepred "%1") (! 1 2 1))
                          (("2" (hide -1)
                            (("2" (replace -1 :hide? t)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep :preds? t) (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "polylist")
            (("2" (invoke (typepred "%1") (! 1 2 1))
              (("2" (replace -2 :hide? t) (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nvars formal-const-decl "posnat" multibernstein_into_polylist nil)
    (dm formal-const-decl "DegreeMono" multibernstein_into_polylist
     nil)
    (MultiBernstein type-eq-decl nil util nil)
    (polylist const-decl "PolyList" util nil)
    (PolyList type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (MultiPolynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nterms formal-const-decl "posnat" multibernstein_into_polylist
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list "structures/")
    (listn type-eq-decl nil listn "structures/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (PolynomialList type-eq-decl nil a2l__util nil) nil nil nil
    (Coefficient type-eq-decl nil a2l__util nil) nil
    (represents const-decl "bool" arrays_INTO_lists "structures/")
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (represents const-decl "bool" multibernstein_into_polylist nil))
   nil)
  (polylist__represents_multibernstein-6 nil 3687544485
   ("" (skosimp* :preds? t)
    (("" (expand "represents")
      ((""
        (case "terms!1 = length(polylist(mb!1, dm!1, nvars!1, terms!1))")
        (("1"
          (case "FORALL (pp_i: below(terms!1)):
                                                                       nvars!1 = length(nth(polylist(mb!1, dm!1, nvars!1, terms!1), pp_i))")
          (("1"
            (case "FORALL (pp_i: below(terms!1), var_i: below(nvars!1)):
                                                                                     length(nth(nth(polylist(mb!1, dm!1, nvars!1, terms!1), pp_i), var_i)) =
                                                                                      1 + dm!1(var_i)")
            (("1" (label "length_polylist" -3)
              (("1" (label "length_nth_polylist" -2)
                (("1" (label "length_nth_nth_polylist" -1)
                  (("1" (assert)
                    (("1" (hide -1 -2 -3)
                      (("1" (split)
                        (("1" (expand "represents")
                          (("1" (skeep :preds? t)
                            (("1" (expand "represents")
                              (("1"
                                (skeep :preds? t)
                                (("1"
                                  (expand "represents")
                                  (("1"
                                    (skeep :preds? t)
                                    (("1"
                                      (expand "polylist" 1)
                                      (("1"
                                        (invoke
                                         (typepred "%1")
                                         (! 1 1 1 1 1))
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst? -2 :where 1)
                                            (("1"
                                              (replace
                                               -2
                                               1
                                               RL
                                               :hide?
                                               t)
                                              (("1"
                                                (invoke
                                                 (typepred "%1")
                                                 (! 1 1 1 1))
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst? -2 :where 1)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       1
                                                       RL
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (invoke
                                                         (typepred
                                                          "%1")
                                                         (! 1 1 1))
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst?
                                                             -2
                                                             :where
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               RL
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (reveal
                                                                   "length_nth_nth_polylist")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i"
                                                                     "i_1")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (reveal
                                                                       "length_nth_polylist")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "i")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("2"
                                                                            (reveal
                                                                             "length_nth_polylist")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "length_nth_polylist")
                                                      (("2"
                                                        (inst - "i")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal "length_polylist")
                          (("2" (postpone) nil nil)) nil)
                         ("3" (postpone) nil nil)
                         ("4" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (postpone) nil nil)) nil)
             ("3" (hide 2)
              (("3" (skeep :preds? t)
                (("3" (inst? -3 :where 1) (("3" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep :preds? t) (("4" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (postpone) nil nil)) nil)
           ("3" (hide 2)
            (("3" (skeep :preds? t) (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil)
  (polylist__represents_multibernstein-5 nil 3687544141
   ("" (skeep :preds? t)
    (("" (expand "represents")
      (("" (case "nterms = length(polylist(mb, dm!1, nvars!1, terms))")
        (("1"
          (case "FORALL (pp_i: below(nterms)):
                                                              nvars!1 = length(nth(polylist(mb, dm!1, nvars!1, terms), pp_i))")
          (("1"
            (case "FORALL (pp_i: below(nterms), var_i: below(nvars)):
                                                                          length(nth(nth(polylist(mb, dm!1, nvars!1, terms), pp_i), var_i)) =
                                                                           1 + dm!1(var_i)")
            (("1" (label "length_polylist" -3)
              (("1" (label "length_nth_polylist" -2)
                (("1" (label "length_nth_nth_polylist" -1)
                  (("1" (assert)
                    (("1" (hide -1 -2 -3)
                      (("1" (split)
                        (("1" (expand "represents")
                          (("1" (skeep :preds? t)
                            (("1" (expand "represents")
                              (("1"
                                (skeep :preds? t)
                                (("1"
                                  (expand "represents")
                                  (("1"
                                    (skeep :preds? t)
                                    (("1"
                                      (expand "polylist" 1)
                                      (("1"
                                        (invoke
                                         (typepred "%1")
                                         (! 1 1 1 1 1))
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst? -2 :where 1)
                                            (("1"
                                              (replace
                                               -2
                                               1
                                               RL
                                               :hide?
                                               t)
                                              (("1"
                                                (invoke
                                                 (typepred "%1")
                                                 (! 1 1 1 1))
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst? -2 :where 1)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       1
                                                       RL
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (invoke
                                                         (typepred
                                                          "%1")
                                                         (! 1 1 1))
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst?
                                                             -2
                                                             :where
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               RL
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (propax)
                                                                nil)))
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (reveal
                                                                   "length_nth_nth_polylist")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i"
                                                                     "i_1")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (propax)
                                                                        nil)))
                                                                     ("2"
                                                                      (reveal
                                                                       "length_nth_polylist")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "i")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("2"
                                                                            (propax)
                                                                            nil)))))))))))))))))))))))
                                                     ("2"
                                                      (reveal
                                                       "length_nth_polylist")
                                                      (("2"
                                                        (postpone)
                                                        nil)))))))))))
                                             ("2"
                                              (postpone)
                                              nil)))))))))))))))))))))
                         ("2" (postpone) nil)
                         ("3" (postpone) nil)))))))))))))
             ("2" (postpone) nil) ("3" (postpone) nil)
             ("4" (hide 2)
              (("4" (skeep :preds? t)
                (("4" (inst? -3 :where 1) (("4" (assert) nil)))))))))
           ("2" (hide 2)
            (("2" (skeep :preds? t)
              (("2" (assert) (("2" (postpone) nil)))))))
           ("3" (hide 2)
            (("3" (skeep :preds? t) (("3" (assert) nil)))))))
         ("2" (postpone) nil))))))
    nil)
   nil nil)
  (polylist__represents_multibernstein-4 nil 3687543953
   ("" (skeep :preds? t)
    (("" (expand "represents")
      (("" (case "nterms = length(polylist(mb, dm!1, nvars!1, terms))")
        (("1"
          (case "FORALL (pp_i: below(nterms)):
                                                     nvars = length(nth(polylist(mb, dm!1, nvars!1, terms), pp_i))")
          (("1"
            (case "FORALL (pp_i: below(nterms), var_i: below(nvars)):
                                                               length(nth(nth(polylist(mb, dm!1, nvars!1, terms), pp_i), var_i)) =
                                                                1 + dm!1(var_i)")
            (("1" (label "length_polylist" -3)
              (("1" (label "length_nth_polylist" -2)
                (("1" (label "length_nth_nth_polylist" -1)
                  (("1" (assert)
                    (("1" (hide -1 -2 -3)
                      (("1" (split)
                        (("1" (expand "represents")
                          (("1" (skeep :preds? t)
                            (("1" (expand "represents")
                              (("1"
                                (skeep :preds? t)
                                (("1"
                                  (expand "represents")
                                  (("1"
                                    (skeep :preds? t)
                                    (("1"
                                      (expand "polylist" 1)
                                      (("1"
                                        (invoke
                                         (typepred "%1")
                                         (! 1 1 1 1 1))
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst? -2 :where 1)
                                            (("1"
                                              (replace
                                               -2
                                               1
                                               RL
                                               :hide?
                                               t)
                                              (("1"
                                                (invoke
                                                 (typepred "%1")
                                                 (! 1 1 1 1))
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst? -2 :where 1)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       1
                                                       RL
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (invoke
                                                         (typepred
                                                          "%1")
                                                         (! 1 1 1))
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst?
                                                             -2
                                                             :where
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               RL
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (reveal
                                                                   "length_nth_nth_polylist")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i"
                                                                     "i_1")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (reveal
                                                                       "length_nth_polylist")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "i")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "length_nth_polylist")
                                                      (("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil)
                         ("3" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (hide 2)
              (("4" (skeep :preds? t)
                (("4" (inst? -3 :where 1) (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep :preds? t)
              (("2" (assert) (("2" (postpone) nil nil)) nil)) nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep :preds? t) (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (polylist__represents_multibernstein-3 nil 3687543860
   ("" (skeep :preds? t)
    (("" (expand "represents")
      (("" (case "nterms = length(polylist(mb, dm!1, nvars!1, terms))")
        (("1"
          (case "FORALL (pp_i: below(nterms)):
                                            nvars = length(nth(polylist(mb, dm!1, nvars!1, terms), pp_i))")
          (("1"
            (case "FORALL (pp_i: below(nterms), var_i: below(nvars)):
                                                    length(nth(nth(polylist(mb, dm!1, nvars!1, terms), pp_i), var_i)) =
                                                     1 + dm(var_i)")
            (("1" (label "length_polylist" -3)
              (("1" (label "length_nth_polylist" -2)
                (("1" (label "length_nth_nth_polylist" -1)
                  (("1" (assert)
                    (("1" (hide -1 -2 -3)
                      (("1" (split)
                        (("1" (expand "represents")
                          (("1" (skeep :preds? t)
                            (("1" (expand "represents")
                              (("1"
                                (skeep :preds? t)
                                (("1"
                                  (expand "represents")
                                  (("1"
                                    (skeep :preds? t)
                                    (("1"
                                      (expand "polylist" 1)
                                      (("1"
                                        (invoke
                                         (typepred "%1")
                                         (! 1 1 1 1 1))
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst? -2 :where 1)
                                            (("1"
                                              (replace
                                               -2
                                               1
                                               RL
                                               :hide?
                                               t)
                                              (("1"
                                                (invoke
                                                 (typepred "%1")
                                                 (! 1 1 1 1))
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst? -2 :where 1)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       1
                                                       RL
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (invoke
                                                         (typepred
                                                          "%1")
                                                         (! 1 1 1))
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst?
                                                             -2
                                                             :where
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               RL
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (reveal
                                                                   "length_nth_nth_polylist")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i"
                                                                     "i_1")
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil)
                         ("3" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (hide 2)
              (("4" (skeep :preds? t)
                (("4" (inst? -3 :where 1) (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep :preds? t)
              (("2" (assert) (("2" (postpone) nil nil)) nil)) nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep :preds? t) (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (polylist__represents_multibernstein-2 nil 3687543753
   ("" (skeep :preds? t)
    (("" (expand "represents")
      (("" (case "nterms = length(polylist(mb, dm, nvars, terms))")
        (("1"
          (case "FORALL (pp_i: below(nterms)):
                          nvars = length(nth(polylist(mb, dm, nvars, terms), pp_i))")
          (("1"
            (case "FORALL (pp_i: below(nterms), var_i: below(nvars)):
                              length(nth(nth(polylist(mb, dm, nvars, terms), pp_i), var_i)) =
                               1 + dm(var_i)")
            (("1" (label "length_polylist" -3)
              (("1" (label "length_nth_polylist" -2)
                (("1" (label "length_nth_nth_polylist" -1)
                  (("1" (assert)
                    (("1" (hide -1 -2 -3)
                      (("1" (split)
                        (("1" (expand "represents")
                          (("1" (skeep :preds? t)
                            (("1" (expand "represents")
                              (("1"
                                (skeep :preds? t)
                                (("1"
                                  (expand "represents")
                                  (("1"
                                    (skeep :preds? t)
                                    (("1"
                                      (expand "polylist" 1)
                                      (("1"
                                        (invoke
                                         (typepred "%1")
                                         (! 1 1 1 1 1))
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst? -2 :where 1)
                                            (("1"
                                              (replace
                                               -2
                                               1
                                               RL
                                               :hide?
                                               t)
                                              (("1"
                                                (invoke
                                                 (typepred "%1")
                                                 (! 1 1 1 1))
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst? -2 :where 1)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       1
                                                       RL
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (invoke
                                                         (typepred
                                                          "%1")
                                                         (! 1 1 1))
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst?
                                                             -2
                                                             :where
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               RL
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (propax)
                                                                nil)))
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (reveal
                                                                   "length_nth_nth_polylist")
                                                                  (("2"
                                                                    (postpone)
                                                                    nil)))))))))))))))
                                                     ("2"
                                                      (postpone)
                                                      nil)))))))))
                                             ("2"
                                              (postpone)
                                              nil)))))))))))))))))))))
                         ("2" (postpone) nil)
                         ("3" (postpone) nil)))))))))))))
             ("2" (postpone) nil) ("3" (postpone) nil)
             ("4" (hide 2)
              (("4" (skeep :preds? t)
                (("4" (inst? -3 :where 1) (("4" (assert) nil)))))))))
           ("2" (hide 2)
            (("2" (skeep :preds? t)
              (("2" (assert) (("2" (postpone) nil)))))))
           ("3" (hide 2)
            (("3" (skeep :preds? t) (("3" (assert) nil)))))))
         ("2" (postpone) nil))))))
    nil)
   nil nil)
  (polylist__represents_multibernstein-1 nil 3687538203
   ("" (skeep :preds? t)
    (("" (expand "represents")
      (("" (case "nterms = length(polylist(mb, dm!1, nvars!1, terms))")
        (("1"
          (case "FORALL (pp_i: below(nterms)):
                 nvars = length(nth(polylist(mb, dm!1, nvars!1, terms), pp_i))")
          (("1"
            (case "FORALL (pp_i: below(nterms), var_i: below(nvars)):
                   length(nth(nth(polylist(mb, dm!1, nvars!1, terms), pp_i), var_i)) =
                    1 + dm(var_i)")
            (("1" (label "length_polylist" -3)
              (("1" (label "length_nth_polylist" -2)
                (("1" (label "length_nth_nth_polylist" -1)
                  (("1" (assert)
                    (("1" (hide -1 -2 -3)
                      (("1" (split)
                        (("1" (expand "represents")
                          (("1" (skeep :preds? t)
                            (("1" (expand "represents")
                              (("1"
                                (skeep :preds? t)
                                (("1"
                                  (expand "represents")
                                  (("1"
                                    (skeep :preds? t)
                                    (("1"
                                      (expand "polylist" 1)
                                      (("1"
                                        (invoke
                                         (typepred "%1")
                                         (! 1 1 1 1 1))
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst? -2 :where 1)
                                            (("1"
                                              (replace
                                               -2
                                               1
                                               RL
                                               :hide?
                                               t)
                                              (("1"
                                                (invoke
                                                 (typepred "%1")
                                                 (! 1 1 1 1))
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst? -2 :where 1)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       1
                                                       RL
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (invoke
                                                         (typepred
                                                          "%1")
                                                         (! 1 1 1))
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst?
                                                             -2
                                                             :where
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               RL
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (reveal
                                                                   "length_nth_nth_polylist")
                                                                  (("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil)
                         ("3" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (hide 2)
              (("4" (skeep :preds? t)
                (("4" (inst? -3 :where 1) (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep :preds? t)
              (("2" (assert) (("2" (postpone) nil nil)) nil)) nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep :preds? t) (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (representation__is_canonical 0
  (representation__is_canonical-1 nil 3687699542
   ("" (skeep)
    (("" (lemma "nth_extensionality[PolyproductList]")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (expand "represents")
              (("" (flatten -)
                (("" (assert)
                  (("" (skeep)
                    (("" (lemma "nth_extensionality[PolynomialList]")
                      (("" (inst? -1 :where 1)
                        (("" (assert)
                          (("" (hide 2)
                            (("" (inst -3 "n")
                              ((""
                                (inst -7 "n")
                                ((""
                                  (assert)
                                  ((""
                                    (skeep :preds? t)
                                    ((""
                                      (lemma
                                       "nth_extensionality[Coefficient]")
                                      ((""
                                        (inst? -1 :where 1)
                                        ((""
                                          (assert)
                                          ((""
                                            (hide 2)
                                            ((""
                                              (inst -5 "n" "n_1")
                                              ((""
                                                (inst -9 "n" "n_1")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (skeep :preds? t)
                                                    ((""
                                                      (expand
                                                       "represents")
                                                      ((""
                                                        (inst -3 "n")
                                                        ((""
                                                          (inst -7 "n")
                                                          ((""
                                                            (expand
                                                             "represents")
                                                            ((""
                                                              (inst
                                                               -7
                                                               "n_1")
                                                              ((""
                                                                (inst
                                                                 -3
                                                                 "n_1")
                                                                ((""
                                                                  (expand
                                                                   "represents")
                                                                  ((""
                                                                    (inst
                                                                     -3
                                                                     "n_1!1")
                                                                    ((""
                                                                      (inst
                                                                       -7
                                                                       "n_1!1")
                                                                      ((""
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PolyproductList type-eq-decl nil a2l__util nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nth_extensionality formula-decl nil more_list_props "structures/")
    (represents const-decl "bool" multibernstein_into_polylist nil)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" util nil)
    (nterms formal-const-decl "posnat" multibernstein_into_polylist
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Coefficient type-eq-decl nil a2l__util nil)
    (nvars formal-const-decl "posnat" multibernstein_into_polylist nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (represents const-decl "bool" arrays_INTO_lists "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (PolyList type-eq-decl nil util nil))
   shostak)))

