(vect2_more
 (norm_abs_perpL 0
  (norm_abs_perpL-1 nil 3823783445
   ("" (skeep)
    ((""
      (case-replace "v*perpL(^(nzv)) = v*perpL(nzv)/norm(perpL(nzv))")
      (("1" (hide -1)
        (("1" (lemma "orthogonal_basis")
          (("1" (inst -1 "nzv" "perpL(nzv)" "v")
            (("1" (assert)
              (("1" (split -1)
                (("1" (replace -1 1)
                  (("1" (replace -2 1)
                    (("1" (assert)
                      (("1" (lemma "abs_div")
                        (("1" (inst?)
                          (("1" (replace -1 1)
                            (("1" (typepred "norm(perpL(nzv))")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "abs" 1 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "sqv" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "abs_div")
                                          (("1"
                                            (inst
                                             -1
                                             "perpL(nzv)*perpL(nzv)"
                                             "v*perpL(nzv)")
                                            (("1"
                                              (case
                                               "NOT ((v * perpL(nzv)) / (perpL(nzv) * perpL(nzv))) *
                                         (perpL(nzv) * perpL(nzv)) = v*perpL(nzv)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replace -1 1)
                                                (("2"
                                                  (lemma "norm_scal")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "(v * perpL(nzv)) / norm(perpL(nzv))"
                                                     "1/norm(perpL(nzv))*perpL(nzv)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "norm_normalize")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "perpL(nzv)")
                                                          (("2"
                                                            (expand
                                                             "^"
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "abs_div")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "norm(perpL(nzv))"
                                                                     "v*perpL(nzv)")
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "abs"
                                                                         -3
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             1
                                                                             rl)
                                                                            (("2"
                                                                              (case
                                                                               "NOT ((v * perpL(nzv)) / norm(perpL(nzv)) * (1 / norm(perpL(nzv)))) = ((v * perpL(nzv)) /(norm(perpL(nzv))*norm(perpL(nzv))))")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1
                                                                                 1)
                                                                                (("2"
                                                                                  (case
                                                                                   "(norm(perpL(nzv)) * norm(perpL(nzv))) = (perpL(nzv) * perpL(nzv))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "norm")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "(sqrt(sqv(perpL(nzv))))")
                                                                                        (("2"
                                                                                          (replace
                                                                                           -2
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sqv"
                                                                                             1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "dot_perpR_eq_0")
                  (("2" (expand "orthogonal?" 1)
                    (("2" (expand "perpL" 1)
                      (("2" (expand "*" 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (lemma "normalized_perpL")
          (("2" (insteep)
            (("2" (replaces -1 :dir rl)
              (("2" (expand "^") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_scal_right formula-decl nil vectors_2D nil)
    (TRUE const-decl "bool" booleans nil)
    (normalized_perpL formula-decl nil perpendicular_2D nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Vector" vectors_2D nil)
    (norm_normalize formula-decl nil vectors_2D nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_scal formula-decl nil vectors_2D nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqv const-decl "nnreal" vectors_2D nil)
    (dot_scal_left formula-decl nil vectors_2D nil)
    (add_zero_left formula-decl nil vectors_2D nil)
    (scal_0 formula-decl nil vectors_2D nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (orthogonal? const-decl "bool" vectors_2D nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot_perpR_eq_0 formula-decl nil perpendicular_2D nil)
    (perpL_nz application-judgement "Nz_vect2" perpendicular_2D nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D nil)
    (orthogonal_basis formula-decl nil basis_2D nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Nz_vect2 type-eq-decl nil vectors_2D nil)
    (^ const-decl "Normalized" vectors_2D nil)
    (Normalized type-eq-decl nil vectors_2D nil)
    (norm const-decl "nnreal" vectors_2D nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Nz_vector type-eq-decl nil vectors_2D nil)
    (zero const-decl "Vector" vectors_2D nil)
    (/= const-decl "boolean" notequal nil)
    (perpL const-decl "Vect2" perpendicular_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def nil)
    (* const-decl "real" vectors_2D nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil)))

