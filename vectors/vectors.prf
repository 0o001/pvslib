(vectors
 (times_TCC1 0
  (times_TCC1-1 nil 3254159790 ("" (subtype-tcc) nil nil) nil nil
   (times subtype "(number_fields.-)(vectors.n, 1)"
    "T_high[below(n)]")))
 (sqv_TCC1 0
  (sqv_TCC1-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "*") (("" (rewrite "sigma_nonneg") nil nil)) nil))
    nil)
   ((T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma_nonneg formula-decl nil sigma reals))
   nil (sqv subtype "vectors.*(vectors.v, vectors.v)" "nnreal")))
 (sqv_rew 0
  (sqv_rew-1 nil 3440253127 ("" (grind) nil nil) nil shostak))
 (sqv_sos 0
  (sqv_sos-1 nil 3602098415 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq reals)) shostak))
 (unity_TCC1 0
  (unity_TCC1-1 nil 3254159790
   ("" (skolem 1 "m")
    (("" (expand "norm")
      (("" (case "sqv(vectors.zero WITH [m := 1]) = 1")
        (("1" (expand "zero")
          (("1" (replace -1) (("1" (rewrite "sqrt_1") nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "sqv")
            (("2" (expand "*")
              (("2" (typepred "m")
                (("2" (case "m=n-1")
                  (("1" (replace -1 :dir rl)
                    (("1" (expand "sigma")
                      (("1" (assert)
                        (("1" (lemma "sigma_eq")
                          (("1"
                            (inst -1
                             "LAMBDA i:(zero WITH [m := 1](i)) * (zero WITH [m := 1](i))"
                             "zero" "m-1" "0")
                            (("1" (split -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "zero")
                                    (("1"
                                      (rewrite "sigma_zero")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skolem 1 "N")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "sigma_split")
                    (("2"
                      (inst -1
                       "LAMBDA i: (zero WITH [m := 1](i)) * (zero WITH [m := 1](i))"
                       "n-1" "0" "m")
                      (("2" (assert)
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2"
                              (case-replace "sigma(1 + m, n - 1,
                         LAMBDA i: (zero WITH [m := 1](i)) * (zero WITH [m := 1](i))) =0")
                              (("1"
                                (hide -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sigma")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "sigma_eq")
                                        (("1"
                                          (inst
                                           -1
                                           "LAMBDA i:(zero WITH [m := 1](i)) * (zero WITH [m := 1](i))"
                                           "zero"
                                           "m-1"
                                           "0")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (expand "zero")
                                                  (("1"
                                                    (rewrite
                                                     "sigma_zero")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (skolem 1 "N")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (lemma "sigma_eq")
                                  (("2"
                                    (inst
                                     -1
                                     "LAMBDA i:(zero WITH [m := 1](i)) * (zero WITH [m := 1](i))"
                                     "zero"
                                     "n-1"
                                     "1+m")
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "zero")
                                            (("1"
                                              (rewrite "sigma_zero")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skolem 1 "N")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_zero formula-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_split formula-decl nil sigma reals)
    (sqrt_1 formula-decl nil sqrt reals))
   nil
   (unity subtype "vectors.zero WITH [(vectors.i) := 1]"
    "Normalized")))
 (comp_distr_add 0
  (comp_distr_add-1 nil 3254159790 ("" (grind) nil nil) nil nil))
 (comp_distr_sub 0
  (comp_distr_sub-1 nil 3254159790 ("" (grind) nil nil) nil nil))
 (comp_distr_scal 0
  (comp_distr_scal-1 nil 3256995715
   ("" (skosimp*) (("" (grind) nil nil)) nil) nil shostak))
 (comp_distr_neg 0
  (comp_distr_neg-1 nil 3467132784
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (comp_zero 0
  (comp_zero-1 nil 3254159790 ("" (grind) nil nil) nil nil))
 (comps_eq 0
  (comps_eq-1 nil 3440253315
   ("" (grind) (("" (apply-extensionality 1 :hide? t) nil nil)) nil)
   nil nil))
 (norm_comp_eq_0 0
  (norm_comp_eq_0-2 nil 3428791579
   ("" (skeep)
    (("" (expand "norm")
      (("" (split)
        (("1" (flatten)
          (("1" (lemma "sqrt_eq_0")
            (("1" (inst -1 "sqv(v)")
              (("1" (split -1)
                (("1" (hide -2)
                  (("1" (rewrite "sqv_sos")
                    (("1" (expand "sos")
                      (("1" (lemma "sigma_nonneg_eq_0")
                        (("1" (inst?)
                          (("1" (skeep)
                            (("1" (inst -1 "i")
                              (("1"
                                (assert)
                                (("1" (rewrite "sq_eq_0") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (rewrite "sqv_sos")
            (("2" (expand "sos")
              (("2" (case-replace "(LAMBDA i:sq(v(i))) = (LAMBDA i:0)")
                (("1" (hide -)
                  (("1" (rewrite "sigma_const")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (decompose-equality 1)
                    (("2" (inst?) (("2" (rewrite "sq_eq_0") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_0 formula-decl nil sqrt reals)
    (sigma_const formula-decl nil sigma reals)
    (sq const-decl "nonneg_real" sq reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sq_eq_0 formula-decl nil sq reals)
    (sigma_nonneg_eq_0 formula-decl nil sigma reals)
    (sqrt_eq_0 formula-decl nil sqrt reals))
   nil)
  (norm_comp_eq_0-1 nil 3428791425
   (";;; Proof norm_xy_eq_0-1 for formula vectors_2D.norm_xy_eq_0"
    (skeep)
    ((";;; Proof norm_xy_eq_0-1 for formula vectors_2D.norm_xy_eq_0"
      (expand "norm")
      ((";;; Proof norm_xy_eq_0-1 for formula vectors_2D.norm_xy_eq_0"
        (split)
        (("1" (flatten)
          (("1" (lemma "sqrt_eq_0")
            (("1" (inst -1 "sqv(v)")
              (("1" (split -1)
                (("1" (hide -2)
                  (("1" (rewrite "sqv_sq")
                    (("1" (rewrite "sq_plus_eq_0") nil)))))
                 ("2" (propax) nil)))))))))
         ("2" (flatten)
          (("2" (rewrite "sqv_sq")
            (("2" (ground)
              (("2" (replaces -) (("2" (assert) nil))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil))
 (norm_sqv_eq_0 0
  (norm_sqv_eq_0-1 nil 3428791377
   ("" (skeep)
    (("" (expand "norm")
      (("" (ground) (("" (replaces -1) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sqrt_0 formula-decl nil sqrt reals)) nil))
 (norm_eq_0 0
  (norm_eq_0-1 nil 3430054299
   ("" (skeep)
    (("" (lemma "norm_comp_eq_0")
      (("" (inst?)
        (("" (replaces -1)
          (("" (split)
            (("1" (flatten)
              (("1" (decompose-equality)
                (("1" (inst?)
                  (("1" (expand "zero") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (decompose-equality -1)
                  (("2" (inst?)
                    (("2" (expand "zero") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (norm_zero 0
  (norm_zero-3 nil 3430834190
   ("" (lemma "norm_eq_0") (("" (inst?) (("" (assert) nil nil)) nil))
    nil)
   nil nil)
  (norm_zero-2 nil 3428791139
   ("" (skeep)
    (("" (lemma "norm_comp_eq_0")
      (("" (inst?)
        (("" (replaces -1)
          (("" (split)
            (("1" (flatten)
              (("1" (decompose-equality)
                (("1" (inst?)
                  (("1" (expand "zero") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (decompose-equality -1)
                  (("2" (inst?)
                    (("2" (expand "zero") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (norm_zero-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (prop)
        (("1" (lemma "sqv_eq_0")
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (replace -1)
          (("2" (rewrite "sqv_zero") (("2" (rewrite "sqrt_0") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_0 formula-decl nil sqrt reals)) nil))
 (sqv_zero 0
  (sqv_zero-1 nil 3254159790
   ("" (expand "sqv")
    (("" (expand "*")
      (("" (expand "zero") (("" (rewrite "sigma_const") nil nil)) nil))
      nil))
    nil)
   ((sigma_const formula-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals))
   nil))
 (sqv_eq_0 0
  (sqv_eq_0-2 nil 3428790905
   ("" (skeep)
    (("" (lemma "norm_sqv_eq_0")
      (("" (inst?)
        (("" (replaces -1 :dir rl)
          (("" (lemma "norm_eq_0") (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil)
  (sqv_eq_0-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (prop)
      (("1" (expand "sqv")
        (("1" (expand "*")
          (("1" (lemma "sigma_nonneg_eq_0")
            (("1" (inst?)
              (("1" (apply-extensionality 1 :hide? t)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (hide -2)
                      (("1" (grind :theories "real_props") nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil) ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace -1) (("2" (rewrite "sqv_zero") nil nil)) nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_nonneg_eq_0 formula-decl nil sigma reals))
   nil))
 (v_neq_zero 0
  (v_neq_zero-1 nil 3428790819
   ("" (skeep)
    (("" (lemma "sqv_eq_0") (("" (inst?) (("" (ground) nil nil)) nil))
      nil))
    nil)
   nil nil))
 (v_neq_0 0
  (v_neq_0-1 nil 3412514418
   ("" (skeep)
    (("" (lemma "norm_eq_0")
      (("" (inst?)
        (("" (assert)
          (("" (expand "norm")
            (("" (flatten)
              (("" (split +)
                (("1" (flatten)
                  (("1" (expand "sqv")
                    (("1" (case-replace "v*v = 0")
                      (("1" (assert) nil nil)
                       ("2" (hide 2)
                        (("2" (assert)
                          (("2" (expand "*")
                            (("2" (lemma "sigma_Fnnr")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "sq")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -2)
                    (("2" (expand "zero")
                      (("2" (expand "sq")
                        (("2" (lemma "sigma_zero")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_zero formula-decl nil sigma reals)
    (sqrt_0 formula-decl nil sqrt reals)
    (sigma_Fnnr formula-decl nil sigma reals)
    (sq const-decl "nonneg_real" sq reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals))
   nil))
 (sq_dot_eq_0 0
  (sq_dot_eq_0-3 nil 3428790726
   ("" (skeep)
    (("" (lemma "norm_eq_0")
      (("" (inst?)
        (("" (replaces -1 :dir rl)
          (("" (case-replace "norm(v)=0 IFF sq(norm(v))=0")
            (("1" (hide -1)
              (("1" (expand "norm")
                (("1" (rewrite "sq_sqrt")
                  (("1" (expand "sqv") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (rewrite "sq_eq_0") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_eq_0 formula-decl nil sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals))
   nil)
  (sq_dot_eq_0-2 nil 3428790700 nil nil nil)
  (sq_dot_eq_0-1 nil 3428790692 ("" (postpone) nil nil) nil shostak))
 (nzv_comp_neq_0 0
  (nzv_comp_neq_0-2 "" 3790092907
   ("" (skeep)
    (("" (lemma "norm_eq_0")
      (("" (inst?)
        (("" (lemma "norm_comp_eq_0")
          (("" (inst?)
            (("" (replaces -1)
              (("" (ground)
                (("1" (skeep -1) (("1" (inst? -2) nil nil)) nil)
                 ("2" (skeep 4)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (nzv_comp_neq_0-1 nil 3430834221
   ("" (skeep)
    (("" (expand "nz_vector?")
      (("" (lemma "norm_eq_0")
        (("" (inst?)
          (("" (lemma "norm_comp_eq_0")
            (("" (inst?)
              (("" (replaces -1)
                (("" (ground)
                  (("1" (skeep -1) (("1" (inst? -2) nil nil)) nil)
                   ("2" (skeep 4)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (nz_norm_gt_0 0
  (nz_norm_gt_0-3 "" 3790092907
   ("" (skeep :preds? t)
    (("" (lemma "norm_eq_0") (("" (inst?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (nz_norm_gt_0 subtype "vectors.norm(vectors.nzu)" "posreal"))
  (nz_norm_gt_0-2 nil 3430834334
   ("" (skeep :preds? t)
    (("" (expand "nz_vector?")
      (("" (flatten)
        (("" (lemma "norm_eq_0")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (nz_norm_gt_0 subtype "vectors.norm(vectors.nzu)" "posreal"))
  (nz_norm_gt_0-1 nil 3430833347 ("" (judgement-tcc) nil nil) nil nil
   (nz_norm_gt_0 subtype "vectors.norm(vectors.nzu)" "posreal")))
 (nz_sqv_gt_0 0
  (nz_sqv_gt_0-3 "" 3790092907
   ("" (skeep :preds? t)
    (("" (lemma "v_neq_zero")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (nz_sqv_gt_0 subtype "vectors.sqv(vectors.nzu)" "posreal"))
  (nz_sqv_gt_0-2 nil 3430834353
   ("" (skeep :preds? t)
    (("" (lemma "v_neq_zero")
      (("" (inst?)
        (("" (expand "nz_vector?") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil (nz_sqv_gt_0 subtype "vectors.sqv(vectors.nzu)" "posreal"))
  (nz_sqv_gt_0-1 nil 3430833347 ("" (judgement-tcc) nil nil) nil nil
   (nz_sqv_gt_0 subtype "vectors.sqv(vectors.nzu)" "posreal")))
 (normalized_nz 0
  (normalized_nz-3 "" 3790092907
   ("" (skeep :preds? t)
    (("" (assert)
      (("" (lemma "norm_eq_0")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak (normalized_nz subtype "vectors.x" "Nz_vector"))
  (normalized_nz-2 nil 3430834369
   ("" (skeep :preds? t)
    (("" (assert)
      (("" (lemma "norm_eq_0")
        (("" (inst?)
          (("" (expand "nz_vector?") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil (normalized_nz subtype "vectors.x" "Nz_vector"))
  (normalized_nz-1 nil 3430833347 ("" (judgement-tcc) nil nil) nil nil
   (normalized_nz subtype "vectors.x" "Nz_vector")))
 (neg_nzv 0
  (neg_nzv-1 nil 3431076704
   ("" (grind)
    (("" (decompose-equality -1)
      (("" (decompose-equality 1)
        (("" (inst?) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil (neg_nzv subtype "(vectors.-)(vectors.nzu)" "Nz_vector")))
 (nz_nzv 0
  (nz_nzv-1 nil 3431179313
   ("" (grind)
    (("" (decompose-equality 2)
      (("" (decompose-equality -1)
        (("" (inst?) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil
   (nz_nzv subtype "vectors.*(vectors.nza, vectors.nzv)" "Nz_vector")))
 (neg_zero 0
  (neg_zero-1 nil 3462009511
   ("" (expand "zero")
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil shostak))
 (add_zero_left 0
  (add_zero_left-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (add_zero_right 0
  (add_zero_right-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (add_comm 0
  (add_comm-1 nil 3254159790
   ("" (skolem 1 ("u" "v"))
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (add_assoc 0
  (add_assoc-1 nil 3254159790
   ("" (skolem 1 ("u" "v" "w"))
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (add_move_left 0
  (add_move_left-1 nil 3430835475
   ("" (skolem 1 ("u" "v" "w"))
    (("" (ground)
      (("1" (decompose-equality 1)
        (("1" (decompose-equality -1)
          (("1" (inst -1 "x!1") (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (decompose-equality -1)
        (("2" (decompose-equality 1)
          (("2" (inst -1 "x!1") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (add_move_right 0
  (add_move_right-1 nil 3254159790
   ("" (skolem 1 ("u" "v" "w"))
    (("" (ground)
      (("1" (decompose-equality 1)
        (("1" (decompose-equality -1)
          (("1" (inst -1 "x!1") (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (decompose-equality -1)
        (("2" (decompose-equality 1)
          (("2" (inst -1 "x!1") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (add_move_both 0
  (add_move_both-1 nil 3254159790
   ("" (skolem 1 ("u" "v" "w"))
    (("" (ground)
      (("1" (decompose-equality 1)
        (("1" (decompose-equality -1)
          (("1" (inst -1 "x!1") (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (decompose-equality -1)
        (("2" (decompose-equality 1)
          (("2" (inst -1 "x!1") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (add_neg_sub 0
  (add_neg_sub-1 nil 3254159790
   ("" (skolem 1 ("u" "v"))
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (add_cancel 0
  (add_cancel-1 nil 3254159790
   ("" (grind) (("" (apply-extensionality :hide? t) nil nil)) nil) nil
   nil))
 (add_cancel_neg 0
  (add_cancel_neg-1 nil 3254159790
   ("" (grind) (("" (apply-extensionality :hide? t) nil nil)) nil) nil
   nil))
 (add_cancel2 0
  (add_cancel2-1 nil 3255196933
   ("" (grind) (("" (apply-extensionality :hide? t) nil nil)) nil) nil
   shostak))
 (add_cancel_neg2 0
  (add_cancel_neg2-1 nil 3255196940
   ("" (grind) (("" (apply-extensionality :hide? t) nil nil)) nil) nil
   shostak))
 (add_cancel_left 0
  (add_cancel_left-1 nil 3430834445
   ("" (grind)
    (("" (decompose-equality 1)
      (("" (decompose-equality -1)
        (("" (inst?) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (add_cancel_right 0
  (add_cancel_right-1 nil 3430834499
   ("" (grind)
    (("" (decompose-equality 1)
      (("" (decompose-equality -1)
        (("" (inst?) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil))
 (add_eq_zero 0
  (add_eq_zero-1 nil 3467130643
   ("" (skeep)
    (("" (grind)
      (("1" (decompose-equality 1)
        (("1" (decompose-equality -1) (("1" (grind) nil nil)) nil))
        nil)
       ("2" (decompose-equality 1) nil nil))
      nil))
    nil)
   nil shostak))
 (neg_shift 0
  (neg_shift-1 nil 3467130713
   ("" (skeep)
    (("" (grind)
      (("1" (decompose-equality 1) nil nil)
       ("2" (decompose-equality 1)
        (("2" (decompose-equality -1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sub_cancel_left 0
  (sub_cancel_left-1 nil 3430834506
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (decompose-equality -1)
        (("" (inst?) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil))
 (sub_cancel_right 0
  (sub_cancel_right-1 nil 3430834513
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (decompose-equality -1)
        (("" (inst?) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil))
 (sub_zero_left 0
  (sub_zero_left-1 nil 3254159790
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil)) nil))
    nil)
   nil nil))
 (sub_zero_right 0
  (sub_zero_right-1 nil 3254159790
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil)) nil))
    nil)
   nil nil))
 (sub_eq_args 0
  (sub_eq_args-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (sub_eq_zero 0
  (sub_eq_zero-1 nil 3254159790
   ("" (skolem 1 ("u" "v"))
    (("" (ground)
      (("1" (decompose-equality 1)
        (("1" (decompose-equality -1)
          (("1" (inst -1 "x!1")
            (("1" (expand "zero")
              (("1" (expand "-") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (replace -1) (("2" (rewrite "sub_eq_args") nil nil)) nil))
      nil))
    nil)
   nil nil))
 (sub_cancel 0
  (sub_cancel-1 nil 3254159790
   ("" (grind) (("" (apply-extensionality :hide? t) nil nil)) nil) nil
   nil))
 (sub_cancel_neg 0
  (sub_cancel_neg-1 nil 3254159790
   ("" (grind) (("" (apply-extensionality :hide? t) nil nil)) nil) nil
   nil))
 (neg_add_left 0
  (neg_add_left-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (neg_add_right 0
  (neg_add_right-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (neg_distr_sub 0
  (neg_distr_sub-1 nil 3254159790
   ("" (skolem 1 ("u" "v"))
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (neg_neg 0
  (neg_neg-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (neg_distr_add 0
  (neg_distr_add-1 nil 3254159790
   ("" (skolem 1 ("u" "v"))
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (dot_neg_left 0
  (dot_neg_left-2 "" 3790092909
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst?)
          (("" (inst -1 "-1")
            (("" (assert)
              ((""
                (case-replace
                 "(LAMBDA (i_673: below(n)): -1 * ((-u!1)(i_673) * w!1(i_673))) = (LAMBDA (i_673: below(n)): ((u!1)(i_673) * w!1(i_673)))")
                (("1" (assert) nil nil)
                 ("2" (apply-extensionality 1 :hide? t)
                  (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (dot_neg_left-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst?)
          (("1" (inst -1 "-1")
            (("1" (assert)
              (("1"
                (case-replace
                 "(LAMBDA (i_673: below(n)): -1 * ((-u!1)(i_673) * w!1(i_673))) = (LAMBDA (i_673: below(n)): ((u!1)(i_673) * w!1(i_673)))")
                (("1" (assert) nil nil)
                 ("2" (apply-extensionality 1 :hide? t)
                  (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "sigma") (("2" (assert) nil nil)) nil)
           ("3" (expand "sigma") (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_scal formula-decl nil sigma reals))
   nil))
 (dot_neg_right 0
  (dot_neg_right-2 "" 3790092910
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst?)
          (("" (inst -1 "-1")
            (("" (assert)
              ((""
                (case-replace
                 "(LAMBDA (i_673: below(n)): -1 * ((u!1)(i_673) * (-w!1)(i_673))) = (LAMBDA (i_673: below(n)): ((u!1)(i_673) * w!1(i_673)))")
                (("1" (assert) nil nil)
                 ("2" (apply-extensionality 1 :hide? t)
                  (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (dot_neg_right-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst?)
          (("1" (inst -1 "-1")
            (("1" (assert)
              (("1"
                (case-replace
                 "(LAMBDA (i_673: below(n)): -1 * ((u!1)(i_673) * (-w!1)(i_673))) = (LAMBDA (i_673: below(n)): ((u!1)(i_673) * w!1(i_673)))")
                (("1" (assert) nil nil)
                 ("2" (apply-extensionality 1 :hide? t)
                  (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "sigma") (("2" (assert) nil nil)) nil)
           ("3" (expand "sigma") (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_scal formula-decl nil sigma reals))
   nil))
 (neg_dot_neg 0
  (neg_dot_neg-1 nil 3429978001
   ("" (skosimp)
    (("" (rewrite "dot_neg_left")
      (("" (rewrite "dot_neg_right") (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (dot_zero_left 0
  (dot_zero_left-2 "" 3790092910
   ("" (skolem 1 "v")
    (("" (expand "*")
      (("" (expand "zero")
        (("" (lemma "sigma_const")
          (("" (inst -1 "n-1" "0" "0") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (dot_zero_left-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (expand "*")
      (("" (expand "zero")
        (("" (lemma "sigma_const")
          (("" (inst -1 "n-1" "0" "0")
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_const formula-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals))
   nil))
 (dot_zero_right 0
  (dot_zero_right-2 "" 3790092910
   ("" (skolem 1 "v")
    (("" (expand "*")
      (("" (expand "zero")
        (("" (lemma "sigma_const")
          (("" (inst -1 "n-1" "0" "0") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (dot_zero_right-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (expand "*")
      (("" (expand "zero")
        (("" (lemma "sigma_const")
          (("" (inst -1 "n-1" "0" "0")
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_const formula-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals))
   nil))
 (dot_comm 0
  (dot_comm-1 nil 3254159790
   ("" (skolem 1 ("u" "v"))
    (("" (expand "*") (("" (assert) nil nil)) nil)) nil)
   nil nil))
 (dot_assoc 0
  (dot_assoc-2 "" 3790092910
   ("" (skolem 1 ("a" "v" "w"))
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst -1 "LAMBDA i: v(i) * w(i)" "a" "n-1" "0")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (dot_assoc-1 nil 3254159790
   ("" (skolem 1 ("a" "v" "w"))
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst -1 "LAMBDA i: v(i) * w(i)" "a" "n-1" "0")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_scal formula-decl nil sigma reals))
   nil))
 (dot_eq_args_ge 0
  (dot_eq_args_ge-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "*") (("" (rewrite "sigma_nonneg") nil nil)) nil))
    nil)
   ((T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma_nonneg formula-decl nil sigma reals))
   nil))
 (add_comm_assoc_left 0
  (add_comm_assoc_left-1 nil 3440253864
   ("" (skosimp*) (("" (expand "+ ") (("" (propax) nil nil)) nil)) nil)
   nil shostak))
 (add_comm_assoc_right 0
  (add_comm_assoc_right-1 nil 3440253876
   ("" (skosimp*) (("" (expand "+ ") (("" (propax) nil nil)) nil)) nil)
   nil shostak))
 (dot_add_right 0
  (dot_add_right-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "*")
      ((""
        (case-replace "(LAMBDA i: u!1(i) * (v!1 + w!1)(i)) =
                      (LAMBDA i: u!1(i) * v!1(i) + u!1(i) * w!1(i))")
        (("1" (hide -1) (("1" (rewrite "sigma_sum") nil nil)) nil)
         ("2" (hide 2)
          (("2" (apply-extensionality 1 :hide? t)
            (("2" (expand "+ ") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma_sum formula-decl nil sigma reals))
   nil))
 (dot_add_left 0
  (dot_add_left-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "*")
      ((""
        (case-replace "(LAMBDA i: (v!1 + w!1)(i) * u!1(i)) =
                  (LAMBDA i: v!1(i)* u!1(i)  + w!1(i) * u!1(i))")
        (("1" (hide -1) (("1" (rewrite "sigma_sum") nil nil)) nil)
         ("2" (hide 2)
          (("2" (apply-extensionality 1 :hide? t)
            (("2" (expand "+ ") (("2" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma_sum formula-decl nil sigma reals))
   nil))
 (dot_sub_right 0
  (dot_sub_right-1 nil 3254159790
   ("" (skosimp*)
    (("" (rewrite "add_neg_sub" :dir rl)
      (("" (rewrite "dot_add_right")
        (("" (rewrite "dot_neg_right") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (dot_sub_left 0
  (dot_sub_left-1 nil 3254159790
   ("" (skosimp*)
    (("" (rewrite "add_neg_sub" :dir rl)
      (("" (rewrite "dot_add_left")
        (("" (rewrite "dot_neg_left") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (dot_divby 0
  (dot_divby-1 nil 3268403303
   ("" (skosimp*)
    (("" (grind)
      (("" (expand "*")
        (("" (apply-extensionality 1 :hide? t)
          (("" (mult-by 1 "nza!1")
            (("" (assert)
              ((""
                (case "(LAMBDA i: nza!1 * u!1(i))(x!1) = (LAMBDA i: nza!1 * v!1(i))(x!1)")
                (("1" (assert) nil nil)
                 ("2" (replace -1) (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dot_scal_left 0
  (dot_scal_left-2 "" 3790092911
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak)
  (dot_scal_left-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst?)
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_scal formula-decl nil sigma reals))
   nil))
 (dot_scal_right 0
  (dot_scal_right-2 "" 3790092911
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak)
  (dot_scal_right-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_scal")
        (("" (inst?)
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_scal formula-decl nil sigma reals))
   nil))
 (dot_scal_comm_assoc 0
  (dot_scal_comm_assoc-1 nil 3440254239 ("" (grind) nil nil) nil
   shostak))
 (scal_comm_assoc 0
  (scal_comm_assoc-1 nil 3440254259
   ("" (skosimp*)
    (("" (expand "*") (("" (apply-extensionality 1 :hide? t) nil nil))
      nil))
    nil)
   nil shostak))
 (dot_scal_canon 0
  (dot_scal_canon-1 nil 3256913714
   ("" (skosimp*)
    (("" (rewrite "dot_scal_left")
      (("" (rewrite "dot_comm")
        (("" (rewrite "dot_scal_left")
          (("" (rewrite "dot_comm") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (scal_add_left 0
  (scal_add_left-1 nil 3254656368
   ("" (skosimp*)
    (("" (expand "*")
      (("" (expand "+ ")
        (("" (apply-extensionality 1 :hide? t) nil nil)) nil))
      nil))
    nil)
   nil nil))
 (scal_sub_left 0
  (scal_sub_left-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "*")
      (("" (expand "-")
        (("" (apply-extensionality 1 :hide? t) nil nil)) nil))
      nil))
    nil)
   nil nil))
 (scal_add_right 0
  (scal_add_right-1 nil 3254656180
   ("" (skosimp*)
    (("" (expand "*")
      (("" (apply-extensionality 1 :hide? t)
        (("" (expand "+ ") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (scal_sub_right 0
  (scal_sub_right-1 nil 3254656212
   ("" (skosimp*)
    (("" (expand "*")
      (("" (expand "-")
        (("" (apply-extensionality 1 :hide? t) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (scal_assoc 0
  (scal_assoc-1 nil 3430833357
   ("" (skosimp*)
    (("" (expand "*") (("" (apply-extensionality 1 :hide? t) nil nil))
      nil))
    nil)
   nil nil))
 (scal_neg 0
  (scal_neg-1 nil 3430833544
   ("" (skosimp*)
    (("" (expand "*")
      (("" (apply-extensionality 1 :hide? t) (("" (grind) nil nil))
        nil))
      nil))
    nil)
   nil nil))
 (scal_cross 0
  (scal_cross-1 nil 3430834822
   ("" (grind)
    (("1" (decompose-equality 2)
      (("1" (decompose-equality -1)
        (("1" (inst?) (("1" (grind) nil nil)) nil)) nil))
      nil)
     ("2" (decompose-equality 2) nil nil))
    nil)
   nil shostak))
 (scal_div_mult_left 0
  (scal_div_mult_left-1 nil 3440253505
   ("" (skeep)
    (("" (expand "*")
      (("" (prop)
        (("1" (apply-extensionality 1 :hide? t)
          (("1" (replace -1 * rl)
            (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (apply-extensionality 1 :hide? t)
          (("2" (lemma "comps_eq")
            (("2" (inst?)
              (("2" (assert)
                (("2" (hide -2)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (scal_div_mult_right 0
  (scal_div_mult_right-2 nil 3440254453
   ("" (skeep)
    (("" (expand "*")
      (("" (prop)
        (("1" (apply-extensionality 1 :hide? t)
          (("1" (replace -1 * lr)
            (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (apply-extensionality 1 :hide? t)
          (("2" (lemma "comps_eq")
            (("2" (inst?)
              (("2" (assert)
                (("2" (hide -2)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (scal_div_mult_right-1 nil 3440254381
   ("" (skosimp*) (("" (expand "*") (("" (postpone) nil nil)) nil))
    nil)
   nil shostak))
 (scal_zero 0
  (scal_zero-1 nil 3254159790
   ("" (skolem 1 "a")
    (("" (decompose-equality 1)
      (("" (expand "zero") (("" (grind) nil nil)) nil)) nil))
    nil)
   nil nil))
 (scal_0 0
  (scal_0-1 nil 3254159790
   ("" (skolem 1 "v")
    (("" (decompose-equality 1) (("" (grind) nil nil)) nil)) nil)
   nil nil))
 (scal_1 0
  (scal_1-1 nil 3430834875
   ("" (skeep) (("" (decompose-equality 1) (("" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (scal_neg_1 0
  (scal_neg_1-1 nil 3467130571
   ("" (skeep) (("" (decompose-equality 1) (("" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (scal_cancel 0
  (scal_cancel-1 nil 3255950584
   ("" (skeep)
    (("" (expand "*")
      (("" (typepred "nzv")
        (("" (rewrite "nzv_comp_neq_0")
          (("" (skeep -1)
            (("" (decompose-equality -1)
              (("" (inst? -1) (("" (mult-by 2 "nzv(i)") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (scal_eq_zero 0
  (scal_eq_zero-1 nil 3268403498
   ("" (skeep)
    (("" (grind)
      (("" (expand "*")
        (("" (decompose-equality 2)
          (("" (decompose-equality -1)
            (("" (inst?) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dot_ge_dist 0
  (dot_ge_dist-1 nil 3413210939
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_minus")
        ((""
          (inst - "LAMBDA i: w!1(i) * u!1(i)"
           "LAMBDA i: w!1(i) * v!1(i)" "n-1" "0")
          (("" (assert)
            (("" (move-terms -1 l 2)
              (("" (replace -1)
                (("" (hide -1)
                  (("" (assert)
                    ((""
                      (case-replace
                       "(LAMBDA i: w!1(i) * (u!1 - v!1)(i)) = (LAMBDA (i_1: below(n)):
              w!1(i_1) * u!1(i_1) - w!1(i_1) * v!1(i_1))")
                      (("1" (assert) nil nil)
                       ("2" (hide 2)
                        (("2" (apply-extensionality 1 :hide? t)
                          (("2" (hide -1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sigma_minus formula-decl nil sigma reals))
   shostak))
 (dot_gt_dist 0
  (dot_gt_dist-1 nil 3413210946
   ("" (skosimp*)
    (("" (expand "*")
      (("" (lemma "sigma_minus")
        ((""
          (inst - "LAMBDA i: w!1(i) * u!1(i)"
           "LAMBDA i: w!1(i) * v!1(i)" "n-1" "0")
          (("" (assert)
            (("" (move-terms -1 l 2)
              (("" (replace -1)
                (("" (hide -1)
                  (("" (assert)
                    ((""
                      (case-replace
                       "(LAMBDA i: w!1(i) * (u!1 - v!1)(i)) = (LAMBDA (i_1: below(n)):
                w!1(i_1) * u!1(i_1) - w!1(i_1) * v!1(i_1))")
                      (("1" (assert) nil nil)
                       ("2" (hide 2)
                        (("2" (apply-extensionality 1 :hide? t)
                          (("2" (hide -1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sigma_minus formula-decl nil sigma reals))
   shostak))
 (idem_right 0
  (idem_right-1 nil 3254159790
   ("" (skolem 1 ("a" "v"))
    (("" (ground)
      (("1" (case "EXISTS (i:below(n)):v(i) /= 0")
        (("1" (skolem -1 "i")
          (("1" (decompose-equality -2)
            (("1" (inst -1 "i")
              (("1" (expand "*")
                (("1" (lemma "both_sides_times1")
                  (("1" (inst -1 "v(i)" "a" "1")
                    (("1" (ground) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 2)
          (("2" (decompose-equality 2)
            (("2" (inst 2 "x!1") (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (expand "*") (("2" (decompose-equality 1) nil nil)) nil)
       ("3" (replace -1) (("3" (rewrite "scal_zero") nil nil)) nil))
      nil))
    nil)
   nil nil))
 (neg_eq_zero 0
  (neg_eq_zero-1 nil 3823720810
   ("" (skeep)
    (("" (lemma "idem_right")
      (("" (inst -1 "-1" "v")
        (("" (assert)
          (("" (rewrite "scal_neg_1") (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((idem_right formula-decl nil vectors nil)
    (scal_neg_1 formula-decl nil vectors nil)
    (Vector type-eq-decl nil vectors nil)
    (Index type-eq-decl nil vectors nil)
    (n formal-const-decl "posnat" vectors nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (sqv_neg 0
  (sqv_neg-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "sqv")
      (("" (expand "*")
        (("" (assert) (("" (expand "-") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sqv_add 0
  (sqv_add-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "sqv")
      (("" (rewrite "dot_add_left")
        (("" (rewrite "dot_add_right")
          (("" (rewrite "dot_add_right")
            (("" (assert)
              (("" (rewrite "dot_comm")
                (("" (rewrite "dot_comm")
                  (("" (assert) (("" (rewrite "dot_assoc") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sqv_scal 0
  (sqv_scal-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "sqv")
      (("" (rewrite "dot_scal_right")
        (("" (expand "sq")
          (("" (assert)
            (("" (rewrite "dot_assoc" :dir rl) (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq reals)) nil))
 (sqv_sub 0
  (sqv_sub-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "sqv")
      (("" (rewrite "dot_sub_left")
        (("" (rewrite "dot_sub_right")
          (("" (rewrite "dot_sub_right")
            (("" (assert)
              (("" (rewrite "dot_comm")
                (("" (rewrite "dot_comm")
                  (("" (assert)
                    (("" (rewrite "dot_assoc" :dir rl)
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sqv_sub_scal 0
  (sqv_sub_scal-2 nil 3430834954
   ("" (skeep)
    (("" (rewrite "sqv_sub")
      (("" (rewrite "sqv_scal")
        (("" (assert) (("" (neg-formula 1) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (sqv_sub_scal-1 nil 3430833789
   ("" (skeep)
    (("" (rewrite "sqv_sub")
      (("" (rewrite "sqv_scal")
        (("" (assert) (("" (neg-formula 1) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sqv_sym 0
  (sqv_sym-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "sqv")
      (("" (expand "*")
        ((""
          (case-replace
           "(LAMBDA i: (v!1 - u!1)(i) * (v!1 - u!1)(i)) = (LAMBDA i: (u!1 - v!1)(i) * (u!1 - v!1)(i))")
          (("" (hide 2)
            (("" (apply-extensionality 1 :hide? t)
              (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sqrt_sqv_sq 0
  (sqrt_sqv_sq-1 nil 3255194068
   ("" (skosimp*)
    (("" (lemma "sqrt_square")
      (("" (inst -1 "sqv(v!1)") (("" (rewrite "sqrt_times") nil nil))
        nil))
      nil))
    nil)
   ((sqrt_square formula-decl nil sqrt reals)
    (sqrt_times formula-decl nil sqrt reals))
   nil))
 (norm_sym 0
  (norm_sym-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (rewrite "sqrt_eq") (("" (rewrite "sqv_sym") nil nil)) nil))
      nil))
    nil)
   ((sqrt_eq formula-decl nil sqrt reals)) nil))
 (norm_neg 0
  (norm_neg-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "norm") (("" (rewrite "sqv_neg") nil nil)) nil)) nil)
   nil nil))
 (dot_sq_norm 0
  (dot_sq_norm-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (rewrite "sq_sqrt")
        (("" (expand "sqv") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sq_sqrt formula-decl nil sqrt reals)) nil))
 (sq_norm 0
  (sq_norm-1 nil 3403524127
   ("" (skosimp*)
    (("" (expand "norm") (("" (rewrite "sq_sqrt") nil nil)) nil)) nil)
   ((sq_sqrt formula-decl nil sqrt reals)) nil))
 (sqrt_sqv_norm 0
  (sqrt_sqv_norm-1 nil 3254159790
   ("" (skosimp*) (("" (expand "norm") (("" (propax) nil nil)) nil))
    nil)
   nil nil))
 (norms_eq_sqv 0
  (norms_eq_sqv-1 nil 3425027810
   ("" (skeep)
    (("" (lemma "sq_eq")
      (("" (inst?)
        (("" (assert)
          (("" (replace -1 * rl)
            (("" (hide -1)
              (("" (rewrite "sq_norm")
                (("" (rewrite "sq_norm")
                  (("" (expand "sqv") (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_eq formula-decl nil sq reals)) nil))
 (norms_eq_sos 0
  (norms_eq_sos-1 nil 3602098547
   ("" (skeep)
    (("" (rewrite "norms_eq_sqv")
      (("" (rewrite "sqv_sos")
        (("" (rewrite "sqv_sos") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil))
 (norm_le_sqv 0
  (norm_le_sqv-1 nil 3475937589
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (lemma "sqrt_le") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((sqrt_le formula-decl nil sqrt reals)) nil))
 (norm_lt_sqv 0
  (norm_lt_sqv-1 nil 3475937606
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (lemma "sqrt_lt") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((sqrt_lt formula-decl nil sqrt reals)) nil))
 (norm_scal 0
  (norm_scal-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (rewrite "sqv_scal")
        (("" (rewrite "sqrt_times")
          (("" (rewrite "sqrt_sq_abs") nil nil)) nil))
        nil))
      nil))
    nil)
   ((sqrt_times formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_sq_abs formula-decl nil sqrt reals))
   nil))
 (caret_TCC1 0
  (caret_TCC1-2 nil 3430835217
   ("" (skeep)
    (("" (rewrite "norm_scal")
      (("" (expand "abs") (("" (grind-reals) nil nil)) nil)) nil))
    nil)
   nil nil
   (caret subtype
    "vectors.*((number_fields./(1, vectors.norm(vectors.nzv))), vectors.nzv)"
    "Normalized"))
  (caret_TCC1-1 nil 3256053722 ("" (subtype-tcc) nil nil) nil shostak
   (caret subtype
    "vectors.*((number_fields./(1, vectors.norm(vectors.nzv))), vectors.nzv)"
    "Normalized")))
 (norm_normalize 0
  (norm_normalize-1 nil 3560353234
   ("" (skeep) (("" (typepred "^(nzv)") (("" (propax) nil nil)) nil))
    nil)
   nil shostak))
 (dot_normalize 0
  (dot_normalize-2 nil 3256053877
   ("" (skosimp*)
    (("" (expand "^")
      (("" (assert)
        (("" (rewrite "dot_scal_right")
          (("" (assert)
            (("" (rewrite "dot_scal_left") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (dot_normalize-1 nil 3255950619
   ("" (skosimp*)
    (("" (expand "normalize")
      (("" (assert)
        (("" (rewrite "dot_scal_right")
          (("" (assert)
            (("" (rewrite "dot_scal_left") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (normalize_normalize 0
  (normalize_normalize-1 nil 3268404906
   ("" (skeep)
    (("" (expand "^")
      (("" (rewrite "norm_scal")
        (("" (expand "abs")
          (("" (grind-reals) (("" (rewrite "scal_1") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (normalized_id 0
  (normalized_id-1 nil 3445611764
   ("" (skeep)
    (("" (expand "^")
      (("" (rewrite "scal_assoc")
        (("" (grind-reals) (("" (rewrite "scal_1") nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (normalize_scal 0
  (normalize_scal-1 nil 3560354890
   ("" (skeep)
    (("" (expand "^")
      (("" (rewrite "norm_scal")
        (("" (rewrite "sign_abs")
          (("" (rewrite "scal_assoc")
            (("" (rewrite "scal_assoc")
              (("" (grind-reals)
                ((""
                  (case-replace
                   "nza / (sign(nza) * norm(nzv) * nza) = sign(nza) / norm(nzv)")
                  (("" (hide 2) (("" (grind :exclude "norm") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sign_abs formula-decl nil sign reals)
    (sign const-decl "Sign" sign reals)
    (Sign type-eq-decl nil sign reals))
   nil))
 (cauchy_schwarz 0
  (cauchy_schwarz-2 "" 3790092918
   ("" (skosimp*)
    (("" (case "sqv(v!1) = 0")
      (("1" (rewrite "sqv_eq_0")
        (("1" (replace -1)
          (("1" (hide -1)
            (("1" (rewrite "dot_zero_right")
              (("1" (rewrite "sq_0") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "(FORALL (t:real): sqv(u!1-t*v!1) >= 0)")
        (("1" (inst -1 "(u!1*v!1)/sqv(v!1)")
          (("1" (rewrite "sqv_sub_scal")
            (("1" (name-replace "UDOTV" "u!1 * v!1")
              (("1"
                (case-replace
                 "2 * (UDOTV / sqv(v!1)) * u!1 * v!1 = 2 * sq(UDOTV) / sqv(v!1) ")
                (("1" (hide -1)
                  (("1"
                    (case-replace
                     "sq(UDOTV / sqv(v!1)) * sqv(v!1) = sq(UDOTV) / sqv(v!1) ")
                    (("1" (hide -1)
                      (("1" (assert)
                        (("1"
                          (case-replace
                           "sqv(u!1) + sq(UDOTV) / sqv(v!1) - 2 * sq(UDOTV) / sqv(v!1) = sqv(u!1) - sq(UDOTV) / sqv(v!1)")
                          (("1" (hide -1)
                            (("1" (mult-by -1 "sqv(v!1)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (lemma "sqv_eq_0")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "sq_div")
                      (("2" (expand "sq" 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (assert)
                    (("2" (hide -1 3)
                      (("2" (reveal -2)
                        (("2"
                          (case-replace
                           "2 * (UDOTV / sqv(v!1)) * u!1 * v!1 = 2 * (UDOTV / sqv(v!1)) * (u!1 * v!1)")
                          (("1" (hide -1)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "sq")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2 3)
                            (("2" (rewrite "dot_scal_left") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (assert) (("2" (skosimp*) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (cauchy_schwarz-1 nil 3255265285
   ("" (skosimp*)
    (("" (case "sqv(v!1) = 0")
      (("1" (rewrite "sqv_eq_0")
        (("1" (replace -1)
          (("1" (hide -1)
            (("1" (rewrite "dot_zero_right")
              (("1" (rewrite "sq_0") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "(FORALL (t:real): sqv(u!1-t*v!1) >= 0)")
        (("1" (inst -1 "(u!1*v!1)/sqv(v!1)")
          (("1" (rewrite "sqv_sub_scal")
            (("1" (name-replace "UDOTV" "u!1 * v!1")
              (("1"
                (case-replace
                 "2 * (UDOTV / sqv(v!1)) * u!1 * v!1 = 2 * sq(UDOTV) / sqv(v!1) ")
                (("1" (hide -1)
                  (("1"
                    (case-replace
                     "sq(UDOTV / sqv(v!1)) * sqv(v!1) = sq(UDOTV) / sqv(v!1) ")
                    (("1" (hide -1)
                      (("1" (assert)
                        (("1"
                          (case-replace
                           "sqv(u!1) + sq(UDOTV) / sqv(v!1) - 2 * sq(UDOTV) / sqv(v!1) = sqv(u!1) - sq(UDOTV) / sqv(v!1)")
                          (("1" (hide -1)
                            (("1" (assert)
                              (("1"
                                (mult-by -1 "sqv(v!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "sqv_eq_0")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "sq_div")
                      (("2" (expand "sq" 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (assert)
                    (("2" (hide -1 3)
                      (("2" (reveal -2)
                        (("2"
                          (case-replace
                           "2 * (UDOTV / sqv(v!1)) * u!1 * v!1 = 2 * (UDOTV / sqv(v!1)) * (u!1 * v!1)")
                          (("1" (hide -1)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "sq")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2 3)
                            (("2" (rewrite "dot_scal_left") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (assert) (("2" (skosimp*) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_0 formula-decl nil sq reals) (sq_div formula-decl nil sq reals)
    (sq const-decl "nonneg_real" sq reals))
   nil))
 (dot_norm 0
  (dot_norm-1 nil 3254159790
   ("" (skosimp*)
    (("" (lemma "cauchy_schwarz")
      (("" (inst?)
        (("" (lemma "sqrt_le")
          (("" (inst?)
            (("" (assert)
              (("" (hide -2)
                (("" (lemma "sqrt_sq_abs")
                  (("" (inst?)
                    (("" (assert)
                      (("" (replace -1)
                        (("" (hide -1)
                          (("" (rewrite "sqrt_times")
                            (("" (expand "norm")
                              ((""
                                (expand "abs")
                                ((""
                                  (lift-if)
                                  (("" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_le formula-decl nil sqrt reals)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (sqrt_times formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals))
   nil))
 (schwarz 0
  (schwarz-1 nil 3445088723
   ("" (skeep)
    (("" (lemma "dot_norm")
      (("" (expand "abs")
        (("" (inst?) (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (schwarz_cor 0
  (schwarz_cor-4 nil 3459101166
   ("" (skeep)
    (("" (lemma "sq_le")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (rewrite "sqv_add")
              (("" (rewrite "sq_plus")
                (("" (move-terms 1 r (1 2))
                  (("" (case "u*v <= sqrt(sqv(u)) * sqrt(sqv(v))")
                    (("1" (assert)
                      (("1" (rewrite "dot_scal_left")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (lemma "schwarz")
                        (("2" (inst?)
                          (("2" (expand "norm")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_le formula-decl nil sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq_plus formula-decl nil sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals))
   nil)
  (schwarz_cor-3 nil 3445157516
   ("" (skeep)
    (("" (auto-rewrite "dot_zero_left")
      (("" (auto-rewrite "dot_zero_right")
        (("" (auto-rewrite "scal_zero")
          (("" (case-replace "sqv(u + v) = u*u + 2*u*v + v*v")
            (("1" (hide -1)
              (("1"
                (case "u * u + 2 * u * v + v * v <= u * u + 2 * norm(u) * norm(v) + v * v")
                (("1" (case-replace "u = zero")
                  (("1" (assert) nil nil)
                   ("2" (case-replace "v = zero")
                    (("1" (assert) nil nil)
                     ("2" (lemma "sqv_eq_0")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (lemma "sqv_eq_0")
                            (("2" (inst - "u")
                              (("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   "u * u + 2 * norm(u) * norm(v) + v * v = sq(sqrt(u * u) + sqrt(v * v))")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "sqrt_le")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (rewrite "sqrt_sq")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (rewrite "sqv_rew")
                                            (("2"
                                              (lemma "sqv_eq_0")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (rewrite "sqv_rew")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (lemma "sqv_add")
                                          (("4"
                                            (inst?)
                                            (("4"
                                              (expand "sqv" -1 2)
                                              (("4"
                                                (expand "sqv" -1 2)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (rewrite "sq_plus")
                                        (("1"
                                          (rewrite "sq_sqrt")
                                          (("1"
                                            (rewrite "sq_sqrt")
                                            (("1"
                                              (expand "norm")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "sqv")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case-replace "v = zero")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (rewrite "sqv_rew")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "sqv_rew")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "sqv_rew")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (rewrite "sqv_rew")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (rewrite "sqv_rew")
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (rewrite "sqv_rew")
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (assert)
                    (("2" (lemma "dot_norm")
                      (("2" (inst - "u" "v")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (mult-by -2 "2")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "dot_scal_left")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (rewrite "sqv_add")
                (("2" (expand "sqv") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_plus formula-decl nil sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_le formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sqrt_0 formula-decl nil sqrt reals))
   nil)
  (schwarz_cor-2 nil 3445157297
   ("" (skeep)
    (("" (auto-rewrite "dot_zero_left")
      (("" (auto-rewrite "dot_zero_right")
        (("" (auto-rewrite "scal_zero")
          (("" (case-replace "sqv(u + v) = u*u + 2*u*v + v*v")
            (("1" (hide -1)
              (("1"
                (case "u * u + 2 * u * v + v * v <= u * u + 2 * norm(u) * norm(v) + v * v")
                (("1" (case-replace "u = zero")
                  (("1" (assert) nil nil)
                   ("2" (case-replace "v = zero")
                    (("1" (assert) nil nil)
                     ("2" (lemma "sqv_eq_0")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (lemma "sqv_eq_0")
                            (("2" (inst - "u")
                              (("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   "u * u + 2 * norm(u) * norm(v) + v * v = sq(sqrt(u * u) + sqrt(v * v))")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "sqrt_le")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (rewrite "sqrt_sq")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (rewrite "sqv_rew")
                                            (("2"
                                              (lemma "sqv_eq_0")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (rewrite "sqv_rew")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (case-replace
                                           "2 * u * v + u*u + v * v = sqv(u+v)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (rewrite "sqv_add")
                                              (("2"
                                                (expand "sqv")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (rewrite "sq_plus")
                                        (("1"
                                          (rewrite "sq_sqrt")
                                          (("1"
                                            (rewrite "sq_sqrt")
                                            (("1"
                                              (expand "norm")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "sqv")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case-replace "v = zero")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (rewrite "sqv_rew")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "sqv_rew")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "sqv_rew")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (rewrite "sqv_rew")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (rewrite "sqv_rew")
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (rewrite "sqv_rew")
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (assert)
                    (("2" (lemma "dot_norm")
                      (("2" (inst - "u" "v")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (mult-by -2 "2")
                              (("2"
                                (assert)
                                (("2"
                                  (case "2 * (u * v) = 2 * u * v")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma "dot_scal_left")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (rewrite "sqv_add")
                (("2" (expand "sqv") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_plus formula-decl nil sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_le formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sqrt_0 formula-decl nil sqrt reals))
   nil)
  (schwarz_cor-1 nil 3445156857
   ("" (skeep)
    (("" (auto-rewrite "dot_zero_left")
      (("" (auto-rewrite "dot_zero_right")
        (("" (auto-rewrite "scal_zero")
          (("" (case-replace "sqv(u + v) = u*u + 2*u*v + v*v")
            (("1" (hide -1)
              (("1"
                (case "u * u + 2 * u * v + v * v <= u * u + 2 * norm(u) * norm(v) + v * v")
                (("1" (case-replace "u = zero")
                  (("1" (assert) nil nil)
                   ("2" (case-replace "v = zero")
                    (("1" (assert) nil nil)
                     ("2" (lemma "sqv_eq_0")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (lemma "sqv_eq_0")
                            (("2" (inst - "u")
                              (("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   "u * u + 2 * norm(u) * norm(v) + v * v = sq(sqrt(u * u) + sqrt(v * v))")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "sqrt_le")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (rewrite "sqrt_sq")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (rewrite "sqv_rew")
                                            (("2"
                                              (lemma "sqv_eq_0")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (rewrite "sqv_rew")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (case-replace
                                           "2 * u * v + u*u + v * v = sqv(u+v)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (rewrite "sqv_add")
                                              (("2"
                                                (expand "sqv")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (rewrite "sq_plus")
                                        (("1"
                                          (rewrite "sq_sqrt")
                                          (("1"
                                            (rewrite "sq_sqrt")
                                            (("1"
                                              (expand "norm")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "sqv")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case-replace "v = zero")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (rewrite "sqv_rew")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "sqv_rew")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "sqv_rew")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (rewrite "sqv_rew")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (rewrite "sqv_rew")
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (rewrite "sqv_rew")
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (assert)
                    (("2" (lemma "dot_norm")
                      (("2" (inst - "u" "v")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (mult-by -2 "2")
                              (("2"
                                (assert)
                                (("2"
                                  (case "2 * (u * v) = 2 * u * v")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma "dot_scal_left")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (rewrite "sqv_add")
                (("2" (expand "sqv") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_plus formula-decl nil sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_le formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sqrt_0 formula-decl nil sqrt reals))
   nil))
 (norm_triangle 0
  (norm_triangle-3 "" 3790092919
   ("" (skeep)
    (("" (rewrite "sqrt_sqv_norm" :dir rl)
      (("" (rewrite "sqrt_sqv_norm" :dir rl)
        (("" (rewrite "sqrt_sqv_norm" :dir rl)
          (("" (expand "-")
            ((""
              (case-replace
               "(LAMBDA i:sq(u(i)-w(i))) = (LAMBDA i:sq(u(i)-v(i)+v(i)-w(i)))")
              (("1" (hide -1)
                (("1" (lemma "schwarz_cor")
                  (("1" (inst -1 "u-v" "v-w")
                    (("1" (expand "-")
                      (("1" (expand "+") (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (decompose-equality) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (norm_triangle-2 nil 3459097048
   ("" (skeep)
    (("" (rewrite "sqrt_sqv_norm" :dir rl)
      (("" (rewrite "sqrt_sqv_norm" :dir rl)
        (("" (rewrite "sqrt_sqv_norm" :dir rl)
          (("" (rewrite "sqv_sq")
            (("" (rewrite "sqv_sq")
              (("" (rewrite "sqv_sq")
                (("" (expand "-")
                  ((""
                    (case-replace
                     "(LAMBDA i:sq(u(i)-w(i))) = (LAMBDA i:sq(u(i)-v(i)+v(i)-w(i)))")
                    (("1" (hide -1)
                      (("1" (lemma "schwarz_cor")
                        (("1" (inst -1 "u-v" "v-w")
                          (("1" (rewrite "sqv_sq")
                            (("1" (rewrite "sqv_sq")
                              (("1"
                                (rewrite "sqv_sq")
                                (("1"
                                  (expand "-")
                                  (("1"
                                    (expand "+")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (decompose-equality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq reals)) nil)
  (norm_triangle-1 nil 3459096992 ("" (postpone) nil nil) nil shostak))
 (norm_add_le 0
  (norm_add_le-2 nil 3255194138
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (lemma "sqrt_le")
        ((""
          (inst -1 "sqv(u!1 + v!1)"
           "sq(sqrt(sqv(u!1)) + sqrt(sqv(v!1)))")
          (("" (rewrite "sqrt_sq")
            (("" (assert)
              (("" (hide 2)
                (("" (rewrite "sqv_add")
                  (("" (expand "sq")
                    (("" (rewrite "sqrt_sqv_sq")
                      (("" (rewrite "sqrt_sqv_sq")
                        (("" (rewrite "sqrt_sqv_norm")
                          (("" (rewrite "sqrt_sqv_norm")
                            (("" (lemma "dot_norm")
                              ((""
                                (inst -1 "u!1" "v!1")
                                ((""
                                  (flatten)
                                  ((""
                                    (rewrite "dot_scal_left")
                                    (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_le formula-decl nil sqrt reals))
   nil)
  (norm_add_le-1 nil 3255194125 ("" (postpone) nil nil) nil shostak))
 (norm_sub_le 0
  (norm_sub_le-2 "" 3790092919
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (lemma "sq_le")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "sq")
                (("" (rewrite "sq_rew")
                  (("" (rewrite "sq_rew")
                    (("" (rewrite "sqv_sub")
                      (("" (assert)
                        (("" (rewrite "sqrt_sqv_norm")
                          (("" (rewrite "sqrt_sqv_norm")
                            (("" (assert)
                              ((""
                                (lemma "dot_norm")
                                ((""
                                  (inst -1 "-u!1" "v!1")
                                  ((""
                                    (flatten)
                                    ((""
                                      (rewrite "norm_neg")
                                      ((""
                                        (rewrite "dot_neg_left")
                                        ((""
                                          (assert)
                                          ((""
                                            (rewrite "dot_scal_left")
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (norm_sub_le-1 nil 3254159790
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (lemma "sq_le")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (rewrite "sq_sqrt")
                (("" (expand "sq")
                  (("" (rewrite "sq_rew")
                    (("" (rewrite "sq_rew")
                      (("" (rewrite "sq_sqrt")
                        (("" (rewrite "sq_sqrt")
                          (("" (rewrite "sqv_sub")
                            (("" (assert)
                              ((""
                                (rewrite "sqrt_sqv_norm")
                                ((""
                                  (rewrite "sqrt_sqv_norm")
                                  ((""
                                    (assert)
                                    ((""
                                      (lemma "dot_norm")
                                      ((""
                                        (inst -1 "-u!1" "v!1")
                                        ((""
                                          (flatten)
                                          ((""
                                            (rewrite "norm_neg")
                                            ((""
                                              (rewrite "dot_neg_left")
                                              ((""
                                                (assert)
                                                ((""
                                                  (rewrite
                                                   "dot_scal_left")
                                                  ((""
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sq_rew formula-decl nil sq reals)
    (sq const-decl "nonneg_real" sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq_le formula-decl nil sq reals))
   nil))
 (norm_sub_ge 0
  (norm_sub_ge-2 nil 3255265208
   ("" (skosimp*)
    (("" (lemma "norm_add_le")
      (("" (inst -1 "u!1-v!1" "v!1")
        (("" (assert)
          (("" (rewrite "add_cancel2") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (norm_sub_ge-1 nil 3255194342
   ("" (skosimp*)
    (("" (lemma "norm_add_le")
      (("" (inst -1 "u!1-v!1" "v!1")
        (("" (assert)
          (("" (auto-rewrite-theory "vectors") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (norm_ge_comps 0
  (norm_ge_comps-2 "" 3790092920
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (expand "sqv")
        (("" (expand "*")
          (("" (rewrite "sqrt_sq_abs" :dir rl)
            ((""
              (case-replace "(LAMBDA i: u!1(i) * u!1(i)) = 
                       (LAMBDA i: sq(u!1(i)))")
              (("1" (hide -1)
                (("1" (lemma "sqrt_ge")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (case "i!1 = n - 1")
                          (("1" (expand "sigma")
                            (("1" (assert) nil nil)) nil)
                           ("2" (case-replace "i!1 = 0")
                            (("1" (lemma "sigma_first")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "sigma_middle[below(n)]")
                              (("2"
                                (inst
                                 -
                                 "(LAMBDA i: sq(u!1(i)))"
                                 "n-1"
                                 "i!1"
                                 "0")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (case-replace
                                         "sigma(1 + i!1, n - 1, (LAMBDA i: sq(u!1(i)))) >= 0")
                                        (("1"
                                          (case
                                           "sigma(0, i!1 - 1, (LAMBDA i: sq(u!1(i)))) >= 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (lemma
                                               "sigma_nonneg[below[n]]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (lemma
                                             "sigma_nonneg[below[n]]")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (apply-extensionality 1 :hide? t)
                  (("2" (expand "sq") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (norm_ge_comps-1 nil 3256554706
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (expand "sqv")
        (("" (expand "*")
          (("" (rewrite "sqrt_sq_abs" :dir rl)
            ((""
              (case-replace "(LAMBDA i: u!1(i) * u!1(i)) = 
                       (LAMBDA i: sq(u!1(i)))")
              (("1" (hide -1)
                (("1" (lemma "sqrt_ge")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (case "i!1 = n - 1")
                          (("1" (expand "sigma")
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (replace -1 * rl)
                                    (("1"
                                      (lemma "sigma_nonneg[below[n]]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skosimp*)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "i!1 = 0")
                            (("1" (lemma "sigma_first")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "sigma_nonneg[below[n]]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "sigma_middle[below(n)]")
                              (("2"
                                (inst
                                 -
                                 "(LAMBDA i: sq(u!1(i)))"
                                 "n-1"
                                 "i!1"
                                 "0")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (case-replace
                                         "sigma(1 + i!1, n - 1, (LAMBDA i: sq(u!1(i)))) >= 0")
                                        (("1"
                                          (case
                                           "sigma(0, i!1 - 1, (LAMBDA i: sq(u!1(i)))) >= 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (lemma
                                               "sigma_nonneg[below[n]]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (lemma
                                             "sigma_nonneg[below[n]]")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "sigma_nonneg[below[n]]")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (skosimp*) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (apply-extensionality 1 :hide? t)
                  (("2" (expand "sq") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sqrt_ge formula-decl nil sqrt reals)
    (sigma_middle formula-decl nil sigma reals)
    (sigma_nonneg formula-decl nil sigma reals)
    (sigma_first formula-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sqrt_sq_abs formula-decl nil sqrt reals))
   shostak))
 (sq_norm_dist 0
  (sq_norm_dist-4 "" 3790092920
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (rewrite "sq_sqrt")
        (("" (rewrite "sq_sqrt")
          (("" (rewrite "sq_sqrt")
            (("" (auto-rewrite "sqv_sub")
              (("" (auto-rewrite "scal_sub_right")
                (("" (auto-rewrite "dot_sub_right")
                  (("" (auto-rewrite "dot_sub_left")
                    (("" (auto-rewrite "sub_cancel")
                      (("" (assert)
                        (("" (expand "sqv")
                          (("" (auto-rewrite "dot_scal_right")
                            (("" (auto-rewrite "dot_scal_left")
                              ((""
                                (assert)
                                ((""
                                  (lemma "dot_comm")
                                  ((""
                                    (inst -1 "v0!1" "v1!1")
                                    ((""
                                      (replace -1)
                                      ((""
                                        (hide -1)
                                        ((""
                                          (lemma "dot_comm")
                                          ((""
                                            (inst?)
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sq_norm_dist-3 nil 3256551862
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (rewrite "sq_sqrt")
        (("" (rewrite "sq_sqrt")
          (("" (rewrite "sq_sqrt")
            (("" (auto-rewrite "sqv_sub")
              (("" (auto-rewrite "scal_sub_right")
                (("" (auto-rewrite "dot_sub_right")
                  (("" (auto-rewrite "dot_sub_left")
                    (("" (auto-rewrite "sub_cancel")
                      (("" (assert)
                        (("" (expand "sqv")
                          (("" (auto-rewrite "dot_scal_assoc")
                            (("" (auto-rewrite "dot_scal_right")
                              ((""
                                (auto-rewrite "dot_scal_left")
                                ((""
                                  (assert)
                                  ((""
                                    (lemma "dot_comm")
                                    ((""
                                      (inst -1 "v0!1" "v1!1")
                                      ((""
                                        (replace -1)
                                        ((""
                                          (hide -1)
                                          ((""
                                            (lemma "dot_comm")
                                            ((""
                                              (inst?)
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_sqrt formula-decl nil sqrt reals)) nil)
  (sq_norm_dist-2 nil 3256551604
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (rewrite "sq_sqrt")
        (("" (rewrite "sq_sqrt")
          (("" (rewrite "sq_sqrt")
            (("" (auto-rewrite "sqv_sub")
              (("" (auto-rewrite "scal_sub_right")
                (("" (auto-rewrite "dot_sub_right")
                  (("" (auto-rewrite "dot_sub_left")
                    (("" (auto-rewrite "sub_cancel")
                      (("" (assert)
                        (("" (expand "sqv")
                          (("" (auto-rewrite "dot_scal_assoc")
                            (("" (assert)
                              ((""
                                (auto-rewrite "dot_scal_right")
                                ((""
                                  (auto-rewrite "dot_scal_left")
                                  ((""
                                    (assert)
                                    ((""
                                      (lemma "dot_comm")
                                      ((""
                                        (inst -1 "v0!1" "v1!1")
                                        ((""
                                          (assert)
                                          ((""
                                            (replace -1)
                                            ((""
                                              (assert)
                                              ((""
                                                (hide -1)
                                                ((""
                                                  (lemma "dot_comm")
                                                  ((""
                                                    (inst?)
                                                    ((""
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_sqrt formula-decl nil sqrt reals)) nil)
  (sq_norm_dist-1 nil 3256551072
   ("" (skosimp*)
    (("" (expand "norm")
      (("" (rewrite "sq_sqrt")
        (("" (rewrite "sq_sqrt")
          (("" (rewrite "sq_sqrt")
            (("" (auto-rewrite "sqv_sub")
              (("" (assert)
                (("" (auto-rewrite "scal_sub_right")
                  (("" (assert)
                    (("" (auto-rewrite "dot_sub_right")
                      (("" (assert)
                        (("" (auto-rewrite "dot_sub_left")
                          (("" (assert)
                            (("" (expand "sqv")
                              (("" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (parallel_refl 0
  (parallel_refl-1 nil 3430833917
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (inst 1 "1") (("" (rewrite "scal_1") nil nil)) nil)) nil))
    nil)
   nil nil))
 (parallel_symm 0
  (parallel_symm-1 nil 3430833984
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (split)
        (("1" (flatten)
          (("1" (skeep -1)
            (("1" (inst 1 "1/nzk")
              (("1" (lemma "scal_cross")
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (skeep -1)
            (("2" (inst 1 "1/nzk")
              (("2" (lemma "scal_cross")
                (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (parallel_trans 0
  (parallel_trans-2 "" 3790092921
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (skolem -1 "k1")
        (("" (skolem -2 "k2")
          (("" (replaces -1)
            (("" (replaces -1)
              (("" (inst 1 "k1*k2")
                (("" (rewrite "scal_assoc") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (parallel_trans-1 nil 3430834003
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (skolem -1 "k1")
        (("" (skolem -2 "k2")
          (("" (replaces -1)
            (("" (replaces -2)
              (("" (replaces -1)
                (("" (inst 1 "k1*k2")
                  (("" (rewrite "scal_assoc") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (parallel_zero 0
  (parallel_zero-1 nil 3430834019
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (split)
        (("1" (flatten)
          (("1" (skeep -1) (("1" (rewrite "scal_zero") nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (replaces -1)
            (("2" (inst 1 "1") (("2" (rewrite "scal_zero") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (dir_parallel 0
  (dir_parallel-1 nil 3430834131
   ("" (skeep)
    (("" (expand* "dir_parallel?" "parallel?")
      (("" (skeep -1) (("" (inst 1 "pk") nil nil)) nil)) nil))
    nil)
   nil shostak))
 (pythagorean 0
  (pythagorean-1 nil 3447774095
   ("" (skeep)
    (("" (expand "orthogonal?")
      (("" (rewrite "sqv_add")
        (("" (assert)
          (("" (rewrite "dot_scal_left") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (norm_add_ge_left 0
  (norm_add_ge_left-1 nil 3447774081
   ("" (skeep)
    (("" (both-sides-f 1 "sq")
      (("1" (rewrite "sq_norm")
        (("1" (rewrite "sq_norm")
          (("1" (rewrite "pythagorean") (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (rewrite "sq_ge") nil nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq reals)
    (sq_ge formula-decl nil sq reals))
   nil))
 (norm_add_ge_right 0
  (norm_add_ge_right-1 nil 3447774063
   ("" (skeep)
    (("" (rewrite "add_comm")
      (("" (rewrite "norm_add_ge_left")
        (("" (expand "orthogonal?") (("" (rewrite "dot_comm") nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)))

