(flight_turn_example
 (turn_TCC1 0
  (turn_TCC1-1 nil 3878842223 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (turn subtype
    "(: (flight_turn_example.x, (real_fun_ops[Environment].-)(hp_def.val(flight_turn_example.y))), (flight_turn_example.y, hp_def.val(flight_turn_example.x)) :)"
    "ODEs")))
 (straight_TCC1 0
  (straight_TCC1-1 nil 3878842223
   ("" (skeep) (("" (eval-formula 1) nil nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (straight subtype
    "(: (flight_turn_example.x, hp_def.cnst(flight_turn_example.vx)), (flight_turn_example.y, hp_def.cnst(flight_turn_example.vy)) :)"
    "ODEs")))
 (path_equiv 0
  (path_equiv-1 nil 3879586982
   ("" (beta)
    (("" (skeep)
      (("" (expand "path?")
        (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLOR const-decl "bool" bool_expr nil)
    (DLAND const-decl "bool" bool_expr nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (>= const-decl "BoolExpr" bool_expr nil)
    (val const-decl "real" hp_def nil)
    (x const-decl "nat" flight_turn_example nil)
    (cnst const-decl "real" hp_def nil)
    (circ? const-decl "BoolExpr" flight_turn_example nil)
    (< const-decl "BoolExpr" bool_expr nil)
    (line? const-decl "BoolExpr" flight_turn_example nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (y const-decl "nat" flight_turn_example nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (^ const-decl "[T -> real]" real_fun_ops reals) nil
    (= const-decl "BoolExpr" bool_expr nil) nil
    (path? const-decl "BoolExpr" flight_turn_example nil))
   shostak))
 (turn_first_circle 0
  (turn_first_circle-1 nil 3878842244
   ("" (skeep)
    (("" (dl-flatten)
      (("" (dl-choiceb)
        (("" (dl-andR)
          (("1" (dl-composeb)
            (("1" (dl-testb)
              (("1" (dl-flatten)
                (("1" (expand "turn" 1)
                  (("1" (dl-diffcase "val(x)^2+val(y)^2=cnst(c)^2")
                    (("1" (dl-diffinv)
                      (("1" (dl-assert) nil nil)
                       ("2" (dl-assert) nil nil))
                      nil)
                     ("2" (dl-diffweak)
                      (("2" (expand "path?" 1)
                        (("2" (dl-flatten)
                          (("2" (expand "circ?" 1)
                            (("2" (dl-axiom) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (dl-composeb)
            (("2" (dl-testb)
              (("2" (dl-flatten)
                (("2" (expand "straight" 1)
                  (("2" (expand "path?" 1)
                    (("2" (dl-diffcase "line?(0,1,c)")
                      (("1" (expand "line?" 1)
                        (("1" (dl-diffinv)
                          (("1" (dl-assert) nil nil)
                           ("2" (dl-assert) nil nil))
                          nil))
                        nil)
                       ("2" (dl-diffweak) (("2" (dl-flatten) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dl_choiceb formula-decl nil dynamic_logic nil)
    (dl_notL formula-decl nil dynamic_logic nil)
    (dl_trueL formula-decl nil dynamic_logic nil)
    (diff_re_prod formula-decl nil diff_re_props nil)
    (dl_dift_mult formula-decl nil differentiation nil)
    (dl_derivable_up_prod formula-decl nil differentiation nil)
    (dl_moveR formula-decl nil dynamic_logic nil)
    (DLOR const-decl "bool" bool_expr nil)
    (dl_composeb formula-decl nil dynamic_logic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (dl_dC formula-decl nil dynamic_logic nil)
    (ODEs type-eq-decl nil hp_def nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (\|- const-decl "bool" dynamic_logic nil)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (iterate_left const-decl "T" for_iterate structures)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (same_var const-decl "bool" hp_def nil)
    (diff_re_sum formula-decl nil diff_re_props nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (diff_re_pow formula-decl nil diff_re_props nil)
    (diff_re_cnst formula-decl nil diff_re_props nil)
    (diff_re_val formula-decl nil diff_re_props nil)
    (derivable_M_nqbool? inductive-decl "bool" chain_rule_re nil)
    (dl_dift_const formula-decl nil differentiation nil)
    (dl_derivable_up_cnst formula-decl nil differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (dl_dift_val formula-decl nil differentiation nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (dl_dift_pow formula-decl nil differentiation nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (dl_derivable_up_val formula-decl nil differentiation nil)
    (dl_derivable_up_pow formula-decl nil differentiation nil)
    (dl_true_DDL formula-decl nil differentiation nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (ddt def-decl "RealExpr" differentiation nil)
    (dl_dift_plus formula-decl nil differentiation nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (scal_function formula-decl nil real_fun_ops reals)
    (max_var const-decl "nat" hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (DIFT def-decl "BoolExpr" differentiation nil)
    (SUB_DIFT const-decl "BoolExpr" differentiation nil)
    (normalize_rec def-decl "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}" bool_expr
     nil)
    (dl_dI_dlTRUE formula-decl nil dynamic_logic nil)
    (nqb_rel const-decl "BoolExpr" bool_expr nil)
    (nqb_eq adt-constructor-decl "(nqb_eq?)" hp_def nil)
    (nqb_eq? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def nil)
    (NQB_rel adt-constructor-decl
     "[[NQB_REL, RealExpr, RealExpr] -> (nqb_rel?)]" NQBool_adt nil)
    (nqb_rel? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt nil)
    (NQB_REL type-decl nil hp_def nil)
    (normalize const-decl
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}"
     bool_expr nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NQBool type-decl nil NQBool_adt nil)
    (dl_axiom formula-decl nil dynamic_logic nil)
    (dl_orR formula-decl nil dynamic_logic nil)
    (circ? const-decl "BoolExpr" flight_turn_example nil)
    (line? const-decl "BoolExpr" flight_turn_example nil)
    (dl_dW formula-decl nil dynamic_logic nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (dl_testb formula-decl nil dynamic_logic nil)
    (dl_andR formula-decl nil dynamic_logic nil)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic nil)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic nil)
    (move_to_head const-decl "Formulas" dynamic_logic nil)
    (dl_moveL formula-decl nil dynamic_logic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (dl_andL formula-decl nil dynamic_logic nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dl_impliesR formula-decl nil dynamic_logic nil)
    (path? const-decl "BoolExpr" flight_turn_example nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (straight const-decl "HP" flight_turn_example nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (turn const-decl "HP" flight_turn_example nil)
    (> const-decl "BoolExpr" bool_expr nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (UNION adt-constructor-decl "[[HP, HP] -> (union?)]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (HP type-decl nil HP_adt nil)
    (y const-decl "nat" flight_turn_example nil)
    (x const-decl "nat" flight_turn_example nil)
    (val const-decl "real" hp_def nil)
    (= const-decl "BoolExpr" bool_expr nil)
    (cnst const-decl "real" hp_def nil)
    (>= const-decl "BoolExpr" bool_expr nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (DLAND const-decl "bool" bool_expr nil)
    (Formulas type-eq-decl nil bool_expr nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (rotational_dynamics_line 0
  (rotational_dynamics_line-1 nil 3879585678
   ("" (skeep)
    (("" (beta)
      (("" (dl-flatten)
        (("" (dl-loop "path?(C) AND cnst(C)>=0")
          (("1" (expand "path?")
            (("1" (expand "line?")
              (("1" (expand "circ?") (("1" (dl-assert) nil nil)) nil))
              nil))
            nil)
           ("2" (dl-assert) nil nil)
           ("3" (expand "path?" 1)
            (("3" (expand "circ?")
              (("3" (expand "line?")
                (("3" (dl-flatten)
                  (("3" (dl-ground)
                    (("1" (dl-assert)
                      (("1" (expand "turn")
                        (("1" (dl-ground)
                          (("1" (dl-diffcase "cnst(C) >= cnst(0)")
                            (("1" (dl-diffinv)
                              (("1" (dl-assert) nil nil)
                               ("2" (dl-assert) nil nil))
                              nil)
                             ("2"
                              (dl-diffcase
                               "DLAND(val(x) >= cnst(0), circ?(C))")
                              (("1"
                                (expand "circ?")
                                (("1"
                                  (dl-diffcase "circ?(C)")
                                  (("1"
                                    (expand "circ?")
                                    (("1"
                                      (dl-diffinv)
                                      (("1" (dl-assert) nil nil)
                                       ("2" (dl-assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (dl-diffweak)
                                    (("2"
                                      (expand "circ?")
                                      (("2" (dl-assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (dl-diffweak)
                                (("2"
                                  (expand "circ?")
                                  (("2" (dl-grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (dl-hide 1) (("2" (dl-assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (dl-assert)
                      (("2" (dl-grind)
                        (("1" (dl-hide 1) (("1" (dl-assert) nil nil))
                          nil)
                         ("2" (expand "straight" 1)
                          (("2"
                            (dl-diffcase
                             "DLAND(val(x) < cnst(0), line?(0, 1, C))")
                            (("1" (expand "line?")
                              (("1"
                                (dl-diffcase "cnst(C) >= cnst(0)")
                                (("1"
                                  (dl-diffinv)
                                  (("1" (dl-assert) nil nil)
                                   ("2" (dl-assert) nil nil))
                                  nil)
                                 ("2"
                                  (dl-diffinv)
                                  (("1" (dl-nqboolder__) nil nil)
                                   ("2" (dl-nqboolder__) nil nil)
                                   ("3" (dl-assert) nil nil)
                                   ("4" (dl-assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (dl-diffcase "cnst(C) >= cnst(0)")
                              (("1"
                                (dl-diffinv)
                                (("1" (dl-assert) nil nil)
                                 ("2" (dl-assert) nil nil))
                                nil)
                               ("2"
                                (dl-diffweak)
                                (("2" (dl-assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dl_loop formula-decl nil dynamic_logic nil)
    (gamma__213 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__214 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (line? const-decl "BoolExpr" flight_turn_example nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (iterate_left const-decl "T" for_iterate structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (\|- const-decl "bool" dynamic_logic nil)
    (gamma__221 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__222 skolem-const-decl "(cons?)" flight_turn_example nil)
    (dl_moveR formula-decl nil dynamic_logic nil)
    (gamma__223 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__224 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__219 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__220 skolem-const-decl "(cons?)" flight_turn_example nil)
    (delta__218 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__217 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (dl_orR formula-decl nil dynamic_logic nil)
    (dl_axiom formula-decl nil dynamic_logic nil)
    (dl_andR formula-decl nil dynamic_logic nil)
    (DLOR const-decl "bool" bool_expr nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (gamma__215 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__216 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (circ? const-decl "BoolExpr" flight_turn_example nil)
    (gamma__225 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__226 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (delta__228 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__227 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (gamma__309 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__310 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (delta__315 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__314 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (nnqb__311 skolem-const-decl "{nnqbe: NormNQBool |
   nqb_to_be(nnqbe) = nqb_to_be(NQB_rel(nqb_ge, cnst(C), cnst(0)))}"
     flight_turn_example nil)
    (delta__313 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__312 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__319 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__318 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__321 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__320 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__323 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__322 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__324 skolem-const-decl "(cons?)" flight_turn_example nil)
    (delta__325 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (delta__327 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__326 skolem-const-decl "(cons?)" flight_turn_example nil)
    (delta__331 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__330 skolem-const-decl "(cons?)" flight_turn_example nil)
    (delta__329 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__328 skolem-const-decl "(cons?)" flight_turn_example nil)
    (nqb_and? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt nil)
    (NQB_AND adt-constructor-decl "[[NQBool, NQBool] -> (nqb_and?)]"
     NQBool_adt nil)
    (nqb_lt? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def nil)
    (nqb_lt adt-constructor-decl "(nqb_lt?)" hp_def nil)
    (gamma__300 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__301 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (nnqb__299 skolem-const-decl "{nnqbe: NormNQBool |
   nqb_to_be(nnqbe) =
    nqb_to_be(NQB_AND(NQB_rel(nqb_lt, val(x), cnst(0)),
                      NQB_rel(nqb_eq, cnst(0) * val(x) + cnst(1) * val(y),
                              cnst(C))))}" flight_turn_example nil)
    (dl_derivable_up_prod formula-decl nil differentiation nil)
    (dl_dift_mult formula-decl nil differentiation nil)
    (<= const-decl "BoolExpr" bool_expr nil)
    (diff_re_prod formula-decl nil diff_re_props nil)
    (delta__306 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__305 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (dl_true_and formula-decl nil bool_expr nil)
    (delta__308 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__307 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (gamma__295 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__296 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (nnqb__294 skolem-const-decl "{nnqbe: NormNQBool |
   nqb_to_be(nnqbe) = nqb_to_be(NQB_rel(nqb_ge, cnst(C), cnst(0)))}"
     flight_turn_example nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (delta__298 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (dl_trueL formula-decl nil dynamic_logic nil)
    (gamma__297 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__293 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__292 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__291 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__290 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (gamma__288 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__289 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (delta__283 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__282 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (gamma__286 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__287 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__284 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__285 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (dl_testb formula-decl nil dynamic_logic nil)
    (dl_composeb formula-decl nil dynamic_logic nil)
    (dl_choiceb formula-decl nil dynamic_logic nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (delta__236 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__235 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gamma__239 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__240 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__237 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__238 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__246 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__247 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__248 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__249 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (nqb_eq? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def nil)
    (nqb_eq adt-constructor-decl "(nqb_eq?)" hp_def nil)
    (gamma__251 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__252 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (nnqb__250 skolem-const-decl "{nnqbe: NormNQBool |
   nqb_to_be(nnqbe) =
    nqb_to_be(NQB_rel(nqb_eq, val(x) ^ 2 + val(y) ^ 2, cnst(C) ^ 2))}"
     flight_turn_example nil)
    (dl_dift_plus formula-decl nil differentiation nil)
    (dl_derivable_up_pow formula-decl nil differentiation nil)
    (dl_derivable_up_val formula-decl nil differentiation nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (dl_dift_pow formula-decl nil differentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (dl_dift_val formula-decl nil differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dl_derivable_up_cnst formula-decl nil differentiation nil)
    (diff_re_val formula-decl nil diff_re_props nil)
    (diff_re_pow formula-decl nil diff_re_props nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (diff_re_sum formula-decl nil diff_re_props nil)
    (same_var const-decl "bool" hp_def nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (FALSE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_singleton formula-decl nil more_list_props structures)
    (delta__257 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__256 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (delta__261 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__260 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__263 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__262 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (gamma__264 skolem-const-decl "(cons?)" flight_turn_example nil)
    (delta__265 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (dl_dW formula-decl nil dynamic_logic nil)
    (delta__269 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__268 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__271 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__270 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__273 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__272 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (gamma__274 skolem-const-decl "(cons?)" flight_turn_example nil)
    (delta__275 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (delta__277 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__276 skolem-const-decl "(cons?)" flight_turn_example nil)
    (gamma__278 skolem-const-decl "(cons?)" flight_turn_example nil)
    (delta__279 skolem-const-decl "(cons?)" flight_turn_example nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NQBool type-decl nil NQBool_adt nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil)
    (normalize const-decl
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}"
     bool_expr nil)
    (NQB_REL type-decl nil hp_def nil)
    (nqb_rel? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt nil)
    (NQB_rel adt-constructor-decl
     "[[NQB_REL, RealExpr, RealExpr] -> (nqb_rel?)]" NQBool_adt nil)
    (nqb_ge? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def nil)
    (nqb_ge adt-constructor-decl "(nqb_ge?)" hp_def nil)
    (nqb_rel const-decl "BoolExpr" bool_expr nil)
    (dl_dI_dlTRUE formula-decl nil dynamic_logic nil)
    (gamma__244 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__245 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (nnqb__243 skolem-const-decl "{nnqbe: NormNQBool |
   nqb_to_be(nnqbe) = nqb_to_be(NQB_rel(nqb_ge, cnst(C), cnst(0)))}"
     flight_turn_example nil)
    (normalize_rec def-decl "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}" bool_expr
     nil)
    (SUB_DIFT const-decl "BoolExpr" differentiation nil)
    (DIFT def-decl "BoolExpr" differentiation nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (scal_function formula-decl nil real_fun_ops reals)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (dl_dift_const formula-decl nil differentiation nil)
    (ddt def-decl "RealExpr" differentiation nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (dl_true_DDL formula-decl nil differentiation nil)
    (derivable_M_nqbool? inductive-decl "bool" chain_rule_re nil)
    (diff_re_cnst formula-decl nil diff_re_props nil)
    (delta__242 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__241 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (dl_dC formula-decl nil dynamic_logic nil)
    (delta__281 skolem-const-decl "(null?[BoolExpr])"
     flight_turn_example nil)
    (gamma__280 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (dl_hideR formula-decl nil dynamic_logic nil)
    (delta__232 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (gamma__231 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (delta__234 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (gamma__233 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (gamma__229 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (dl_orL formula-decl nil dynamic_logic nil)
    (delta__230 skolem-const-decl "(cons?[BoolExpr])"
     flight_turn_example nil)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic nil)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic nil)
    (move_to_head const-decl "Formulas" dynamic_logic nil)
    (dl_moveL formula-decl nil dynamic_logic nil)
    (gamma__211 skolem-const-decl "(cons?)" flight_turn_example nil)
    (delta__212 skolem-const-decl "(cons?)" flight_turn_example nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (gamma__209 skolem-const-decl "(cons?)" flight_turn_example nil)
    (dl_andL formula-decl nil dynamic_logic nil)
    (delta__210 skolem-const-decl "(null?)" flight_turn_example nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (delta__208 skolem-const-decl "(null?)" flight_turn_example nil)
    (dl_impliesR formula-decl nil dynamic_logic nil)
    (path? const-decl "BoolExpr" flight_turn_example nil)
    (c const-decl "nat" dl_solution nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (straight const-decl "HP" flight_turn_example nil)
    (< const-decl "BoolExpr" bool_expr nil)
    (turn const-decl "HP" flight_turn_example nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (UNION adt-constructor-decl "[[HP, HP] -> (union?)]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (HP type-decl nil HP_adt nil)
    (y const-decl "nat" flight_turn_example nil)
    (x const-decl "nat" flight_turn_example nil)
    (val const-decl "real" hp_def nil)
    (= const-decl "BoolExpr" bool_expr nil)
    (cnst const-decl "real" hp_def nil)
    (>= const-decl "BoolExpr" bool_expr nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (DLAND const-decl "bool" bool_expr nil)
    (Formulas type-eq-decl nil bool_expr nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (gamma__207 skolem-const-decl "(null?)" flight_turn_example nil))
   shostak))
 (turn_tr_TCC1 0
  (turn_tr_TCC1-1 nil 3881967981
   ("" (skeep) (("" (eval-formula 1) nil nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (turn_tr subtype
    "(: (flight_turn_example.x, flight_turn_example.cos_re(hp_def.val(flight_turn_example.theta))), (flight_turn_example.y, flight_turn_example.sin_re(hp_def.val(flight_turn_example.theta))), (flight_turn_example.theta, hp_def.cnst(flight_turn_example.c)) :)"
    "ODEs")))
 (turn_same 0
  (turn_same-1 nil 3881968120
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "turn")
              (("1" (expand "turn_tr")
                (("1" (expand "semantic_rel")
                  (("1" (skeep)
                    (("1" (inst 1 "D")
                      (("1" (expand "semantic_rel_diff")
                        (("1" (skeep)
                          (("1" (skeep)
                            (("1"
                              (inst 1 "r" "LAMBDA(i:below(2)): fs(i)")
                              (("1"
                                (split 1)
                                (("1"
                                  (expand "env_at_t?")
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (typepred "i_1")
                                        (("1"
                                          (case "i_1=theta")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (inst -2 "i_1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -2 -3 -4 -5)
                                              (("2"
                                                (hide 2 3)
                                                (("2"
                                                  (expand "not_in_map")
                                                  (("2"
                                                    (unroll)
                                                    (("2"
                                                      (unroll)
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (expand
                                                           "nth")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "nth")
                                                        (("3"
                                                          (expand
                                                           "nth")
                                                          (("3"
                                                            (expand
                                                             "nth")
                                                            (("3"
                                                              (reveal
                                                               +)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil)
                               ("2" (postpone) nil nil)
                               ("3" (postpone) nil nil)
                               ("4" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

