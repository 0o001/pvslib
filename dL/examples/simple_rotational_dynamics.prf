(simple_rotational_dynamics
 (srd 0
  (srd-1 nil 3877421693
   ("" (skeep)
    (("" (beta)
      (("" (dl-flatten)
        (("" (dl-diffinv)
          (("1" (dl-assert) nil nil) ("2" (dl-assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NQBool type-decl nil NQBool_adt DDL)
    (nqb_normal? inductive-decl "bool" bool_expr DDL)
    (NormNQBool type-eq-decl nil bool_expr DDL)
    (nqb_to_be def-decl "BoolExpr" bool_expr DDL)
    (normalize const-decl
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}"
     bool_expr DDL)
    (NQB_REL type-decl nil hp_def DDL)
    (nqb_rel? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt DDL)
    (NQB_rel adt-constructor-decl
     "[[NQB_REL, RealExpr, RealExpr] -> (nqb_rel?)]" NQBool_adt DDL)
    (nqb_eq? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def DDL)
    (nqb_eq adt-constructor-decl "(nqb_eq?)" hp_def DDL)
    (nqb_rel const-decl "BoolExpr" bool_expr DDL)
    (dl_dI_dlTRUE formula-decl nil dynamic_logic DDL)
    (gamma__4 skolem-const-decl "(cons?[BoolExpr])"
     simple_rotational_dynamics nil)
    (delta__5 skolem-const-decl "(null?[BoolExpr])"
     simple_rotational_dynamics nil)
    (nnqb__3 skolem-const-decl "{nnqbe: NormNQBool |
   nqb_to_be(nnqbe) =
    nqb_to_be(NQB_rel(nqb_eq, val(x) ^ 2 + val(y) ^ 2, cnst(c) ^ 2))}"
     simple_rotational_dynamics nil)
    (normalize_rec def-decl "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}" bool_expr
     DDL)
    (SUB_DIFT const-decl "BoolExpr" differentiation DDL)
    (DIFT def-decl "BoolExpr" differentiation DDL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def DDL)
    (max_var const-decl "nat" hp_def DDL)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (scal_function formula-decl nil real_fun_ops reals)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (dl_dift_plus formula-decl nil differentiation DDL)
    (ddt def-decl "RealExpr" differentiation DDL)
    (ddl_dom? const-decl "bool" differentiation DDL)
    (dl_true_DDL formula-decl nil differentiation DDL)
    (dl_derivable_up_pow formula-decl nil differentiation DDL)
    (dl_derivable_up_val formula-decl nil differentiation DDL)
    (ddl_dom_upto? const-decl "bool" differentiation DDL)
    (derivable_up? const-decl "bool" differentiation DDL)
    (dl_dift_pow formula-decl nil differentiation DDL)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (dl_dift_val formula-decl nil differentiation DDL)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dl_derivable_up_cnst formula-decl nil differentiation DDL)
    (dl_dift_const formula-decl nil differentiation DDL)
    (derivable_M_nqbool? inductive-decl "bool" chain_rule_re DDL)
    (diff_re_val formula-decl nil diff_re_props DDL)
    (diff_re_cnst formula-decl nil diff_re_props DDL)
    (diff_re_pow formula-decl nil diff_re_props DDL)
    (diff_re? const-decl "bool" chain_rule_re DDL)
    (diff_re_sum formula-decl nil diff_re_props DDL)
    (same_var const-decl "bool" hp_def DDL)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (FALSE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dl_axiom formula-decl nil dynamic_logic DDL)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic DDL)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic DDL)
    (move_to_head const-decl "Formulas" dynamic_logic DDL)
    (dl_moveL formula-decl nil dynamic_logic DDL)
    (delta__10 skolem-const-decl "(null?[BoolExpr])"
     simple_rotational_dynamics nil)
    (dl_trueL formula-decl nil dynamic_logic DDL)
    (gamma__9 skolem-const-decl "(cons?[BoolExpr])"
     simple_rotational_dynamics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (\|- const-decl "bool" dynamic_logic DDL)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (iterate_left const-decl "T" for_iterate structures)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (y const-decl "nat" simple_rotational_dynamics nil)
    (val const-decl "real" hp_def DDL)
    (x const-decl "nat" simple_rotational_dynamics nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def DDL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def DDL)
    (RealExpr type-eq-decl nil hp_def DDL)
    (Environment type-eq-decl nil hp_def DDL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (delta__2 skolem-const-decl "(null?)" simple_rotational_dynamics
     nil)
    (dl_impliesR formula-decl nil dynamic_logic DDL)
    (DLBOOL const-decl "bool" bool_expr DDL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     DDL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt DDL)
    (ODEs type-eq-decl nil hp_def DDL)
    (ALLRUNS const-decl "bool" bool_expr DDL)
    (HP type-decl nil HP_adt DDL) (cnst const-decl "real" hp_def DDL)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "BoolExpr" bool_expr DDL)
    (Formulas type-eq-decl nil bool_expr DDL)
    (gamma__1 skolem-const-decl "(null?)" simple_rotational_dynamics
     nil))
   shostak)))

