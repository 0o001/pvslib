(simple_discrete_loop
 (Simple_Discrete_Loop 0
  (Simple_Discrete_Loop-1 nil 3867493134
   ("" (beta)
    (("" (dl-flatten)
      (("" (dl-assert)
        (("" (dl-loop "val(x) >= val(y) AND val(y) >= cnst(0)")
          (("1" (dl-assert) nil nil) ("2" (dl-assert) nil nil)
           ("3" (dl-grind) (("3" (dl-assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((gamma__350 skolem-const-decl "(null?[BoolExpr])"
     simple_discrete_loop nil)
    (Formulas type-eq-decl nil bool_expr DDL)
    (DLAND const-decl "bool" bool_expr DDL)
    (>= const-decl "BoolExpr" bool_expr DDL)
    (HP type-decl nil HP_adt DDL)
    (ALLRUNS const-decl "bool" bool_expr DDL)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt DDL)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt DDL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt DDL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt DDL)
    (Assigns type-eq-decl nil hp_def DDL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt DDL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt DDL)
    (dl_impliesR formula-decl nil dynamic_logic DDL)
    (delta__351 skolem-const-decl "(null?[BoolExpr])"
     simple_discrete_loop nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def DDL)
    (RealExpr type-eq-decl nil hp_def DDL)
    (MapExpr type-eq-decl nil hp_def DDL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def DDL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (y const-decl "nat" simple_discrete_loop nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (val const-decl "real" hp_def DDL)
    (x const-decl "nat" simple_discrete_loop nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (cnst const-decl "real" hp_def DDL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (delta__367 skolem-const-decl "(null?[BoolExpr])"
     simple_discrete_loop nil)
    (dl_andL formula-decl nil dynamic_logic DDL)
    (gamma__366 skolem-const-decl "(cons?[BoolExpr])"
     simple_discrete_loop nil)
    (delta__373 skolem-const-decl "(cons?)" simple_discrete_loop nil)
    (gamma__372 skolem-const-decl "(cons?[BoolExpr])"
     simple_discrete_loop nil)
    (dl_moveL formula-decl nil dynamic_logic DDL)
    (move_to_head const-decl "Formulas" dynamic_logic DDL)
    (is_dlfnum const-decl "bool" dynamic_logic DDL)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic DDL)
    (append def-decl "list[T]" list_props nil)
    (dl_loop formula-decl nil dynamic_logic DDL)
    (gamma__432 skolem-const-decl "(cons?[BoolExpr])"
     simple_discrete_loop nil)
    (delta__433 skolem-const-decl "(null?[BoolExpr])"
     simple_discrete_loop nil)
    (iterate_left const-decl "T" for_iterate structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (\|- const-decl "bool" dynamic_logic DDL)
    (dl_axiom formula-decl nil dynamic_logic DDL)
    (length_singleton formula-decl nil more_list_props structures)
    (dl_andR formula-decl nil dynamic_logic DDL)
    (gamma__502 skolem-const-decl "(cons?[BoolExpr])"
     simple_discrete_loop nil)
    (delta__503 skolem-const-decl "(null?[BoolExpr])"
     simple_discrete_loop nil)
    (delta__569 skolem-const-decl "(null?[BoolExpr])"
     simple_discrete_loop nil)
    (gamma__568 skolem-const-decl "(cons?[BoolExpr])"
     simple_discrete_loop nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def DDL)
    (dl_composeb formula-decl nil dynamic_logic DDL)
    (dl_assignb formula-decl nil dynamic_logic DDL)
    (Substitution type-eq-decl nil substitution DDL)
    (SUB const-decl "bool" substitution DDL)
    (dl_sub_and formula-decl nil substitution DDL)
    (dl_sub_ge formula-decl nil substitution DDL)
    (SUB_Re const-decl "real" substitution DDL)
    (dl_subre_val formula-decl nil substitution DDL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(i))(env)}"
     substitution DDL)
    (dl_subre_const formula-decl nil substitution DDL)
    (delta__761 skolem-const-decl "(null?[BoolExpr])"
     simple_discrete_loop nil)
    (gamma__760 skolem-const-decl "(cons?[BoolExpr])"
     simple_discrete_loop nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (dl_subre_prod formula-decl nil substitution DDL)
    (dl_subre_minus formula-decl nil substitution DDL)
    (FALSE const-decl "bool" booleans nil)
    (same_var const-decl "bool" hp_def DDL)
    (gamma__658 skolem-const-decl "(cons?[BoolExpr])"
     simple_discrete_loop nil)
    (delta__659 skolem-const-decl "(null?[BoolExpr])"
     simple_discrete_loop nil))
   shostak))
 (discrete_loop 0
  (discrete_loop-1 nil 3867791601
   ("" (dl-flatten)
    (("" (dl-loop "val(x) >= val(y) AND val(y) >= cnst(0)")
      (("1" (dl-assert) nil nil) ("2" (dl-assert) nil nil)
       ("3" (dl-grind) (("3" (dl-assert) nil nil)) nil))
      nil))
    nil)
   ((dl_loop formula-decl nil dynamic_logic DDL)
    (iterate_left const-decl "T" for_iterate structures)
    (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (\|- const-decl "bool" dynamic_logic DDL)
    (dl_axiom formula-decl nil dynamic_logic DDL)
    (dl_andR formula-decl nil dynamic_logic DDL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def DDL)
    (dl_composeb formula-decl nil dynamic_logic DDL)
    (dl_assignb formula-decl nil dynamic_logic DDL)
    (Substitution type-eq-decl nil substitution DDL)
    (SUB const-decl "bool" substitution DDL)
    (dl_sub_and formula-decl nil substitution DDL)
    (dl_sub_ge formula-decl nil substitution DDL)
    (SUB_Re const-decl "real" substitution DDL)
    (dl_subre_val formula-decl nil substitution DDL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(i))(env)}"
     substitution DDL)
    (dl_subre_const formula-decl nil substitution DDL)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (dl_subre_prod_scal1 formula-decl nil substitution DDL)
    (dl_subre_minus formula-decl nil substitution DDL)
    (FALSE const-decl "bool" booleans nil)
    (same_var const-decl "bool" hp_def DDL)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic DDL)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic DDL)
    (move_to_head const-decl "Formulas" dynamic_logic DDL)
    (dl_moveL formula-decl nil dynamic_logic DDL)
    (dl_andL formula-decl nil dynamic_logic DDL)
    (x const-decl "nat" simple_discrete_loop nil)
    (val const-decl "real" hp_def DDL)
    (y const-decl "nat" simple_discrete_loop nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def DDL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def DDL)
    (RealExpr type-eq-decl nil hp_def DDL)
    (Environment type-eq-decl nil hp_def DDL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (BoolExpr type-eq-decl nil hp_def DDL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (dl_impliesR formula-decl nil dynamic_logic DDL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt DDL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt DDL)
    (Assigns type-eq-decl nil hp_def DDL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt DDL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt DDL)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt DDL)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt DDL)
    (ALLRUNS const-decl "bool" bool_expr DDL)
    (HP type-decl nil HP_adt DDL)
    (<= const-decl "BoolExpr" bool_expr DDL)
    (cnst const-decl "real" hp_def DDL)
    (>= const-decl "BoolExpr" bool_expr DDL)
    (DLAND const-decl "bool" bool_expr DDL)
    (Formulas type-eq-decl nil bool_expr DDL))
   shostak)))

