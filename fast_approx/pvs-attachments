(defun get-dec-precision ()
  (- (pvsio_get_gvar_by_name "stdmath.PRECISION")))

(defattach |pi_def.pi| ()
  "Number π using fast_approx theory"
  (using
   ((pi_fun "fast_approx.pi_fast_approx"))
   (funcall pi_fun (expt 10 (get-dec-precision)))))

(defattach |sqrt.sqrt| (x)
  "Square root of X using fast_approx theory"
  (using
   ((sqrt_fun "fast_approx.sqrt_fast_approx"))
   (funcall sqrt_fun x (expt 10 (get-dec-precision)))))

(defattach |sincos_def.sin| (x)
  "Sine of X using fast_approx theory"
  (using
   ((sin_fun "fast_approx.sin_fast_approx"))
   (funcall sin_fun x (expt 10 (get-dec-precision)))))
 
(defattach |sincos_def.cos| (x)
  "Cosine of X using fast_approx theory"
  (using
   ((cos_fun "fast_approx.cos_fast_approx"))
   (funcall cos_fun x (expt 10 (get-dec-precision)))))

(defattach |sincos_def.tan| (x)
  "Tangent of X using fast_approx theory"
  (using
   ((tan_fun "fast_approx.tan_fast_approx"))
   (funcall tan_fun x (expt 10 (get-dec-precision)))))

(defattach |atan.atan| (x)
  "Arc tangent of X using fast_approx theory"
  (using
   ((atan_fun "fast_approx.atan_fast_approx")
    (pihalf_fun "fast_approx.pihalf_fast_approx_br"))
   (let ((precision (expt 10 (get-dec-precision))))
     (funcall atan_fun x precision (funcall pihalf_fun precision))))) 

(defattach |atan.pi| ()
  "Number π using fast_approx theory"
  (using
   ((pi_fun "fast_approx.pi_fast_approx"))
   (funcall pi_fun (expt 10 (get-dec-precision)))))

(defattach |trig_basic.sin| (x)
  "Sine of X using fast_approx theory"
  (using
   ((sin_fun "fast_approx.sin_fast_approx"))
   (funcall sin_fun x (expt 10 (get-dec-precision)))))
 
(defattach |trig_basic.cos| (x)
  "Cosine of X using fast_approx theory"
  (using
   ((cos_fun "fast_approx.cos_fast_approx"))
   (funcall cos_fun x (expt 10 (get-dec-precision)))))

(defattach |trig_basic.tan| (x)
  "Tangent of X using fast_approx theory"
  (using
   ((tan_fun "fast_approx.tan_fast_approx"))
   (funcall tan_fun x (expt 10 (get-dec-precision)))))

(defattach |trig_basic.pi| ()
  "Number π using fast_approx theory"
  (using
   ((pi_fun "fast_approx.pi_fast_approx"))
   (funcall pi_fun (expt 10 (get-dec-precision)))))
