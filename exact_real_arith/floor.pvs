floor : THEORY

  BEGIN

  IMPORTING cauchy, int

  n, p: VAR nat
  i:    VAR int
  x:    VAR real

  cauchy_noninteger?(c: cauchy_real): bool =
    EXISTS p: NOT divides(2^p, c(p))

  cauchy_noninteger: NONEMPTY_TYPE = (cauchy_noninteger?)
    CONTAINING (LAMBDA p: IF p = 0 THEN 0 ELSE 2^(p-1) ENDIF)

  JUDGEMENT cauchy_noninteger SUBTYPE_OF cauchy_nzreal

  nicx: VAR cauchy_noninteger

  nonint_is_not_int : LEMMA nicx /= cauchy_int(i)

  precisions(nicx): (nonempty?[nat]) = {p: nat | NOT divides(2^p, nicx(p))}

  divides_floor : LEMMA FORALL (n: posnat):
    floor(i / n) = i / n IFF divides(n, i)

  cauchy_floor_aux(nicx)(n: upto(choose(precisions(nicx)))):
    RECURSIVE {cx: cauchy_real | EXISTS i: cx = cauchy_int(i)} =
      LET x = floor(nicx(n) / 2^n) IN
        IF x = nicx(n) / 2^n THEN cauchy_floor_aux(nicx)(n + 1)
        ELSE cauchy_int(x)
        ENDIF
  MEASURE choose(precisions(nicx)) - n

  integer_lt_plus_1 : LEMMA FORALL (i, j: int):
    i < j IMPLIES i + 1 <= j

  real_bound_int_above : LEMMA FORALL (i, j: int):
    x <= 1 AND i < j + 1 + x IMPLIES i <= j + 1

  real_bound_int_below : LEMMA FORALL (i, j: int):
    x <= 1 AND i > j - 1 - x IMPLIES i >= j - 1

  expt_inv_lt_1 : LEMMA 1 / (2^n) <= 1

  floor_aux_lem : LEMMA FORALL (n: upto(choose(precisions(nicx)))):
    cauchy_prop(x, nicx) AND floor(nicx(n) / 2^n) /= nicx(n) / 2^n
      IMPLIES cauchy_prop(floor(x), cauchy_floor_aux(nicx)(n))

  floor_aux_lem2 : LEMMA FORALL nicx: FORALL (n: upto(choose(precisions(nicx)))):
    cauchy_prop(x, nicx) IMPLIES
      cauchy_prop(floor(x), cauchy_floor_aux(nicx)(choose(precisions(nicx)) - n))

  cauchy_floor(nicx): {cx: cauchy_real | EXISTS i: cx = cauchy_int(i)} =
    cauchy_floor_aux(nicx)(0)

  floor_lemma: LEMMA cauchy_prop(x, nicx)
    IMPLIES cauchy_prop(floor(x), cauchy_floor(nicx))

  END floor
