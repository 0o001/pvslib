tcas_checker : THEORY

  BEGIN

  Daidalus: LIBRARY = "../Daidalus"

  IMPORTING PVSioChecker@pvsio_checker,
  	    tcasra, 
	    TCAS_tables, 
	    tcasra_types 

  VsAccel: Global[posreal, 2]
  MaxVs  : Global[posreal, 700]
  Header : Global[bool, TRUE]

 Aircraft: TYPE = [# s:Vect3,v:Vect3, id:string #]
 Parameters: TYPE = [# DTHR : real, 
  	      	        ZTHR : real, 
			TTHR : real, 
			TCOA : real, 
			D : real, 
			H : real, 
			alerting_time : real, 
			lookahead_time : real, 
			min_gs : real, 
			max_gs : real, 
			min_vs : real, 
			max_vs : real, 
			min_alt : real, 
			max_alt : real, 
			conflict_only : bool, 
			time_step : posreal, 
			trk_step : posreal, 
			gs_step : posreal, 
			vs_step : posreal, 
			alt_step : posreal, 
			horizontal_accel : nnreal, 
			vertical_accel : nnreal, 
			turn_rate : nnreal, 
			bank_angle : nnreal, 
			vertical_rate : nnreal, 
			recovery_stability_time : real, 
			max_recovery_time : real, 
			min_horizontal_recovery : real, 
			min_vertical_recovery : real, 
			recovery_trk : bool, 
			recovery_gs : bool, 
			recovery_vs : bool, 
			alerting_logic : bool, 
			trk_alerting : bool, 
			gs_alerting : bool, 
			vs_alerting : bool, 
			preventive_altitude : real,  
			preventive_track : real, 
			preventive_ground_speed : real, 
			preventive_vertical_speed : real, 
			time_to_violation : real, 
			time_delay : real, 
			ca_bands : bool,
			recovery_vs_iff_ca_bands : bool #]


  fprint_XYZ(fout:OStream, s:Vect3) : void =
    fprintf(fout, "~a, ~a, ~a,",
          (to_str(s`x),to_str(s`y),to_str(s`z)))

  header?(fin:IStream, fout:OStream):void = 
   LET param = str2pvs[Parameters](readln_checker(fin)) IN
   set[posreal](MaxVs,param`max_vs) &
   set[posreal](VsAccel,g/4) 
  
  check_tcas(fin:IStream, fout:OStream, file:string, time: real,  aco, aci:Aircraft, vs_accel, maxvs: posreal, usehmdf:bool) : void = 
    LET sl = sensitivity_level(aco`s`z), 
    	tau = RA_thr(sl, TAU), 
	dmod = RA_thr(sl, DMOD),
	zthr = RA_thr(sl, ZTHR),
	alim = RA_thr(sl, ALIM), 
	hmd = RA_thr(sl, HMD), 
	s=vect2(aco`s-aci`s),
	v=vect2(aco`v-aci`v) IN
	IF s*v=0 THEN skip 
	ELSE 
          LET RA = TCASII_RA[tau, 0, dmod, zthr, hmd](aco`s, aco`v, aci`s, aci`v, usehmdf) IN 
	  IF NOT RA THEN skip
	  ELSE  LET raType:string = IF corrective?[tau, dmod](aco`s, aco`v, aci`s, aci`v, vs_accel, maxvs, alim)
			      THEN "Corrective"
			      ELSE "Preventive"
			      ENDIF, 
	  taumod = tau_current[dmod](aco`s, aco`v, aci`s, aci`v),
          direction =  tcas_direction[tau, dmod](aco`s`z,aco`v`z,aci`s`z,aci`v`z,vs_accel, maxvs, alim, taumod ), 
          horiz_sep = gs(aco`s-aci`s), 
          vert_sep = abs(aco`s`z-aci`s`z) IN
           fprintf(fout, "~a, ~f,",(file,time)) 
	   & fprint_XYZ(fout, aco`s) 
	   & fprint_XYZ(fout, aco`v) 
	   & fprint_XYZ(fout, aci`s) 
	   & fprint_XYZ(fout, aci`v) 
	   & fprintf(fout, "~f, ~f, ~f, ~a, ~a ~%",(horiz_sep, vert_sep, taumod, raType, direction))
	  ENDIF 
        ENDIF
  
  read_process_traffic(fin:IStream,fout:OStream, file:string, time:real, aco:Aircraft, vs_accel, maxvs:posreal, n:nat): RECURSIVE void = 
   IF n=0 THEN skip
   ELSE LET idi:string = readln_checker(fin),
       	    si:Vect3 = str2pvs[Vect3](readln_checker(fin)),
      	    vi:Vect3 = str2pvs[Vect3](readln_checker(fin)),
      	    intruder:Aircraft = (#s:=si,v:=vi, id:=idi#), 
            checkit:void = check_tcas(fin, fout, file, time, aco, intruder, vs_accel, maxvs, true) IN
   read_process_traffic(fin,fout,file,time,aco,vs_accel,maxvs,n-1) 
   ENDIF
   MEASURE n

  check?(fin:IStream,fout:OStream) : void = 
  IF val(Header) THEN
     fprintf(fout,"Scenario, time, sox, soy, soz, vox, voy, voz, six, siy, siz, vix, viy, viz, horizontal range, vertical separation, Modified tau, RA type, RA sense~%") &
     set[bool](Header,FALSE)
  ELSE 
     skip
  ENDIF AND
  LET scenario:string = readln_checker(fin), 
      time:real = str2pvs[real](readln_checker(fin)), 
      ido:string = readln_checker(fin),
      so:Vect3 = str2pvs[Vect3](readln_checker(fin)),
      vo:Vect3 = str2pvs[Vect3](readln_checker(fin)),
      own:Aircraft = (#s:=so,v:=vo, id:=ido#),
      traf_size:nat = str2pvs[nat](readln_checker(fin)), 
      checkit:void = read_process_traffic(fin,fout,scenario,time,own,VsAccel,MaxVs,traf_size), 
      tb_jav = (readln_checker(fin)),
      tb_prev = (readln_checker(fin)),
      tb_corr = (readln_checker(fin)), 
      gsb_jav = (readln_checker(fin)),
      gsb_prev = (readln_checker(fin)), 
      gsb_corr = (readln_checker(fin)), 
      vsb_jav = (readln_checker(fin)),
      vsb_prev = (readln_checker(fin)), 
      vsb_corr = (readln_checker(fin)) IN 
    skip 

  main(file:string,records:nat): void =
    set[bool](Header,TRUE) &
    set[string](OutExtension,"csv") &
    checker_with_header(file,check?,header?,records)

  multi_file_check(fin:IStream, fout:OStream): void = 
    LET file = readln_checker(fin) IN
      main(file, 0)
  
  multi_main(file:string): void =     
    set[string](OutExtension,"out") &
    checker(file, multi_file_check, 0) 

  END tcas_checker
