(ring_unit
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3801494647
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil ring_unit nil)) nil
   (IMP_ring_with_one assuming
    "algebra@ring_with_one[ring_unit.T, ring_unit.+, ring_unit.*, ring_unit.zero, ring_unit.one].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3801494647
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (fullset_is_ring_with_one formula-decl nil ring_unit nil))
   nil
   (IMP_ring_basic_properties assuming
    "ring_basic_properties[ring_unit.T, ring_unit.+, ring_unit.*, ring_unit.zero].ring_basic_properties"
    "fullset_is_ring: ASSUMPTION ring_def[ring_basic_properties.T, ring_basic_properties.+, ring_basic_properties.*, ring_basic_properties.zero].ring?(sets[ring_basic_properties.T].fullset)")))
 (proper_id_iff_no_unit_TCC1 0
  (proper_id_iff_no_unit_TCC1-1 nil 3800177136
   ("" (skosimp)
    (("" (skosimp)
      (("" (typepred "x!1")
        (("" (expand "remove")
          (("" (expand "member")
            (("" (typepred "I!1")
              (("" (expand "ideal?")
                (("" (expand "left_ideal?")
                  (("" (expand "subring?")
                    (("" (expand "subset?")
                      (("" (expand "member")
                        (("" (flatten)
                          (("" (inst -1 "x!1") (("" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((left_ideal? const-decl "bool" ring_ideal_def nil)
    (subset? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subring? const-decl "bool" ring_def algebra)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_unit nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (zero formal-const-decl "T" ring_unit nil)
    (+ formal-const-decl "[T, T -> T]" ring_unit nil)
    (* formal-const-decl "[T, T -> T]" ring_unit nil)
    (ring? const-decl "bool" ring_def algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (one formal-const-decl "T" ring_unit nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ideal type-eq-decl nil ring_ideal_def nil))
   nil (proper_id_iff_no_unit subtype "ring_unit.x" "(ring_unit.R)")))
 (proper_id_iff_no_unit 0
  (proper_id_iff_no_unit-1 "first try" 3800274779
   ("" (skosimp)
    (("" (split)
      (("1" (prop)
        (("1" (typepred "I!1")
          (("1" (expand "ideal?")
            (("1" (flatten)
              (("1" (expand "left_ideal?")
                (("1" (flatten)
                  (("1" (expand "left_swallow?")
                    (("1" (skosimp)
                      (("1" (expand "unit?")
                        (("1" (flatten)
                          (("1" (expand "l_invertible?")
                            (("1" (skosimp)
                              (("1"
                                (inst -2 "y!1" "x!1")
                                (("1"
                                  (replace -5 -2)
                                  (("1"
                                    (expand "strict_subset?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (iff 1)
                                          (("1"
                                            (split)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (inst -5 "x!2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (prop)
                                              (("2"
                                                (expand "right_ideal?")
                                                (("2"
                                                  (expand
                                                   "right_swallow?")
                                                  (("2"
                                                    (inst
                                                     -4
                                                     "x!2"
                                                     "one")
                                                    (("2"
                                                      (rewrite
                                                       one_times)
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x!1")
                                  (("2"
                                    (expand "remove")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (expand "strict_subset?")
          (("2" (split)
            (("1" (typepred "I!1")
              (("1" (expand "ideal?")
                (("1" (expand "left_ideal?")
                  (("1" (expand "subring?") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "R!1")
              (("2" (expand "ring_with_one?")
                (("2" (expand "monoid?")
                  (("2" (expand "monad?")
                    (("2" (flatten)
                      (("2" (decompose-equality)
                        (("2" (inst -1 "one")
                          (("2" (iff)
                            (("2" (flatten)
                              (("2"
                                (expand "member")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -8 "one")
                                    (("1"
                                      (expand "unit?")
                                      (("1"
                                        (expand "l_invertible?")
                                        (("1"
                                          (expand "r_invertible?")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (inst 1 "one")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst 1 "one")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "remove")
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma "no_singleton_nzx")
                                          (("1"
                                            (inst -1 "I!1")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "I!1 /= singleton(zero)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (case
                                                       "nzx!1*zero=nzx!1*one")
                                                      (("1"
                                                        (rewrite
                                                         times_zero)
                                                        (("1"
                                                          (rewrite
                                                           times_one)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -2 1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subring? const-decl "bool" ring_def algebra)
    (monad? const-decl "bool" monad_def algebra)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (right_identity formula-decl nil monad algebra)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (/= const-decl "boolean" notequal nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (times_zero formula-decl nil ring algebra)
    (times_one formula-decl nil ring_with_one algebra)
    (no_singleton_nzx formula-decl nil ring_basic_properties nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (l_invertible? const-decl "bool" ring_unit_def nil)
    (R!1 skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_unit nil)
    (I!1 skolem-const-decl "ideal[T, +, *, zero](R!1)" ring_unit nil)
    (remove const-decl "set" sets nil)
    (x!1 skolem-const-decl "(remove(zero, I!1))" ring_unit nil)
    (strict_subset? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (x!2 skolem-const-decl "T" ring_unit nil)
    (one_times formula-decl nil ring_with_one algebra)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (strict_subset_is_strict_order name-judgement
     "(strict_order?[set[T]])" sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_unit nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_unit nil)
    (* formal-const-decl "[T, T -> T]" ring_unit nil)
    (zero formal-const-decl "T" ring_unit nil)
    (ring? const-decl "bool" ring_def algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (one formal-const-decl "T" ring_unit nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ideal type-eq-decl nil ring_ideal_def nil))
   shostak)
  (proper_id_iff_no_unit-1 nil 3800177138
   ("" (skosimp)
    (("" (split)
      (("1" (prop)
        (("1" (skosimp)
          (("1" (expand "unit?")
            (("1" (expand "l_invertible?")
              (("1" (flatten)
                (("1" (skosimp)
                  (("1" (case "NOT member(one, R!1)")
                    (("1" (expand "member")
                      (("1" (expand "strict_subset?")
                        (("1" (flatten)
                          (("1" (lemma R_prod_star_closed)
                            (("1" (inst -1 "R!1" "y!1" "x!1")
                              (("1"
                                (expand "member")
                                (("1"
                                  (typepred "x!1")
                                  (("1"
                                    (expand "remove")
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (inst -3 "x!1")
                                            (("1"
                                              (expand "member")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "I!1")
                      (("2" (expand "ideal?")
                        (("2" (flatten)
                          (("2" (expand "left_ideal?")
                            (("2" (flatten)
                              (("2"
                                (expand "left_swallow?")
                                (("2"
                                  (expand "subring?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst -3 "y!1" "x!1")
                                      (("1"
                                        (replace -7 -3)
                                        (("1"
                                          (expand "right_ideal?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (expand
                                                 "right_swallow?")
                                                (("1"
                                                  (expand
                                                   "strict_subset?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (iff 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "subset?")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "x!2")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (prop)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "x!2"
                                                               "one")
                                                              (("2"
                                                                (rewrite
                                                                 one_times)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x!1")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "I!1")
        (("2" (skosimp)
          (("2" (split)
            (("1" (expand "strict_subset?")
              (("1" (split)
                (("1" (expand "ideal?")
                  (("1" (expand "left_ideal?")
                    (("1" (expand "subring?") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "/=")
                  (("2" (decompose-equality -1)
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

