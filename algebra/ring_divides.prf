(ring_divides
 (IMP_ring_with_id_one_generator_TCC1 0
  (IMP_ring_with_id_one_generator_TCC1-1 nil 3799665778
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil ring_divides nil)) nil
   (IMP_ring_with_id_one_generator assuming
    "ring_with_id_one_generator[ring_divides.T, ring_divides.+, ring_divides.*, ring_divides.zero, ring_divides.one].ring_with_id_one_generator"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_id_one_generator.T, ring_with_id_one_generator.+, ring_with_id_one_generator.*, ring_with_id_one_generator.zero, ring_with_id_one_generator.one].ring_with_one?(sets[ring_with_id_one_generator.T].fullset)")))
 (divides_subset_TCC1 0
  (divides_subset_TCC1-1 nil 3799597414
   ("" (skeep)
    (("" (typepred "a")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   nil (divides_subset subtype "ring_divides.a" "(ring_divides.R)")))
 (divides_subset 0
  (divides_subset-2 nil 3799597590
   ("" (skeep)
    (("" (typepred "R")
      (("" (prop)
        (("1" (rewrite "commutative_id_one_gen_charac")
          (("1" (rewrite "commutative_id_one_gen_charac")
            (("1" (expand "divides?")
              (("1" (skeep)
                (("1" (expand "subset?")
                  (("1" (skeep)
                    (("1" (expand "member")
                      (("1" (expand "restrict")
                        (("1" (expand "+")
                          (("1" (skeep)
                            (("1" (inst 1 "x*h")
                              (("1"
                                (replace -1 -2 rl)
                                (("1"
                                  (rewrite "times_associative")
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (lemma "R_prod_star_closed")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst -1 "R")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "commutative_id_one_gen_charac")
          (("2" (rewrite "commutative_id_one_gen_charac")
            (("2" (expand "subset?")
              (("2" (expand "divides?")
                (("2" (typepred "a" "b")
                  (("2" (expand "member")
                    (("2" (inst -3 "b")
                      (("2" (expand "restrict")
                        (("2" (expand "+")
                          (("2" (split)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "h")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (inst 1 "one")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (expand "ring_with_one?")
                                  (("2"
                                    (expand "monoid?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (right_identity formula-decl nil monad algebra)
    (monad? const-decl "bool" monad_def algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (commutative_id_one_gen_charac formula-decl nil
     ring_with_id_one_generator nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (R skolem-const-decl "{R: ring_with_one | commutative_ring?(R)}"
     ring_divides nil)
    (x skolem-const-decl "(R)" ring_divides nil)
    (h skolem-const-decl "(R)" ring_divides nil)
    (times_associative formula-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (restrict const-decl "R" restrict nil)
    (remove const-decl "set" sets nil))
   nil)
  (divides_subset-1 nil 3798819922
   ("" (skeep)
    (("" (typepred "R")
      (("" (prop)
        (("1" (rewrite "commutative_id_one_gen_charac")
          (("1" (rewrite "commutative_id_one_gen_charac")
            (("1" (expand "divides?")
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (replace -3 1 rl)
                    (("1" (expand "subset?")
                      (("1" (skeep)
                        (("1" (expand "member")
                          (("1" (expand "restrict")
                            (("1" (expand "+")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "x*h")
                                  (("1"
                                    (rewrite "times_associative")
                                    nil)
                                   ("2"
                                    (lemma "R_prod_star_closed")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (inst -1 "R")
                                        (("2"
                                          (assert)
                                          nil)))))))))))))))))))))))))))))))))
         ("2" (rewrite "commutative_id_one_gen_charac")
          (("2" (rewrite "commutative_id_one_gen_charac")
            (("2" (expand "subset?")
              (("2" (expand "divides?")
                (("2" (typepred "a" "b")
                  (("2" (expand "member")
                    (("2" (inst -3 "b")
                      (("2" (expand "restrict")
                        (("2" (expand "+")
                          (("2" (split)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "h")
                                (("1" (assert) nil)))))
                             ("2" (inst 1 "one")
                              (("1" (assert) nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (expand "ring_with_one?")
                                  (("2"
                                    (expand "monoid?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (assert)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (divides_equal_TCC1 0
  (divides_equal_TCC3-1 nil 3798819755
   ("" (skeep)
    (("" (typepred "b")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   nil (divides_equal subtype "ring_divides.b" "(ring_divides.R)")))
 (divides_equal_TCC2 0
  (divides_equal_TCC4-1 nil 3798819755
   ("" (skeep)
    (("" (typepred "a")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   nil (divides_equal subtype "ring_divides.a" "(ring_divides.R)")))
 (divides_equal 0
  (divides_equal-2 nil 3799597746
   ("" (skeep)
    (("" (expand "associates?")
      (("" (prop)
        (("1" (decompose-equality)
          (("1" (iff)
            (("1" (prop)
              (("1" (lemma "divides_subset")
                (("1" (inst -1 "R" "a" "b")
                  (("1" (assert)
                    (("1" (expand "subset?")
                      (("1" (inst -1 "x!1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "divides_subset")
                (("2" (inst -1 "R" "b" "a")
                  (("2" (assert)
                    (("2" (expand "subset?")
                      (("2" (inst -1 "x!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "commutative_id_one_gen_charac")
          (("2" (rewrite "commutative_id_one_gen_charac")
            (("2" (decompose-equality)
              (("2" (inst -1 "b")
                (("2" (expand "restrict")
                  (("2" (expand "+")
                    (("2" (iff)
                      (("2" (prop)
                        (("1" (expand "divides?")
                          (("1" (assert)
                            (("1" (typepred "b")
                              (("1"
                                (expand "remove")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (skeep -3)
                                        (("1"
                                          (inst 1 "h")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 1 3)
                          (("2" (inst 1 "one")
                            (("1" (assert) nil nil)
                             ("2" (typepred "R")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (rewrite "commutative_id_one_gen_charac")
          (("3" (rewrite "commutative_id_one_gen_charac")
            (("3" (decompose-equality)
              (("3" (inst -1 "a")
                (("3" (iff)
                  (("3" (prop)
                    (("1" (expand "restrict")
                      (("1" (expand "+")
                        (("1" (skeep)
                          (("1" (hide -2)
                            (("1" (expand "divides?")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "a")
                                  (("1"
                                    (expand "remove")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst 2 "h")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3)
                      (("2" (expand "restrict")
                        (("2" (expand "+")
                          (("2" (inst 1 "one")
                            (("1" (assert) nil nil)
                             ("2" (typepred "R")
                              (("2"
                                (expand "ring_with_one?")
                                (("2"
                                  (expand "monoid?")
                                  (("2"
                                    (expand "monad?")
                                    (("2"
                                      (expand "member")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((associates? const-decl "bool" ring_divides_def nil)
    (commutative_id_one_gen_charac formula-decl nil
     ring_with_id_one_generator nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "set[T]" cosets_def nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (monad? const-decl "bool" monad_def algebra)
    (right_identity formula-decl nil monad algebra)
    (R skolem-const-decl "{R: ring_with_one | commutative_ring?(R)}"
     ring_divides nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (remove const-decl "set" sets nil)
    (commutative_ring? const-decl "bool" ring_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (divides_subset formula-decl nil ring_divides nil))
   nil)
  (divides_equal-1 nil 3799597706 ("" (postpone) nil nil) nil shostak))
 (associates_equiv_relation 0
  (associates_equiv_relation-1 nil 3799597888
   ("" (skosimp)
    (("" (expand "equivalence?")
      (("" (split)
        (("1" (expand "reflexive?")
          (("1" (skosimp)
            (("1" (expand "associates?")
              (("1" (case "divides?(R!1)(x!1, x!1)")
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (expand "divides?")
                    (("2" (typepred "x!1")
                      (("2" (expand "remove")
                        (("2" (expand "member")
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (inst 2 "one")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (typepred "R!1")
                                    (("2"
                                      (expand "ring_with_one?")
                                      (("2"
                                        (expand "monoid?")
                                        (("2"
                                          (expand "monad?")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "x!1")
                  (("3" (expand "remove")
                    (("3" (expand "member") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "symmetric?")
          (("2" (skeep)
            (("2" (expand "associates?")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (expand "transitive?")
          (("3" (skeep)
            (("3" (expand "associates?")
              (("3" (flatten)
                (("3" (expand "divides?")
                  (("3" (skeep*)
                    (("3" (split)
                      (("1" (inst 1 "x_1 * x!1")
                        (("1" (hide -2 -4)
                          (("1" (replace -1 -2 rl)
                            (("1" (rewrite "times_associative") nil
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x_1" "x!1")
                          (("2" (hide-all-but (-1 -2 1))
                            (("2" (lemma "R_prod_star_closed")
                              (("2"
                                (inst -1 "R!1" "x_1" "x!1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -3)
                        (("2" (replace -2 -1 rl)
                          (("2" (inst 1 "x!2 * x_1!1")
                            (("1" (rewrite "times_associative") nil
                              nil)
                             ("2" (hide -)
                              (("2"
                                (typepred "x!2" "x_1!1")
                                (("2"
                                  (lemma "R_prod_star_closed")
                                  (("2"
                                    (inst -1 "R!1" "x!2" "x_1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (times_associative formula-decl nil ring algebra)
    (x_1 skolem-const-decl "(R!1)" ring_divides nil)
    (x!1 skolem-const-decl "(R!1)" ring_divides nil)
    (x!2 skolem-const-decl "(R!1)" ring_divides nil)
    (x_1!1 skolem-const-decl "(R!1)" ring_divides nil)
    (TRUE const-decl "bool" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (associates? const-decl "bool" ring_divides_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (monad? const-decl "bool" monad_def algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (right_identity formula-decl nil monad algebra)
    (R!1 skolem-const-decl "{R: ring_with_one | commutative_ring?(R)}"
     ring_divides nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (ring? const-decl "bool" ring_def algebra)
    (remove const-decl "set" sets nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (one formal-const-decl "T" ring_divides nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (commutative_ring? const-decl "bool" ring_def algebra))
   nil))
 (unit_divides_TCC1 0
  (unit_divides_TCC1-1 nil 3799600157
   ("" (skeep)
    (("" (typepred "u")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((commutative_ring? const-decl "bool" ring_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   nil (unit_divides subtype "ring_divides.u" "(ring_divides.R)")))
 (unit_divides 0
  (unit_divides-1 nil 3799600173
   ("" (skeep)
    (("" (prop)
      (("1" (skeep)
        (("1" (expand "unit?")
          (("1" (flatten)
            (("1" (hide -1)
              (("1" (expand "r_invertible?")
                (("1" (skeep)
                  (("1" (expand "divides?")
                    (("1" (assert)
                      (("1" (case "r = one * r")
                        (("1" (replaces -1)
                          (("1" (replace -1 1 rl)
                            (("1" (inst 1 "y * r")
                              (("1"
                                (rewrite "times_associative")
                                nil
                                nil)
                               ("2"
                                (hide -1)
                                (("2"
                                  (typepred "R")
                                  (("2"
                                    (expand "ring_with_one?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -2 -3)
                                        (("2"
                                          (lemma "R_prod_star_closed")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst -1 "R")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (inst -1 "one")
        (("1" (expand "divides?")
          (("1" (skeep)
            (("1" (expand "unit?")
              (("1" (expand "l_invertible?")
                (("1" (expand "r_invertible?")
                  (("1" (split)
                    (("1" (inst 1 "x")
                      (("1" (typepred "R")
                        (("1" (expand "commutative_ring?")
                          (("1" (flatten)
                            (("1" (hide -1 -2)
                              (("1"
                                (expand "commutative?")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "u")
                                    (("1"
                                      (expand "restrict")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred "u")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 1 "x") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "R")
          (("2" (expand "ring_with_one?")
            (("2" (expand "monoid?")
              (("2" (expand "monad?")
                (("2" (expand "member") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unit? const-decl "bool" ring_unit_def nil)
    (left_identity formula-decl nil monad algebra)
    (TRUE const-decl "bool" booleans nil)
    (R skolem-const-decl "{R: ring_with_one | commutative_ring?(R)}"
     ring_divides nil)
    (y skolem-const-decl "(R)" ring_divides nil)
    (r skolem-const-decl "(R)" ring_divides nil)
    (times_associative formula-decl nil ring algebra)
    (remove const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (ring? const-decl "bool" ring_def algebra)
    (member const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (one formal-const-decl "T" ring_divides nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (commutative_ring? const-decl "bool" ring_def algebra)
    (divides? const-decl "bool" ring_divides_def nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (monad? const-decl "bool" monad_def algebra)
    (restrict const-decl "R" restrict nil)
    (u skolem-const-decl "(remove(zero, R))" ring_divides nil)
    (commutative? const-decl "bool" operator_defs nil)
    (l_invertible? const-decl "bool" ring_unit_def nil))
   nil))
 (one_gen_unit_R 0
  (one_gen_unit_R-1 nil 3799664935
   ("" (skeep)
    (("" (prop)
      (("1" (decompose-equality)
        (("1" (iff)
          (("1" (prop)
            (("1" (expand "restrict") (("1" (propax) nil nil)) nil)
             ("2" (expand "restrict")
              (("2" (rewrite "commutative_id_one_gen_charac")
                (("2" (expand "restrict")
                  (("2" (expand "+")
                    (("2" (rewrite "unit_divides")
                      (("2" (inst -2 "x!1")
                        (("2" (expand "divides?")
                          (("2" (skeep)
                            (("2" (inst 1 "x") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "unit_divides")
        (("2" (skeep)
          (("2" (expand "divides?")
            (("2" (decompose-equality)
              (("2" (inst -1 "r")
                (("2" (iff)
                  (("2" (prop)
                    (("1" (expand "restrict")
                      (("1" (rewrite "commutative_id_one_gen_charac")
                        (("1" (expand "restrict")
                          (("1" (expand "+")
                            (("1" (skeep)
                              (("1"
                                (inst 1 "h")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "restrict") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unit_divides formula-decl nil ring_divides nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (+ const-decl "set[T]" cosets_def nil)
    (commutative_id_one_gen_charac formula-decl nil
     ring_with_id_one_generator nil)
    (T formal-nonempty-type-decl nil ring_divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_divides nil)
    (* formal-const-decl "[T, T -> T]" ring_divides nil)
    (zero formal-const-decl "T" ring_divides nil)
    (one formal-const-decl "T" ring_divides nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (commutative_ring? const-decl "bool" ring_def algebra)
    (restrict const-decl "R" restrict nil)
    (remove const-decl "set" sets nil)
    (one_gen const-decl "set[(R)]" ring_one_generator nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak)))

