(ring_zn
 (IMP_quotient_rings_with_one_TCC1 0
  (IMP_quotient_rings_with_one_TCC1-1 nil 3798301160
   ("" (expand "ring_with_one?")
    (("" (expand "ring?")
      (("" (split)
        (("1" (expand "abelian_group?")
          (("1" (expand "group?")
            (("1" (expand "monoid?")
              (("1" (split)
                (("1" (expand "monad?")
                  (("1" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil)
                 ("3" (expand "inv_exists?")
                  (("3" (skosimp)
                    (("3" (inst 1 "-x!1")
                      (("1" (assert) nil nil)
                       ("2" (expand "fullset") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil)
         ("4" (expand "left_distributive?")
          (("4" (skosimp)
            (("4" (expand "restrict") (("4" (propax) nil nil)) nil))
            nil))
          nil)
         ("5" (expand "right_distributive?")
          (("5" (skosimp)
            (("5" (expand "restrict") (("5" (propax) nil nil)) nil))
            nil))
          nil)
         ("6" (expand "monoid?")
          (("6" (expand "monad?")
            (("6" (split)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (abelian_group? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (inv_exists? const-decl "bool" group_def nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (x!1 skolem-const-decl "(fullset[int])" ring_zn nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (group? const-decl "bool" group_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (IMP_quotient_rings_with_one assuming
    "quotient_rings_with_one[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].quotient_rings_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[quotient_rings_with_one.T, quotient_rings_with_one.+, quotient_rings_with_one.*, quotient_rings_with_one.zero, quotient_rings_with_one.one].ring_with_one?(sets[quotient_rings_with_one.T].fullset)")))
 (nZ_add_TCC1 0
  (nZ_add_TCC1-1 nil 3797004843
   ("" (skosimp)
    (("" (typepred "x!1" "y!1")
      (("" (expand "nZ")
        (("" (skosimp*)
          (("" (inst 1 "k!1+k!2")
            (("" (replaces -1)
              (("" (replaces -1)
                (("" (lemma "left_distributive")
                  (("" (inst -1 "k!1" "k!2" "n!1")
                    (("" (replace -1 1 rl) (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nZ const-decl "set[int]" ring_zn nil)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (left_distributive formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (nZ_add subtype "(number_fields.+)(ring_zn.x, ring_zn.y)"
    "(ring_zn.nZ(ring_zn.n))")))
 (Z_ring 0
  (Z_ring-1 nil 3797004884
   ("" (lemma "IMP_quotient_rings_with_one_TCC1")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (IMP_quotient_rings_with_one_TCC1 assuming-tcc nil ring_zn nil))
   shostak))
 (Z_TCC1 0
  (Z_TCC1-1 nil 3797005119
   ("" (lemma "IMP_quotient_rings_with_one_TCC1")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (IMP_quotient_rings_with_one_TCC1 assuming-tcc nil ring_zn nil))
   nil
   (Z subtype "sets[int].fullset"
    "ring[int, restrict[[numfield, numfield], [int, int], numfield](+), restrict[[numfield, numfield], [int, int], numfield](*), 0]")))
 (Z1_is_Z 0
  (Z1_is_Z-1 nil 3797005160
   ("" (decompose-equality 1)
    (("" (iff)
      (("" (prop)
        (("1" (expand "nZ")
          (("1" (skosimp)
            (("1" (assert)
              (("1" (expand "Z")
                (("1" (expand "fullset") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "Z")
          (("2" (expand "fullset")
            (("2" (expand "nZ") (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (set type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil))
 (Z_commutative_ring_w_one 0
  (Z_commutative_ring_w_one-1 nil 3797005226
   ("" (expand "commutative_ring_with_one?")
    (("" (expand "ring_with_one?")
      (("" (expand "Z")
        (("" (expand "fullset")
          (("" (split)
            (("1" (expand "monoid?")
              (("1" (split)
                (("1" (expand "monad?")
                  (("1" (split)
                    (("1" (expand "star_closed?")
                      (("1" (skosimp)
                        (("1" (expand "member")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "member") (("2" (propax) nil nil))
                      nil)
                     ("3" (expand "identity?")
                      (("3" (expand "restrict")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "associative?")
                  (("2" (expand "restrict") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "commutative?")
              (("2" (expand "restrict") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (fullset const-decl "set" sets nil)
    (commutative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil))
   nil))
 (nZ_ideal 0
  (nZ_ideal-1 nil 3797005287
   ("" (skosimp)
    (("" (case "subring?(nZ(n!1), Z)")
      (("1" (expand "ideal?")
        (("1" (prop)
          (("1" (expand "left_ideal?")
            (("1" (prop)
              (("1" (hide -1)
                (("1" (expand "left_swallow?")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (typepred "x!1")
                        (("1" (expand "nZ")
                          (("1" (skosimp)
                            (("1" (inst 1 "r!1*k!1")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (rewrite "associative_mult")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "right_ideal?")
            (("2" (prop)
              (("2" (hide -1)
                (("2" (expand "right_swallow?")
                  (("2" (skosimp)
                    (("2" (expand "member")
                      (("2" (typepred "x!1")
                        (("2" (expand "nZ")
                          (("2" (skosimp)
                            (("2" (inst 1 "k!1*r!1")
                              (("2"
                                (replaces -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "subring?")
          (("2" (prop)
            (("1" (expand "subset?")
              (("1" (skosimp)
                (("1" (expand "member")
                  (("1" (expand* "Z" "nZ" "fullset") nil nil)) nil))
                nil))
              nil)
             ("2" (expand "ring?")
              (("2" (prop)
                (("1" (expand "abelian_group?")
                  (("1" (prop)
                    (("1" (expand "group?")
                      (("1" (prop)
                        (("1" (expand "monoid?")
                          (("1" (prop)
                            (("1" (expand "monad?")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "star_closed?")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (typepred "x!1" "y!1")
                                        (("1"
                                          (expand "nZ")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst 1 "k!1 + k!2")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma
                                                     "distributive")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "n!1"
                                                       "k!1"
                                                       "k!2")
                                                      (("1"
                                                        (stop-rewrite
                                                         "plus_zero"
                                                         "zero_plus"
                                                         "one_right"
                                                         "one_left"
                                                         "right_identity"
                                                         "left_identity")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "member")
                                  (("2"
                                    (expand "nZ")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "identity?")
                                  (("3"
                                    (expand "restrict")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "associative?")
                              (("2"
                                (expand "restrict")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "inv_exists?")
                          (("2" (skosimp)
                            (("2" (inst 1 "-x!1")
                              (("1"
                                (lemma "inverse_add")
                                (("1"
                                  (inst?)
                                  (("1" (prop) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "x!1")
                                (("2"
                                  (expand "nZ")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst 1 "-k!1")
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (lemma "mult_neg")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (replace -1 1 rl)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma
                                                   "both_sides_times2")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (lemma "expt_m1")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (expand
                                                             "power")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "commutative?")
                      (("2" (expand "restrict")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "star_closed?")
                  (("2" (skosimp)
                    (("2" (expand "member")
                      (("2" (typepred "x!1" "y!1")
                        (("2" (expand "nZ")
                          (("2" (skosimp*)
                            (("2" (inst 1 "n!1*k!1*k!2")
                              (("2"
                                (replaces -1)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (lemma "associative_mult")
                                    (("2"
                                      (inst?)
                                      (("2" (replaces -1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "associative?")
                  (("3" (expand "restrict") (("3" (propax) nil nil))
                    nil))
                  nil)
                 ("4" (expand "left_distributive?")
                  (("4" (expand "restrict") (("4" (propax) nil nil))
                    nil))
                  nil)
                 ("5" (expand "right_distributive?")
                  (("5" (expand "restrict") (("5" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (subring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (member const-decl "bool" sets nil)
    (associative_mult formula-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "(nZ(n!1))" ring_zn nil)
    (inverse_add formula-decl nil number_fields nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (zero_times formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (distributive formula-decl nil number_fields nil)
    (subset? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil))
   nil))
 (Zn_finite_set 0
  (Zn_finite_set-1 nil 3797005355
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp*)
      (("" (expand "is_finite")
        ((""
          (inst 1 "n!1"
           "(LAMBDA (A:(Z(n!1))): rem(n!1)(lc_gen(Z,nZ(n!1))(A)))")
          (("1" (expand "injective?")
            (("1" (skosimp*)
              (("1" (typepred "x1!1" "x2!1")
                (("1" (expand "Z")
                  (("1" (expand "/")
                    (("1" (expand "coset?")
                      (("1" (flatten)
                        (("1" (hide (-2 -4))
                          (("1" (expand "left_coset?")
                            (("1" (skosimp*)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lemma "lcos_eq2")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (rewrite "same_remainder")
                                            (("1"
                                              (expand "divides")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (lemma "lc_gen_eq")
                                                  (("1"
                                                    (copy -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "nZ(n!1)"
                                                       "fullset[int]"
                                                       "a!1")
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "nZ(n!1)"
                                                         "fullset[int]"
                                                         "a!2")
                                                        (("1"
                                                          (lemma
                                                           "nZ_ideal")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (typepred
                                                               "a!1"
                                                               "a!2")
                                                              (("1"
                                                                (expand
                                                                 "Z")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            -2
                                                                            -3))
                                                                          (("1"
                                                                            (typepred
                                                                             "h!1"
                                                                             "h!2")
                                                                            (("1"
                                                                              (expand
                                                                               "nZ")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "nZ_add(n!1)(n!1 * x!1,n!1 * k!1) - n!1 * k!2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nZ_add")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nZ_add")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nZ")
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "k!1 - k!2 + x!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "nZ")
                                                                                          (("3"
                                                                                            (inst
                                                                                             1
                                                                                             "k!1")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("4"
                                                                                          (expand
                                                                                           "nZ")
                                                                                          (("4"
                                                                                            (inst
                                                                                             1
                                                                                             "x!1")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           (-1 -2 2))
                                                          (("2"
                                                            (lemma
                                                             "Z_ring")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide
                                                         (-1 -2 2))
                                                        (("2"
                                                          (lemma
                                                           "Z_ring")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-1 2))
                                          (("2"
                                            (lemma "nZ_ideal")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "ideal?")
                                                  (("2"
                                                    (expand
                                                     "left_ideal?")
                                                    (("2"
                                                      (expand
                                                       "subring?")
                                                      (("2"
                                                        (expand
                                                         "ring?")
                                                        (("2"
                                                          (expand
                                                           "abelian_group?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (expand "left_coset?")
              (("2" (typepred "A!1")
                (("2" (expand "Z")
                  (("2" (expand "/")
                    (("2" (expand "coset?")
                      (("2" (prop)
                        (("2" (hide -2)
                          (("2" (expand "left_coset?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (ring? const-decl "bool" ring_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (setofsets type-eq-decl nil sets nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (divides const-decl "bool" divides nil)
    (lc_gen_eq formula-decl nil ring_cosets_lemmas nil)
    (Z_ring formula-decl nil ring_zn nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (x!1 skolem-const-decl "int" ring_zn nil)
    (k!1 skolem-const-decl "int" ring_zn nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_add const-decl "(nZ(n))" ring_zn nil)
    (k!2 skolem-const-decl "int" ring_zn nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (same_remainder formula-decl nil modulo_arithmetic nil)
    (fullset const-decl "set" sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (lcos_eq2 formula-decl nil ring_cosets_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil))
 (Zn_card_n_TCC1 0
  (Zn_card_n_TCC1-1 nil 3797005406
   ("" (skosimp) (("" (rewrite "Zn_finite_set") nil nil)) nil)
   ((Zn_finite_set formula-decl nil ring_zn nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (Zn_card_n subtype "ring_zn.Z(ring_zn.n)"
    "finite_set[setof[int]]")))
 (Zn_card_n 0
  (Zn_card_n-1 nil 3797005417
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (lemma "card_bij[set[int]]")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              ((""
                (inst 1
                 "(LAMBDA (A:(Z(n!1))): rem(n!1)(lc_gen(fullset[int],nZ(n!1))(A)))")
                (("1" (expand "bijective?")
                  (("1" (prop)
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1" (typepred "x1!1" "x2!1")
                          (("1" (expand "Z")
                            (("1" (expand "/")
                              (("1"
                                (expand "coset?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide (-2 -4))
                                    (("1"
                                      (expand "left_coset?")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma "lcos_eq2")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (rewrite
                                                       "same_remainder")
                                                      (("1"
                                                        (expand
                                                         "divides")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (lemma
                                                             "lc_gen_eq")
                                                            (("1"
                                                              (copy -1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "nZ(n!1)"
                                                                 "fullset[int]"
                                                                 "a!1")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "nZ(n!1)"
                                                                   "fullset[int]"
                                                                   "a!2")
                                                                  (("1"
                                                                    (lemma
                                                                     "nZ_ideal")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (typepred
                                                                         "a!1"
                                                                         "a!2")
                                                                        (("1"
                                                                          (expand
                                                                           "Z")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     (-1
                                                                                      -2
                                                                                      -3))
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "h!1"
                                                                                       "h!2")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nZ")
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "nZ_add(n!1)(n!1 * x!1,n!1 * k!1) - n!1 * k!2")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nZ_add")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nZ_add")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nZ")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "k!1 - k!2 + x!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "nZ")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "k!1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "nZ")
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "x!1")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-1
                                                                      -2
                                                                      2))
                                                                    (("2"
                                                                      (lemma
                                                                       "Z_ring")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    -2
                                                                    2))
                                                                  (("2"
                                                                    (lemma
                                                                     "Z_ring")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (-1 2))
                                                    (("2"
                                                      (lemma
                                                       "nZ_ideal")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand
                                                           "ideal?")
                                                          (("2"
                                                            (expand
                                                             "left_ideal?")
                                                            (("2"
                                                              (expand
                                                               "subring?")
                                                              (("2"
                                                                (expand
                                                                 "ring?")
                                                                (("2"
                                                                  (expand
                                                                   "abelian_group?")
                                                                  (("2"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "surjective?")
                      (("2" (skosimp)
                        (("2" (lemma "lc_gen_eq")
                          (("2"
                            (inst -1 "nZ(n!1)" "fullset[int]" "y!1")
                            (("1" (lemma "nZ_ideal")
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "Z")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (lemma "rem_def")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide (-1 2 3))
                                                  (("1"
                                                    (typepred "h!1")
                                                    (("1"
                                                      (expand "nZ")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "k!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1)
                                          (("2"
                                            (expand "Z")
                                            (("2"
                                              (expand "/")
                                              (("2"
                                                (lemma
                                                 "lcoset_iff_coset")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (hide (-1 1 3))
                                                      (("2"
                                                        (expand
                                                         "left_coset?")
                                                        (("2"
                                                          (inst
                                                           1
                                                           "y!1")
                                                          (("2"
                                                            (expand
                                                             "Z")
                                                            (("2"
                                                              (expand
                                                               "fullset")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-1 2))
                                      (("2"
                                        (expand "fullset")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "Z_ring")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (typepred "A!1")
                    (("2" (expand "Z")
                      (("2" (expand "/")
                        (("2" (expand "coset?")
                          (("2" (expand "Z") (("2" (prop) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (rem_def formula-decl nil modulo_arithmetic nil)
    (y!1 skolem-const-decl "below[n!1]" ring_zn nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (TRUE const-decl "bool" booleans nil)
    (lcos_eq2 formula-decl nil ring_cosets_lemmas nil)
    (+ const-decl "set[T]" cosets_def nil)
    (same_remainder formula-decl nil modulo_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (k!2 skolem-const-decl "int" ring_zn nil)
    (nZ_add const-decl "(nZ(n))" ring_zn nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (k!1 skolem-const-decl "int" ring_zn nil)
    (x!1 skolem-const-decl "int" ring_zn nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (Z_ring formula-decl nil ring_zn nil)
    (lc_gen_eq formula-decl nil ring_cosets_lemmas nil)
    (divides const-decl "bool" divides nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (coset? const-decl "bool" cosets_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (left_coset type-eq-decl nil cosets_def nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (fullset const-decl "set" sets nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (card_bij formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil))
   nil))
 (Zn_commutative_ring_w_one_TCC1 0
  (Zn_commutative_ring_w_one_TCC1-1 nil 3797005481
   ("" (skosimp)
    (("" (inst 1 "nZ(n!1)")
      (("" (rewrite "ideal_is_coset")
        (("" (hide 2) (("" (rewrite "nZ_ideal") nil nil)) nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (Zn_commutative_ring_w_one existence ""
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))")))
 (Zn_commutative_ring_w_one_TCC2 0
  (Zn_commutative_ring_w_one_TCC2-1 nil 3797005481
   ("" (skosimp)
    (("" (lemma "coset_add")
      (("" (inst -1 "Z" "nZ(n!1)" "x1!1`1" "x1!1`2")
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (rewrite "nZ_ideal") nil nil)) nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (coset_add formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].add(ring_zn.Z, ring_zn.nZ(ring_zn.n))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))]")))
 (Zn_commutative_ring_w_one_TCC3 0
  (Zn_commutative_ring_w_one_TCC3-1 nil 3797005481
   ("" (skosimp)
    (("" (lemma "coset_product")
      (("" (inst -1 "Z" "nZ(n!1)" "x1!1`1" "x1!1`2")
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (rewrite "nZ_ideal") nil nil)) nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (coset_product formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(ring_zn.n))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))]")))
 (Zn_commutative_ring_w_one_TCC4 0
  (Zn_commutative_ring_w_one_TCC4-1 nil 3797005481
   ("" (skosimp)
    (("" (rewrite "ideal_is_coset")
      (("" (hide 2) (("" (rewrite "nZ_ideal") nil nil)) nil)) nil))
    nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_ideal formula-decl nil ring_zn nil))
   nil
   (Zn_commutative_ring_w_one subtype "ring_zn.nZ(ring_zn.n)"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))")))
 (Zn_commutative_ring_w_one_TCC5 0
  (Zn_commutative_ring_w_one_TCC5-1 nil 3797005481
   ("" (skosimp)
    (("" (rewrite "lcoset_iff_coset" :dir rl)
      (("" (expand "left_coset?")
        (("" (inst 1 "1")
          (("" (expand "Z")
            (("" (expand "fullset") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fullset const-decl "set" sets nil)
    (left_coset? const-decl "bool" cosets_def nil))
   nil
   (Zn_commutative_ring_w_one subtype
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(ring_zn.n))"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(ring_zn.n))")))
 (Zn_commutative_ring_w_one 0
  (Zn_commutative_ring_w_one-1 nil 3797005494
   ("" (skeep)
    (("" (expand "commutative_ring_with_one?")
      (("" (split)
        (("1" (lemma "quotient_ring_with_one")
          (("1" (expand "Z")
            (("1" (inst -1 "Z" "nZ(n)")
              (("1" (hide 2) (("1" (rewrite "nZ_ideal") nil nil)) nil)
               ("2" (hide 2)
                (("2" (expand "ring_with_one?")
                  (("2" (expand "monoid?")
                    (("2" (expand "monad?")
                      (("2" (split)
                        (("1" (expand "star_closed?")
                          (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil) ("3" (grind) nil nil)
                         ("4" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "commutative?")
          (("2" (skeep)
            (("2" (expand "restrict")
              (("2" (expand "product")
                (("2" (expand "lproduct") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((commutative_ring_with_one? const-decl "bool" ring_with_one_def
     nil)
    (commutative? const-decl "bool" operator_defs nil)
    (lproduct const-decl "set[T]" product_coset_def nil)
    (lc_gen const-decl "T" cosets_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quotient_ring_with_one formula-decl nil quotient_rings_with_one
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring_with_one? const-decl "bool" ring_with_one_def nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (n skolem-const-decl "posnat" ring_zn nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (left_identity formula-decl nil monad nil)
    (identity? const-decl "bool" operator_defs nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (Z const-decl "setofsets[int]" ring_zn nil))
   nil))
 (equal_cosets_div 0
  (equal_cosets_div-1 nil 3797005592
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp*)
      (("" (prop)
        (("1" (lemma "lcos_eq")
          (("1" (inst -1 "nZ(n!1)" "b!1" "a!1")
            (("1" (prop)
              (("1" (skosimp)
                (("1" (typepred "h!1")
                  (("1" (hide -3)
                    (("1" (expand "nZ")
                      (("1" (skosimp)
                        (("1" (replaces -1)
                          (("1" (expand "divides")
                            (("1" (inst 1 "k!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (assert) nil nil)) nil)
               ("3" (hide (-1 2))
                (("3" (expand "nZ")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "divides")
          (("2" (skosimp)
            (("2" (lemma "divby")
              (("2" (inst?)
                (("2" (inst -1 "a!1" "n!1 * x!1")
                  (("2" (prop)
                    (("1" (hide (-2 -3))
                      (("1" (lemma "lcos_eq2")
                        (("1" (inst -1 "nZ(n!1)" "b!1" "a!1")
                          (("1" (prop)
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (replaces -1)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (expand "nZ")
                                    (("2"
                                      (inst 1 "x!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide (-1 2))
                              (("3"
                                (lemma "nZ_ideal")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (expand "ideal?")
                                    (("3"
                                      (expand "left_ideal?")
                                      (("3"
                                        (expand "subring?")
                                        (("3"
                                          (expand "ring?")
                                          (("3"
                                            (expand "abelian_group?")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((divby formula-decl nil group nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (abelian_group? const-decl "bool" group_def nil)
    (subring? const-decl "bool" ring_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (x!1 skolem-const-decl "int" ring_zn nil)
    (lcos_eq2 formula-decl nil ring_cosets_lemmas nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lcos_eq formula-decl nil ring_cosets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (divides const-decl "bool" divides nil)
    (zero_times formula-decl nil ring nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil))
 (nZ_mZ_sum_TCC1 0
  (nZ_mZ_sum_TCC1-1 nil 3797005919 ("" (subtype-tcc) nil nil) nil nil
   (nZ_mZ_sum subtype "ring_zn.m"
    "{jj: integers.int | booleans.=>(ring_zn.n = 0, jj /= 0)}")))
 (nZ_mZ_sum 0
  (nZ_mZ_sum-1 nil 3797005928
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (decompose-equality 1)
        (("" (iff)
          (("" (prop)
            (("1" (expand "sum")
              (("1" (skosimp)
                (("1" (typepred "h!1" "k!1")
                  (("1" (expand "nZ")
                    (("1" (lemma "gcd_divides")
                      (("1" (inst?)
                        (("1" (prop)
                          (("1" (expand "divides")
                            (("1" (skosimp*)
                              (("1"
                                (replaces -3)
                                (("1"
                                  (replaces -3)
                                  (("1"
                                    (replace -1 -3)
                                    (("1"
                                      (name-replace
                                       "temp1"
                                       "gcd(n!1, m!1) * x!2 * k!2")
                                      (("1"
                                        (replace -2 -3)
                                        (("1"
                                          (expand "temp1")
                                          (("1"
                                            (hide (-1 -2))
                                            (("1"
                                              (lemma "distributive")
                                              (("1"
                                                (inst
                                                 -1
                                                 "gcd(n!1, m!1)"
                                                 "k!2 * x!2"
                                                 "k!3 * x!3")
                                                (("1"
                                                  (replace -1 -2 rl)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (inst
                                                       1
                                                       "(k!2 * x!2 + k!3 * x!3)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "sum")
              (("2" (expand "nZ")
                (("2" (skosimp)
                  (("2" (lemma "gcd_factors")
                    (("2" (inst?)
                      (("2" (prop)
                        (("1" (skosimp)
                          (("1" (replaces -1)
                            (("1" (lemma "distributive")
                              (("1"
                                (inst?)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (rewrite "associative_mult")
                                    (("1"
                                      (rewrite "associative_mult")
                                      (("1"
                                        (inst
                                         1
                                         "ip!1 * k!1 * n!1"
                                         "jp!1 * k!1 * m!1")
                                        (("1"
                                          (expand "nZ")
                                          (("1"
                                            (inst 1 "jp!1 * k!1")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "nZ")
                                            (("2"
                                              (inst 1 "ip!1 * k!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((jp!1 skolem-const-decl "int" ring_zn nil)
    (m!1 skolem-const-decl "posnat" ring_zn nil)
    (k!1 skolem-const-decl "int" ring_zn nil)
    (ip!1 skolem-const-decl "int" ring_zn nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (associative_mult formula-decl nil number_fields nil)
    (gcd_factors formula-decl nil gcd ints)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gcd_divides formula-decl nil gcd ints)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (temp1 skolem-const-decl "int" ring_zn nil)
    (distributive formula-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         ints)
    (divides const-decl "bool" divides nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (sum const-decl "set[T]" cosets_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (nZ_mZ_intersection_TCC1 0
  (nZ_mZ_intersection_TCC1-1 nil 3797006687
   ("" (skosimp)
    (("" (split)
      (("1" (lemma "gcd_divides")
        (("1" (inst -1 "n!1" "m!1")
          (("1" (split)
            (("1" (flatten)
              (("1" (expand "divides")
                (("1" (skosimp*)
                  (("1" (name-replace "d" "gcd(n!1, m!1)")
                    (("1" (replace -1 -3)
                      (("1" (hide -1 -2)
                        (("1" (lemma "div_cancel1")
                          (("1"
                            (case "d * x!1 * m!1 / d = d * (x!1 *m!1 / d)")
                            (("1" (replace -1 -3)
                              (("1"
                                (inst -2 "d" "x!1*m!1")
                                (("1"
                                  (replace -2 -3)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil) ("3" (assert) nil nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         ints)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (divides const-decl "bool" divides nil)
    (gcd_divides formula-decl nil gcd ints)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (nZ_mZ_intersection subtype "ring_zn.lcm" "posnat")))
 (nZ_mZ_intersection 0
  (nZ_mZ_intersection-2 "tt" 3797007253
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (skoletin* 1)
        (("" (decompose-equality 1)
          (("1" (iff)
            (("1" (prop)
              (("1" (expand "intersection")
                (("1" (expand "member")
                  (("1" (flatten)
                    (("1" (expand "nZ")
                      (("1" (skosimp*)
                        (("1" (lemma "lcm_div")
                          (("1"
                            (inst -1 "n!1" "m!1" "x!1" "gcd(n!1, m!1)")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "divides")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (replace -4 -1 rl)
                                      (("1"
                                        (inst 1 "x!2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (-3 2))
                                  (("2"
                                    (expand "divides")
                                    (("2"
                                      (inst 1 "k!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide (-3 2))
                                  (("3"
                                    (expand "divides")
                                    (("3"
                                      (inst 1 "k!2")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "intersection")
                (("2" (expand "member")
                  (("2" (expand "nZ")
                    (("2" (skosimp)
                      (("2" (replaces -2)
                        (("2" (split)
                          (("1" (inst 1 "(m!1 / gcd(n!1, m!1)) * k!1")
                            (("1" (assert) nil nil)
                             ("2" (rewrite "closed_times")
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma "div_by_gcd_prep")
                                  (("2"
                                    (rewrite "gcd_sym")
                                    (("2"
                                      (inst -1 "m!1" "n!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -1)
                            (("2" (lemma "times_div1")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1 1 rl)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "div_by_gcd_prep")
                                      (("2"
                                        (inst -1 "n!1" "m!1")
                                        (("2"
                                          (prop)
                                          (("2"
                                            (inst
                                             1
                                             "k!1   * (n!1 / gcd(n!1, m!1) )")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (name-replace
                                                 "ndgcd"
                                                 "n!1 / gcd(n!1, m!1)")
                                                (("2"
                                                  (typepred "k!1")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (rewrite
                                                       "closed_times")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "gcd_sym")
            (("2" (lemma "div_by_gcd_prep")
              (("2" (case "lcm_1 = n!1 * ( m!1 / gcd(m!1, n!1))")
                (("1" (hide -3)
                  (("1" (replaces -1)
                    (("1" (inst -1 "m!1" "n!1")
                      (("1" (prop)
                        (("1" (hide -2 -3)
                          (("1" (rewrite "closed_times") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lcm_1 skolem-const-decl "posrat" ring_zn nil)
    (member const-decl "bool" sets nil)
    (lcm_div formula-decl nil prop_primes_extra nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (closed_times formula-decl nil integers nil)
    (div_by_gcd_prep formula-decl nil gcd_fractions ints)
    (posint nonempty-type-eq-decl nil integers nil)
    (gcd_sym formula-decl nil gcd ints)
    (k!1 skolem-const-decl "int" ring_zn nil)
    (n!1 skolem-const-decl "posnat" ring_zn nil)
    (m!1 skolem-const-decl "posnat" ring_zn nil)
    (times_div1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (intersection const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd
         ints)
    (divides const-decl "bool" divides nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (>= const-decl "bool" reals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   nil)
  (yes "tt" 3797006928
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (skoletin* 1)
        (("" (decompose-equality 1)
          (("1" (iff)
            (("1" (prop)
              (("1" (expand "intersection")
                (("1" (expand "member")
                  (("1" (flatten)
                    (("1" (expand "nZ")
                      (("1" (skosimp*)
                        (("1" (assert) (("1" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "intersection")
                (("2" (expand "member")
                  (("2" (expand "nZ")
                    (("2" (skosimp)
                      (("2" (replaces -2)
                        (("2" (split)
                          (("1" (inst 1 "(m!1 / gcd(n!1, m!1)) * k!1")
                            (("1" (assert) nil nil)
                             ("2" (rewrite "closed_times")
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma "div_by_gcd_prep")
                                  (("2"
                                    (rewrite "gcd_sym")
                                    (("2"
                                      (inst -1 "m!1" "n!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replaces -1)
                            (("2" (lemma "times_div1")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1 1 rl)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "div_by_gcd_prep")
                                      (("2"
                                        (inst -1 "n!1" "m!1")
                                        (("2"
                                          (prop)
                                          (("2"
                                            (inst
                                             1
                                             "k!1   * (n!1 / gcd(n!1, m!1) )")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (name-replace
                                                 "ndgcd"
                                                 "n!1 / gcd(n!1, m!1)")
                                                (("2"
                                                  (typepred "k!1")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (rewrite
                                                       "closed_times")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "gcd_sym")
            (("2" (lemma "div_by_gcd_prep")
              (("2" (case "lcm_1 = n!1 * ( m!1 / gcd(m!1, n!1))")
                (("1" (hide -3)
                  (("1" (replaces -1)
                    (("1" (inst -1 "m!1" "n!1")
                      (("1" (prop)
                        (("1" (hide -2 -3)
                          (("1" (rewrite "closed_times") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (nZ_mZ_intersection-1 nil 3797006778
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skosimp)
      (("" (skoletin* 1)
        (("" (decompose-equality 1)
          (("1" (iff)
            (("1" (prop)
              (("1" (expand "intersection")
                (("1" (expand "member")
                  (("1" (flatten)
                    (("1" (expand "nZ")
                      (("1" (skosimp*)
                        (("1" (lemma "lcm_div")
                          (("1"
                            (inst -1 "n!1" "m!1" "x!1" "gcd(n!1, m!1)")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "divides")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (replace -4 -1 rl)
                                      (("1"
                                        (inst 1 "x!2")
                                        (("1" (assert) nil)))))))))
                                 ("2"
                                  (hide (-3 2))
                                  (("2"
                                    (expand "divides")
                                    (("2"
                                      (inst 1 "k!1")
                                      (("2" (assert) nil)))))))
                                 ("3"
                                  (hide (-3 2))
                                  (("3"
                                    (expand "divides")
                                    (("3"
                                      (inst 1 "k!2")
                                      (("3"
                                        (assert)
                                        nil)))))))))))))))))))))))))
               ("2" (expand "intersection")
                (("2" (expand "member")
                  (("2" (expand "nZ")
                    (("2" (skosimp)
                      (("2" (replaces -2)
                        (("2" (split)
                          (("1" (inst 1 "(m!1 / gcd(n!1, m!1)) * k!1")
                            (("1" (assert) nil)
                             ("2" (rewrite "closed_times")
                              (("2"
                                (hide 2)
                                (("2"
                                  (lemma "div_by_gcd_prep")
                                  (("2"
                                    (rewrite "gcd_sym")
                                    (("2"
                                      (inst -1 "m!1" "n!1")
                                      (("2" (assert) nil)))))))))))))
                           ("2" (replaces -1)
                            (("2" (lemma "times_div1")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1 1 rl)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "div_by_gcd_prep")
                                      (("2"
                                        (inst -1 "n!1" "m!1")
                                        (("2"
                                          (prop)
                                          (("2"
                                            (inst
                                             1
                                             "k!1   * (n!1 / gcd(n!1, m!1) )")
                                            (("1" (assert) nil)
                                             ("2"
                                              (hide -2 -3)
                                              (("2"
                                                (name-replace
                                                 "ndgcd"
                                                 "n!1 / gcd(n!1, m!1)")
                                                (("2"
                                                  (typepred "k!1")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (rewrite
                                                       "closed_times")
                                                      nil)))))))))))))))))))))))))))))))))))))))))))
           ("2" (rewrite "gcd_sym")
            (("2" (lemma "div_by_gcd_prep")
              (("2" (case "lcm_1 = n!1 * ( m!1 / gcd(m!1, n!1))")
                (("1" (hide -3)
                  (("1" (replaces -1)
                    (("1" (inst -1 "m!1" "n!1")
                      (("1" (prop)
                        (("1" (hide -2 -3)
                          (("1" (rewrite "closed_times") nil)))))))))))
                 ("2" (assert) nil))))))))))))))
    nil)
   nil nil))
 (nZ_mZ_rel_prime_intersection 0
  (nZ_mZ_rel_prime_intersection-1 nil 3797007317
   ("" (skosimp)
    (("" (expand "rel_prime")
      (("" (lemma "nZ_mZ_intersection")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((rel_prime const-decl "bool" gcd ints)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nZ_mZ_intersection formula-decl nil ring_zn nil))
   nil))
 (Z2_charac 0
  (Z2_charac-1 nil 3797765637
   (""
    (stop-rewrite "right_identity" "left_identity" "one_left"
     "one_right" "zero_plus" "plus_zero")
    (("" (decompose-equality)
      (("" (iff)
        (("" (prop)
          (("1" (expand "Z")
            (("1" (expand "/")
              (("1" (rewrite lcoset_iff_coset :dir rl)
                (("1" (expand "left_coset?")
                  (("1" (skosimp)
                    (("1" (lemma odd_or_even_int)
                      (("1" (inst -1 "a!1")
                        (("1" (split)
                          (("1" (expand "odd?")
                            (("1" (skosimp)
                              (("1"
                                (replaces -1 -2)
                                (("1"
                                  (lemma equal_cosets_div)
                                  (("1"
                                    (inst -1 "1" "1 + 2 * j!1" "2")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -3 -2 rl)
                                        (("1"
                                          (hide (-1 -3 1))
                                          (("1"
                                            (case
                                             "divides(2,
                                                          1 + 2 * j!1 +
                                                           inv
                                                               [int,
                                                                restrict[[numfield, numfield], [int, int], numfield]
                                                                    (+),
                                                                0]
                                                               (1))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (case
                                                 "1 + 2 * j!1 +
                                                      inv
                                                          [int,
                                                           restrict[[numfield, numfield], [int, int], numfield]
                                                               (+),
                                                           0]
                                                          (1) = 2 * j!1")
                                                (("1"
                                                  (replaces -1 1)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (inst 1 "j!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "even?")
                            (("2" (skosimp)
                              (("2"
                                (replaces -1 -2)
                                (("2"
                                  (lemma equal_cosets_div)
                                  (("2"
                                    (inst -1 "0" "2 * j!1" "2")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (replace -3 -2 rl)
                                        (("2"
                                          (hide-all-but (-2 1))
                                          (("2"
                                            (case
                                             "divides(2,
                                               2 * j!1 +
                                                inv
                                                    [int,
                                                     restrict[[numfield, numfield], [int, int], numfield]
                                                         (+),
                                                     0]
                                                    (0))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (case
                                                 "2 * j!1 +
                                                      inv
                                                          [int,
                                                           restrict[[numfield, numfield], [int, int], numfield]
                                                               (+),
                                                           0]
                                                          (0) = 2 * j!1")
                                                (("1"
                                                  (replaces -1 1)
                                                  (("1"
                                                    (expand "divides")
                                                    (("1"
                                                      (inst 1 "j!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "Z")
            (("2" (expand "/")
              (("2" (rewrite lcoset_iff_coset :dir rl)
                (("2" (expand "left_coset?")
                  (("2" (inst 1 "0")
                    (("2" (expand "Z")
                      (("2" (expand "fullset") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Z")
            (("3" (expand "/")
              (("3" (rewrite lcoset_iff_coset :dir rl)
                (("3" (expand "left_coset?")
                  (("3" (inst 1 "1")
                    (("3" (expand "Z")
                      (("3" (expand "fullset") (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "set[T]" cosets_def nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/ const-decl "setof[set[T]]" cosets_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (odd_or_even_int formula-decl nil naturalnumbers nil)
    (equal_cosets_div formula-decl nil ring_zn nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (divides const-decl "bool" divides nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (negate_zero formula-decl nil ring nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even? const-decl "bool" integers nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (ring? const-decl "bool" ring_def nil)
    (ring nonempty-type-eq-decl nil ring nil)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fullset const-decl "set" sets nil))
   nil)))

