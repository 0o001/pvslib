(ring_nz_closed_aux
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3797864062
   ("" (rewrite "fullset_is_ring") nil nil)
   ((fullset_is_ring formula-decl nil ring_nz_closed_aux nil)) nil
   (IMP_ring_basic_properties assuming
    "ring_basic_properties[ring_nz_closed_aux.T, ring_nz_closed_aux.+, ring_nz_closed_aux.*, ring_nz_closed_aux.zero].ring_basic_properties"
    "fullset_is_ring: ASSUMPTION ring_def[ring_basic_properties.T, ring_basic_properties.+, ring_basic_properties.*, ring_basic_properties.zero].ring?(sets[ring_basic_properties.T].fullset)")))
 (nz_times_is_zero 0
  (nz_times_is_zero-1 nil 3777132428
   ("" (skosimp)
    (("" (prop)
      (("1" (expand "nz_closed?")
        (("1" (expand "star_closed?")
          (("1" (inst -2 "x!1" "y!1")
            (("1" (expand "member")
              (("1" (expand "remove") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (expand "remove")
              (("2" (prop)
                (("1" (assert) nil nil)
                 ("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("3" (expand "remove")
              (("3" (prop)
                (("1" (assert) nil nil)
                 ("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-1 1))
        (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)
       ("3" (hide-all-but (-1 1))
        (("3" (replaces -1) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((star_closed? const-decl "bool" groupoid_def algebra)
    (member const-decl "bool" sets nil)
    (y!1 skolem-const-decl "T" ring_nz_closed_aux nil)
    (T formal-nonempty-type-decl nil ring_nz_closed_aux nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (zero formal-const-decl "T" ring_nz_closed_aux nil)
    (+ formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (* formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" ring_nz_closed_aux
     nil)
    (x!1 skolem-const-decl "T" ring_nz_closed_aux nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def algebra)
    (TRUE const-decl "bool" booleans nil)
    (zero_times formula-decl nil ring algebra)
    (times_zero formula-decl nil ring algebra))
   shostak))
 (nzd_R_cancel_left 0
  (nzd_R_cancel_left-1 nil 3780319853
   ("" (skosimp)
    (("" (skosimp)
      (("" (split 1)
        (("1" (prop)
          (("1" (lemma cancel_right_plus)
            (("1" (inst -1 "x!1 * y!1" "x!1 * z!1" "inv(x!1 * z!1)")
              (("1" (assert)
                (("1" (lemma times_negative)
                  (("1" (inst -1 "x!1" "z!1")
                    (("1" (replace -1 -2 rl)
                      (("1" (hide -1)
                        (("1" (lemma right_distributive)
                          (("1" (inst -1 "x!1" "y!1" "inv(z!1)")
                            (("1" (replace -1 -2 rl)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma nz_times_is_zero)
                                  (("1"
                                    (inst
                                     -1
                                     "R!1"
                                     "x!1"
                                     "y!1 + inv(z!1)")
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (lemma inv_is_member_R)
                                        (("1"
                                          (inst -1 "R!1" "z!1")
                                          (("1"
                                            (typepred "y!1" "z!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (lemma
                                                 R_sum_star_closed)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "y!1"
                                                   "inv(z!1)")
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (-6 2))
                                                        (("1"
                                                          (lemma
                                                           cancel_right_plus)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "y!1 + inv(z!1)"
                                                             "zero"
                                                             "z!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   plus_associative)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "y!1"
                                                                     "inv(z!1)"
                                                                     "z!1")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (prop)
          (("1" (lemma zero_times)
            (("1" (copy -1)
              (("1" (inst -1 "z!1")
                (("1" (inst -2 "y!1")
                  (("1" (replace -3 -1 rl)
                    (("1" (replace -3 -2 rl)
                      (("1" (hide -3) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "y!1 = z!1 IMPLIES x!1 * y!1 = x!1 * z!1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_times formula-decl nil ring algebra)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group algebra)
    (times_negative formula-decl nil ring algebra)
    (right_distributive formula-decl nil ring algebra)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (zero_plus formula-decl nil ring algebra)
    (plus_associative formula-decl nil ring algebra)
    (TRUE const-decl "bool" booleans nil)
    (plus_zero formula-decl nil ring algebra)
    (negate_is_left_inv formula-decl nil ring algebra)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (negate_is_right_inv formula-decl nil ring algebra)
    (cancel_right_plus formula-decl nil ring algebra)
    (T formal-nonempty-type-decl nil ring_nz_closed_aux nil)
    (+ formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (* formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (zero formal-const-decl "T" ring_nz_closed_aux nil))
   shostak))
 (subring_nz_closed 0
  (subring_nz_closed-1 nil 3780435423
   ("" (skosimp)
    (("" (expand "nz_closed?")
      (("" (expand "star_closed?")
        (("" (skosimp)
          (("" (inst -1 "x!1" "y!1")
            (("1" (assert)
              (("1" (expand "remove")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (typepred "x!1" "y!1")
                        (("1" (expand "remove")
                          (("1" (flatten)
                            (("1" (expand "member")
                              (("1"
                                (hide-all-but (-1 -2 -4 4))
                                (("1"
                                  (rewrite "subring_equiv")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -5 "x!1" "y!1")
                                      (("1" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "subring?")
              (("2" (expand "remove")
                (("2" (hide 2)
                  (("2" (typepred "y!1")
                    (("2" (expand "remove")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "subset?")
                            (("2" (inst -2 "y!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "remove")
              (("3" (hide 2)
                (("3" (typepred "x!1")
                  (("3" (expand "remove")
                    (("3" (flatten)
                      (("3" (assert)
                        (("3" (expand "subring?")
                          (("3" (expand "subset?")
                            (("3" (inst -2 "x!1")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_closed? const-decl "bool" ring_nz_closed_def algebra)
    (subring? const-decl "bool" ring_def algebra)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subring_equiv formula-decl nil ring_basic_properties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (y!1 skolem-const-decl "(remove(zero, S!1))" ring_nz_closed_aux
     nil)
    (T formal-nonempty-type-decl nil ring_nz_closed_aux nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (zero formal-const-decl "T" ring_nz_closed_aux nil)
    (+ formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (* formal-const-decl "[T, T -> T]" ring_nz_closed_aux nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (R!1 skolem-const-decl "ring[T, +, *, zero]" ring_nz_closed_aux
     nil)
    (S!1 skolem-const-decl "ring[T, +, *, zero]" ring_nz_closed_aux
     nil)
    (x!1 skolem-const-decl "(remove(zero, S!1))" ring_nz_closed_aux
     nil)
    (star_closed? const-decl "bool" groupoid_def algebra))
   shostak)))

