(ring_with_one_ideal
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3801244485
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil ring_with_one_ideal
     nil))
   nil
   (IMP_ring_with_one assuming
    "algebra@ring_with_one[ring_with_one_ideal.T, ring_with_one_ideal.+, ring_with_one_ideal.*, ring_with_one_ideal.zero, ring_with_one_ideal.one].ring_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_with_one.T, ring_with_one.+, ring_with_one.*, ring_with_one.zero, ring_with_one.one].ring_with_one?(sets[ring_with_one.T].fullset)")))
 (ideal_w_one_is_R 0
  (ideal_w_one_is_R-1 nil 3801244241
   ("" (skeep)
    (("" (prop)
      (("1" (typepred "R")
        (("1" (expand "ring_with_one?")
          (("1" (expand "monoid?")
            (("1" (expand "monad?")
              (("1" (expand "member") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "I!1")
        (("2" (decompose-equality)
          (("2" (iff)
            (("2" (expand "ideal?")
              (("2" (expand "left_ideal?")
                (("2" (expand "subring?")
                  (("2" (flatten)
                    (("2" (prop)
                      (("1" (hide-all-but (-1 -2 1))
                        (("1" (expand "subset?")
                          (("1" (inst -2 "x!1")
                            (("1" (expand "member")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "left_swallow?")
                        (("2" (hide-all-but (-1 -3 -4 -6 1))
                          (("2" (inst -3 "x!1" "one")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((monad? const-decl "bool" monad_def algebra)
    (member const-decl "bool" sets nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_ideal nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_ideal nil)
    (zero formal-const-decl "T" ring_with_one_ideal nil)
    (one formal-const-decl "T" ring_with_one_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (subring? const-decl "bool" ring_def algebra)
    (subset? const-decl "bool" sets nil)
    (right_identity formula-decl nil monad algebra) nil nil
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil))
   shostak)))

