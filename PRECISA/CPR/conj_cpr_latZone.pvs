% This file is automatically generated by PRECISA %
% 2016-10-12 19:49:55.098019 UTC

conj_cpr_latZone: THEORY
BEGIN
IMPORTING cpr_latZone

%|- *_TCC* : PROOF
%|- (try (then (grind-reals) (fail)) (skip) (subtype-tcc))
%|- QED

x_0 : LEMMA
FORALL(e_Y0, e_Y1: nonneg_real, r_Y0, r_Y1: real, Y0, Y1: unb_single):
abs(StoR(Y0) - r_Y0)<=e_Y0 AND abs(StoR(Y1) - r_Y1)<=e_Y1
AND (((131072 + 0) < 0) OR ((131072 - 0) > 0))
AND TRUE
IMPLIES
abs(StoR(x(Y0, Y1)) - (((59 * r_Y0) - (60 * r_Y1)) / 131072))<=aebound_div(((59 * r_Y0) - (60 * r_Y1)), aebound_sub((59 * r_Y0), aebound_mul(59, 0, r_Y0, e_Y0), (60 * r_Y1), aebound_mul(60, 0, r_Y1, e_Y1)), 131072, 0)

%|- x_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "x" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Sdiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_sub((59 * r_Y0), aebound_mul(59, 0, r_Y0, e_Y0), (60 * r_Y1), aebound_mul(60, 0, r_Y1, e_Y1))"
%|-    "0"
%|-    "((59 * r_Y0) - (60 * r_Y1))"
%|-    "131072"
%|-    "Fsub(Fmul(RtoS(59), Y0), Fmul(RtoS(60), Y1))"
%|-    "RtoS(131072)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul(59, 0, r_Y0, e_Y0)"
%|-    "aebound_mul(60, 0, r_Y1, e_Y1)"
%|-    "(59 * r_Y0)"
%|-    "(60 * r_Y1)"
%|-    "Fmul(RtoS(59), Y0)"
%|-    "Fmul(RtoS(60), Y1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "e_Y0"
%|-    "59"
%|-    "r_Y0"
%|-    "RtoS(59)"
%|-    "Y0"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas +)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "e_Y1"
%|-    "60"
%|-    "r_Y1"
%|-    "RtoS(60)"
%|-    "Y1"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas +)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED

j_0 : LEMMA
FORALL(e_Y0, e_Y1: nonneg_real, r_Y0, r_Y1: real, Y0, Y1: unb_single):
abs(StoR(Y0) - r_Y0)<=e_Y0 AND abs(StoR(Y1) - r_Y1)<=e_Y1
AND (((131072 + 0) < 0) OR ((131072 - 0) > 0))
AND TRUE
IMPLIES
abs(StoR(j(Y0, Y1)) - floor(((((59 * r_Y0) - (60 * r_Y1)) / 131072) + 0.5)))<=aebound_flr(((((59 * r_Y0) - (60 * r_Y1)) / 131072) + 0.5), aebound_add((((59 * r_Y0) - (60 * r_Y1)) / 131072), aebound_div(((59 * r_Y0) - (60 * r_Y1)), aebound_sub((59 * r_Y0), aebound_mul(59, 0, r_Y0, e_Y0), (60 * r_Y1), aebound_mul(60, 0, r_Y1, e_Y1)), 131072, 0), 0.5, 0))

%|- j_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "j" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Sfloor_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_add((((59 * r_Y0) - (60 * r_Y1)) / 131072), aebound_div(((59 * r_Y0) - (60 * r_Y1)), aebound_sub((59 * r_Y0), aebound_mul(59, 0, r_Y0, e_Y0), (60 * r_Y1), aebound_mul(60, 0, r_Y1, e_Y1)), 131072, 0), 0.5, 0)"
%|-    "((((59 * r_Y0) - (60 * r_Y1)) / 131072) + 0.5)"
%|-    "Fadd(x(Y0, Y1), RtoS(0.5))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Sadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_div(((59 * r_Y0) - (60 * r_Y1)), aebound_sub((59 * r_Y0), aebound_mul(59, 0, r_Y0, e_Y0), (60 * r_Y1), aebound_mul(60, 0, r_Y1, e_Y1)), 131072, 0)"
%|-    "0"
%|-    "(((59 * r_Y0) - (60 * r_Y1)) / 131072)"
%|-    "0.5"
%|-    "x(Y0, Y1)"
%|-    "RtoS(0.5)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("x_0")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Y0"
%|-    "e_Y1"
%|-    "r_Y0"
%|-    "r_Y1"
%|-    "Y0"
%|-    "Y1"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END conj_cpr_latZone