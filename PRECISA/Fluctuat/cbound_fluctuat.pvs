cbound_fluctuat: THEORY
BEGIN

  IMPORTING PRECISA@precIOsa

  r_X: real

  y_0_aeexpr : string = "aebound_mul((r_X - 1), aebound_sub(r_X, 0, 1, 0), ((r_X - 1) * ((r_X - 1) * (r_X - 1))), aebound_mul((r_X - 1), aebound_sub(r_X, 0, 1, 0), ((r_X - 1) * (r_X - 1)), aebound_mul((r_X - 1), aebound_sub(r_X, 0, 1, 0), (r_X - 1), aebound_sub(r_X, 0, 1, 0))))"

  z_0_aeexpr : string = "aebound_sub((((r_X * r_X) * r_X) * r_X), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, 0, r_X, 0), r_X, 0), r_X, 0), ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1))), aebound_add((((r_X * r_X) * r_X) * 4), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, 0, r_X, 0), r_X, 0), 4, 0), (((r_X * r_X) * 6) - ((r_X * 4) + 1)), aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, 0, r_X, 0), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, 0, 4, 0), 1, 0))))"

  t_0_aeexpr : string = "aebound_sub(((((r_X * r_X) * r_X) * r_X) - ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1)))), aebound_sub((((r_X * r_X) * r_X) * r_X), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, 0, r_X, 0), r_X, 0), r_X, 0), ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1))), aebound_add((((r_X * r_X) * r_X) * 4), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, 0, r_X, 0), r_X, 0), 4, 0), (((r_X * r_X) * 6) - ((r_X * 4) + 1)), aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, 0, r_X, 0), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, 0, 4, 0), 1, 0)))), ((r_X - 1) * ((r_X - 1) * ((r_X - 1) * (r_X - 1)))), aebound_mul((r_X - 1), aebound_sub(r_X, 0, 1, 0), ((r_X - 1) * ((r_X - 1) * (r_X - 1))), aebound_mul((r_X - 1), aebound_sub(r_X, 0, 1, 0), ((r_X - 1) * (r_X - 1)), aebound_mul((r_X - 1), aebound_sub(r_X, 0, 1, 0), (r_X - 1), aebound_sub(r_X, 0, 1, 0)))))"

  ranges:       VAR list[[string,ProperInterval]]
  maxdepth:     VAR nat
  prec:         VAR posreal
  display_prec: VAR nat

  y_0(ranges,maxdepth,prec): void =
    numerical_str(y_0_aeexpr,ranges,maxdepth,prec);
  z_0(ranges,maxdepth,prec): void =
    numerical_str(z_0_aeexpr,ranges,maxdepth,prec);
  t_0(ranges,maxdepth,prec): void =
    numerical_str(t_0_aeexpr,ranges,maxdepth,prec);

  main(ranges,maxdepth,prec,display_prec):void =
    set_precision(display_prec) &
    printf("y_0 = ") & y_0(ranges,maxdepth,prec) &
    printf("z_0 = ") & z_0(ranges,maxdepth,prec) &
    printf("t_0 = ") & t_0(ranges,maxdepth,prec)

%% USAGE
%% <PVSio> (load"pvs-strategies")!
%% <PVSio> LET var_ranges = (: ("r_X",[|0,1|]) :),maxdepth=10,prec=0.00000000001 IN main(var_ranges,maxdepth,prec,30);
%% y_0 = lb: 0 & ub: 0.000000417232545402158542995705 & md: 0 & sp: 0  
%% z_0 = lb: 0.0000001490116119384765625 & ub: 0.00000250339508056640625 & md: 10 & sp: 12  
%% t_0 = lb: 0.00000035719170275901567984986 & ub: 0.000002741814057571931268843215 & md: 10 & sp: 77  

END cbound_fluctuat
