% This file is automatically generated by PRECISA %
% 2016-10-12 19:45:21.743315 UTC

conj_fluctuat: THEORY
BEGIN
IMPORTING fluctuat

%|- *_TCC* : PROOF
%|- (try (then (grind-reals) (fail)) (skip) (subtype-tcc))
%|- QED

y_0 : LEMMA
FORALL(e_X: nonneg_real, r_X: real, X: unb_single):
abs(StoR(X) - r_X)<=e_X
AND TRUE
AND TRUE
IMPLIES
abs(StoR(y(X)) - ((r_X - 1) * ((r_X - 1) * ((r_X - 1) * (r_X - 1)))))<=aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * ((r_X - 1) * (r_X - 1))), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * (r_X - 1)), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), (r_X - 1), aebound_sub(r_X, e_X, 1, 0))))

%|- y_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "y" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_sub(r_X, e_X, 1, 0)"
%|-    "aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * (r_X - 1)), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), (r_X - 1), aebound_sub(r_X, e_X, 1, 0)))"
%|-    "(r_X - 1)"
%|-    "((r_X - 1) * ((r_X - 1) * (r_X - 1)))"
%|-    "Fsub(X, RtoS(1))"
%|-    "Fmul(Fsub(X, RtoS(1)), Fmul(Fsub(X, RtoS(1)), Fsub(X, RtoS(1))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "0"
%|-    "r_X"
%|-    "1"
%|-    "X"
%|-    "RtoS(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_sub(r_X, e_X, 1, 0)"
%|-    "aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), (r_X - 1), aebound_sub(r_X, e_X, 1, 0))"
%|-    "(r_X - 1)"
%|-    "((r_X - 1) * (r_X - 1))"
%|-    "Fsub(X, RtoS(1))"
%|-    "Fmul(Fsub(X, RtoS(1)), Fsub(X, RtoS(1)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "0"
%|-    "r_X"
%|-    "1"
%|-    "X"
%|-    "RtoS(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_sub(r_X, e_X, 1, 0)"
%|-    "aebound_sub(r_X, e_X, 1, 0)"
%|-    "(r_X - 1)"
%|-    "(r_X - 1)"
%|-    "Fsub(X, RtoS(1))"
%|-    "Fsub(X, RtoS(1))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "0"
%|-    "r_X"
%|-    "1"
%|-    "X"
%|-    "RtoS(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "0"
%|-    "r_X"
%|-    "1"
%|-    "X"
%|-    "RtoS(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED

z_0 : LEMMA
FORALL(e_X: nonneg_real, r_X: real, X: unb_single):
abs(StoR(X) - r_X)<=e_X
AND TRUE
AND TRUE
IMPLIES
abs(StoR(z(X)) - ((((r_X * r_X) * r_X) * r_X) - ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1)))))<=aebound_sub((((r_X * r_X) * r_X) * r_X), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), r_X, e_X), ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1))), aebound_add((((r_X * r_X) * r_X) * 4), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), 4, 0), (((r_X * r_X) * 6) - ((r_X * 4) + 1)), aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0))))

%|- z_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "z" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), r_X, e_X)"
%|-    "aebound_add((((r_X * r_X) * r_X) * 4), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), 4, 0), (((r_X * r_X) * 6) - ((r_X * 4) + 1)), aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0)))"
%|-    "(((r_X * r_X) * r_X) * r_X)"
%|-    "((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1)))"
%|-    "Fmul(Fmul(Fmul(X, X), X), X)"
%|-    "Fadd(Fmul(Fmul(Fmul(X, X), X), RtoS(4)), Fsub(Fmul(Fmul(X, X), RtoS(6)), Fadd(Fmul(X, RtoS(4)), RtoS(1))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X)"
%|-    "e_X"
%|-    "((r_X * r_X) * r_X)"
%|-    "r_X"
%|-    "Fmul(Fmul(X, X), X)"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul(r_X, e_X, r_X, e_X)"
%|-    "e_X"
%|-    "(r_X * r_X)"
%|-    "r_X"
%|-    "Fmul(X, X)"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "e_X"
%|-    "r_X"
%|-    "r_X"
%|-    "X"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Sadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), 4, 0)"
%|-    "aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0))"
%|-    "(((r_X * r_X) * r_X) * 4)"
%|-    "(((r_X * r_X) * 6) - ((r_X * 4) + 1))"
%|-    "Fmul(Fmul(Fmul(X, X), X), RtoS(4))"
%|-    "Fsub(Fmul(Fmul(X, X), RtoS(6)), Fadd(Fmul(X, RtoS(4)), RtoS(1)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X)"
%|-    "0"
%|-    "((r_X * r_X) * r_X)"
%|-    "4"
%|-    "Fmul(Fmul(X, X), X)"
%|-    "RtoS(4)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul(r_X, e_X, r_X, e_X)"
%|-    "e_X"
%|-    "(r_X * r_X)"
%|-    "r_X"
%|-    "Fmul(X, X)"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "e_X"
%|-    "r_X"
%|-    "r_X"
%|-    "X"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0)"
%|-    "aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0)"
%|-    "((r_X * r_X) * 6)"
%|-    "((r_X * 4) + 1)"
%|-    "Fmul(Fmul(X, X), RtoS(6))"
%|-    "Fadd(Fmul(X, RtoS(4)), RtoS(1))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul(r_X, e_X, r_X, e_X)"
%|-    "0"
%|-    "(r_X * r_X)"
%|-    "6"
%|-    "Fmul(X, X)"
%|-    "RtoS(6)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "e_X"
%|-    "r_X"
%|-    "r_X"
%|-    "X"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Sadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_mul(r_X, e_X, 4, 0)"
%|-    "0"
%|-    "(r_X * 4)"
%|-    "1"
%|-    "Fmul(X, RtoS(4))"
%|-    "RtoS(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "0"
%|-    "r_X"
%|-    "4"
%|-    "X"
%|-    "RtoS(4)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED

t_0 : LEMMA
FORALL(e_X: nonneg_real, r_X: real, X: unb_single):
abs(StoR(X) - r_X)<=e_X
AND TRUE
AND TRUE
IMPLIES
abs(StoR(t(X)) - (((((r_X * r_X) * r_X) * r_X) - ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1)))) - ((r_X - 1) * ((r_X - 1) * ((r_X - 1) * (r_X - 1))))))<=aebound_sub(((((r_X * r_X) * r_X) * r_X) - ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1)))), aebound_sub((((r_X * r_X) * r_X) * r_X), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), r_X, e_X), ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1))), aebound_add((((r_X * r_X) * r_X) * 4), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), 4, 0), (((r_X * r_X) * 6) - ((r_X * 4) + 1)), aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0)))), ((r_X - 1) * ((r_X - 1) * ((r_X - 1) * (r_X - 1)))), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * ((r_X - 1) * (r_X - 1))), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * (r_X - 1)), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), (r_X - 1), aebound_sub(r_X, e_X, 1, 0)))))

%|- t_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "t" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebound_sub((((r_X * r_X) * r_X) * r_X), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), r_X, e_X), ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1))), aebound_add((((r_X * r_X) * r_X) * 4), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), 4, 0), (((r_X * r_X) * 6) - ((r_X * 4) + 1)), aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0))))"
%|-    "aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * ((r_X - 1) * (r_X - 1))), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * (r_X - 1)), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), (r_X - 1), aebound_sub(r_X, e_X, 1, 0))))"
%|-    "((((r_X * r_X) * r_X) * r_X) - ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1))))"
%|-    "((r_X - 1) * ((r_X - 1) * ((r_X - 1) * (r_X - 1))))"
%|-    "z(X)"
%|-    "y(X)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("z_0")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "r_X"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (branch-lemmas ("y_0")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "r_X"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END conj_fluctuat