(conj_fluctuat
 (y_0 0
  (y_0-1 nil 3685295274
   (""
    (then (skeep) (expand "y" :assert? none) (try-simp-ite)
     (then (lemma "Smul_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label "aebound_sub(r_X, e_X, 1, 0)"
            "aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * (r_X - 1)), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), (r_X - 1), aebound_sub(r_X, e_X, 1, 0)))"
            "(r_X - 1)" "((r_X - 1) * ((r_X - 1) * (r_X - 1)))"
            "Fsub(X, RtoS(1))"
            "Fmul(Fsub(X, RtoS(1)), Fmul(Fsub(X, RtoS(1)), Fsub(X, RtoS(1))))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Ssub_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label "e_X" "0" "r_X" "1" "X" "RtoS(1)"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail)) (propax)
                     (eval-formulas +) (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Smul_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label "aebound_sub(r_X, e_X, 1, 0)"
                    "aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), (r_X - 1), aebound_sub(r_X, e_X, 1, 0))"
                    "(r_X - 1)" "((r_X - 1) * (r_X - 1))"
                    "Fsub(X, RtoS(1))"
                    "Fmul(Fsub(X, RtoS(1)), Fsub(X, RtoS(1)))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Ssub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "e_X" "0" "r_X" "1" "X"
                            "RtoS(1)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail)) (propax)
                             (eval-formulas +) (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Smul_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebound_sub(r_X, e_X, 1, 0)"
                            "aebound_sub(r_X, e_X, 1, 0)" "(r_X - 1)"
                            "(r_X - 1)" "Fsub(X, RtoS(1))"
                            "Fsub(X, RtoS(1))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Ssub_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_X"
                                    "0"
                                    "r_X"
                                    "1"
                                    "X"
                                    "RtoS(1)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (eval-formulas +)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (then (lemma "Ssub_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_X"
                                    "0"
                                    "r_X"
                                    "1"
                                    "X"
                                    "RtoS(1)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (eval-formulas +)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Smul_aerr formula-decl nil aerr754sp_mul "float/")
    (Fmul const-decl
     "{f: unb_single | closest_single?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754sp_mul "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (Fsub const-decl
     "{f: unb_single | closest_single?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754sp_sub "float/")
    (FtoR const-decl "real" float "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (aebound_mul const-decl "nonneg_real" aerr754sp_mul "float/")
    (aebound_sub const-decl "nonneg_real" aerr754sp_sub "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Ssub_aerr formula-decl nil aerr754sp_sub "float/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (y const-decl "unb_single" fluctuat nil))
   shostak))
 (z_0 0
  (z_0-1 nil 3685295274
   (""
    (then (skeep) (expand "z" :assert? none) (try-simp-ite)
     (then (lemma "Ssub_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), r_X, e_X)"
            "aebound_add((((r_X * r_X) * r_X) * 4), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), 4, 0), (((r_X * r_X) * 6) - ((r_X * 4) + 1)), aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0)))"
            "(((r_X * r_X) * r_X) * r_X)"
            "((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1)))"
            "Fmul(Fmul(Fmul(X, X), X), X)"
            "Fadd(Fmul(Fmul(Fmul(X, X), X), RtoS(4)), Fsub(Fmul(Fmul(X, X), RtoS(6)), Fadd(Fmul(X, RtoS(4)), RtoS(1))))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Smul_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X)"
                    "e_X" "((r_X * r_X) * r_X)" "r_X"
                    "Fmul(Fmul(X, X), X)" "X"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Smul_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebound_mul(r_X, e_X, r_X, e_X)" "e_X"
                            "(r_X * r_X)" "r_X" "Fmul(X, X)" "X"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Smul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_X"
                                    "e_X"
                                    "r_X"
                                    "r_X"
                                    "X"
                                    "X"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (propax)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (propax) (assert-condition)))
                           (assert-condition))))))
                     (propax) (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Sadd_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), 4, 0)"
                    "aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0))"
                    "(((r_X * r_X) * r_X) * 4)"
                    "(((r_X * r_X) * 6) - ((r_X * 4) + 1))"
                    "Fmul(Fmul(Fmul(X, X), X), RtoS(4))"
                    "Fsub(Fmul(Fmul(X, X), RtoS(6)), Fadd(Fmul(X, RtoS(4)), RtoS(1)))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Smul_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X)"
                            "0" "((r_X * r_X) * r_X)" "4"
                            "Fmul(Fmul(X, X), X)" "RtoS(4)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Smul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "aebound_mul(r_X, e_X, r_X, e_X)"
                                    "e_X"
                                    "(r_X * r_X)"
                                    "r_X"
                                    "Fmul(X, X)"
                                    "X"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (then
                                      (lemma "Smul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X"
                                           "e_X"
                                           "r_X"
                                           "r_X"
                                           "X"
                                           "X"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (propax)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (eval-formulas +) (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Ssub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0)"
                            "aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0)"
                            "((r_X * r_X) * 6)" "((r_X * 4) + 1)"
                            "Fmul(Fmul(X, X), RtoS(6))"
                            "Fadd(Fmul(X, RtoS(4)), RtoS(1))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Smul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "aebound_mul(r_X, e_X, r_X, e_X)"
                                    "0"
                                    "(r_X * r_X)"
                                    "6"
                                    "Fmul(X, X)"
                                    "RtoS(6)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (then
                                      (lemma "Smul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X"
                                           "e_X"
                                           "r_X"
                                           "r_X"
                                           "X"
                                           "X"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (eval-formulas +)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (then (lemma "Sadd_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "aebound_mul(r_X, e_X, 4, 0)"
                                    "0"
                                    "(r_X * 4)"
                                    "1"
                                    "Fmul(X, RtoS(4))"
                                    "RtoS(1)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (then
                                      (lemma "Smul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X"
                                           "0"
                                           "r_X"
                                           "4"
                                           "X"
                                           "RtoS(4)"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (eval-formulas +)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (eval-formulas +)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Ssub_aerr formula-decl nil aerr754sp_sub "float/")
    (Fsub const-decl
     "{f: unb_single | closest_single?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754sp_sub "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (Fadd const-decl
     "{f: unb_single | closest_single?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754sp_add "float/")
    (Fmul const-decl
     "{f: unb_single | closest_single?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754sp_mul "float/")
    (FtoR const-decl "real" float "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aebound_sub const-decl "nonneg_real" aerr754sp_sub "float/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebound_add const-decl "nonneg_real" aerr754sp_add "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (aebound_mul const-decl "nonneg_real" aerr754sp_mul "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Sadd_aerr formula-decl nil aerr754sp_add "float/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Smul_aerr formula-decl nil aerr754sp_mul "float/")
    (z const-decl "unb_single" fluctuat nil))
   shostak))
 (t_0 0
  (t_0-1 nil 3685295274
   (""
    (then (skeep) (expand "t" :assert? none) (try-simp-ite)
     (then (lemma "Ssub_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebound_sub((((r_X * r_X) * r_X) * r_X), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), r_X, e_X), ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1))), aebound_add((((r_X * r_X) * r_X) * 4), aebound_mul(((r_X * r_X) * r_X), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), r_X, e_X), 4, 0), (((r_X * r_X) * 6) - ((r_X * 4) + 1)), aebound_sub(((r_X * r_X) * 6), aebound_mul((r_X * r_X), aebound_mul(r_X, e_X, r_X, e_X), 6, 0), ((r_X * 4) + 1), aebound_add((r_X * 4), aebound_mul(r_X, e_X, 4, 0), 1, 0))))"
            "aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * ((r_X - 1) * (r_X - 1))), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), ((r_X - 1) * (r_X - 1)), aebound_mul((r_X - 1), aebound_sub(r_X, e_X, 1, 0), (r_X - 1), aebound_sub(r_X, e_X, 1, 0))))"
            "((((r_X * r_X) * r_X) * r_X) - ((((r_X * r_X) * r_X) * 4) + (((r_X * r_X) * 6) - ((r_X * 4) + 1))))"
            "((r_X - 1) * ((r_X - 1) * ((r_X - 1) * (r_X - 1))))"
            "z(X)" "y(X)"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then
              (branch-lemmas ("z_0")
               (then
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch (with-tccs (inst new-label "e_X" "r_X" "X"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (assert-condition)))
                     (assert-condition))))))))
             (then
              (branch-lemmas ("y_0")
               (then
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch (with-tccs (inst new-label "e_X" "r_X" "X"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (assert-condition)))
                     (assert-condition))))))))
             (assert-condition)))
           (assert-condition)))))))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Ssub_aerr formula-decl nil aerr754sp_sub "float/")
    (y const-decl "unb_single" fluctuat nil)
    (z const-decl "unb_single" fluctuat nil)
    (unb_single type-eq-decl nil ieee754sp "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aebound_add const-decl "nonneg_real" aerr754sp_add "float/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebound_mul const-decl "nonneg_real" aerr754sp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (aebound_sub const-decl "nonneg_real" aerr754sp_sub "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (y_0 formula-decl nil conj_fluctuat nil)
    (z_0 formula-decl nil conj_fluctuat nil)
    (t const-decl "unb_single" fluctuat nil))
   shostak)))

