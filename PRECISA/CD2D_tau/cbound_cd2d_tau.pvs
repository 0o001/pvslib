cbound_cd2d_tau: THEORY
BEGIN

  IMPORTING PRECISA@precIOsa

  r_Sx, r_Sy, r_Vx, r_Vy: real

  tau_1_aeexpr: string = "aebound_neg(((r_Sx * r_Vx) + (r_Sy * r_Vy)), aebound_add((r_Sx * r_Vx), aebound_mul(r_Sx, 0, r_Vx, 0), (r_Sy * r_Vy), aebound_mul(r_Sy, 0, r_Vy, 0)))"
  tau_2_aeexpr: string = "aebound_neg(((r_Sx * r_Vx) + (r_Sy * r_Vy)), aebound_add((r_Sx * r_Vx), aebound_mul(r_Sx, 0, r_Vx, 0), (r_Sy * r_Vy), aebound_mul(r_Sy, 0, r_Vy, 0))) + abs((0 - -(((r_Sx * r_Vx) + (r_Sy * r_Vy)))))"
  tau_3_aeexpr : string = "abs((r_Sx * r_Vx) + (r_Sy * r_Vy))"
  tau_4_aeexpr : string = "aebound_mul(0.083, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebound_add((r_Vx * r_Vx), aebound_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebound_mul(r_Vy, 0, r_Vy, 0)))"
  tau_5_aeexpr : string = "aebound_mul(0.083, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebound_add((r_Vx * r_Vx), aebound_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebound_mul(r_Vy, 0, r_Vy, 0)))"
  tau_6_aeexpr : string = "aebound_mul(0.083, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebound_add((r_Vx * r_Vx), aebound_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebound_mul(r_Vy, 0, r_Vy, 0)))"
  tau_7_aeexpr : string = "aebound_mul(0.083, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebound_add((r_Vx * r_Vx), aebound_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebound_mul(r_Vy, 0, r_Vy, 0)))"
  tau_8_aeexpr : string = "(aebound_mul(0.083, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebound_add((r_Vx * r_Vx), aebound_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebound_mul(r_Vy, 0, r_Vy, 0))) + abs((0 - (0.083 * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"
  tau_9_aeexpr : string = "aebound_mul(0.083, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebound_add((r_Vx * r_Vx), aebound_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebound_mul(r_Vy, 0, r_Vy, 0))) + abs((-(((r_Sx * r_Vx) + (r_Sy * r_Vy))) - (0.083 * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))))"
  tau_10_aeexpr: string = "aebound_mul(0.083, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebound_add((r_Vx * r_Vx), aebound_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebound_mul(r_Vy, 0, r_Vy, 0))) + abs((0 - (0.083 * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))))"
  tau_11_aeexpr: string = "aebound_mul(0.083, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebound_add((r_Vx * r_Vx), aebound_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebound_mul(r_Vy, 0, r_Vy, 0))) + abs((-(((r_Sx * r_Vx) + (r_Sy * r_Vy))) - (0.083 * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))))"
  tau_12_aeexpr: string = "abs(((0.083 * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - 0))"
  tau_13_aeexpr: string = "aebound_neg(((r_Sx * r_Vx) + (r_Sy * r_Vy)), aebound_add((r_Sx * r_Vx), aebound_mul(r_Sx, 0, r_Vx, 0), (r_Sy * r_Vy), aebound_mul(r_Sy, 0, r_Vy, 0))) + abs(((0.083 * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sy * r_Vy)))))"
  tau_14_aeexpr: string = "(aebound_neg(((r_Sx * r_Vx) + (r_Sy * r_Vy)), aebound_add((r_Sx * r_Vx), aebound_mul(r_Sx, 0, r_Vx, 0), (r_Sy * r_Vy), aebound_mul(r_Sy, 0, r_Vy, 0))) + abs((0 - -(((r_Sx * r_Vx) + (r_Sy * r_Vy)))))) + abs(((0.083 * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - 0))"
  tau_15_aeexpr: string = "(0 + abs((-(((r_Sx * r_Vx) + (r_Sy * r_Vy))) - 0))) + abs(((0.083 * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sy * r_Vy)))))"

  tau_1(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_1_aeexpr,var_ranges,maxdepth,prec);
  tau_2(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_2_aeexpr,var_ranges,maxdepth,prec);
  tau_3(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_3_aeexpr,var_ranges,maxdepth,prec);
  tau_4(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_4_aeexpr,var_ranges,maxdepth,prec);
  tau_5(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_5_aeexpr,var_ranges,maxdepth,prec);
  tau_6(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_6_aeexpr,var_ranges,maxdepth,prec);
  tau_7(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_7_aeexpr,var_ranges,maxdepth,prec);
  tau_8(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_8_aeexpr,var_ranges,maxdepth,prec);
  tau_9(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_9_aeexpr,var_ranges,maxdepth,prec);
  tau_10(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_10_aeexpr,var_ranges,maxdepth,prec);
  tau_11(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_11_aeexpr,var_ranges,maxdepth,prec);
  tau_12(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_12_aeexpr,var_ranges,maxdepth,prec);
  tau_13(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_13_aeexpr,var_ranges,maxdepth,prec);
  tau_14(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_14_aeexpr,var_ranges,maxdepth,prec);
  tau_15(var_ranges: list[[string,ProperInterval]],maxdepth:nat,prec:posreal): void =
    numerical_str(tau_15_aeexpr,var_ranges,maxdepth,prec);

  stable_cases( var_ranges: list[[string,ProperInterval]],
  	     maxdepth:nat,
	     prec:posreal,
	     display_prec: nat):void =
    set_precision(display_prec) &
    printf("tau_0 = 0 ~%") &
    printf("tau_1 = ") & tau_1(var_ranges,maxdepth,prec) &
    printf("tau_4 = ") & tau_4(var_ranges,maxdepth,prec) &
    printf("tau_5 = ") & tau_5(var_ranges,maxdepth,prec) 

  all_cases( var_ranges: list[[string,ProperInterval]],
  	     maxdepth:nat,
	     prec:posreal,
	     display_prec: nat):void =
    set_precision(display_prec) &
    printf("tau_0 = 0 ~%") &
    printf("tau_1 = ") & tau_1(var_ranges,maxdepth,prec) &
    printf("tau_2 = ") & tau_2(var_ranges,maxdepth,prec) &
    printf("tau_3 = ") & tau_3(var_ranges,maxdepth,prec) &
    printf("tau_4 = ") & tau_4(var_ranges,maxdepth,prec) &
    printf("tau_5 = ") & tau_5(var_ranges,maxdepth,prec) &
    printf("tau_6 = ") & tau_6(var_ranges,maxdepth,prec) &
    printf("tau_7 = ") & tau_7(var_ranges,maxdepth,prec) &
    printf("tau_8 = ") & tau_8(var_ranges,maxdepth,prec) &
    printf("tau_9 = ") & tau_9(var_ranges,maxdepth,prec) &
    printf("tau_10 = ") & tau_10(var_ranges,maxdepth,prec) &
    printf("tau_11 = ") & tau_11(var_ranges,maxdepth,prec) &
    printf("tau_12 = ") & tau_12(var_ranges,maxdepth,prec) &
    printf("tau_13 = ") & tau_13(var_ranges,maxdepth,prec) &
    printf("tau_14 = ") & tau_14(var_ranges,maxdepth,prec) &
    printf("tau_15 = ") & tau_15(var_ranges,maxdepth,prec)


  main(maxdepth:nat,prec:posreal,display_prec: nat):void =
    all_cases((: ("r_Sx",[|-1,1|]), ("r_Sy",[|-1,1|]), ("r_Vx",[|-1,1|]), ("r_Vy",[|-1,1|])  :),
         maxdepth,prec,display_prec)

 % USAGE EXAMPLE: LET var_ranges = (: ("r_Sx",[|-100,100|]), ("r_Sy",[|-100,100|]), ("r_Vx",[|-600,600|]), ("r_Vy",[|-600,600|])  :) IN test(var_ranges,5,0.0000001,30);

 % Runs:
 %
 % <PVSio> LET var_ranges = (: ("r_Sx",[|-1,1|]), ("r_Sy",[|-1,1|]), ("r_Vx",[|-1,1|]), ("r_Vy",[|-1,1|])  :),maxdepth=10,prec=0.00000000001 IN all_cases(var_ranges,maxdepth,prec,30);
 % tau_0 = 0 
 % tau_1 = lb: 0 & ub: 0.0000002384185791015625 & md: 10 & sp: 1023  
 % tau_2 = lb: 0 & ub: 2.0000002384185791015625 & md: 10 & sp: 1023  
 % tau_3 = lb: 0 & ub: 2 & md: 10 & sp: 1023  
 % tau_4 = lb: 0 & ub: 0.000000027239322662353515625 & md: 3 & sp: 3  
 % tau_5 = lb: 0 & ub: 0.000000027239322662353515625 & md: 3 & sp: 3  
 % tau_6 = lb: 0 & ub: 0.000000027239322662353515625 & md: 3 & sp: 3  
 % tau_7 = lb: 0 & ub: 0.000000027239322662353515625 & md: 3 & sp: 3  
 % tau_8 = lb: 0 & ub: 0.166000027239322662353515625 & md: 10 & sp: 59  
 % tau_9 = lb: 0 & ub: 2.166000027239322662353515625 & md: 10 & sp: 123  
 % tau_10 = lb: 0 & ub: 0.166000027239322662353515625 & md: 10 & sp: 59  
 % tau_11 = lb: 0 & ub: 2.166000027239322662353515625 & md: 10 & sp: 123  
 % tau_12 = lb: 0 & ub: 0.166 & md: 10 & sp: 59  
 % tau_13 = lb: 0 & ub: 2.1660002384185791015625 & md: 10 & sp: 123  
 % tau_14 = lb: 0 & ub: 2.1660002384185791015625 & md: 10 & sp: 163  
 % tau_15 = lb: 0 & ub: 4.166 & md: 10 & sp: 161  
 %
 % <PVSio> LET var_ranges = (: ("r_Sx",[|-100,100|]), ("r_Sy",[|-100,100|]), ("r_Vx",[|-600,600|]), ("r_Vy",[|-600,600|])  :),maxdepth=10,prec=0.00000000001 IN all_cases(var_ranges,maxdepth,prec,30);
 % tau_0 = 0 
 % tau_1 = lb: 0 & ub: 0.0078125 & md: 10 & sp: 947  
 % tau_2 = lb: 0 & ub: 120000.0078125 & md: 10 & sp: 1023  
 % tau_3 = lb: 0 & ub: 120000 & md: 10 & sp: 1023  
 % tau_4 = lb: 0 & ub: 0.007140625 & md: 10 & sp: 48  
 % tau_5 = lb: 0 & ub: 0.007140625 & md: 10 & sp: 48  
 % tau_6 = lb: 0 & ub: 0.007140625 & md: 10 & sp: 48  
 % tau_7 = lb: 0 & ub: 0.007140625 & md: 10 & sp: 48  
 % tau_8 = lb: 0 & ub: 59760.007140625 & md: 10 & sp: 59  
 % tau_9 = lb: 0 & ub: 179760.007140625 & md: 3 & sp: 3  
 % tau_10 = lb: 0 & ub: 59760.007140625 & md: 10 & sp: 59  
 % tau_11 = lb: 0 & ub: 179760.007140625 & md: 3 & sp: 3  
 % tau_12 = lb: 0 & ub: 59760 & md: 10 & sp: 59  
 % tau_13 = lb: 0 & ub: 179760.0078125 & md: 3 & sp: 3  
 % tau_14 = lb: 0 & ub: 179760.0078125 & md: 10 & sp: 47  
 % tau_15 = lb: 0 & ub: 299760 & md: 10 & sp: 154

END cbound_cd2d_tau
