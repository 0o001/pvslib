(ln_exp
 (conn_posreal 0
  (conn_posreal-1 nil 3477844344
   ("" (expand "connected?")
    (("" (skosimp*) (("" (assert) nil nil)) nil)) nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)) shostak))
 (one_over_t_cont 0
  (one_over_t_cont-1 nil 3253532189
   ("" (lemma "div_fun_continuous[posreal]")
    ((""
      (inst -1 "(LAMBDA (t: posreal): 1)" "(LAMBDA (t: posreal): t)")
      (("1" (expand "/") (("1" (propax) nil nil)) nil)
       ("2" (assert)
        (("2" (hide 2)
          (("2" (lemma "id_fun_continuous[posreal]")
            (("2" (expand "I") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (lemma "const_fun_continuous[posreal]")
          (("3" (inst?)
            (("3" (expand "const_fun") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_fun nonempty-type-eq-decl nil continuous_functions
     analysis)
    (nz_continuous_fun type-eq-decl nil continuous_functions analysis)
    (id_fun_continuous judgement-tcc nil continuous_functions analysis)
    (const_fun_continuous judgement-tcc nil continuous_functions
     analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (div_fun_continuous judgement-tcc nil continuous_functions
     analysis))
   nil))
 (ln_prep_TCC1 0
  (ln_prep_TCC1-1 nil 3253532189 ("" (assuming-tcc) nil nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)) nil
   (ln_prep assuming "analysis@integral_def[posreal].integral_def"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (ln_prep_TCC2 0
  (ln_prep_TCC2-1 nil 3253532189
   ("" (expand "not_one_element?")
    (("" (skosimp*) (("" (inst + "x!1+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)) nil
   (ln_prep assuming "analysis@integral_def[posreal].integral_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (ln_prep 0
  (ln_prep-2 "" 3790093621
   ("" (skosimp*)
    (("" (lemma "continuous_Integrable?[posreal]")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (skosimp*)
              (("" (lemma "one_over_t_cont")
                (("" (expand "continuous?" -1) (("" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ln_prep-1 nil 3253532189
   ("" (skosimp*)
    (("" (lemma "continuous_Integrable?[posreal]")
      (("1" (inst?)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (skosimp*)
              (("1" (lemma "one_over_t_cont")
                (("1" (expand "continuous?" -1) (("1" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (ground)
          (("2" (expand "connected?")
            (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_Integrable? formula-decl nil integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (Closed_interval type-eq-decl nil intervals_real reals))
   nil))
 (ln_TCC1 0
  (ln_TCC1-1 nil 3253532189
   ("" (skosimp*) (("" (rewrite "ln_prep") nil nil)) nil) nil nil
   (ln subtype
    "(LAMBDA (t: real_types.posreal): number_fields./(1, t))"
    "integral_def[posreal].Integrable_funs(1, ln_exp.x)")))
 (ln_derivable_TCC1 0
  (ln_derivable_TCC1-1 nil 3471688875
   ("" (lemma "deriv_domain_posreal") (("" (propax) nil nil)) nil)
   ((deriv_domain_posreal formula-decl nil deriv_domain analysis)) nil
   (ln_derivable assuming "analysis@derivatives[posreal].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (ln_derivable 0
  (ln_derivable-2 "" 3790093621
   ("" (lemma "fundamental[posreal]")
    (("" (inst -1 "ln" "1" "(LAMBDA (t: posreal): 1 / t)")
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2) (("2" (rewrite "one_over_t_cont") nil nil)) nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (expand "ln") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ln_derivable-1 nil 3253532189
   ("" (lemma "fundamental[posreal]")
    (("1" (inst -1 "ln" "1" "(LAMBDA (t: posreal): 1 / t)")
      (("1" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2) (("2" (rewrite "one_over_t_cont") nil nil)) nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (expand "ln") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (expand "not_one_element?")
        (("2" (skosimp*)
          (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (assert)
      (("3" (expand "connected?")
        (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental formula-decl nil fundamental_theorem analysis))
   nil))
 (ln_continuous 0
  (ln_continuous-3 "" 3790093621
   ("" (lemma "ln_derivable")
    (("" (lemma "derivable_continuous[posreal]")
      (("" (inst?)
        (("" (flatten)
          (("" (expand "continuous?" 1)
            (("" (skosimp*)
              (("" (inst?)
                (("" (assert)
                  (("" (expand "derivable?" -1) (("" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ln_continuous-2 nil 3445353494
   ("" (lemma "ln_derivable")
    (("" (lemma "derivable_continuous[posreal]")
      (("1" (inst?)
        (("1" (flatten)
          (("1" (expand "continuous?" 1)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (expand "derivable?" -1)
                    (("1" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (inst-cp + "1")
          (("2" (assert)
            (("2" (inst + "2") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("3" (skosimp*)
        (("3" (assert)
          (("3" (lemma "deriv_domain_posreal")
            (("3" (expand "deriv_domain?") (("3" (inst?) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_continuous formula-decl nil derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis))
   nil)
  (ln_continuous-1 nil 3253532189
   ("" (lemma "ln_derivable")
    (("" (lemma "derivable_continuous[posreal]")
      (("1" (inst?)
        (("1" (flatten)
          (("1" (expand "continuous?" 1)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (expand "derivable" -1) (("1" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (inst-cp + "1")
          (("2" (assert)
            (("2" (inst + "2") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("3" (skosimp*) (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((derivable_continuous formula-decl nil derivatives_def analysis))
   nil))
 (ln_1 0
  (ln_1-1 nil 3253532189
   ("" (expand "ln")
    (("" (expand "Integral") (("" (propax) nil nil)) nil)) nil)
   ((Integral const-decl "real" integral_def analysis)) nil))
 (ln_mult 0
  (ln_mult-4 "" 3790093622
   ("" (skosimp*)
    ((""
      (case "derivable?[posreal](LAMBDA (x: posreal): ln(py!1 * x))")
      (("1" (lemma "ln_derivable")
        (("1" (flatten)
          (("1"
            (case "deriv(LAMBDA (x: posreal): ln(py!1*x))  = deriv(LAMBDA (x: posreal): ln(x))")
            (("1" (lemma "derivs_eq[posreal]")
              (("1" (inst?)
                (("1" (assert)
                  (("1"
                    (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (skosimp*)
                          (("1" (expand "+ ")
                            (("1" (expand "const_fun")
                              (("1"
                                (case
                                 "(LAMBDA (x: posreal): ln(py!1 * x))(1) =       (LAMBDA (x_824: posreal): ln(x_824) + c!1)(1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (rewrite "ln_1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (reveal -1)
                                          (("1"
                                            (replace -2 * rl)
                                            (("1"
                                              (case-replace
                                               "(LAMBDA (x: posreal): ln(py!1 * x))(px!1) =       (LAMBDA (x_824: posreal): ln(x_824) + ln(py!1))(px!1)")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality 1 :hide? t) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "deriv_composition[posreal,posreal]")
                (("2"
                  (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
                  (("1" (hide -1)
                    (("1" (replace -3)
                      (("1" (apply-extensionality 1 :hide? t)
                        (("1"
                          (inst - "(LAMBDA (t: posreal): py!1*t)" "ln"
                           "x!1")
                          (("1" (assert)
                            (("1"
                              (case "derivable?((LAMBDA (t: posreal): py!1 * t), x!1) ")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "derivable?" -3)
                                  (("1"
                                    (inst -3 "py!1*x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "o ")
                                        (("1"
                                          (expand "deriv" 1)
                                          (("1"
                                            (case
                                             "deriv(ln)(py!1*x!1) = (LAMBDA (t: posreal): 1 / t)(py!1*x!1)")
                                            (("1"
                                              (expand "deriv" -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (case-replace
                                                     "deriv[posreal]((LAMBDA (t: posreal): py!1 * t), x!1) = py!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "deriv_scal[posreal]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "py!1"
                                                           "I[posreal]"
                                                           "x!1")
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "I")
                                                              (("1"
                                                                (expand
                                                                 "*")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "deriv_identity[posreal]")
                                                                    (("1"
                                                                      (expand
                                                                       "I")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "identity_derivable[posreal]")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (lemma "scal_derivable[posreal]")
                                  (("2"
                                    (inst -1 "py!1" "I" "x!1")
                                    (("2"
                                      (lemma
                                       "identity_derivable[posreal]")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (expand "I")
                                            (("1"
                                              (expand "*")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality 1 :hide? t) nil nil))
                  nil))
                nil))
              nil)
             ("3" (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
              (("3" (apply-extensionality 1 :hide? t) nil nil)) nil)
             ("4" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (lemma "ln_derivable")
            (("2" (flatten)
              (("2" (assert)
                (("2" (lemma "scal_derivable[posreal]")
                  (("2" (expand "derivable?" 1)
                    (("2" (skosimp*)
                      (("2" (inst -1 "py!1" "I" "x!1")
                        (("2" (lemma "identity_derivable[posreal]")
                          (("2" (inst?)
                            (("2"
                              (lemma
                               "composition_derivable[posreal,posreal]")
                              (("2"
                                (inst
                                 -1
                                 "(LAMBDA (t:posreal): py!1*t)"
                                 "ln"
                                 "x!1")
                                (("2"
                                  (expand "o ")
                                  (("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (expand "derivable?" -3)
                                      (("2"
                                        (inst -3 "py!1*x!1")
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (expand "I")
                                            (("2"
                                              (expand "*")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (expand "derivable?" -3)
                                        (("3"
                                          (inst -3 "py!1*x!1")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ln_mult-3 nil 3445353567
   ("" (skosimp*)
    ((""
      (case "derivable?[posreal](LAMBDA (x: posreal): ln(py!1 * x))")
      (("1" (lemma "ln_derivable")
        (("1" (flatten)
          (("1"
            (case "deriv(LAMBDA (x: posreal): ln(py!1*x))  = deriv(LAMBDA (x: posreal): ln(x))")
            (("1" (lemma "derivs_eq[posreal]")
              (("1" (inst?)
                (("1" (assert)
                  (("1"
                    (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (replace -3)
                          (("1" (assert)
                            (("1" (skosimp*)
                              (("1"
                                (expand "+ ")
                                (("1"
                                  (expand "const_fun")
                                  (("1"
                                    (case
                                     "(LAMBDA (x: posreal): ln(py!1 * x))(1) =       (LAMBDA (x_824: posreal): ln(x_824) + c!1)(1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (rewrite "ln_1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal -1)
                                              (("1"
                                                (replace -2 * rl)
                                                (("1"
                                                  (case-replace
                                                   "(LAMBDA (x: posreal): ln(py!1 * x))(px!1) =       (LAMBDA (x_824: posreal): ln(x_824) + ln(py!1))(px!1)")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality 1 :hide? t) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "not_one_element?")
                  (("2" (skosimp*)
                    (("2" (assert)
                      (("2" (inst + "x!1+1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (expand "connected?")
                  (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "deriv_composition[posreal,posreal]")
                (("1"
                  (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
                  (("1" (hide -1)
                    (("1" (replace -3)
                      (("1" (apply-extensionality 1 :hide? t)
                        (("1"
                          (inst - "(LAMBDA (t: posreal): py!1*t)" "ln"
                           "x!1")
                          (("1" (assert)
                            (("1"
                              (case "derivable?((LAMBDA (t: posreal): py!1 * t), x!1) ")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "derivable?" -3)
                                  (("1"
                                    (inst -3 "py!1*x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "o ")
                                        (("1"
                                          (expand "deriv" 1)
                                          (("1"
                                            (case
                                             "deriv(ln)(py!1*x!1) = (LAMBDA (t: posreal): 1 / t)(py!1*x!1)")
                                            (("1"
                                              (expand "deriv" -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (case-replace
                                                     "deriv[posreal]((LAMBDA (t: posreal): py!1 * t), x!1) = py!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "deriv_scal[posreal]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "py!1"
                                                           "I[posreal]"
                                                           "x!1")
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "I")
                                                              (("1"
                                                                (expand
                                                                 "*")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "deriv_identity[posreal]")
                                                                    (("1"
                                                                      (expand
                                                                       "I")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "identity_derivable[posreal]")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (lemma "scal_derivable[posreal]")
                                  (("2"
                                    (inst -1 "py!1" "I" "x!1")
                                    (("2"
                                      (lemma
                                       "identity_derivable[posreal]")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (expand "I")
                                            (("1"
                                              (expand "*")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "deriv_domain_posreal")
                                (("3"
                                  (expand "deriv_domain?")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality 1 :hide? t) nil nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (assert)
                  (("3" (lemma "deriv_domain_posreal")
                    (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
              (("3" (apply-extensionality 1 :hide? t) nil nil)) nil)
             ("4" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (lemma "ln_derivable")
            (("2" (flatten)
              (("2" (assert)
                (("2" (lemma "scal_derivable[posreal]")
                  (("1" (expand "derivable?" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "py!1" "I" "x!1")
                        (("1" (lemma "identity_derivable[posreal]")
                          (("1" (inst?)
                            (("1"
                              (lemma
                               "composition_derivable[posreal,posreal]")
                              (("1"
                                (inst
                                 -1
                                 "(LAMBDA (t:posreal): py!1*t)"
                                 "ln"
                                 "x!1")
                                (("1"
                                  (expand "o ")
                                  (("1"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (expand "derivable?" -3)
                                      (("2"
                                        (inst -3 "py!1*x!1")
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (expand "I")
                                            (("2"
                                              (expand "*")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (expand "derivable?" -3)
                                        (("3"
                                          (inst -3 "py!1*x!1")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "deriv_domain_posreal")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst-cp + "1")
                      (("2" (inst + "2") (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (skosimp*)
                    (("3" (assert)
                      (("3" (lemma "deriv_domain_posreal")
                        (("3" (expand "deriv_domain?")
                          (("3" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (identity_derivable formula-decl nil derivatives_def analysis)
    (deriv_identity formula-decl nil derivatives_def analysis)
    (deriv_scal formula-decl nil derivatives_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (scal_derivable formula-decl nil derivatives_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_composition formula-decl nil chain_rule analysis)
    (derivs_eq formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (composition_derivable formula-decl nil chain_rule analysis))
   nil)
  (ln_mult-2 nil 3445353520
   (";;; Proof ln_mult-1 for formula ln_exp.ln_mult" (skosimp*)
    ((";;; Proof ln_mult-1 for formula ln_exp.ln_mult"
      (case "derivable?[posreal](LAMBDA (x: posreal): ln(py!1 * x))")
      (("1" (lemma "ln_derivable")
        (("1" (flatten)
          (("1"
            (case "deriv(LAMBDA (x: posreal): ln(py!1*x))  = deriv(LAMBDA (x: posreal): ln(x))")
            (("1" (lemma "derivs_eq[posreal]")
              (("1" (inst?)
                (("1" (assert)
                  (("1"
                    (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (replace -3)
                          (("1" (assert)
                            (("1" (skosimp*)
                              (("1"
                                (expand "+ ")
                                (("1"
                                  (expand "const_fun")
                                  (("1"
                                    (case
                                     "(LAMBDA (x: posreal): ln(py!1 * x))(1) =       (LAMBDA (x_824: posreal): ln(x_824) + c!1)(1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (rewrite "ln_1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal -1)
                                              (("1"
                                                (replace -2 * rl)
                                                (("1"
                                                  (case-replace
                                                   "(LAMBDA (x: posreal): ln(py!1 * x))(px!1) =       (LAMBDA (x_824: posreal): ln(x_824) + ln(py!1))(px!1)")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (assert)
                                                      nil)))
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (propax)
                                                      nil)))))))))))))))))
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (propax)
                                        nil)))))))))))))))))))
                     ("2" (apply-extensionality 1 :hide? t) nil)))))))
               ("2" (skosimp*)
                (("2" (inst + "x!1/2")
                  (("2" (skosimp*) (("2" (assert) nil)))))))
               ("3" (skosimp*) (("3" (assert) nil)))))
             ("2" (hide 2)
              (("2" (lemma "deriv_composition[posreal,posreal]")
                (("1"
                  (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
                  (("1" (hide -1)
                    (("1" (replace -3)
                      (("1" (apply-extensionality 1 :hide? t)
                        (("1"
                          (inst - "(LAMBDA (t: posreal): py!1*t)" "ln"
                           "x!1")
                          (("1" (assert)
                            (("1"
                              (case "derivable?((LAMBDA (t: posreal): py!1 * t), x!1) ")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "derivable?" -3)
                                  (("1"
                                    (inst -3 "py!1*x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "o ")
                                        (("1"
                                          (expand "deriv" 1)
                                          (("1"
                                            (case
                                             "deriv(ln)(py!1*x!1) = (LAMBDA (t: posreal): 1 / t)(py!1*x!1)")
                                            (("1"
                                              (expand "deriv" -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (case-replace
                                                     "deriv[posreal]((LAMBDA (t: posreal): py!1 * t), x!1) = py!1")
                                                    (("1" (assert) nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "deriv_scal[posreal]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "py!1"
                                                           "I[posreal]"
                                                           "x!1")
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "I")
                                                              (("1"
                                                                (expand
                                                                 "*")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "deriv_identity[posreal]")
                                                                    (("1"
                                                                      (expand
                                                                       "I")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))))))))))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "identity_derivable[posreal]")
                                                                (("2"
                                                                  (inst?)
                                                                  nil)))))))))))))))))))))
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))))))))))
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (lemma "scal_derivable[posreal]")
                                  (("2"
                                    (inst -1 "py!1" "I" "x!1")
                                    (("2"
                                      (lemma
                                       "identity_derivable[posreal]")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (expand "I")
                                            (("1"
                                              (expand "*")
                                              (("1" (propax) nil)))))
                                           ("2"
                                            (propax)
                                            nil)))))))))))))))))))))))))
                   ("2" (apply-extensionality 1 :hide? t) nil)))
                 ("2" (skosimp*)
                  (("2" (inst + "x!1+1") (("2" (assert) nil)))))
                 ("3" (skosimp*) (("3" (assert) nil)))))))
             ("3" (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
              (("3" (apply-extensionality 1 :hide? t) nil)))
             ("4" (propax) nil)))))))
       ("2" (hide 2)
        (("2" (assert)
          (("2" (lemma "ln_derivable")
            (("2" (flatten)
              (("2" (assert)
                (("2" (lemma "scal_derivable[posreal]")
                  (("1" (expand "derivable" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "py!1" "I" "x!1")
                        (("1" (lemma "identity_derivable[posreal]")
                          (("1" (inst?)
                            (("1"
                              (lemma
                               "composition_derivable[posreal,posreal]")
                              (("1"
                                (inst
                                 -1
                                 "(LAMBDA (t:posreal): py!1*t)"
                                 "ln"
                                 "x!1")
                                (("1"
                                  (expand "o ")
                                  (("1"
                                    (split -1)
                                    (("1" (propax) nil)
                                     ("2"
                                      (expand "derivable" -3)
                                      (("2"
                                        (inst -3 "py!1*x!1")
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (expand "I")
                                            (("2"
                                              (expand "*")
                                              (("2"
                                                (assert)
                                                nil)))))))))))
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (expand "derivable" -3)
                                        (("3"
                                          (inst -3 "py!1*x!1")
                                          nil)))))))))))))))))))))))
                   ("2" (skosimp*)
                    (("2" (inst-cp + "1")
                      (("2" (inst + "2") (("2" (assert) nil)))))))
                   ("3" (skosimp*) (("3" (assert) nil))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (ln_mult-1 nil 3253532189
   ("" (skosimp*)
    ((""
      (case "derivable?[posreal](LAMBDA (x: posreal): ln(py!1 * x))")
      (("1" (lemma "ln_derivable")
        (("1" (flatten)
          (("1"
            (case "deriv(LAMBDA (x: posreal): ln(py!1*x))  = deriv(LAMBDA (x: posreal): ln(x))")
            (("1" (lemma "derivs_eq[posreal]")
              (("1" (inst?)
                (("1" (assert)
                  (("1"
                    (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (replace -3)
                          (("1" (assert)
                            (("1" (skosimp*)
                              (("1"
                                (expand "+ ")
                                (("1"
                                  (expand "const_fun")
                                  (("1"
                                    (case
                                     "(LAMBDA (x: posreal): ln(py!1 * x))(1) =       (LAMBDA (x_824: posreal): ln(x_824) + c!1)(1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (rewrite "ln_1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal -1)
                                              (("1"
                                                (replace -2 * rl)
                                                (("1"
                                                  (case-replace
                                                   "(LAMBDA (x: posreal): ln(py!1 * x))(px!1) =       (LAMBDA (x_824: posreal): ln(x_824) + ln(py!1))(px!1)")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality 1 :hide? t) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst + "x!1/2")
                  (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("3" (skosimp*) (("3" (assert) nil nil)) nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "deriv_composition[posreal,posreal]")
                (("1"
                  (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
                  (("1" (hide -1)
                    (("1" (replace -3)
                      (("1" (apply-extensionality 1 :hide? t)
                        (("1"
                          (inst - "(LAMBDA (t: posreal): py!1*t)" "ln"
                           "x!1")
                          (("1" (assert)
                            (("1"
                              (case "derivable?((LAMBDA (t: posreal): py!1 * t), x!1) ")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "derivable" -3)
                                  (("1"
                                    (inst -3 "py!1*x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "o ")
                                        (("1"
                                          (expand "deriv" 1)
                                          (("1"
                                            (case
                                             "deriv(ln)(py!1*x!1) = (LAMBDA (t: posreal): 1 / t)(py!1*x!1)")
                                            (("1"
                                              (expand "deriv" -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (case-replace
                                                     "deriv[posreal]((LAMBDA (t: posreal): py!1 * t), x!1) = py!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "deriv_scal[posreal]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "py!1"
                                                           "I[posreal]"
                                                           "x!1")
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "I")
                                                              (("1"
                                                                (expand
                                                                 "*")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "deriv_identity[posreal]")
                                                                    (("1"
                                                                      (expand
                                                                       "I")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "identity_derivable[posreal]")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (lemma "scal_derivable[posreal]")
                                  (("2"
                                    (inst -1 "py!1" "I" "x!1")
                                    (("2"
                                      (lemma
                                       "identity_derivable[posreal]")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (expand "I")
                                            (("1"
                                              (expand "*")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality 1 :hide? t) nil nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                nil))
              nil)
             ("3" (case-replace "(LAMBDA (x: posreal): ln(x)) = ln")
              (("3" (apply-extensionality 1 :hide? t) nil nil)) nil)
             ("4" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (lemma "ln_derivable")
            (("2" (flatten)
              (("2" (assert)
                (("2" (lemma "scal_derivable[posreal]")
                  (("1" (expand "derivable" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "py!1" "I" "x!1")
                        (("1" (lemma "identity_derivable[posreal]")
                          (("1" (inst?)
                            (("1"
                              (lemma
                               "composition_derivable[posreal,posreal]")
                              (("1"
                                (inst
                                 -1
                                 "(LAMBDA (t:posreal): py!1*t)"
                                 "ln"
                                 "x!1")
                                (("1"
                                  (expand "o ")
                                  (("1"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (expand "derivable" -3)
                                      (("2"
                                        (inst -3 "py!1*x!1")
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (expand "I")
                                            (("2"
                                              (expand "*")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (expand "derivable" -3)
                                        (("3"
                                          (inst -3 "py!1*x!1")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst-cp + "1")
                      (("2" (inst + "2") (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((composition_derivable formula-decl nil chain_rule analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (deriv_composition formula-decl nil chain_rule analysis)
    (scal_derivable formula-decl nil derivatives_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv_scal formula-decl nil derivatives_def analysis)
    (deriv_identity formula-decl nil derivatives_def analysis)
    (identity_derivable formula-decl nil derivatives_def analysis))
   nil))
 (ln_div 0
  (ln_div-1 nil 3253532189
   ("" (skosimp*)
    (("" (lemma "ln_mult")
      (("" (inst -1 "1/py!1" "py!1")
        (("" (assert)
          (("" (rewrite "ln_1")
            (("" (lemma "ln_mult")
              (("" (inst -1 "px!1" "1/py!1") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (ln_expt_TCC1 0
  (ln_expt_TCC1-1 nil 3253532189 ("" (subtype-tcc) nil nil) nil nil
   (ln_expt subtype "ln_exp.i"
    "{i: integers.int | booleans.OR(ln_exp.px /= 0, reals.>=(i, 0))}")))
 (ln_expt 0
  (ln_expt-1 nil 3253532189
   ("" (skosimp*)
    (("" (case "(FORALL (n:nat): ln(px!1 ^ n) = n * ln(px!1))")
      (("1" (case-replace "i!1 >= 0")
        (("1" (inst?) nil nil)
         ("2" (expand "^")
          (("2" (assert)
            (("2" (rewrite "ln_div")
              (("2" (rewrite "ln_1")
                (("2" (assert)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (expand "^")
            (("1" (expand "expt")
              (("1" (rewrite "ln_1") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (case-replace "px!1 ^ (j!1 + 1) = px!1*px!1^j!1")
              (("1" (rewrite "ln_mult" +)
                (("1" (replace -2)
                  (("1" (hide -2) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (rewrite "expt_plus")
                  (("2" (expand "^" 1 2)
                    (("2" (expand "expt")
                      (("2" (expand "expt") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (ln_strict_increasing 0
  (ln_strict_increasing-2 "" 3790093623
   ("" (lemma "positive_derivative[posreal]")
    (("" (inst?)
      (("1" (assert)
        (("1" (hide 2)
          (("1" (skosimp*)
            (("1" (lemma "ln_derivable")
              (("1" (flatten)
                (("1" (case "deriv[posreal](ln, x!1) = deriv(ln)(x!1)")
                  (("1" (replace -1)
                    (("1" (replace -3) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "deriv" 1 2) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "ln_derivable") (("2" (flatten) nil nil)) nil))
      nil))
    nil)
   nil shostak)
  (ln_strict_increasing-1 nil 3253532189
   ("" (lemma "positive_derivative[posreal]")
    (("1" (inst?)
      (("1" (assert)
        (("1" (hide 2)
          (("1" (skosimp*)
            (("1" (lemma "ln_derivable")
              (("1" (flatten)
                (("1" (case "deriv[posreal](ln, x!1) = deriv(ln)(x!1)")
                  (("1" (replace -1)
                    (("1" (replace -3) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "deriv" 1 2) (("2" (propax) nil nil))
                      nil))
                    nil)
                   ("3" (lemma "deriv_domain_posreal")
                    (("3" (expand "deriv_domain?")
                      (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "ln_derivable") (("2" (flatten) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil)) nil)
     ("3" (skosimp*) (("3" (assert) nil nil)) nil))
    nil)
   ((derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (positive_derivative formula-decl nil derivative_props analysis))
   nil))
 (ln_increasing 0
  (ln_increasing-1 nil 3253532189
   ("" (lemma "ln_strict_increasing")
    (("" (expand "increasing?")
      (("" (skosimp*)
        (("" (expand "strict_increasing?")
          (("" (inst?)
            (("" (inst -1 "y!1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   nil))
 (ln_image_all 0
  (ln_image_all-2 "" 3790093624
   ("" (skosimp*)
    (("" (lemma "ln_strict_increasing")
      (("" (expand "strict_increasing?")
        (("" (inst -1 "1" "2")
          (("" (assert)
            (("" (rewrite "ln_1")
              (("" (lemma "ln_expt")
                (("" (inst -1 "_" "2")
                  ((""
                    (case "(FORALL (gg: real): (EXISTS (i1,i2:int): i1 < gg/ln(2) AND gg/ln(2) < i2))")
                    (("1" (assert)
                      (("1" (inst -1 "y!1")
                        (("1" (skosimp*)
                          (("1" (case "i1!1 < i2!1")
                            (("1" (mult-by -2 "ln(2)")
                              (("1"
                                (rewrite "ln_expt" -2 :dir rl)
                                (("1"
                                  (mult-by -3 "ln(2)")
                                  (("1"
                                    (rewrite "ln_expt" -3 :dir rl)
                                    (("1"
                                      (lemma "intermediate1[posreal]")
                                      (("1"
                                        (inst
                                         -1
                                         "2^i1!1"
                                         "2^i2!1"
                                         "ln"
                                         "y!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst + "c!1")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "both_sides_expt_gt1_le")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "ln_derivable")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite "ln_continuous")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp*)
                        (("2" (lemma "axiom_of_archimedes")
                          (("2" (inst -1 "gg!1/ln(2)")
                            (("1" (skosimp*)
                              (("1"
                                (lemma "axiom_of_archimedes")
                                (("1"
                                  (inst -1 "-gg!1/ln(2)")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst + "-i!2" "i!1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*) (("3" (assert) nil nil)) nil)
                     ("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ln_image_all-1 nil 3253532189
   ("" (skosimp*)
    (("" (lemma "ln_strict_increasing")
      (("" (expand "strict_increasing?")
        (("" (inst -1 "1" "2")
          (("" (assert)
            (("" (rewrite "ln_1")
              (("" (lemma "ln_expt")
                (("" (inst -1 "_" "2")
                  ((""
                    (case "(FORALL (gg: real): (EXISTS (i1,i2:int): i1 < gg/ln(2) AND gg/ln(2) < i2))")
                    (("1" (assert)
                      (("1" (inst -1 "y!1")
                        (("1" (skosimp*)
                          (("1" (case "i1!1 < i2!1")
                            (("1" (mult-by -2 "ln(2)")
                              (("1"
                                (rewrite "ln_expt" -2 :dir rl)
                                (("1"
                                  (mult-by -3 "ln(2)")
                                  (("1"
                                    (rewrite "ln_expt" -3 :dir rl)
                                    (("1"
                                      (lemma "intermediate1[posreal]")
                                      (("1"
                                        (inst
                                         -1
                                         "2^i1!1"
                                         "2^i2!1"
                                         "ln"
                                         "y!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst + "c!1")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "both_sides_expt_gt1_le")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "ln_derivable")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite "ln_continuous")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp*)
                        (("2" (lemma "axiom_of_archimedes")
                          (("2" (inst -1 "gg!1/ln(2)")
                            (("1" (skosimp*)
                              (("1"
                                (lemma "axiom_of_archimedes")
                                (("1"
                                  (inst -1 "-gg!1/ln(2)")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst + "-i!2" "i!1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*) (("3" (assert) nil nil)) nil)
                     ("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((intermediate1 formula-decl nil continuous_functions_props
     analysis)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   nil))
 (ln_bij 0
  (ln_bij-1 nil 3253532189
   ("" (lemma "ln_strict_increasing")
    (("" (expand "bijective?")
      (("" (prop)
        (("1" (expand "injective?")
          (("1" (skosimp*)
            (("1" (expand "strict_increasing?")
              (("1" (inst-cp - "x1!1" "x2!1")
                (("1" (inst - "x2!1" "x1!1") (("1" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "surjective?")
          (("2" (skosimp*)
            (("2" (hide -1) (("2" (rewrite "ln_image_all") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals)) nil))
 (large_ln 0
  (large_ln-1 nil 3253532189
   ("" (skosimp*)
    (("" (lemma "ln_strict_increasing")
      (("" (expand "strict_increasing?")
        (("" (lemma "ln_bij")
          (("" (expand "bijective?")
            (("" (flatten)
              (("" (hide -1)
                (("" (expand "surjective?")
                  (("" (inst -1 "a!1")
                    (("" (skosimp*)
                      (("" (replace -1 * rl)
                        (("" (hide -1)
                          (("" (inst -1 "x!1" "x!1+1")
                            (("" (assert)
                              (("" (inst + "1+x!1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals)) nil))
 (ln_eq_0 0
  (ln_eq_0-1 nil 3297441392
   ("" (skosimp*)
    (("" (lemma "ln_bij")
      (("" (expand "bijective?")
        (("" (flatten)
          (("" (expand "injective?")
            (("" (inst - "px!1" "1")
              (("" (lemma "ln_1") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ln_ge_0 0
  (ln_ge_0-1 nil 3297691676
   ("" (skosimp*)
    (("" (lemma "ln_increasing")
      (("" (expand "increasing?")
        (("" (inst - "1" "px!1")
          (("" (rewrite "ln_1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)) shostak))
 (ln_gt_0 0
  (ln_gt_0-1 nil 3297691602
   ("" (skosimp*)
    (("" (lemma "ln_strict_increasing")
      (("" (expand "strict_increasing?")
        (("" (inst - "1" "px!1")
          (("" (rewrite "ln_1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals))
   shostak))
 (ln_le_0 0
  (ln_le_0-1 nil 3709995687
   ("" (skeep)
    (("" (use "ln_increasing")
      (("" (expand "increasing?")
        (("" (inst? -1 :where -2)
          (("" (assert) (("" (use "ln_1") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)) shostak))
 (ln_lt_0 0
  (ln_lt_0-1 nil 3709995849
   ("" (skeep)
    (("" (use "ln_strict_increasing")
      (("" (expand "strict_increasing?")
        (("" (inst? -1 :where -2)
          (("" (assert) (("" (use "ln_1") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals)) nil))
 (exp_TCC1 0
  (exp_TCC1-1 nil 3253532189
   ("" (inst + "(LAMBDA x: inverse(ln)(x))")
    (("" (lemma "bijective_inverse[posreal,real]")
      (("" (skosimp*)
        (("" (inst?)
          (("1" (assert) nil nil)
           ("2" (hide 2) (("2" (rewrite "ln_bij") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (exp existence ""
        "[x: reals.real -> {py | x = ln_exp.ln(ln_exp.py)}]")))
 (exp_def 0
  (exp_def-1 nil 3253532189
   ("" (apply-extensionality 1 :hide? t)
    (("1" (typepred "exp(x!1)")
      (("1" (lemma "bijective_inverse[posreal,real]")
        (("1" (inst?)
          (("1" (ground) nil nil) ("2" (rewrite "ln_bij") nil nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (lemma "bijective_inverse[posreal,real]")
        (("2" (inst?)
          (("1" (ground) nil nil)
           ("2" (hide 2) (("2" (rewrite "ln_bij") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (exp_bij 0
  (exp_bij-1 nil 3253532189
   ("" (rewrite "exp_def")
    (("" (assert)
      (("" (lemma "bijective_inverse_is_bijective[posreal,real]")
        (("" (inst?)
          (("" (hide 2) (("" (rewrite "ln_bij") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (ln_exp 0
  (ln_exp-1 nil 3253532189 ("" (skosimp*) (("" (assert) nil nil)) nil)
   nil nil))
 (exp_ln 0
  (exp_ln-1 nil 3253532189
   ("" (skosimp*)
    (("" (assert)
      (("" (typepred "exp(ln(py!1))")
        (("" (lemma "ln_bij")
          (("" (expand "bijective?")
            (("" (flatten)
              (("" (expand "injective?")
                (("" (inst -1 "py!1" "exp(ln(py!1))")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (ln_e 0
  (ln_e-1 nil 3253532189
   ("" (assert) (("" (expand "e") (("" (assert) nil nil)) nil)) nil)
   nil nil))
 (ln_2_bnds 0
  (ln_2_bnds-2 "" 3790093625
   ("" (lemma "Integral_bound[posreal]")
    (("" (inst -1 "1" "1" "2" "(LAMBDA (t: posreal): 1/t)" "1/2")
      (("" (assert)
        ((""
          (case-replace
           "Integral(1, 2, (LAMBDA (t: posreal): 1 / t)) = ln(2)")
          (("1" (rewrite "ln_prep")
            (("1" (assert)
              (("1" (split -2)
                (("1" (propax) nil nil)
                 ("2" (skosimp*)
                  (("2" (hide-all-but 1)
                    (("2" (prop)
                      (("1" (mult-by 1 "x!1") (("1" (assert) nil nil))
                        nil)
                       ("2" (mult-by 1 "x!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "ln") (("2" (propax) nil nil)) nil)
           ("3" (rewrite "ln_prep") nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ln_2_bnds-1 nil 3253532189
   ("" (lemma "Integral_bound[posreal]")
    (("1" (inst -1 "1" "1" "2" "(LAMBDA (t: posreal): 1/t)" "1/2")
      (("1" (assert)
        (("1"
          (case-replace
           "Integral(1, 2, (LAMBDA (t: posreal): 1 / t)) = ln(2)")
          (("1" (rewrite "ln_prep")
            (("1" (assert)
              (("1" (split -2)
                (("1" (propax) nil nil)
                 ("2" (skosimp*)
                  (("2" (hide-all-but 1)
                    (("2" (prop)
                      (("1" (mult-by 1 "x!1") (("1" (assert) nil nil))
                        nil)
                       ("2" (mult-by 1 "x!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "ln") (("2" (propax) nil nil)) nil)
           ("3" (rewrite "ln_prep") nil nil))
          nil))
        nil))
      nil)
     ("2" (expand "not_one_element?")
      (("2" (skosimp*)
        (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (assert)
      (("3" (expand "connected?")
        (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Integrable? const-decl "bool" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integral const-decl "real" integral_def analysis)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (Integral_bound formula-decl nil integral analysis))
   nil))
 (exp_int_TCC1 0
  (exp_int_TCC1-1 nil 3253532189
   ("" (skosimp*) (("" (assert) nil nil)) nil) nil nil
   (exp_int subtype "ln_exp.i"
    "{i: integers.int | booleans.OR(ln_exp.e /= 0, reals.>=(i, 0))}")))
 (exp_int 0
  (exp_int-1 nil 3253532189
   ("" (skosimp*)
    (("" (typepred "exp(i!1)")
      (("" (lemma "ln_expt")
        (("" (inst?)
          (("" (rewrite "ln_e")
            (("" (assert)
              (("" (lemma "ln_bij")
                (("" (expand "bijective?")
                  (("" (flatten)
                    (("" (expand "injective?")
                      (("" (inst -1 "exp(i!1)" "e^i!1")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (exp_sum 0
  (exp_sum-1 nil 3253532189
   ("" (skosimp*)
    (("" (transform-both 1 "ln(%1)")
      (("1" (assert)
        (("1" (hide 2)
          (("1" (rewrite "ln_mult")
            (("1" (rewrite "ln_exp")
              (("1" (rewrite "ln_exp")
                (("1" (rewrite "ln_exp") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "ln_mult")
        (("2" (assert)
          (("2" (rewrite "ln_mult" :dir rl)
            (("2" (lemma "ln_bij")
              (("2" (expand "bijective?")
                (("2" (flatten)
                  (("2" (expand "injective?")
                    (("2"
                      (inst -1 "exp(x!1 + y!1) " "exp(x!1) * exp(y!1)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (exp_diff 0
  (exp_diff-1 nil 3253532189
   ("" (skosimp*)
    (("" (transform-both 1 "ln(%1)")
      (("1" (hide 2)
        (("1" (rewrite "ln_div")
          (("1" (rewrite "ln_exp")
            (("1" (rewrite "ln_exp") (("1" (rewrite "ln_exp") nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "ln_div")
        (("2" (assert)
          (("2" (rewrite "ln_div" :dir rl)
            (("2" (lemma "ln_bij")
              (("2" (expand "bijective?")
                (("2" (flatten)
                  (("2" (expand "injective?")
                    (("2"
                      (inst -1 "exp(x!1 - y!1) " "exp(x!1) / exp(y!1)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (exp_scal_TCC1 0
  (exp_scal_TCC1-1 nil 3253532189
   ("" (skosimp*) (("" (assert) nil nil)) nil) nil nil
   (exp_scal subtype "ln_exp.i"
    "{i: integers.int | booleans.OR(ln_exp.exp(ln_exp.x) /= 0, reals.>=(i, 0))}")))
 (exp_scal 0
  (exp_scal-2 "" 3790093625
   ("" (skosimp*)
    (("" (transform-both 1 "ln(%1)")
      (("1" (hide 2)
        (("1" (rewrite "ln_expt")
          (("1" (rewrite "ln_exp") (("1" (rewrite "ln_exp") nil nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "ln_expt")
        (("2" (rewrite "ln_expt" :dir rl)
          (("2" (lemma "ln_bij")
            (("2" (expand "bijective?")
              (("2" (flatten)
                (("2" (expand "injective?")
                  (("2" (inst -1 "exp(i!1*x!1) " "exp(x!1)^i!1")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (exp_scal-1 nil 3253532189
   ("" (skosimp*)
    (("" (transform-both 1 "ln(%1)")
      (("1" (hide 2)
        (("1" (rewrite "ln_expt")
          (("1" (rewrite "ln_exp") (("1" (rewrite "ln_exp") nil nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "ln_expt")
        (("2" (rewrite "ln_expt" :dir rl)
          (("2" (lemma "ln_bij")
            (("2" (expand "bijective?")
              (("2" (flatten)
                (("2" (expand "injective?")
                  (("2" (inst -1 "exp(i!1*x!1) " "exp(x!1)^i!1")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (assert) nil nil))
      nil))
    nil)
   nil nil))
 (exp_0 0
  (exp_0-1 nil 3253532189
   ("" (lemma "exp_diff")
    (("" (inst -1 "7" "7") (("" (assert) nil nil)) nil)) nil)
   nil nil))
 (exp_1 0
  (exp_1-1 nil 3253532189
   ("" (typepred "exp(1)")
    (("" (expand "e") (("" (propax) nil nil)) nil)) nil)
   nil nil))
 (exp_neg 0
  (exp_neg-1 nil 3302427747
   ("" (skosimp*)
    (("" (lemma "exp_diff")
      (("" (inst - "0" "x!1")
        (("" (assert)
          (("" (rewrite "exp_0") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (expt_alt_def_TCC1 0
  (expt_alt_def_TCC1-1 nil 3253532189
   ("" (skosimp*) (("" (assert) nil nil)) nil) nil nil
   (expt_alt_def subtype "ln_exp.i"
    "{i: integers.int | booleans.OR(ln_exp.x /= 0, reals.>=(i, 0))}")))
 (expt_alt_def_TCC2 0
  (expt_alt_def_TCC2-1 nil 3253532189
   ("" (skosimp*) (("" (assert) nil nil)) nil) nil nil
   (expt_alt_def subtype "ln_exp.x" "posreal")))
 (expt_alt_def 0
  (expt_alt_def-1 nil 3253532189
   ("" (skosimp*)
    (("" (rewrite "exp_scal") (("" (rewrite "exp_ln") nil nil)) nil))
    nil)
   nil nil))
 (exp_strict_increasing 0
  (exp_strict_increasing-1 nil 3253532189
   ("" (expand "strict_increasing?")
    (("" (skosimp*)
      (("" (typepred "exp(x!1)")
        (("" (typepred "exp(y!1)")
          (("" (hide -1 -2 -4 -5)
            (("" (lemma "ln_strict_increasing")
              (("" (expand "strict_increasing?")
                (("" (inst -1 "exp(y!1)" "exp(x!1)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals)) nil))
 (exp_increasing 0
  (exp_increasing-1 nil 3253532189
   ("" (lemma "exp_strict_increasing")
    (("" (expand "increasing?")
      (("" (skosimp*)
        (("" (expand "strict_increasing?")
          (("" (inst?)
            (("" (inst -1 "y!1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   nil))
 (exp_continuous 0
  (exp_continuous-1 nil 3253532189
   ("" (expand "continuous?")
    (("" (skosimp*)
      (("" (expand "continuous?")
        (("" (skosimp*)
          (("" (case "epsilon!1 < exp(x0!1)")
            (("1"
              (inst +
               "real_defs.min(x0!1 - ln(exp(x0!1) - epsilon!1), ln(exp(x0!1) + epsilon!1) - x0!1)")
              (("1" (skosimp*)
                (("1"
                  (case "x0!1 - ln(exp(x0!1) - epsilon!1) <=           ln(exp(x0!1) + epsilon!1) - x0!1")
                  (("1" (expand "min")
                    (("1" (assert)
                      (("1" (case "x!1 - x0!1 < 0")
                        (("1" (expand "abs")
                          (("1" (assert)
                            (("1" (lemma "exp_strict_increasing")
                              (("1"
                                (expand "strict_increasing?")
                                (("1"
                                  (inst -1 "x!1" "x0!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "exp(x!1)  > exp(ln(exp(x0!1) - epsilon!1))")
                                      (("1"
                                        (rewrite "exp_ln")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 -3 -4 2)
                                        (("2"
                                          (lemma
                                           "exp_strict_increasing")
                                          (("2"
                                            (expand
                                             "strict_increasing?")
                                            (("2"
                                              (inst
                                               -1
                                               "ln(exp(x0!1) - epsilon!1)"
                                               "x!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "abs")
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (lemma "exp_increasing")
                                (("2"
                                  (expand "increasing?")
                                  (("2"
                                    (inst -1 "x0!1" "x!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "exp(x!1) <= exp(ln(exp(x0!1) + epsilon!1))")
                                        (("1"
                                          (rewrite "exp_ln")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -1 -3 2 3)
                                            (("2"
                                              (lemma "exp_increasing")
                                              (("2"
                                                (expand "increasing?")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "x!1"
                                                   "ln(exp(x0!1) + epsilon!1)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "min")
                      (("2" (case-replace "x!1 - x0!1 >= 0")
                        (("1" (expand "abs")
                          (("1" (assert)
                            (("1" (lemma "exp_increasing")
                              (("1"
                                (expand "increasing?")
                                (("1"
                                  (inst -1 "x0!1" "x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "exp(x!1) < exp(ln(exp(x0!1) + epsilon!1))")
                                      (("1"
                                        (rewrite "exp_ln")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide -1 -3 2 3)
                                        (("2"
                                          (lemma
                                           "exp_strict_increasing")
                                          (("2"
                                            (expand
                                             "strict_increasing?")
                                            (("2"
                                              (inst
                                               -1
                                               "x!1"
                                               "ln(exp(x0!1) + epsilon!1)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "abs")
                          (("2" (assert)
                            (("2" (lemma "exp_strict_increasing")
                              (("2"
                                (expand "strict_increasing?")
                                (("2"
                                  (inst -1 "x!1" "x0!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case
                                       "x!1 > ln(exp(x0!1) - epsilon!1)")
                                      (("1"
                                        (hide -4 2)
                                        (("1"
                                          (case
                                           "exp(x!1) > exp(ln(exp(x0!1) - epsilon!1))")
                                          (("1"
                                            (rewrite "exp_ln")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "exp_strict_increasing")
                                            (("2"
                                              (expand
                                               "strict_increasing?")
                                              (("2"
                                                (inst
                                                 -1
                                                 "ln(exp(x0!1) - epsilon!1)"
                                                 "x!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "min")
                  (("2" (lift-if)
                    (("2" (lemma "ln_strict_increasing")
                      (("2" (expand "strict_increasing?")
                        (("2"
                          (inst -1 "exp(x0!1) - epsilon!1" "exp(x0!1)")
                          (("2" (assert)
                            (("2" (lemma "ln_strict_increasing")
                              (("2"
                                (expand "strict_increasing?")
                                (("2"
                                  (inst
                                   -1
                                   "exp(x0!1)"
                                   "exp(x0!1)+epsilon!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert) nil nil))
              nil)
             ("2" (inst + "1/100")
              (("2" (skosimp*)
                (("2" (case "x!1 = x0!1")
                  (("1" (expand "abs") (("1" (assert) nil nil)) nil)
                   ("2" (case "x!1 < x0!1")
                    (("1" (lemma "exp_strict_increasing")
                      (("1" (expand "strict_increasing?")
                        (("1" (inst -1 "x!1" "x0!1")
                          (("1" (assert)
                            (("1" (expand "abs")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "abs")
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (ground)
                              (("2"
                                (lemma "exp_strict_increasing")
                                (("2"
                                  (expand "strict_increasing?")
                                  (("2"
                                    (inst -1 "x!1" "x0!1+1/100")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "exp_sum")
                                        (("2"
                                          (case
                                           "exp(x!1) - exp(x0!1) < exp(1 / 100) * exp(x0!1) - exp(x0!1)")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (factor -1 r)
                                              (("1"
                                                (case
                                                 "(exp(1 / 100) - 1) < 1")
                                                (("1"
                                                  (name-replace
                                                   "E1"
                                                   "(exp(1 / 100) - 1)")
                                                  (("1"
                                                    (mult-by 5 "E1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "epsilon!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal -2)
                                                      (("2"
                                                        (lemma
                                                         "exp_strict_increasing")
                                                        (("2"
                                                          (expand
                                                           "strict_increasing?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "0"
                                                             "1/100")
                                                            (("2"
                                                              (rewrite
                                                               "exp_0")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "exp_strict_increasing")
                                                    (("2"
                                                      (expand
                                                       "strict_increasing?")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "1/100"
                                                         "ln(2)")
                                                        (("2"
                                                          (rewrite
                                                           "exp_ln")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "ln_2_bnds")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   nil))
 (exp_deriv_TCC1 0
  (exp_deriv_TCC1-1 nil 3299599408
   ("" (lemma "deriv_domain_real") (("" (propax) nil nil)) nil)
   ((deriv_domain_real formula-decl nil deriv_domain analysis)) shostak
   (exp_deriv assuming "analysis@derivatives[real].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (exp_deriv_TCC2 0
  (exp_deriv_TCC2-2 "" 3790093627 ("" (assert) nil nil) nil shostak
   (exp_deriv assuming "analysis@derivatives[real].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))
  (exp_deriv_TCC2-1 nil 3299599409
   ("" (skosimp*) (("" (inst + "x!1+1") (("" (assert) nil nil)) nil))
    nil)
   ((not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (exp_deriv assuming "analysis@derivatives[real].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (exp_deriv 0
  (exp_deriv-1 nil 3298213289
   ("" (lemma "inverse_derivable_fun[posreal,real]")
    (("1" (inst?)
      (("1" (inst - "ln" "(LAMBDA (t: posreal): 1/t)")
        (("1" (lemma "deriv_inverse_fun[posreal,real]")
          (("1" (inst - "ln" "exp" "(LAMBDA (t: posreal): 1/t)")
            (("1" (lemma "ln_derivable")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (lemma "ln_bij")
                    (("1" (assert)
                      (("1"
                        (case-replace
                         "inverse?[posreal, real](exp, ln)")
                        (("1" (assert)
                          (("1"
                            (case-replace
                             "(LAMBDA (x: real): 1 / (1 / exp(x))) = exp")
                            (("1" (apply-extensionality 1 :hide? t) nil
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "inverse?")
                            (("2" (skosimp*)
                              (("2"
                                (lemma "ln_exp")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (expand "connected?") (("2" (propax) nil nil)) nil)) nil))
    nil)
   ((deriv_inverse_fun formula-decl nil derivative_inverse analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (inverse_derivable_fun formula-decl nil derivative_inverse
     analysis))
   shostak))
 (derivable_exp 0
  (derivable_exp-1 nil 3782648827
   ("" (lemma "exp_deriv") (("" (flatten) nil nil)) nil) nil shostak))
 (derivable_exp_point 0
  (derivable_exp_point-1 nil 3827864124
   ("" (skeep)
    (("" (lemma "derivable_exp")
      (("" (expand "derivable?" -1) (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((derivable_exp formula-decl nil ln_exp nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable? const-decl "bool" derivatives analysis))
   shostak))
 (derivative_exp_TCC1 0
  (derivative_exp_TCC1-1 nil 3782648561
   ("" (lemma "exp_deriv") (("" (flatten) nil nil)) nil) nil nil
   (derivative_exp subtype "ln_exp.exp" "deriv_fun[real]")))
 (derivative_exp 0
  (derivative_exp-1 nil 3782648843
   ("" (lemma "exp_deriv") (("" (flatten) nil nil)) nil) nil shostak))
 (e_bnds 0
  (e_bnds-1 nil 3253532189
   ("" (expand "e")
    (("" (lemma "ln_2_bnds")
      (("" (flatten)
        (("" (mult-by -1 "2")
          (("" (lemma "ln_expt")
            (("" (inst -1 "2" "2")
              (("" (replace -1 * rl)
                (("" (hide -1)
                  (("" (expand "^")
                    (("" (expand "expt")
                      (("" (expand "expt")
                        (("" (expand "expt")
                          (("" (typepred "exp(1)")
                            (("" (hide -1 -2)
                              ((""
                                (replace -1 (-2 -3))
                                ((""
                                  (hide -1)
                                  ((""
                                    (lemma "exp_increasing")
                                    ((""
                                      (expand "increasing?")
                                      ((""
                                        (inst -1 "ln(exp(1))" "ln(4)")
                                        ((""
                                          (assert)
                                          ((""
                                            (rewrite "exp_ln")
                                            ((""
                                              (rewrite "exp_ln")
                                              ((""
                                                (assert)
                                                ((""
                                                  (lemma
                                                   "exp_increasing")
                                                  ((""
                                                    (expand
                                                     "increasing?")
                                                    ((""
                                                      (inst
                                                       -1
                                                       "ln(2)"
                                                       "ln(exp(1))")
                                                      ((""
                                                        (assert)
                                                        ((""
                                                          (rewrite
                                                           "exp_ln")
                                                          ((""
                                                            (rewrite
                                                             "exp_ln")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)) nil))
 (large_exp 0
  (large_exp-1 nil 3253532189
   ("" (skosimp*)
    (("" (case "a!1 <= 0")
      (("1" (inst + "0")
        (("1" (rewrite "exp_0") (("1" (assert) nil nil)) nil)) nil)
       ("2" (inst + "ln(a!1) + 1")
        (("1" (rewrite "exp_sum")
          (("1" (rewrite "exp_ln")
            (("1" (rewrite "exp_1")
              (("1" (case "e > 1")
                (("1" (mult-by -1 "a!1") (("1" (assert) nil nil)) nil)
                 ("2" (hide-all-but 1)
                  (("2" (lemma "e_bnds")
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil nil))
 (small_exp 0
  (small_exp-1 nil 3253532189
   ("" (skosimp*)
    (("" (inst + "ln(px!1) - 1")
      (("" (rewrite "exp_diff")
        (("" (rewrite "exp_ln")
          (("" (mult-by 1 "exp(1)")
            (("" (rewrite "exp_1")
              (("" (case "e > 1")
                (("1" (mult-by -1 "px!1") (("1" (assert) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (lemma "e_bnds")
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)))

