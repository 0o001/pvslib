affine_bandb: THEORY
BEGIN

  IMPORTING affine_expr, interval_arith@safe_arith,
            structures@array2list[real]

  IMPORTING affine_expr_Eval

  AnsType: TYPE = Interval

  IMPORTING structures@branch_and_bound[RealExpr,AnsType,Box,nat]

  expr      : VAR RealExpr
  box       : VAR Box
  v         : VAR nat
  maxdepth  : VAR nat
  dirvar    : VAR DirVar
  dirvars   : VAR DirVarStack
  ans,
  ans1,ans2 : VAR AnsType
  acc       : VAR AnsType

  evaluate(box,expr) : AnsType = LET eval_res = Eval(expr,box) IN
  		       	       	 IF some?(eval_res) THEN eval_by_intervals(val(eval_res))
				 ELSE EmptyInterval ENDIF

  branch(v,expr) : [RealExpr,RealExpr] = (expr,expr)
  subdivide(v,box) : [Box,Box]   = split(v,box)
  denorm(dirvar,ans) : AnsType   = ans
  combine(v,ans1,ans2) : AnsType = Safe2(interval.Union)(ans1,ans2)
  accumulate(acc,ans) : AnsType  = combine(0,acc,ans)

  prune(dirvars,acc,ans) : bool = false
  le(ans) : bool = false
  ge(dirvars,acc,ans) : bool = EmptyInterval?(ans)


  altvar(dirvars,acc,box,expr) : DirVar =
    IF null?(box) THEN 
      (FALSE,0)
    ELSE
      (FALSE,mod(length(dirvars),length(box)))
    ENDIF


  simple_affine(maxdepth,expr,box) : Output =
    b_and_b_id(evaluate,branch,subdivide,denorm,combine,prune,
               le,ge,altvar,accumulate,maxdepth,expr,box)

  sound?(box,expr,ans) : bool = 
    Proper?(ans) IMPLIES
      FORALL (vs:(vars_in_box?(box))): eval_ACExpr_Env(expr,vs) ## ans

  simple_affine_soundness : THEOREM
    sound?(box,expr,simple_affine(maxdepth,expr,box)`ans)


END affine_bandb
