(affine_bandb_numerical_examples
 (example_1_a_TCC1 0
  (example_1_a_TCC1-1 nil 3635521897 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_1_a_TCC2 0
  (example_1_a_TCC2-1 nil 3635521897 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_1_a 0
  (example_1_a-1 nil 3635521898
   ("" (skeep)
    (("" (aff-numerical (! 1 1) :precision 3 :maxdepth 9) nil nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (FALSE const-decl "bool" booleans nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (altdir_maxvar const-decl "DirVar" affine_bandb_numerical nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (numerical const-decl "Output" affine_bandb_numerical nil)
    (Output type-eq-decl nil branch_and_bound "structures/")
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (length def-decl "nat" list_props nil)
    (stack type-eq-decl nil stack "structures/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (ProperBox? const-decl "bool" affine_box nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IntervalMinMax type-eq-decl nil affine_bandb_numerical nil)
    (Maybe type-decl nil Maybe "structures/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (ProperBox type-eq-decl nil affine_box nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vars_in_box_rec def-decl "{b: bool |
         b =
          (EXISTS (N: Noise):
             FORALL (k: subrange(i, n - 1)):
               vs(k) ## nth(box, k - i) AND
                eval_ac_noise(var_ac(nth(box, k - i), k), N) = vs(k) AND
                 (SingInterval?(nth(box, k - i)) IMPLIES
                   get_noise_by_idx(k, N) = 0))}" affine_box nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (vars_in_box formula-decl nil affine_box nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ub_interval formula-decl nil interval "interval_arith/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (nml_57 skolem-const-decl "(sub?)" affine_bandb_numerical_examples
            nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (x skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (list2array def-decl "T" array2list "structures/")
    (vars_in_box? const-decl "bool" affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (listn_0 name-judgement "listn[real](0)" affine_bandb nil)
    (sound? const-decl "bool" affine_bandb_numerical nil)
    (numerical_soundness formula-decl nil affine_bandb_numerical nil)
    (r2E const-decl "RealExpr" affine_expr nil)
    (BaseType type-eq-decl nil affine nil)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     AffineExpr_adt nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil))
   shostak))
 (example_1_b_TCC1 0
  (example_1_b_TCC1-1 nil 3635521897 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_1_b_TCC2 0
  (example_1_b_TCC2-1 nil 3635521897 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_1_b 0
  (example_1_b-1 nil 3635521930
   ("" (skeep)
    (("" (aff-numerical (! 1 1) :precision 3 :maxdepth 16) nil nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (FALSE const-decl "bool" booleans nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (altdir_maxvar const-decl "DirVar" affine_bandb_numerical nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (numerical const-decl "Output" affine_bandb_numerical nil)
    (Output type-eq-decl nil branch_and_bound "structures/")
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (length def-decl "nat" list_props nil)
    (stack type-eq-decl nil stack "structures/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (ProperBox? const-decl "bool" affine_box nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IntervalMinMax type-eq-decl nil affine_bandb_numerical nil)
    (Maybe type-decl nil Maybe "structures/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (ProperBox type-eq-decl nil affine_box nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vars_in_box_rec def-decl "{b: bool |
         b =
          (EXISTS (N: Noise):
             FORALL (k: subrange(i, n - 1)):
               vs(k) ## nth(box, k - i) AND
                eval_ac_noise(var_ac(nth(box, k - i), k), N) = vs(k) AND
                 (SingInterval?(nth(box, k - i)) IMPLIES
                   get_noise_by_idx(k, N) = 0))}" affine_box nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (vars_in_box formula-decl nil affine_box nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ub_interval formula-decl nil interval "interval_arith/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (nml_58 skolem-const-decl "(sub?)" affine_bandb_numerical_examples
            nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (x skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (list2array def-decl "T" array2list "structures/")
    (vars_in_box? const-decl "bool" affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (listn_0 name-judgement "listn[real](0)" affine_bandb nil)
    (sound? const-decl "bool" affine_bandb_numerical nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (numerical_soundness formula-decl nil affine_bandb_numerical nil)
    (r2E const-decl "RealExpr" affine_expr nil)
    (BaseType type-eq-decl nil affine nil)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     AffineExpr_adt nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil))
   shostak))
 (example_2_TCC1 0
  (example_2_TCC1-1 nil 3635522221 ("" (subtype-tcc) nil nil)
   (([\|\|] const-decl "Interval" interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (example_2 0
  (example_2-1 nil 3635522222
   ("" (skeep)
    (("" (aff-numerical (! 1 1) :precision 3 :maxdepth 8) nil nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (FALSE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (altdir_maxvar const-decl "DirVar" affine_bandb_numerical nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (numerical const-decl "Output" affine_bandb_numerical nil)
    (Output type-eq-decl nil branch_and_bound "structures/")
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (length def-decl "nat" list_props nil)
    (stack type-eq-decl nil stack "structures/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (ProperBox? const-decl "bool" affine_box nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IntervalMinMax type-eq-decl nil affine_bandb_numerical nil)
    (Maybe type-decl nil Maybe "structures/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (ProperBox type-eq-decl nil affine_box nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vars_in_box_rec def-decl "{b: bool |
         b =
          (EXISTS (N: Noise):
             FORALL (k: subrange(i, n - 1)):
               vs(k) ## nth(box, k - i) AND
                eval_ac_noise(var_ac(nth(box, k - i), k), N) = vs(k) AND
                 (SingInterval?(nth(box, k - i)) IMPLIES
                   get_noise_by_idx(k, N) = 0))}" affine_box nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (vars_in_box formula-decl nil affine_box nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ub_interval formula-decl nil interval "interval_arith/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nml_59 skolem-const-decl "(add?)" affine_bandb_numerical_examples
            nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (x skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (list2array def-decl "T" array2list "structures/")
    (vars_in_box? const-decl "bool" affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (listn_0 name-judgement "listn[real](0)" affine_bandb nil)
    (sound? const-decl "bool" affine_bandb_numerical nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (numerical_soundness formula-decl nil affine_bandb_numerical nil)
    (X const-decl "RealExpr" affine_expr nil)
    (r2E const-decl "RealExpr" affine_expr nil)
    (BaseType type-eq-decl nil affine nil)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     AffineExpr_adt nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     AffineExpr_adt nil)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil))
   shostak))
 (example_legendre_TCC1 0
  (example_legendre_TCC1-1 nil 3635522293 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_legendre_TCC2 0
  (example_legendre_TCC2-1 nil 3635522293 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_legendre_TCC3 0
  (example_legendre_TCC3-1 nil 3635522293 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_legendre_TCC4 0
  (example_legendre_TCC4-1 nil 3635522293 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_legendre_TCC5 0
  (example_legendre_TCC5-1 nil 3635522293 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_legendre_TCC6 0
  (example_legendre_TCC6-1 nil 3635522293 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_legendre_TCC7 0
  (example_legendre_TCC7-1 nil 3635522293 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_legendre_TCC8 0
  (example_legendre_TCC8-1 nil 3635522293 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_legendre_TCC9 0
  (example_legendre_TCC9-1 nil 3635522293 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_legendre 0
  (example_legendre-1 nil 3635522294
   ("" (skeep)
    (("" (aff-numerical (! 1 1) :precision 3 :maxdepth 4) nil nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (FALSE const-decl "bool" booleans nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (altdir_maxvar const-decl "DirVar" affine_bandb_numerical nil)
    (numerical const-decl "Output" affine_bandb_numerical nil)
    (Output type-eq-decl nil branch_and_bound "structures/")
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (length def-decl "nat" list_props nil)
    (stack type-eq-decl nil stack "structures/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (ProperBox? const-decl "bool" affine_box nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IntervalMinMax type-eq-decl nil affine_bandb_numerical nil)
    (Maybe type-decl nil Maybe "structures/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (ProperBox type-eq-decl nil affine_box nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" affine_bandb nil)
    (Env type-eq-decl nil affine_box nil)
    (vars_in_box? const-decl "bool" affine_box nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list2array def-decl "T" array2list "structures/")
    (x skolem-const-decl "real" affine_bandb_numerical_examples nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nml_60 skolem-const-decl "(sub?)" affine_bandb_numerical_examples
            nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (ub_interval formula-decl nil interval "interval_arith/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (vars_in_box formula-decl nil affine_box nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (vars_in_box_rec def-decl "{b: bool |
         b =
          (EXISTS (N: Noise):
             FORALL (k: subrange(i, n - 1)):
               vs(k) ## nth(box, k - i) AND
                eval_ac_noise(var_ac(nth(box, k - i), k), N) = vs(k) AND
                 (SingInterval?(nth(box, k - i)) IMPLIES
                   get_noise_by_idx(k, N) = 0))}" affine_box nil)
    (sound? const-decl "bool" affine_bandb_numerical nil)
    (numerical_soundness formula-decl nil affine_bandb_numerical nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     AffineExpr_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (r2E const-decl "RealExpr" affine_expr nil)
    (BaseType type-eq-decl nil affine nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     AffineExpr_adt nil)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil))
   shostak))
 (Heart_TCC1 0
  (Heart_TCC1-1 nil 3630870274 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (Heart_TCC2 0
  (Heart_TCC2-1 nil 3630870274 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_hdp_mm_TCC1 0
  (example_hdp_mm_TCC1-1 nil 3635522490 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_hdp_mm_TCC2 0
  (example_hdp_mm_TCC2-1 nil 3635522490 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_hdp_mm_TCC3 0
  (example_hdp_mm_TCC3-1 nil 3635522490 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_hdp_mm_TCC4 0
  (example_hdp_mm_TCC4-1 nil 3635522490 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_hdp_mm_TCC5 0
  (example_hdp_mm_TCC5-1 nil 3635522490 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_hdp_mm_TCC6 0
  (example_hdp_mm_TCC6-1 nil 3635522490 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (example_hdp_mm 0
  (example_hdp_mm-1 nil 3635522491
   ("" (skeep)
    (("" (aff-numerical (! 1 1) :precision 3 :maxdepth 10) nil nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (FALSE const-decl "bool" booleans nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (altdir_maxvar const-decl "DirVar" affine_bandb_numerical nil)
    (numerical const-decl "Output" affine_bandb_numerical nil)
    (Output type-eq-decl nil branch_and_bound "structures/")
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (length def-decl "nat" list_props nil)
    (stack type-eq-decl nil stack "structures/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (ProperBox? const-decl "bool" affine_box nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IntervalMinMax type-eq-decl nil affine_bandb_numerical nil)
    (Maybe type-decl nil Maybe "structures/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (ProperBox type-eq-decl nil affine_box nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" affine_bandb nil)
    (Env type-eq-decl nil affine_box nil)
    (vars_in_box? const-decl "bool" affine_box nil)
    (list2array def-decl "T" array2list "structures/")
    (x0 skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (x2 skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (x6 skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (x5 skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (x1 skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (x3 skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (x7 skolem-const-decl "real" affine_bandb_numerical_examples nil)
    (x4 skolem-const-decl "real" affine_bandb_numerical_examples nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (nml_61 skolem-const-decl "(sub?)" affine_bandb_numerical_examples
            nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (ub_interval formula-decl nil interval "interval_arith/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (vars_in_box formula-decl nil affine_box nil)
    (vars_in_box_rec def-decl "{b: bool |
         b =
          (EXISTS (N: Noise):
             FORALL (k: subrange(i, n - 1)):
               vs(k) ## nth(box, k - i) AND
                eval_ac_noise(var_ac(nth(box, k - i), k), N) = vs(k) AND
                 (SingInterval?(nth(box, k - i)) IMPLIES
                   get_noise_by_idx(k, N) = 0))}" affine_box nil)
    (sound? const-decl "bool" affine_bandb_numerical nil)
    (numerical_soundness formula-decl nil affine_bandb_numerical nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (r2E const-decl "RealExpr" affine_expr nil)
    (BaseType type-eq-decl nil affine nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (X const-decl "RealExpr" affine_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" AffineExpr_adt
     nil)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     AffineExpr_adt nil)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     AffineExpr_adt nil)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil))
   shostak)))

