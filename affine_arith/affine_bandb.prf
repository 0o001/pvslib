(affine_bandb
 (altvar_TCC1 0
  (altvar_TCC1-1 nil 3627226550 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (altvar_TCC2 0
  (altvar_TCC2-1 nil 3627226550
   ("" (skeep :preds? t)
    (("" (lemma "mod_pos")
      (("" (inst?)
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((mod_pos formula-decl nil mod nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (stack type-eq-decl nil stack "structures/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (AnsType type-eq-decl nil affine_bandb nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Box type-eq-decl nil affine_box nil)
    (box skolem-const-decl "Box" affine_bandb nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (simple_affine_soundness 0
  (simple_affine_soundness-1 nil 3627301744
   ("" (skeep)
    (("" (lemma "b_and_b_id_sound")
      (("" (expand "simple_affine")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (split)
                (("1" (expand "accomodates?")
                  (("1" (skeep)
                    (("1" (expand "sound?")
                      (("1" (flatten)
                        (("1" (skeep)
                          (("1" (lemma "EvalwCache_inclusion")
                            (("1" (inst?)
                              (("1"
                                (beta)
                                (("1"
                                  (expand "evaluate")
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "Eval")
                                          (("1"
                                            (lift-if -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "containment_interval")
                                                    (("1"
                                                      (expand
                                                       "containment")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "Eval")
                                          (("2"
                                            (lift-if 1)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "subdiv_presound?")
                  (("2" (skeep)
                    (("2" (expand "denorm")
                      (("2" (expand "branch")
                        (("2" (expand "subdivide")
                          (("2" (expand "sound?")
                            (("2" (flatten)
                              (("2"
                                (expand "combine")
                                (("2"
                                  (use "Proper_Safe2")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (replaces -3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skeep :preds? t)
                                            (("2"
                                              (inst - "vs")
                                              (("2"
                                                (rewrite
                                                 "Union_inclusion")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "subdiv_sound?")
                  (("3" (skeep)
                    (("3" (expand "denorm")
                      (("3" (expand "branch")
                        (("3" (expand "subdivide")
                          (("3" (expand "sound?")
                            (("3" (flatten)
                              (("3"
                                (expand "combine")
                                (("3"
                                  (use "Proper_Safe2")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (replaces -3)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (skeep :preds? t)
                                            (("3"
                                              (lemma
                                               "split_vars_in_box")
                                              (("3"
                                                (inst
                                                 -1
                                                 "dom"
                                                 "vs"
                                                 "v")
                                                (("3"
                                                  (beta)
                                                  (("3"
                                                    (split -1)
                                                    (("1"
                                                      (inst? -5)
                                                      (("1"
                                                        (rewrite
                                                         "Union_inclusion")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (inst? -6)
                                                        (("2"
                                                          (rewrite
                                                           "Union_inclusion")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (AnsType type-eq-decl nil affine_bandb nil)
    (real nonempty-type-from-decl nil reals nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (b_and_b_id_sound formula-decl nil branch_and_bound "structures/")
    (Accumulator type-eq-decl nil branch_and_bound "structures/")
    (accumulate const-decl "AnsType" affine_bandb nil)
    (Brancher type-eq-decl nil branch_and_bound "structures/")
    (branch const-decl "[RealExpr, RealExpr]" affine_bandb nil)
    (Combiner type-eq-decl nil branch_and_bound "structures/")
    (combine const-decl "AnsType" affine_bandb nil)
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (DenormAns type-eq-decl nil branch_and_bound "structures/")
    (denorm const-decl "AnsType" affine_bandb nil)
    (Evaluator type-eq-decl nil branch_and_bound "structures/")
    (evaluate const-decl "AnsType" affine_bandb nil)
    (stack type-eq-decl nil stack "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (ExitPred type-eq-decl nil branch_and_bound "structures/")
    (ge const-decl "bool" affine_bandb nil)
    (LocalExitPred type-eq-decl nil branch_and_bound "structures/")
    (le const-decl "bool" affine_bandb nil)
    (prune const-decl "bool" affine_bandb nil)
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (altvar const-decl "DirVar" affine_bandb nil)
    (SoundPred type-eq-decl nil branch_and_bound "structures/")
    (sound? const-decl "bool" affine_bandb nil)
    (SubdivDomain type-eq-decl nil branch_and_bound "structures/")
    (subdivide const-decl "[Box, Box]" affine_bandb nil)
    (subdiv_sound? const-decl "bool" branch_and_bound "structures/")
    (split_vars_in_box formula-decl nil affine_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (split def-decl "{lrb: [Box, Box] |
         LET (lb, rb) = lrb IN
           length(lb) = length(box) AND
            length(rb) = length(box) AND
             (FORALL (i: below(length(box))):
                IF i = v
                  THEN nth(lb, i) = HalfLeft(nth(box, i)) AND
                        nth(rb, i) = HalfRight(nth(box, i))
                ELSE nth(lb, i) = nth(box, i) AND nth(rb, i) = nth(box, i)
                ENDIF)}" affine_expr nil)
    (v skolem-const-decl "nat" affine_bandb nil)
    (dom skolem-const-decl "Box" affine_bandb nil)
    (vs skolem-const-decl "(vars_in_box?(dom))" affine_bandb nil)
    (subdiv_presound? const-decl "bool" branch_and_bound "structures/")
    (Proper_Safe2 formula-decl nil safe_arith "interval_arith/")
    (Union const-decl "Interval" interval "interval_arith/")
    (Union_inclusion formula-decl nil interval "interval_arith/")
    (accomodates? const-decl "bool" branch_and_bound "structures/")
    (vars_in_box? const-decl "bool" affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Eval const-decl "Maybe[AffineCombination]" affine_expr_Eval nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (containment const-decl "bool" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Eval_wCache def-decl
     "{result: Maybe[[nat, (correct_cache?(box))]] |
         some?(result) IMPLIES
          LET res = val(result)`2, newnidx = val(result)`1 IN
                 NOT null?(res) AND car(res)`1 = re
             AND (EXISTS (l: list[CacheData]): res = append(l, cache))
             AND newnidx >= nextfreeidx AND idxs_bounded(newnidx)(res)}"
     affine_expr_Eval nil)
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (EmptyInterval const-decl "Interval" interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (EvalwCache_inclusion formula-decl nil affine_expr_Eval nil)
    (simple_affine const-decl "Output" affine_bandb nil))
   nil)))

