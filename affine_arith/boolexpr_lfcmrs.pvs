boolexpr_lfcmrs  % Left First Contextualized Mutual Recursion Schema
[ (IMPORTING interval_arith@interval_expr)

  f_Ctxt : TYPE % Contextualized Data

, f_post: [BoolExpr,f_Ctxt -> [f_Ctxt -> bool]]
%
%  BCONST(opb:bool) : bconst?                                  : BoolExpr       .
%
, f_BCONST: 
    [ bcon: (bconst?), c0: f_Ctxt -> (f_post(bcon,c0)) ]
%
%  BNOT(bop:BoolExpr) : bnot?                                  : BoolExpr       .
%
, f_BNOT         : 
    [ bnot: (bnot?), c0: f_Ctxt 
      -> [ c1: (f_post(bop(bnot),c0)) 
      	   -> (f_post(bnot,c0))]]
%
%  BAND(bop1,bop2:BoolExpr) : band?                            : BoolExpr       .
%
, f_BAND:
    [ band: (band?), c0: f_Ctxt 
      -> [c1: (f_post(bop1(band),c0)), (f_post(bop2(band),c1)) 
          -> (f_post(band,c0))] ]
%
%  BOR(bop1,bop2:BoolExpr) : bor?                              : BoolExpr       .
%
, f_BOR:
    [ bor: (bor?), c0: f_Ctxt 
      -> [c1: (f_post(bop1(bor),c0)), (f_post(bop2(bor),c1)) 
          -> (f_post(bor,c0))] ]
%
%  BIMPLIES(bop1,bop2:BoolExpr) : bimplies?                    : BoolExpr       .
%
, f_BIMPLIES    : 
    [ bimp: (bimplies?), c0: f_Ctxt 
      -> [c1: (f_post(bop1(bimp),c0)), (f_post(bop2(bimp),c1)) 
          -> (f_post(bimp,c0))] ]
%
%  BREL(rel:RealOrder,op1,op2:RealExpr) : brel?                : BoolExpr       .
%
, f_BREL: 
    [ brel: (brel?)     , c0: f_Ctxt -> (f_post(brel,c0)) ]
%
%  BINCLUDES(op:RealExpr,opi:Interval) : bincludes?            : BoolExpr
%
, f_BINCLUDES: 
    [binc: (bincludes?) , c0: f_Ctxt -> (f_post(binc,c0)) ]
%
%  BITE(bif,bthen,belse:BoolExpr) : bite?                      : BoolExpr       .
%
, f_BITE_merge1:                        % first merge function for BITE
    [ f_Ctxt, f_Ctxt -> f_Ctxt]    
, f_BITE_merge2:                        % second merge function for BITE
    [f_Ctxt,f_Ctxt,f_Ctxt-> f_Ctxt] 
, f_BITE: 
    [ bite: (bite?), c0: f_Ctxt 
      -> [ c1: (f_post(bif(bite),c0))
         , c2: (f_post(bthen(bite),f_BITE_merge1(c0,c1)))
         , (f_post(belse(bite),f_BITE_merge2(c0,c1,c2))) 
           -> (f_post(bite,c0))]]
%
%  BLETIN(blet:IntervalExpr,bin:BoolExpr) : bletin?            : BoolExpr
%
, f_BLETIN_RealExpr_ini: [(realexpr?),f_Ctxt -> f_Ctxt] % Preprocessing of the initial
  			 		      	    % context (intializing function)
, f_BLETIN_RealExpr: 
    [ bli: {b_ : (bletin?) | realexpr?(blet(b_))}, c0: f_Ctxt 
      -> [ (f_post(bin(bli),f_BLETIN_RealExpr_ini(blet(bli),c0))) 
         	 -> (f_post(bli,c0)) ]]
, f_BLETIN_BoolExpr_merge1:             % first merge function for BLETIN_BoolExpr
    [f_Ctxt,f_Ctxt -> f_Ctxt] 
, f_BLETIN_BoolExpr: 
    [ bli: {b_ : (bletin?) | boolexpr?(blet(b_))}, c0: f_Ctxt 
      -> [ c1: (f_post(blet(bli), c0))
         , (f_post(bin(bli), f_BLETIN_BoolExpr_merge1(c0,c1))) 
           -> (f_post(bli,c0))]]


, g_Ctxt : TYPE % Contextualized Data

, g_post: [BoolExpr,g_Ctxt -> [g_Ctxt -> bool]]

%
%  BCONST(opb:bool) : bconst?                                  : BoolExpr       .
%
, g_BCONST: 
    [ bcon: (bconst?), c0: g_Ctxt -> (g_post(bcon,c0)) ]
%
%  BNOT(bop:BoolExpr) : bnot?                                  : BoolExpr       .
%
, g_BNOT         : 
    [ bnot: (bnot?), c0: g_Ctxt 
      -> [ c1: (g_post(bop(bnot),c0)) 
      	   -> (g_post(bnot,c0))]]
%
%  BAND(bop1,bop2:BoolExpr) : band?                            : BoolExpr       .
%
, g_BAND:
    [ band: (band?), c0: g_Ctxt 
      -> [c1: (g_post(bop1(band),c0)), (g_post(bop2(band),c1)) 
          -> (g_post(band,c0))] ]
%
%  BOR(bop1,bop2:BoolExpr) : bor?                              : BoolExpr       .
%
, g_BOR:
    [ bor: (bor?), c0: g_Ctxt 
      -> [c1: (g_post(bop1(bor),c0)), (g_post(bop2(bor),c1)) 
          -> (g_post(bor,c0))] ]
%
%  BIMPLIES(bop1,bop2:BoolExpr) : bimplies?                    : BoolExpr       .
%
, g_BIMPLIES    : 
    [ bimp: (bimplies?), c0: g_Ctxt 
      -> [c1: (g_post(bop1(bimp),c0)), (g_post(bop2(bimp),c1)) 
          -> (g_post(bimp,c0))] ]
%
%  BREL(rel:RealOrder,op1,op2:RealExpr) : brel?                : BoolExpr       .
%
, g_BREL: 
    [ brel: (brel?)     , c0: g_Ctxt -> (g_post(brel,c0)) ]
%
%  BINCLUDES(op:RealExpr,opi:Interval) : bincludes?            : BoolExpr
%
, g_BINCLUDES: 
    [binc: (bincludes?) , c0: g_Ctxt -> (g_post(binc,c0)) ]
%
%  BITE(bif,bthen,belse:BoolExpr) : bite?                      : BoolExpr       .
%
, g_BITE_merge1:                        % first merge function for BITE
    [ g_Ctxt, g_Ctxt -> g_Ctxt]    
, g_BITE_merge2:                        % second merge function for BITE
    [g_Ctxt,g_Ctxt,g_Ctxt-> g_Ctxt] 
, g_BITE: 
    [ bite: (bite?), c0: g_Ctxt 
      -> [ c1: (g_post(bif(bite),c0))
         , c2: (g_post(bthen(bite),g_BITE_merge1(c0,c1)))
         , (g_post(belse(bite),g_BITE_merge2(c0,c1,c2))) 
           -> (g_post(bite,c0))]]
%
%  BLETIN(blet:IntervalExpr,bin:BoolExpr) : bletin?            : BoolExpr
%
, g_BLETIN_RealExpr_ini: [(realexpr?),g_Ctxt -> g_Ctxt] % Preprocessing of the initial
  			 		      	    % context (intializing function)
, g_BLETIN_RealExpr: 
    [ bli: {b_ : (bletin?) | realexpr?(blet(b_))}, c0: g_Ctxt 
      -> [ (g_post(bin(bli),g_BLETIN_RealExpr_ini(blet(bli),c0))) 
         	 -> (g_post(bli,c0)) ]]
, g_BLETIN_BoolExpr_merge1:             % first merge function for BLETIN_BoolExpr
    [g_Ctxt,g_Ctxt -> g_Ctxt] 
, g_BLETIN_BoolExpr: 
    [ bli: {b_ : (bletin?) | boolexpr?(blet(b_))}, c0: g_Ctxt 
      -> [ c1: (g_post(blet(bli), c0))
         , (g_post(bin(bli), g_BLETIN_BoolExpr_merge1(c0,c1))) 
           -> (g_post(bli,c0))]]


, p: [f_Ctxt,g_Ctxt -> bool]
] : THEORY BEGIN
  ASSUMING
    % p must be preserved locally

    BCONST_preservation: ASSUMPTION 
    FORALL(f_ctxt0: f_Ctxt)(g_ctxt0: g_Ctxt):
    FORALL(opb:bool):
    LET bexpr = BCONST(opb),
        f_  = f_BCONST,
        g_  = g_BCONST
    IN p(f_ctxt0,g_ctxt0) 
       IMPLIES p(f_(bexpr, f_ctxt0), g_(bexpr, g_ctxt0))
  

    BNOT_preservation: ASSUMPTION 
    FORALL(f_ctxt0, f_ctxt1: f_Ctxt)(g_ctxt0, g_ctxt1: g_Ctxt):
    FORALL(bop:BoolExpr):
    LET bexpr = BNOT(bop),
        f_  = f_BNOT,
        g_  = g_BNOT
    IN f_post (bop,f_ctxt0) (f_ctxt1) AND
       g_post (bop,g_ctxt0) (g_ctxt1) AND 
       p (f_ctxt1,g_ctxt1)
       IMPLIES p( f_(bexpr,f_ctxt0)(f_ctxt1), g_(bexpr,g_ctxt0)(g_ctxt1) )
  

    BAND_preservation: ASSUMPTION
    FORALL(f_ctxt0,f_ctxt1,f_ctxt2: f_Ctxt)(g_ctxt0,g_ctxt1,g_ctxt2: g_Ctxt):
    FORALL(bop1,bop2:BoolExpr):
    LET bexpr = BAND(bop1,bop2),
        f_  = f_BAND,
        g_  = g_BAND
    IN f_post(bop1,f_ctxt0)(f_ctxt1) AND g_post(bop1,g_ctxt0)(g_ctxt1) AND p(f_ctxt1,g_ctxt1) AND
       f_post(bop2,f_ctxt1)(f_ctxt2) AND g_post(bop2,g_ctxt1)(g_ctxt2) AND p(f_ctxt2,g_ctxt2)
       IMPLIES p(f_(bexpr,f_ctxt0)(f_ctxt1,f_ctxt2), g_(bexpr,g_ctxt0)(g_ctxt1,g_ctxt2))
  
    BINCLUDES_preservation: ASSUMPTION 
    FORALL(f_ctxt0: f_Ctxt)(g_ctxt0: g_Ctxt):
    FORALL(op:RealExpr,opi:Interval):
    LET bexpr = BINCLUDES(op,opi),
        f_  = f_BINCLUDES,
        g_  = g_BINCLUDES
    IN p(f_ctxt0,g_ctxt0) 
       IMPLIES p(f_(bexpr,f_ctxt0), g_(bexpr,g_ctxt0))

    BREL_preservation: ASSUMPTION 
    FORALL(f_ctxt0: f_Ctxt)(g_ctxt0: g_Ctxt):
    FORALL(rel:RealOrder, op1,op2:RealExpr):
    LET bexpr = BREL(rel,op1,op2),
        f_  = f_BREL,
        g_  = g_BREL
    IN p(f_ctxt0,g_ctxt0) 
       IMPLIES p(f_(bexpr,f_ctxt0), g_(bexpr,g_ctxt0))

    BLETIN_RealExpr_preservation: ASSUMPTION 
    FORALL(f_ctxt0, f_ctxtbin: f_Ctxt)(g_ctxt0, g_ctxtbin: g_Ctxt):
    FORALL(blet:RealExpr,bin:BoolExpr):
    LET bexpr = BLETIN(blet,bin),
        f_  = f_BLETIN_RealExpr,
        g_  = g_BLETIN_RealExpr
    IN 
       p(f_ctxt0,g_ctxt0) AND
       f_post(bin, f_BLETIN_RealExpr_ini(blet, f_ctxt0))(f_ctxtbin) AND
       g_post(bin, g_BLETIN_RealExpr_ini(blet, g_ctxt0))(g_ctxtbin) AND
       p(f_ctxtbin,g_ctxtbin)
       IMPLIES p( f_(bexpr,f_ctxt0)(f_ctxtbin) 
       	        , g_(bexpr,g_ctxt0)(g_ctxtbin) )

    BLETIN_RealExpr_ini_pre_preservation: ASSUMPTION
    FORALL(fct0: f_Ctxt)(gct0: g_Ctxt):
    FORALL(blet:RealExpr):
      p (fct0,gct0) 
      IMPLIES p( f_BLETIN_RealExpr_ini(blet, fct0)
    	    	 , g_BLETIN_RealExpr_ini(blet, gct0) ) 


    BLETIN_BoolExpr_preservation: ASSUMPTION 
    FORALL(f_ctxt0,f_ctxt1,f_ctxt2: f_Ctxt)(g_ctxt0,g_ctxt1,g_ctxt2: g_Ctxt):
    FORALL(blet:BoolExpr,bin:BoolExpr):
    LET bexpr = BLETIN(blet,bin),
        f_  = f_BLETIN_BoolExpr,
        g_  = g_BLETIN_BoolExpr
    IN p(f_ctxt0,g_ctxt0)        AND
       f_post(blet,f_ctxt0)(f_ctxt1) AND g_post(blet,g_ctxt0)(g_ctxt1) AND
       p(f_ctxt1,g_ctxt1)        AND p(f_ctxt1,g_ctxt1)            AND
       f_post(bin,f_BLETIN_BoolExpr_merge1(f_ctxt0,f_ctxt1))(f_ctxt2)  AND 
       g_post(bin,g_BLETIN_BoolExpr_merge1(g_ctxt0,g_ctxt1))(g_ctxt2)  AND
       p(f_ctxt2,g_ctxt2)        AND p(f_ctxt2,g_ctxt2) 
       IMPLIES p(f_(bexpr,f_ctxt0)(f_ctxt1,f_ctxt2), g_(bexpr,g_ctxt0)(g_ctxt1,g_ctxt2))
  

    BLETIN_BoolExpr_merge_pre_preservation: ASSUMPTION
    FORALL(fct0,fct1: f_Ctxt)(gct0,gct1: g_Ctxt):
    p(fct0, gct0) AND
    p(fct1, gct1) 
     IMPLIES p(f_BLETIN_BoolExpr_merge1(fct0,fct1),g_BLETIN_BoolExpr_merge1(gct0,gct1))


    BITE_preservation: ASSUMPTION
    FORALL(f_ctxt0: f_Ctxt)(g_ctxt0 : g_Ctxt):
    FORALL(f_ctxt1: f_Ctxt)(g_ctxt1 : g_Ctxt):
    FORALL(f_ctxt2,f_ctxt3: f_Ctxt)(g_ctxt2,g_ctxt3: g_Ctxt):
    FORALL(bop1,bop2,bop3:BoolExpr):
    LET bexpr = BITE(bop1,bop2,bop3),
        f_  = f_BITE,
        g_  = g_BITE
    IN 
       p(f_ctxt1,g_ctxt1) AND
       p(f_ctxt2,g_ctxt2) AND
       p(f_ctxt3,g_ctxt3) AND
       f_post (bop1, f_ctxt0) (f_ctxt1) AND 
       g_post (bop1, g_ctxt0) (g_ctxt1) AND 
       f_post (bop2, f_BITE_merge1(f_ctxt0, f_ctxt1)) (f_ctxt2) AND
       g_post (bop2, g_BITE_merge1(g_ctxt0, g_ctxt1)) (g_ctxt2) AND
       f_post (bop3, f_BITE_merge2(f_ctxt0, f_ctxt1, f_ctxt2))(f_ctxt3) AND
       g_post (bop3, g_BITE_merge2(g_ctxt0, g_ctxt1, g_ctxt2))(g_ctxt3) 

       IMPLIES p(f_(bexpr,f_ctxt0)(f_ctxt1,f_ctxt2,f_ctxt3), g_(bexpr,g_ctxt0)(g_ctxt1,g_ctxt2,g_ctxt3))

    BITE_merge1_preservation: ASSUMPTION
    FORALL(fct0,fct1: f_Ctxt)(gct0,gct1: g_Ctxt):
    p(fct0, gct0) AND p(fct1, gct1) 
    IMPLIES p(f_BITE_merge1(fct0,fct1),g_BITE_merge1(gct0,gct1))

    BITE_merge2_preservation: ASSUMPTION
    FORALL(fct0,fct1,fct2: f_Ctxt)(gct0,gct1,gct2: g_Ctxt):
    p(fct0, gct0) AND p(fct1, gct1) AND p(fct2, gct2) 
    IMPLIES p(f_BITE_merge2(fct0,fct1,fct2),g_BITE_merge2(gct0,gct1,gct2))


    BOR_preservation: ASSUMPTION
    FORALL(f_ctxt0, f_ctxt1,f_ctxt2: f_Ctxt)(g_ctxt0,g_ctxt1,g_ctxt2: g_Ctxt):
    FORALL(bop1,bop2:BoolExpr):
    LET bexpr = BOR(bop1,bop2),
        f_  = f_BOR,
        g_  = g_BOR
    IN f_post(bop1,f_ctxt0)(f_ctxt1) AND g_post(bop1,g_ctxt0)(g_ctxt1) AND p(f_ctxt1,g_ctxt1) AND
       f_post(bop2,f_ctxt1)(f_ctxt2) AND g_post(bop2,g_ctxt1)(g_ctxt2) AND p(f_ctxt2,g_ctxt2)
       IMPLIES p(f_(bexpr,f_ctxt0)(f_ctxt1,f_ctxt2), g_(bexpr,g_ctxt0)(g_ctxt1,g_ctxt2))

    BIMPLIES_preservation: ASSUMPTION
    FORALL(f_ctxt0,f_ctxt1,f_ctxt2: f_Ctxt)
    	  (g_ctxt0,g_ctxt1,g_ctxt2: g_Ctxt):
    FORALL(bop1,bop2:BoolExpr):
    LET bexpr = BIMPLIES(bop1,bop2),
        f_  = f_BIMPLIES,
        g_  = g_BIMPLIES
    IN f_post(bop1,f_ctxt0)(f_ctxt1) AND g_post(bop1,g_ctxt0)(g_ctxt1) AND p(f_ctxt1,g_ctxt1) AND
       f_post(bop2,f_ctxt1)(f_ctxt2) AND g_post(bop2,g_ctxt1)(g_ctxt2) AND p(f_ctxt2,g_ctxt2)
       IMPLIES p(f_(bexpr,f_ctxt0)(f_ctxt1,f_ctxt2), g_(bexpr,g_ctxt0)(g_ctxt1,g_ctxt2))

  ENDASSUMING

  IMPORTING boolexpr_lfcs

  f_ctxt, f_ctxt_0: VAR f_Ctxt
  g_ctxt, g_ctxt_0: VAR g_Ctxt
  bexpr: VAR BoolExpr

  f(f_ctxt)(bexpr): MACRO f_Ctxt
  = boolexpr_lfcs[ f_Ctxt
		 , f_post
                 , f_BCONST
                 , f_BNOT
                 , f_BAND
                 , f_BOR
                 , f_BIMPLIES
                 , f_BREL
                 , f_BINCLUDES
		 , f_BITE_merge1
		 , f_BITE_merge2
		 , f_BITE
    		 , f_BLETIN_RealExpr_ini
		 , f_BLETIN_RealExpr
		 , f_BLETIN_BoolExpr_merge1
		 , f_BLETIN_BoolExpr
                 ].F(bexpr)(f_ctxt)

  g(g_ctxt)(bexpr): MACRO g_Ctxt
  = boolexpr_lfcs[ g_Ctxt
                 , g_post
                 , g_BCONST
                 , g_BNOT
                 , g_BAND
                 , g_BOR
                 , g_BIMPLIES
                 , g_BREL
                 , g_BINCLUDES
		 , g_BITE_merge1
		 , g_BITE_merge2
		 , g_BITE
		 , g_BLETIN_RealExpr_ini
		 , g_BLETIN_RealExpr
		 , g_BLETIN_BoolExpr_merge1
		 , g_BLETIN_BoolExpr
                 ].F(bexpr)(g_ctxt)
  
  preservation_property: LEMMA
  FORALL(bexpr)(f_ctxt_0)(g_ctxt_0):
  p(f_ctxt_0,g_ctxt_0) IMPLIES 
  p(f(f_ctxt_0)(bexpr), g(g_ctxt_0)(bexpr))

END boolexpr_lfcmrs


