affine_expr_Eval_fnd_props: THEORY
BEGIN
  IMPORTING affine_expr_Eval_fnd

  cp_box_vs_expansion_: LEMMA
  FORALL (box: Box, vs: Env)
	 (added_idx: above(last_idx_in_box(box)+1))
	 (nextfreeidx: upfrom(added_idx))
  	 (cache: (correct_cache?(box)) | idxs_bounded(nextfreeidx)(cache))
	 (I: Interval)
	 (x: real | EXISTS (e: Epsilon): (lb(I) + ub(I)) / 2  + e * ((ub(I) - lb(I)) / 2) = x )
	 (N: Noise):
  % compatible_pairs?(box, vs)(cache) 
    vars_in_box_compatible?(N)(box)(vs) AND
    compatible_pairs_on?(box,vs)(N)(cache) AND
  idxs_ac_cache_not_in_idx_gap(cache, box, added_idx)  AND
  varidxs_re_cache_in_box(cache, box) AND
  new_idxs_cache_not_in_idx_gap(cache, box, added_idx) 
  IMPLIES 
      EXISTS(e: Epsilon):
      LET N_ = upd_noise(N, length(box), e) IN
      % compatible_pairs?(append(box, (:I:)), vs WITH [(length(box)) := x])(cache) 
        vars_in_box_compatible?(N_)(append(box, (:I:)))(vs WITH [(length(box)) := x]) AND
        compatible_pairs_on?(append(box, (:I:)),vs WITH [(length(box)) := x])(N_)(cache)  AND
      % compatible_pairs?(box, vs)(cache) 
        vars_in_box_compatible?(N)(box)(vs) AND
        compatible_pairs_on?(box,vs)(N)(cache)

  cp_box_vs_cache_expansion: LEMMA
  FORALL (box: Box, vs: Env)
	 (added_idx: above(last_idx_in_box(box)+1))
	 (nextfreeidx: upfrom(added_idx))
  	 (cache: (correct_cache?(box)) | idxs_bounded(nextfreeidx)(cache))
	 (ac_idx: below(length(cache)),re: RealExpr)
	 (n: upfrom(length(box)))
%	 (I: Interval)
%	 (x: real | EXISTS (e: Epsilon): (lb(I) + ub(I)) / 2  + e * ((ub(I) - lb(I)) / 2) = x )
	 (nw_idxs: ordered_list[nat,<])
:
  LET ac: AffineCombination = nth(cache,ac_idx)`2,
      I = eval_by_intervals(ac),
      x = eval_ACExpr_Env(re,vs, n) IN
  % compatible_paris?
  ( EXISTS(N: Noise): 
      vars_in_box_compatible?(N)(box)(vs) AND
      compatible_pairs_on?(box,vs)(N)(cache) 
      AND eval_ac_noise(ac,N) = eval_ACExpr_Env(re,vs, n) ) AND
  idxs_ac_cache_not_in_idx_gap(cache, box, added_idx)  AND
  varidxs_re_cache_in_box(cache, box) AND
  new_idxs_cache_not_in_idx_gap(cache, box, added_idx) 
  IMPLIES compatible_pairs?
  	    (append(box, (:I:)), vs WITH [(length(box)) := x])
  	    (cons(( VARIDX(length(box)), ac, nw_idxs ) , cache))
    

END affine_expr_Eval_fnd_props
