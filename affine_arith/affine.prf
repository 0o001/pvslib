(affine
 (empty_ErrorTerms_TCC1 0
  (empty_ErrorTerms_TCC1-1 nil 3620572108 ("" (tcc))
   ((ordered_list? def-decl "bool" ordered_list nil)) nil))
 (idxs_pd_TCC1 0
  (idxs_pd_TCC1-1 nil 3628272610 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (idxs_pd_append 0
  (idxs_pd_append-1 nil 3628944396
   ("" (induct "pds1")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((first_ol const-decl "T" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (last_ol def-decl "T" ordered_list nil)
    (< const-decl "bool" reals nil)
    (pds2!1 skolem-const-decl
     "{pd: ErrorTerms | appendable_ol?(cons(cons1_var!1, cons2_var!1), pd)}"
     affine nil)
    (cons1_var!1 skolem-const-decl "[nat, nzBaseType]" affine nil)
    (cons2_var!1 skolem-const-decl "list[[nat, nzBaseType]]" affine
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (append def-decl "list[T]" list_props nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (add_ET_TCC1 0
  (add_ET_TCC1-1 nil 3621075711 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (BaseType type-eq-decl nil affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (add_ET_TCC2 0
  (add_ET_TCC2-1 nil 3621075711 ("" (tcc))
   ((null_ol? const-decl "bool" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (lt_idx const-decl "bool" indexed_list nil))
   nil))
 (add_ET_TCC3 0
  (add_ET_TCC3-1 nil 3621075711 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BaseType type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (add_ET_TCC4 0
  (add_ET_TCC4-1 nil 3621075711 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil))
   nil))
 (last_idx_append 0
  (last_idx_append-1 nil 3629028963
   ("" (induct "pds1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hpds" "tpds"))
      (("3" (flatten)
        (("3" (skeep)
          (("3" (expand "last_idx" 1 1)
            (("3" (lift-if 1)
              (("3" (split 1)
                (("1" (flatten)
                  (("1" (expand "last_idx" 2 1)
                    (("1" (expand "append_ol" 2)
                      (("1" (expand "append" 2)
                        (("1" (expand "last_ol" 2 1)
                          (("1" (lift-if 2)
                            (("1" (split 2)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "last_ol" 2 2)
                                    (("2"
                                      (lift-if 2)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (expand
                                                   "last_idx"
                                                   -1
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "append_ol")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (case
                                                         "max(hpds`1, last_idx(pds2)) = last_idx(pds2)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 -1 3))
                                                          (("2"
                                                            (typepred
                                                             "pds2")
                                                            (("2"
                                                              (expand
                                                               "appendable_ol?")
                                                              (("2"
                                                                (case
                                                                 "NOT null?(pds2)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "lt_idx")
                                                                    (("1"
                                                                      (expand
                                                                       "last_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "last_idx")
                                                                        (("1"
                                                                          (expand
                                                                           "first_ol")
                                                                          (("1"
                                                                            (use
                                                                             "olidx_car_last[nzBaseType]")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   "null_append[[nat,nzBaseType]]")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "pds2")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "ordered_list?"
                                                 -2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (ground)
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (expand "last_idx" -1 1)
                                              (("1"
                                                (expand "append_ol")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "pds2")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "ordered_list?" -1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last_ol def-decl "T" ordered_list nil)
    (tpds skolem-const-decl "list[[nat, nzBaseType]]" affine nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (hpds skolem-const-decl "[nat, nzBaseType]" affine nil)
    (pds2 skolem-const-decl
     "{pd: ErrorTerms | appendable_ol?(cons(hpds, tpds), pd)}" affine
     nil)
    (< const-decl "bool" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (null_append formula-decl nil list_more_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car_ol const-decl "T" ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first_ol const-decl "T" ordered_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (append def-decl "list[T]" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (last_error_TCC1 0
  (last_error_TCC1-1 nil 3620397935 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (non_empty? const-decl "bool" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (ac_proj_cv 0
  (ac_proj_cv-1 nil 3621349067 ("" (grind) nil nil)
   (({\|\|} const-decl "AffineCombination" affine nil)) shostak))
 (ac_proj_pd 0
  (ac_proj_pd-1 nil 3621349072 ("" (grind) nil nil)
   (({\|\|} const-decl "AffineCombination" affine nil)) shostak))
 (last_idx_acs_TCC1 0
  (last_idx_acs_TCC1-1 nil 3628272610 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (last_idx const-decl "int" indexed_list nil))
   nil))
 (search_error_term_by_idx_TCC1 0
  (search_error_term_by_idx_TCC1-1 nil 3619884608 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (search_error_term_by_idx_TCC2 0
  (search_error_term_by_idx_TCC2-1 nil 3620572108 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (setbi_nnull_member 0
  (setbi_nnull_member-1 nil 3628609596
   ("" (induct "pds")
    (("1" (typepred "pds!1") (("1" (propax) nil nil)) nil)
     ("2" (grind) nil nil)
     ("3" (skolem 1 ("hpds" "tpds"))
      (("3" (flatten)
        (("3" (skeep)
          (("3" (split -1)
            (("1" (expand "idxs_pd" 2)
              (("1" (expand "null_ol?")
                (("1" (expand "car_ol")
                  (("1" (expand "member" 2)
                    (("1" (flatten)
                      (("1" (expand "cdr_ol")
                        (("1" (inst?)
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "ordered_list?" -1) (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (next_idx_TCC1 0
  (next_idx_TCC1-1 nil 3620471172 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (last_idx const-decl "int" indexed_list nil))
   nil))
 (test_1 0
  (test_1-1 nil 3620404602 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (null_is_noise 0
  (null_is_noise-1 nil 3620496072 ("" (tcc))
   ((every adt-def-decl "boolean" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   nil))
 (idxs_noise_TCC1 0
  (idxs_noise_TCC1-1 nil 3628272610
   ("" (skeep)
    (("" (expand_ol)
      (("" (expand "length" 2 2)
        (("" (lift-if 2)
          (("" (split 2)
            (("1" (flatten) nil nil)
             ("2" (flatten)
              (("2"
                (apply (try
                        (then (abstract-and-then 2 1 (assert)) (fail))
                        (skip) (abstract-and-then 2 1 (assert))))
                nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil))
   nil))
 (empty_noise_is_ol 0
  (empty_noise_is_ol-1 nil 3621867992
   ("" (ground)
    (("" (expand "empty_noise") (("" (grind) nil nil)) nil)) nil)
   ((null_is_noise name-judgement "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak))
 (add_N_TCC1 0
  (add_N_TCC1-1 nil 3621614428 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Epsilon type-eq-decl nil affine nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (add_N_TCC2 0
  (add_N_TCC2-1 nil 3621614428 ("" (tcc))
   ((null_ol? const-decl "bool" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (lt_idx const-decl "bool" indexed_list nil))
   nil))
 (add_N_TCC3 0
  (add_N_TCC3-1 nil 3621614428 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (add_N_TCC4 0
  (add_N_TCC4-1 nil 3621614428 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil))
   nil))
 (extend_N_prop1 0
  (extend_N_prop1-1 nil 3621792343 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (add_N const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil))
   shostak))
 (get_noise_by_idx_TCC1 0
  (get_noise_by_idx_TCC1-1 nil 3619963656
   ("" (skeep*)
    (("" (typepred "N")
      (("" (assert)
        (("" (grind)
          (("" (use "list_cons_eta[[nat, nzEpsilon]]")
            (("" (replace -1 4 :dir RL :hide? t)
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (upd_noise_TCC1 0
  (upd_noise_TCC1-1 nil 3628272610
   ("" (skeep* :preds? t)
    (("" (assert)
      (("" (flatten)
        (("" (expand "null_ol?")
          (("" (expand "car_ol") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (add_N const-decl "Noise" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil))
   nil))
 (upd_noise_TCC2 0
  (upd_noise_TCC2-1 nil 3628272610
   ("" (skeep*)
    (("" (expand_ol)
      (("" (expand "lt_idx")
        (("" (replaces -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_idx const-decl "bool" indexed_list nil))
   nil))
 (upd_noise_TCC3 0
  (upd_noise_TCC3-1 nil 3628272610 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (/= const-decl "boolean" notequal nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil))
   nil))
 (upd_noise_TCC4 0
  (upd_noise_TCC4-1 nil 3628272610 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (/= const-decl "boolean" notequal nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil))
   nil))
 (upd_noise_TCC5 0
  (upd_noise_TCC5-1 nil 3628272610
   ("" (skeep* :preds? t)
    (("" (expand "lt_idx")
      (("" (expand* "null_ol?" "car_ol" "cdr_ol")
        (("" (replaces -8)
          (("" (replaces -6)
            (("" (replaces -6 :dir RL)
              (("" (hide 3)
                (("" (expand "ordered_list?") (("" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil))
   nil))
 (upd_noise_TCC6 0
  (upd_noise_TCC6-1 nil 3628852553 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (/= const-decl "boolean" notequal nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (upd_noise_TCC7 0
  (upd_noise_TCC7-1 nil 3628852553
   ("" (skeep* :preds? t)
    (("" (expand_ol)
      (("" (replaces (-6 -9))
        (("" (replaces -7 :dir RL)
          (("" (split 3)
            (("1" (flatten) nil nil)
             ("2" (flatten)
              (("2" (case "car_ol(N)`1 < car_ol(cdr_ol(N))`1")
                (("1" (grind) nil nil)
                 ("2" (expand "ordered_list?" -2)
                  (("2" (grind) nil nil)) nil)
                 ("3" (expand_ol) nil nil) ("4" (expand_ol) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil))
   nil))
 (upd_noise_TCC8 0
  (upd_noise_TCC8-3 nil 3629576957
   ("" (skeep* :preds? t)
    (("" (expand "lt_idx")
      (("" (expand_ol)
        (("" (typepred "v(tN,n,e)")
          (("" (replaces -)
            (("" (case "null_ol?(cdr_ol(N))")
              (("1" (expand_ol) (("1" (assert) nil nil)) nil)
               ("2" (expand_ol)
                (("2" (assert)
                  (("2" (hide -2)
                    (("2" (split -2)
                      (("1" (flatten)
                        (("1" (expand "ordered_list?" -5)
                          (("1" (replaces -2)
                            (("1" (hide-all-but (-4 6 1 2))
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand ">=")
                        (("2" (rewrite "min")
                          (("2" (lift-if -1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "<=")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "<=")
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (expand
                                       "ordered_list?"
                                       -4
                                       :assert?
                                       none)
                                      (("1"
                                        (lift-if -4)
                                        (("1"
                                          (split -4)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "lt_idx")
                                                  (("2"
                                                    (abstract-and-then
                                                     -1
                                                     1
                                                     (assert))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1 :dir RL)
                                      (("2"
                                        (expand "ordered_list?" -3)
                                        (("2"
                                          (hide-all-but (-3 7 2))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand_ol) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_idx const-decl "bool" indexed_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil)
  (upd_noise_TCC8-2 nil 3629576231
   ("" (skeep* :preds? t)
    (("" (expand "lt_idx")
      (("" (expand_ol)
        (("" (typepred "v(tN,n,e)")
          (("" (replaces -)
            (("" (case "null_ol?(cdr_ol(N))")
              (("1" (expand_ol) (("1" (assert) nil nil)) nil)
               ("2" (expand_ol)
                (("2" (assert)
                  (("2" (hide -2)
                    (("2" (split -2)
                      (("1" (flatten)
                        (("1" (expand "ordered_list?" -5)
                          (("1" (replaces -2)
                            (("1" (hide-all-but (-4 6 1 2))
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand ">=")
                        (("2" (rewrite "min")
                          (("2" (lift-if -1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "<=")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "<=")
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (expand
                                       "ordered_list?"
                                       -4
                                       :assert?
                                       none)
                                      (("1"
                                        (expand "lt_idx")
                                        (("1"
                                          (lift-if -4)
                                          (("1"
                                            (split -4)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split -1)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (abstract-and-then
                                                     -1
                                                     1
                                                     (assert))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1 :dir RL)
                                      (("2"
                                        (expand "ordered_list?" -3)
                                        (("2"
                                          (hide-all-but (-3 7 2))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand_ol) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil)
  (upd_noise_TCC8-1 nil 3628852553
   ("" (skeep* :preds? t)
    (("" (expand "lt_idx")
      (("" (expand_ol)
        (("" (typepred "v(tN,n,e)")
          (("" (replaces -)
            (("" (case "null_ol?(cdr_ol(N))")
              (("1" (expand_ol) (("1" (assert) nil nil)) nil)
               ("2" (expand_ol)
                (("2" (assert)
                  (("2" (hide -2)
                    (("2" (split -2)
                      (("1" (flatten)
                        (("1" (expand "ordered_list?" -5)
                          (("1" (replaces -2)
                            (("1" (hide-all-but (-4 6 1 2))
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand ">=")
                        (("2" (rewrite "min")
                          (("2" (lift-if -1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "<=")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "<=")
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (expand "ordered_list?" -4)
                                      (("1"
                                        (expand "lt_idx")
                                        (("1"
                                          (hide-all-but (-1 -4 7 2))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1 :dir RL)
                                      (("2"
                                        (expand "ordered_list?" -3)
                                        (("2"
                                          (hide-all-but (-3 7 2))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand_ol) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (upd_noise_TCC9 0
  (upd_noise_TCC9-1 nil 3628852553 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (upd_noise_range_TCC1 0
  (upd_noise_range_TCC1-1 nil 3630426729 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (upd_noise_range_TCC2 0
  (upd_noise_range_TCC2-1 nil 3630426729 ("" (termination-tcc) nil nil)
   nil nil))
 (gnbi_upd 0
  (gnbi_upd-1 nil 3628852150
   ("" (induct "N")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hN" "tN"))
      (("3" (flatten)
        (("3" (skeep)
          (("3" (split -1)
            (("1" (expand "upd_noise" 1)
              (("1" (expand "null_ol?")
                (("1" (expand "car_ol")
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (expand "cons_ol")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "cons_ol")
                                  (("1"
                                    (expand "cdr_ol")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "cdr_ol")
                                  (("2"
                                    (replaces -2 :dir RL)
                                    (("2"
                                      (expand "get_noise_by_idx" 1)
                                      (("2"
                                        (expand "null_ol?")
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (split 1)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "car_ol")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "ordered_list?")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "ordered_list?" -1) (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_N const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (Noise type-eq-decl nil affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (null_is_noise name-judgement "Noise" affine nil))
   shostak))
 (gnbi_upd_2 0
  (gnbi_upd_2-1 nil 3628517751
   ("" (induct "N")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hN" "tN"))
      (("3" (flatten)
        (("3" (skeep)
          (("3" (split -1)
            (("1" (inst -1 "e" "i" "n")
              (("1" (assert)
                (("1" (expand "upd_noise" 2)
                  (("1" (expand "null_ol?")
                    (("1" (expand "car_ol")
                      (("1" (expand "cdr_ol")
                        (("1" (lift-if 2)
                          (("1" (split 2)
                            (("1" (grind) nil nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replaces -1 :dir RL)
                                    (("1"
                                      (expand "add_N")
                                      (("1"
                                        (expand "null_ol?")
                                        (("1"
                                          (expand "cons_ol")
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "get_noise_by_idx"
                                                   1
                                                   2)
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand "car_ol")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "cdr_ol")
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   ">")
                                                                  (("1"
                                                                    (expand
                                                                     "get_noise_by_idx")
                                                                    (("1"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "tN = null")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "car_ol")
                                                      (("2"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "cons_ol")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_N const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (Noise type-eq-decl nil affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (null_is_noise name-judgement "Noise" affine nil))
   shostak))
 (gnbi_updr_TCC1 0
  (gnbi_updr_TCC1-1 nil 3630758897 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (gnbi_updr 0
  (gnbi_updr-1 nil 3630762148
   ("" (skeep :but "n")
    (("" (induct "n")
      (("1" (flatten)
        (("1" (case "i=start")
          (("1" (replaces -1 :dir RL)
            (("1" (hide -)
              (("1" (expand "upd_noise_range")
                (("1" (use "gnbi_upd") nil nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "upd_noise_range" 1)
          (("2" (case "i = 1 + j + start")
            (("1" (replaces -1)
              (("1" (assert) (("1" (use "gnbi_upd") nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (use "gnbi_upd_2") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (i skolem-const-decl "nat" affine nil)
    (start skolem-const-decl "nat" affine nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (upd_noise_range def-decl "Noise" affine nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (gnbi_upd formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (gnbi_upd_2 formula-decl nil affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (gnbi_updr_2 0
  (gnbi_updr_2-1 nil 3630762350
   ("" (skeep :but "n")
    (("" (induct "n")
      (("1" (flatten)
        (("1" (expand "upd_noise_range")
          (("1" (use "gnbi_upd_2") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (skeep)
        (("2" (expand "upd_noise_range" 1)
          (("2" (use "gnbi_upd_2")
            (("2" (split -1)
              (("1" (replaces -1)
                (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
               ("2" (hide-all-but (1 -2)) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (upd_noise_range def-decl "Noise" affine nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gnbi_upd_2 formula-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (restrict_by_idxs_TCC1 0
  (restrict_by_idxs_TCC1-1 nil 3628272610 ("" (subtype-tcc) nil nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil))
   nil))
 (restrict_by_idxs_TCC2 0
  (restrict_by_idxs_TCC2-1 nil 3628355849
   ("" (skeep*)
    (("" (expand "lt_idx")
      (("" (expand_ol)
        (("" (typepred "v(cdr_ol(N), idxs)")
          (("1" (expand_ol)
            (("1" (assert)
              (("1" (flatten)
                (("1" (case "car_ol(N)`1 < car_ol(cdr_ol(N))`1")
                  (("1" (expand_ol) (("1" (assert) nil nil)) nil)
                   ("2" (typepred "N")
                    (("2" (expand "ordered_list?" -1 :assert? none)
                      (("2" (lift-if -1)
                        (("2" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "lt_idx")
                                  (("2" (expand_ol) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand_ol) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand_ol)
            (("2" (hide-all-but (1 2))
              (("2" (expand "length" 1 2)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (flatten) nil nil)
                     ("2" (flatten)
                      (("2"
                        (apply (try
                                (then
                                 (abstract-and-then 2 1 (assert))
                                 (fail))
                                (skip)
                                (abstract-and-then 2 1 (assert))))
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand_ol) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_idx const-decl "bool" indexed_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (restrict_by_idxs_TCC3 0
  (restrict_by_idxs_TCC3-1 nil 3628355849 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (restrict_by_idxs_TCC4 0
  (restrict_by_idxs_TCC4-2 nil 3629577924
   ("" (skeep*)
    (("" (expand_ol)
      (("" (assert)
        (("" (typepred "v(cdr_ol(N), idxs)")
          (("1" (expand_ol)
            (("1" (flatten)
              (("1" (typepred "N")
                (("1" (expand "ordered_list?" -1 :assert? none)
                  (("1" (lift-if -1)
                    (("1" (split -1)
                      (("1" (propax) nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (propax) nil)
                           ("2" (flatten)
                            (("2" (expand "lt_idx")
                              (("2"
                                (abstract-and-then -1 1 (assert))
                                nil)))))))))))))))))))))
           ("2" (expand_ol)
            (("2" (hide-all-but (1 3))
              (("2" (expand "length" 1 2 :assert? none)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (flatten) nil)
                     ("2" (flatten)
                      (("2"
                        (apply (try
                                (then
                                 (abstract-and-then 2 1 (assert))
                                 (fail))
                                (skip)
                                (abstract-and-then 2 1 (assert))))
                        nil)))))))))))))
           ("3" (expand_ol) nil))))))))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (restrict_by_idxs_TCC4-1 nil 3628355849
   ("" (skeep*)
    (("" (expand_ol)
      (("" (assert)
        (("" (typepred "v(cdr_ol(N), idxs)")
          (("1" (expand_ol)
            (("1" (flatten)
              (("1" (typepred "N")
                (("1" (expand "ordered_list?" -1 :assert? none)
                  (("1" (lift-if -1)
                    (("1" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (flatten)
                            (("2" (expand "lt_idx")
                              (("2"
                                (abstract-and-then -1 1 (assert))
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand_ol)
            (("2" (hide-all-but (1 3))
              (("2" (expand "length" 1 2 :assert? none)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (flatten) nil nil)
                     ("2" (flatten)
                      (("2"
                        (apply (try
                                (then
                                 (abstract-and-then 1 1 (assert))
                                 (fail))
                                (skip)
                                (abstract-and-then 1 1 (assert))))
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand_ol) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (eval_pd_noise_TCC1 0
  (eval_pd_noise_TCC1-1 nil 3619884927
   ("" (skeep*)
    (("" (replaces -3)
      ((""
        (case "length[[nat, nzBaseType]](cdr_ol(pds)) < length[[nat, nzBaseType]](pds)")
        (("1"
          (case "length[[nat, nzEpsilon]](cdr_ol[[nat, nzEpsilon], lt_idx[nzEpsilon]](noise)) < length[[nat, nzEpsilon]](noise)")
          (("1" (assert) nil nil)
           ("2" (hide-all-but (1 3)) (("2" (assert) nil nil)) nil))
          nil)
         ("2" (hide-all-but (1 2)) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil))
   shostak))
 (eval_pd_noise_TCC2 0
  (eval_pd_noise_TCC2-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (eval_pd_noise_TCC3 0
  (eval_pd_noise_TCC3-1 nil 3619884927
   ("" (skeep*) (("" (assert) (("" (grind) nil nil)) nil)) nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (epn_pds_monotony 0
  (epn_pds_monotony-1 nil 3621261987
   ("" (skeep*)
    (("" (expand "eval_pd_noise" 3 2)
      (("" (lift-if)
        (("" (expand "null_ol?")
          (("" (assert)
            (("" (expand "car_ol")
              (("" (assert)
                (("" (expand "cdr_ol") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_pd_noise def-decl "real" affine nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (epn_noise_monotony 0
  (epn_noise_monotony-1 nil 3621415031 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (eval_pd_noise_rec_pds_def 0
  (eval_pd_noise_rec_pds_def-2 nil 3629629684
   ("" (skeep)
    (("" (name "L" "length(pds)+length(N)")
      (("" (generalize "N" "N")
        (("" (generalize "pds" "pds")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (expand "null_ol?")
                  (("" (skolem 1 ("pds_" "N_"))
                    (("" (flatten)
                      (("" (lift-if)
                        (("" (split 1)
                          (("1" (flatten)
                            (("1" (hide -2)
                              (("1"
                                (expand "eval_pd_noise")
                                (("1" (grind) nil)))))))
                           ("2" (flatten)
                            (("2" (expand "eval_pd_noise" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split 2)
                                  (("1" (flatten) (("1" (grind) nil)))
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1" (grind) nil)))
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand_ol)
                                              (("1"
                                                (case
                                                 "get_noise_by_idx(car_ol(pds_)`1, N_) = car_ol(N_)`2")
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (auto-rewrite
                                                       "null_ol?")
                                                      (("1"
                                                        (case
                                                         "car_ol(pds_)`2 * car_ol(N_)`2 = car_ol(N_)`2 * car_ol(pds_)`2")
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "null_ol?(cdr_ol(pds_))")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_pd_noise")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "epn_noise_monotony")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "N_"
                                                                     "cdr_ol(pds_)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand_ol)
                                                                        (("2"
                                                                          (replaces
                                                                           -1
                                                                           :dir
                                                                           RL)
                                                                          (("2"
                                                                            (typepred
                                                                             "pds_")
                                                                            (("2"
                                                                              (expand
                                                                               "ordered_list?"
                                                                               -1)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "lt_idx")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil)))))))))))))))))))))))))))))
                                                         ("2"
                                                          (expand_ol)
                                                          (("2"
                                                            (assert)
                                                            nil)))
                                                         ("3"
                                                          (propax)
                                                          nil)))))))))
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 1 4 5))
                                                  (("2" (grind) nil)))
                                                 ("3" (expand_ol) nil)
                                                 ("4"
                                                  (expand_ol)
                                                  nil)))))))
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 1 3 4))
                                                    (("1"
                                                      (grind)
                                                      nil)))))))
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (inst -1 "j-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?
                                                         -1
                                                         :where
                                                         2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "get_noise_by_idx(car(pds_)`1, N_)= get_noise_by_idx(car(pds_)`1, cdr(N_))")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "epn_noise_monotony")
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         5)
                                                                        (("1"
                                                                          (inst?
                                                                           -1
                                                                           :where
                                                                           2)
                                                                          (("1"
                                                                            (expand_ol)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "eval_pd_noise")
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))
                                                                               ("2"
                                                                                (typepred
                                                                                 "pds_")
                                                                                (("2"
                                                                                  (expand
                                                                                   "ordered_list?")
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_pd_noise")
                                                                                      (("1"
                                                                                        (expand_ol)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "lt_idx")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))))))))))))))))))))))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    5
                                                                    6))
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                -1
                                                                6))
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))))))))))
                                                     ("2"
                                                      (grind)
                                                      nil))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (epn_noise_monotony formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval_pd_noise def-decl "real" affine nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil)
  (eval_pd_noise_rec_pds_def-1 nil 3621268877
   ("" (skeep)
    (("" (name "L" "length(pds)+length(N)")
      (("" (generalize "N" "N")
        (("" (generalize "pds" "pds")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (expand "null_ol?")
                  (("" (skolem 1 ("pds_" "N_"))
                    (("" (flatten)
                      (("" (lift-if)
                        (("" (split 1)
                          (("1" (flatten)
                            (("1" (hide -2)
                              (("1"
                                (expand "eval_pd_noise")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "eval_pd_noise" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand_ol)
                                              (("1"
                                                (case
                                                 "get_noise_by_idx(car_ol(pds_)`1, N_) = car_ol(N_)`2")
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (case
                                                       "car_ol(pds_)`2 * car_ol(N_)`2 = car_ol(N_)`2 * car_ol(pds_)`2")
                                                      (("1"
                                                        (expand_ol)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "null_ol?(cdr_ol(pds_))")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  1))
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (expand
                                                                     "eval_pd_noise")
                                                                    (("1"
                                                                      (expand_ol)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "epn_noise_monotony")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "N_"
                                                                   "cdr_ol(pds_)")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand_ol)
                                                                      (("2"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (typepred
                                                                           "pds_")
                                                                          (("2"
                                                                            (expand
                                                                             "ordered_list?"
                                                                             -1)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "lt_idx")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand_ol)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 1 4 5))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand_ol)
                                                  nil
                                                  nil)
                                                 ("4"
                                                  (expand_ol)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 1 3 4))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (inst -1 "j-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?
                                                         -1
                                                         :where
                                                         2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "get_noise_by_idx(car(pds_)`1, N_)= get_noise_by_idx(car(pds_)`1, cdr(N_))")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "epn_noise_monotony")
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         5)
                                                                        (("1"
                                                                          (inst?
                                                                           -1
                                                                           :where
                                                                           2)
                                                                          (("1"
                                                                            (expand_ol)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "eval_pd_noise")
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "pds_")
                                                                                (("2"
                                                                                  (expand
                                                                                   "ordered_list?")
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_pd_noise")
                                                                                      (("1"
                                                                                        (expand_ol)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "lt_idx")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    5
                                                                    6))
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                -1
                                                                6))
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (eval_pd_noise_rec_N_def 0
  (eval_pd_noise_rec_N_def-2 nil 3629635262
   ("" (skolem!)
    (("" (name "L" "length(N!1)+length(pds!1)")
      (("" (generalize "pds!1" "pds")
        (("" (generalize "N!1" "N")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "null_ol?")
                    (("" (expand "car_ol")
                      (("" (expand "cdr_ol")
                        (("" (expand "eval_pd_noise" 1 1)
                          (("" (expand "null_ol?")
                            (("" (expand "car_ol")
                              ((""
                                (lift-if 1)
                                ((""
                                  (split 1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case "pds=null")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand
                                                 "eval_pd_noise"
                                                 1)
                                                (("1"
                                                  (expand "null_ol?")
                                                  (("1"
                                                    (expand
                                                     "search_error_term_by_idx")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "cdr_ol")
                                              (("1"
                                                (lemma
                                                 "eval_pd_noise_rec_pds_def")
                                                (("1"
                                                  (auto-rewrite
                                                   "null_ol?")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "cdr_ol(N)"
                                                     "pds")
                                                    (("1"
                                                      (expand
                                                       "cdr_ol"
                                                       :assert?
                                                       none)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (expand
                                                           "null_ol?")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "car_ol")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   "search_error_term_by_idx(pds, car_ol(N)`1) = car_ol(pds)`2")
                                                                  (("1"
                                                                    (expand
                                                                     "car_ol"
                                                                     :assert?
                                                                     none)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "get_noise_by_idx(car_ol(N)`1, cdr_ol(N)) * car_ol(pds)`2 = 0")
                                                                        (("1"
                                                                          (expand_ol)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "get_noise_by_idx"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "null_ol?")
                                                                            (("2"
                                                                              (lift-if
                                                                               1)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand_ol)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "N")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ordered_list?"
                                                                                             -1
                                                                                             :assert?
                                                                                             none)
                                                                                            (("2"
                                                                                              (lift-if
                                                                                               -1)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "lt_idx")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (abstract-and-then
                                                                                                                 -1
                                                                                                                 1
                                                                                                                 (assert))
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (abstract-and-then
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   (assert))
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replaces
                                                                     -1
                                                                     :dir
                                                                     RL)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (use
                                                     "eval_pd_noise_rec_pds_def"
                                                     ("pds" "pds"))
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand
                                                         "null_ol?")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (expand
                                                               "car_ol")
                                                              (("1"
                                                                (auto-rewrite
                                                                 "null_ol?")
                                                                (("1"
                                                                  (case
                                                                   "get_noise_by_idx(car_ol(pds)`1, cdr_ol(N))=0")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "search_error_term_by_idx"
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "j-1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst?
                                                                                 -2
                                                                                 :where
                                                                                 1)
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "get_noise_by_idx"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("2"
                                                                          (expand
                                                                           "car_ol")
                                                                          (("2"
                                                                            (lift-if
                                                                             1)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "N")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ordered_list?"
                                                                                     -1
                                                                                     :assert?
                                                                                     none)
                                                                                    (("2"
                                                                                      (lift-if
                                                                                       -1)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cdr_ol")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "lt_idx")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   3)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "cdr_ol"
                                                                                                       :assert?
                                                                                                       none)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (abstract-and-then
                                                                                                           -1
                                                                                                           1
                                                                                                           (assert))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "cdr_ol"
                                                                                                           :assert?
                                                                                                           none)
                                                                                                          (("2"
                                                                                                            (abstract-and-then
                                                                                                             -1
                                                                                                             1
                                                                                                             (assert))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "cdr_ol")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (N skolem-const-decl "Noise" affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval_pd_noise def-decl "real" affine nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (BaseType type-eq-decl nil affine nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil)
  (eval_pd_noise_rec_N_def-1 nil 3628609806
   ("" (skolem!)
    (("" (name "L" "length(N!1)+length(pds!1)")
      (("" (generalize "pds!1" "pds")
        (("" (generalize "N!1" "N")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "null_ol?")
                    (("" (expand "car_ol")
                      (("" (expand "cdr_ol")
                        (("" (expand "eval_pd_noise" 1 1)
                          (("" (expand "null_ol?")
                            (("" (expand "car_ol")
                              ((""
                                (lift-if 1)
                                ((""
                                  (split 1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case "pds=null")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand
                                                 "eval_pd_noise"
                                                 1)
                                                (("1"
                                                  (expand "null_ol?")
                                                  (("1"
                                                    (expand
                                                     "search_error_term_by_idx")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "cdr_ol")
                                              (("1"
                                                (lemma
                                                 "eval_pd_noise_rec_pds_def")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cdr(N)"
                                                   "pds")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (expand
                                                       "null_ol?")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "cdr_ol")
                                                          (("1"
                                                            (expand
                                                             "car_ol")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (case
                                                                 "search_error_term_by_idx(pds, car(N)`1) = car(pds)`2")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (case
                                                                     "get_noise_by_idx(car(N)`1, cdr(N)) * car(pds)`2 = 0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "get_noise_by_idx"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("2"
                                                                          (lift-if
                                                                           1)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "car_ol")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "N")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ordered_list?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    4))
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (use
                                                     "eval_pd_noise_rec_pds_def"
                                                     ("pds" "pds"))
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand
                                                         "null_ol?")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (expand
                                                               "car_ol")
                                                              (("1"
                                                                (case
                                                                 "get_noise_by_idx(car(pds)`1, cdr(N))=0")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "search_error_term_by_idx"
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "j-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -2
                                                                             :where
                                                                             1)
                                                                            (("1"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "get_noise_by_idx"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("2"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("2"
                                                                        (lift-if
                                                                         1)
                                                                        (("2"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (typepred
                                                                               "N")
                                                                              (("2"
                                                                                (expand
                                                                                 "ordered_list?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "cdr_ol")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (appendable_Noises_1 0
  (appendable_Noises_1-2 nil 3629629861
   ("" (skeep)
    (("" (use "olidx_car_last[nzEpsilon]")
      (("" (expand_ol)
        (("" (assert)
          (("" (expand "appendable_ol?")
            (("" (expand "lt_idx") (("" (grind) nil))))))))))))
    nil)
   ((olidx_car_last formula-decl nil indexed_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first_ol const-decl "T" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil)
  (appendable_Noises_1-1 nil 3621261906
   ("" (grind)
    (("" (use "olidx_car_last[nzEpsilon]") (("" (grind) nil nil)) nil))
    nil)
   ((ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil))
   shostak))
 (eval_pd_noise_noise_append_2 0
  (eval_pd_noise_noise_append_2-5 "" 3629632302
   ("" (induct "n" :name "NAT_induction")
    (("" (skeep)
      (("" (skeep)
        (("" (expand "append_ol")
          (("" (expand "append" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil)))
                 ("2" (flatten)
                  (("2" (expand "eval_pd_noise" 2 1)
                    (("2" (expand "null_ol?")
                      (("2" (lift-if)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (hide-all-but (1 -1))
                              (("1"
                                (expand "eval_pd_noise")
                                (("1" (grind) nil)))))))
                           ("2" (flatten)
                            (("2" (expand "car_ol")
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "cdr_ol")
                                    (("1"
                                      (expand "eval_pd_noise" 1 2)
                                      (("1"
                                        (expand "null_ol?")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "car_ol")
                                              (("1"
                                                (inst -2 "j-2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (auto-rewrite
                                                     "null_ol?")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "cdr_ol(N1)"
                                                       "N2"
                                                       "cdr_ol(pds)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "NOT null_ol?(N2)")
                                                                (("1"
                                                                  (lemma
                                                                   "epn_pds_monotony")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N2"
                                                                     "pds")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "cdr_ol")
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))
                                                                       ("2"
                                                                        (grind)
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("3"
                                                                          (use
                                                                           "appendable_Noises_1")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("3"
                                                                                (assert)
                                                                                nil)))))))))))))))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))))))
                                                           ("2"
                                                            (expand
                                                             "cdr_ol")
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))
                                                 ("2"
                                                  (hide-all-but
                                                   (-2 1 3 4))
                                                  (("2"
                                                    (replace
                                                     -1
                                                     1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))))))))))))))
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "eval_pd_noise(pds, N1) + eval_pd_noise(pds, N2) = eval_pd_noise(cdr_ol(pds), append_ol(N1,N2))")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "append_ol")
                                            (("1"
                                              (expand "append" 1 2)
                                              (("1"
                                                (hide-all-but (1 4))
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (assert)
                                                    nil)))))))))))
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "N1"
                                                 "N2"
                                                 "cdr_ol(pds)")
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "append_ol")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (lemma
                                                             "epn_pds_monotony")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "N1"
                                                               "pds")
                                                              (("1"
                                                                (case
                                                                 "NOT null_ol?(pds) AND
                                                 NOT null_ol?(N1) AND car_ol(pds)`1 < car_ol(N1)`1")
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "cdr_ol"
                                                                       :assert?
                                                                       none)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "epn_pds_monotony")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "N2"
                                                                             "pds")
                                                                            (("1"
                                                                              (expand
                                                                               "cdr_ol"
                                                                               :assert?
                                                                               none)
                                                                              (("1"
                                                                                (expand
                                                                                 "car_ol"
                                                                                 :assert?
                                                                                 none)
                                                                                (("1"
                                                                                  (expand
                                                                                   "null_ol?"
                                                                                   :assert?
                                                                                   none)
                                                                                  (("1"
                                                                                    (case
                                                                                     "null_ol?(N2)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_pd_noise")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil)))
                                                                                     ("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "appendable_ol?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("2"
                                                                                        (expand_ol)
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "olidx_car_last[nzEpsilon]")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "N1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "appendable_ol?"
                                                                                               :assert?
                                                                                               none)
                                                                                              (("3"
                                                                                                (expand_ol)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "lt_idx")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "first_ol")
                                                                                                      (("3"
                                                                                                        (apply
                                                                                                         (try
                                                                                                          (then
                                                                                                           (abstract-and-then
                                                                                                            -1
                                                                                                            1
                                                                                                            (assert))
                                                                                                           (fail))
                                                                                                          (skip)
                                                                                                          (abstract-and-then
                                                                                                           -1
                                                                                                           1
                                                                                                           (assert))))
                                                                                                        nil)))))))))))))))))))))))))))))))))))))
                                                                   ("2"
                                                                    (flatten)
                                                                    nil)
                                                                   ("3"
                                                                    (flatten)
                                                                    nil)
                                                                   ("4"
                                                                    (flatten)
                                                                    nil)))
                                                                 ("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "null_ol?"
                                                                     :assert?
                                                                     none)
                                                                    (("2"
                                                                      (expand
                                                                       "car_ol"
                                                                       :assert?
                                                                       none)
                                                                      (("2"
                                                                        (abstract-and-then
                                                                         -1
                                                                         1
                                                                         (assert))
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (grind)
                                                        nil)))))))))))
                                             ("2" (grind) nil)))))
                                         ("3" (propax) nil)))))
                                     ("2"
                                      (inst -1 "j-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "cdr_ol")
                                            (("1"
                                              (inst
                                               -1
                                               "cdr_ol(N1)"
                                               "N2"
                                               "pds")
                                              (("1"
                                                (expand "cdr_ol")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "epn_noise_monotony")
                                                        (("1"
                                                          (expand
                                                           "null_ol?")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (auto-rewrite
                                                               "null_ol?")
                                                              (("1"
                                                                (case
                                                                 "null_ol?(cdr_ol(N1))")
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (expand_ol)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "eval_pd_noise"
                                                                       3
                                                                       2
                                                                       :assert?
                                                                       none)
                                                                      (("2"
                                                                        (expand_ol)
                                                                        (("2"
                                                                          (lift-if
                                                                           3)
                                                                          (("2"
                                                                            (split
                                                                             3)
                                                                            (("1"
                                                                              (flatten)
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil)))))))))))))))))))))))))))))))
                                                   ("2" (grind) nil)
                                                   ("3"
                                                    (expand
                                                     "length"
                                                     -1
                                                     1)
                                                    (("3"
                                                      (grind)
                                                      nil)))))))
                                               ("2"
                                                (expand "null_ol?")
                                                (("2"
                                                  (propax)
                                                  nil)))))))))))
                                       ("2"
                                        (grind)
                                        nil))))))))))))))))))))))))))))))))))))
    nil)
   ((nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (car_ol const-decl "T" ordered_list nil)
    (N1 skolem-const-decl "Noise" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (epn_noise_monotony formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (epn_pds_monotony formula-decl nil affine nil)
    (appendable_Noises_1 formula-decl nil affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (append def-decl "list[T]" list_props nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (eval_pd_noise def-decl "real" affine nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil)
  (eval_pd_noise_noise_append_2-4 "" 3629631096
   ("" (induct "n" :name "NAT_induction")
    (("" (skeep)
      (("" (skeep)
        (("" (expand "append_ol")
          (("" (expand "append" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "eval_pd_noise" 2 1)
                    (("2" (expand "null_ol?")
                      (("2" (lift-if)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (hide-all-but (1 -1))
                              (("1"
                                (expand "eval_pd_noise")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "car_ol")
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "cdr_ol")
                                    (("1"
                                      (expand "eval_pd_noise" 1 2)
                                      (("1"
                                        (expand "null_ol?")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "car_ol")
                                              (("1"
                                                (inst -2 "j-2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (auto-rewrite
                                                     "null_ol?")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "cdr_ol(N1)"
                                                       "N2"
                                                       "cdr_ol(pds)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "NOT null_ol?(N2)")
                                                                (("1"
                                                                  (lemma
                                                                   "epn_pds_monotony")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N2"
                                                                     "pds")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "cdr_ol")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("3"
                                                                          (use
                                                                           "appendable_Noises_1")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "cdr_ol")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-2 1 3 4))
                                                  (("2"
                                                    (replace
                                                     -1
                                                     1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "eval_pd_noise(pds, N1) + eval_pd_noise(pds, N2) = eval_pd_noise(cdr_ol(pds), append_ol(N1,N2))")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "append_ol")
                                            (("1"
                                              (expand "append" 1 2)
                                              (("1"
                                                (hide-all-but (1 4))
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "N1"
                                                 "N2"
                                                 "cdr_ol(pds)")
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "append_ol")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (lemma
                                                             "epn_pds_monotony")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "N1"
                                                               "pds")
                                                              (("1"
                                                                (case
                                                                 "NOT null_ol?(pds) AND
       NOT null_ol?(N1) AND car_ol(pds)`1 < car_ol(N1)`1")
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "cdr_ol"
                                                                       :assert?
                                                                       none)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "epn_pds_monotony")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "N2"
                                                                             "pds")
                                                                            (("1"
                                                                              (expand
                                                                               "cdr_ol"
                                                                               :assert?
                                                                               none)
                                                                              (("1"
                                                                                (expand
                                                                                 "car_ol"
                                                                                 :assert?
                                                                                 none)
                                                                                (("1"
                                                                                  (expand
                                                                                   "null_ol?"
                                                                                   :assert?
                                                                                   none)
                                                                                  (("1"
                                                                                    (case
                                                                                     "null_ol?(N2)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_pd_noise")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "appendable_ol?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand_ol)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "olidx_car_last[nzEpsilon]")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "N1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "appendable_ol?"
                                                                                               :assert?
                                                                                               none)
                                                                                              (("3"
                                                                                                (expand_ol)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "lt_idx")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "first_ol")
                                                                                                      (("3"
                                                                                                        (apply
                                                                                                         (try
                                                                                                          (then
                                                                                                           (abstract-and-then
                                                                                                            -1
                                                                                                            1
                                                                                                            (assert))
                                                                                                           (fail))
                                                                                                          (skip)
                                                                                                          (abstract-and-then
                                                                                                           -1
                                                                                                           1
                                                                                                           (assert))))
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (flatten)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "null_ol?"
                                                                     :assert?
                                                                     none)
                                                                    (("2"
                                                                      (expand
                                                                       "car_ol"
                                                                       :assert?
                                                                       none)
                                                                      (("2"
                                                                        (abstract-and-then
                                                                         -1
                                                                         1
                                                                         (assert))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "j-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "cdr_ol")
                                            (("1"
                                              (inst
                                               -1
                                               "cdr_ol(N1)"
                                               "N2"
                                               "pds")
                                              (("1"
                                                (expand "cdr_ol")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "epn_noise_monotony")
                                                        (("1"
                                                          (expand
                                                           "null_ol?")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (auto-rewrite
                                                               "null_ol?")
                                                              (("1"
                                                                (case
                                                                 "null_ol?(cdr_ol(N1))")
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand_ol)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "eval_pd_noise"
                                                                       3
                                                                       2)
                                                                      (("2"
                                                                        (expand_ol)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "length"
                                                     -1
                                                     1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "null_ol?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil))
   nil)
  (eval_pd_noise_noise_append_2-3 "" 3628346606
   ("" (induct "n" :name "NAT_induction")
    (("" (skeep)
      (("" (skeep)
        (("" (expand "append_ol")
          (("" (expand "append" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "eval_pd_noise" 2 1)
                    (("2" (expand "null_ol?")
                      (("2" (lift-if)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (hide-all-but (1 -1))
                              (("1"
                                (expand "eval_pd_noise")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "car_ol")
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "cdr_ol")
                                    (("1"
                                      (expand "eval_pd_noise" 1 2)
                                      (("1"
                                        (expand "null_ol?")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "car_ol")
                                              (("1"
                                                (inst -2 "j-2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "cdr_ol(N1)"
                                                     "N2"
                                                     "cdr_ol(pds)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (expand
                                                           "cdr_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (case
                                                               "NOT null_ol?(N2)")
                                                              (("1"
                                                                (lemma
                                                                 "epn_pds_monotony")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N2"
                                                                   "pds")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "cdr_ol")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("3"
                                                                        (use
                                                                         "appendable_Noises_1")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "null_ol?")
                                                                            (("3"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "cdr_ol")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-2 1 3 4))
                                                  (("2"
                                                    (replace
                                                     -1
                                                     1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "eval_pd_noise(pds, N1) + eval_pd_noise(pds, N2) = eval_pd_noise(cdr_ol(pds), append_ol(N1,N2))")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "append_ol")
                                            (("1"
                                              (expand "append" 1 2)
                                              (("1"
                                                (hide-all-but (1 4))
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "N1"
                                                 "N2"
                                                 "cdr_ol(pds)")
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "append_ol")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (lemma
                                                             "epn_pds_monotony")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "N1"
                                                               "pds")
                                                              (("1"
                                                                (expand
                                                                 "null_ol?")
                                                                (("1"
                                                                  (expand
                                                                   "car_ol")
                                                                  (("1"
                                                                    (expand
                                                                     "cdr_ol")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "epn_pds_monotony")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "N2"
                                                                             "pds")
                                                                            (("1"
                                                                              (expand
                                                                               "cdr_ol")
                                                                              (("1"
                                                                                (expand
                                                                                 "car_ol")
                                                                                (("1"
                                                                                  (expand
                                                                                   "null_ol?")
                                                                                  (("1"
                                                                                    (case
                                                                                     "null?(N2)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_pd_noise")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (prop)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "appendable_ol?")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "N1")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "olidx_car_last[nzEpsilon]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "N1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -3
                                                                                                      1
                                                                                                      -5))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lt_idx")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "first_ol")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "car_ol")
                                                                                                          (("2"
                                                                                                            (name-replace
                                                                                                             "A"
                                                                                                             "car(pds)`1")
                                                                                                            (("2"
                                                                                                              (name-replace
                                                                                                               "C"
                                                                                                               "last_ol(N1)`1")
                                                                                                              (("2"
                                                                                                                (name-replace
                                                                                                                 "D"
                                                                                                                 "car(N2)`1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "j-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "cdr_ol")
                                            (("1"
                                              (inst
                                               -1
                                               "cdr_ol(N1)"
                                               "N2"
                                               "pds")
                                              (("1"
                                                (expand "cdr_ol")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "epn_noise_monotony")
                                                        (("1"
                                                          (expand
                                                           "null_ol?")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "null?(cdr(N1))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "length"
                                                     -1
                                                     1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "null_ol?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak)
  (eval_pd_noise_noise_append_2-2 "" 3622317721
   ("" (induct "n" :name "NAT_induction")
    (("" (skeep)
      (("" (skeep)
        (("" (expand "append_ol")
          (("" (expand "append" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "eval_pd_noise" 2 1)
                    (("2" (expand "null_ol?")
                      (("2" (lift-if)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (hide-all-but (1 -1))
                              (("1"
                                (expand "eval_pd_noise")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "car_ol")
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "cdr_ol")
                                    (("1"
                                      (expand "eval_pd_noise" 1 2)
                                      (("1"
                                        (expand "null_ol?")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "car_ol")
                                              (("1"
                                                (inst -2 "j-2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "cdr_ol(N1)"
                                                     "N2"
                                                     "cdr_ol(pds)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (expand
                                                           "cdr_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (case
                                                               "NOT null_ol?(N2)")
                                                              (("1"
                                                                (lemma
                                                                 "epn_pds_monotony")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N2"
                                                                   "pds")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "cdr_ol")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("3"
                                                                        (use
                                                                         "appendable_Noises_1")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "null_ol?")
                                                                            (("3"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "cdr_ol")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (-2 1 3 4))
                                                          (("3"
                                                            (replace
                                                             -1
                                                             1
                                                             :hide?
                                                             t)
                                                            (("3"
                                                              (expand
                                                               "length"
                                                               1
                                                               1)
                                                              (("3"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("3"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   1)
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "null_ol?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "null_ol?")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "eval_pd_noise(cdr_ol(pds), cons(car(N1), append(cdr(N1), N2))) =
      eval_pd_noise(cdr_ol(pds), append(N1,N2))")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "N1"
                                                 "N2"
                                                 "cdr_ol(pds)")
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (lemma
                                                           "epn_pds_monotony")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "N1"
                                                             "pds")
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (expand
                                                                 "car_ol")
                                                                (("1"
                                                                  (expand
                                                                   "cdr_ol")
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "epn_pds_monotony")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "N2"
                                                                             "pds")
                                                                            (("1"
                                                                              (expand
                                                                               "cdr_ol")
                                                                              (("1"
                                                                                (expand
                                                                                 "car_ol")
                                                                                (("1"
                                                                                  (expand
                                                                                   "null_ol?")
                                                                                  (("1"
                                                                                    (case
                                                                                     "null?(N2)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval_pd_noise")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (prop)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "appendable_ol?")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "N1")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "olidx_car_last[nzEpsilon]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "N1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -3
                                                                                                      1
                                                                                                      -5))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lt_idx")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "first_ol")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "car_ol")
                                                                                                          (("2"
                                                                                                            (name-replace
                                                                                                             "A"
                                                                                                             "car(pds)`1")
                                                                                                            (("2"
                                                                                                              (name-replace
                                                                                                               "B"
                                                                                                               "car(N1)`1")
                                                                                                              (("2"
                                                                                                                (name-replace
                                                                                                                 "C"
                                                                                                                 "last_ol(N1)`1")
                                                                                                                (("2"
                                                                                                                  (name-replace
                                                                                                                   "D"
                                                                                                                   "car(N2)`1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 5))
                                          (("2"
                                            (expand "append" 1 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (case
                                           "append(N1, N2)  = append_ol(N1, N2)")
                                          (("1"
                                            (replaces -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand "append_ol")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "cdr_ol")
                                        (("2"
                                          (expand "eval_pd_noise" 2 2)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (expand "null_ol?")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "car_ol")
                                                  (("2"
                                                    (expand "cdr_ol")
                                                    (("2"
                                                      (case
                                                       "null?(cdr(N1))")
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "eval_pd_noise"
                                                                 2
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "append"
                                                                       2)
                                                                      (("2"
                                                                        (lift-if
                                                                         2)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst -1 "j-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr_ol(N1)"
                                                             "N2"
                                                             "pds")
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "appendable_ol?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "last_ol"
                                                                           -2
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      -1
                                                                      7))
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak)
  (eval_pd_noise_noise_append_2-1 nil 3621188209
   ("" (induct "n" :name "NAT_induction")
    (("" (skeep)
      (("" (skeep)
        (("" (expand "append_ol")
          (("" (expand "append" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "eval_pd_noise" 2 1)
                    (("2" (expand "null_ol?")
                      (("2" (lift-if)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (hide-all-but (1 -1))
                              (("1"
                                (expand "eval_pd_noise")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "car_ol")
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "cdr_ol")
                                    (("1"
                                      (expand "eval_pd_noise" 1 2)
                                      (("1"
                                        (expand "null_ol?")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "car_ol")
                                              (("1"
                                                (inst -2 "j-2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "cdr_ol(N1)"
                                                     "N2"
                                                     "cdr_ol(pds)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (expand
                                                           "cdr_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (case
                                                               "NOT null_ol?(N2)")
                                                              (("1"
                                                                (lemma
                                                                 "epn_pds_monotony")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N2"
                                                                   "pds")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "cdr_ol")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("3"
                                                                        (use
                                                                         "appendable_Noises_1")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "null_ol?")
                                                                            (("3"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "cdr_ol")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "null_ol?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-2 1 3 4))
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (case
                                                         "N1 = cons(car(N1),cdr(N1))")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          (("2"
                                                            (use
                                                             "list_cons_eta[[nat,nzEpsilon]]")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "cons(car(N1), append(cdr(N1), N2)) = append(N1,N2)")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "N1"
                                                 "N2"
                                                 "cdr_ol(pds)")
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (lemma
                                                           "epn_pds_monotony")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "N1"
                                                             "pds")
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (expand
                                                                 "car_ol")
                                                                (("1"
                                                                  (expand
                                                                   "cdr_ol")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "epn_pds_monotony")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "N2"
                                                                           "pds")
                                                                          (("1"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("1"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("1"
                                                                                (expand
                                                                                 "null_ol?")
                                                                                (("1"
                                                                                  (case
                                                                                   "null?(N2)")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "N1")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "olidx_car_last[nzEpsilon]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "N1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 5))
                                          (("2"
                                            (expand "append" 1 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "cdr_ol")
                                        (("2"
                                          (expand "eval_pd_noise" 2 2)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (expand "null_ol?")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "car_ol")
                                                  (("2"
                                                    (expand "cdr_ol")
                                                    (("2"
                                                      (case
                                                       "null?(cdr(N1))")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst -1 "j-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr_ol(N1)"
                                                             "N2"
                                                             "pds")
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      -1
                                                                      7))
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (grind)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak))
 (eval_pd_noise_noise_append 0
  (eval_pd_noise_noise_append-1 nil 3621187208
   ("" (skeep)
    (("" (use "eval_pd_noise_noise_append_2") (("" (assert) nil nil))
      nil))
    nil)
   ((eval_pd_noise_noise_append_2 formula-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (eval_pd_noise_append 0
  (eval_pd_noise_append-1 nil 3621413347
   ("" (skeep)
    (("" (name "lengths" "length(pds1)+length(pds2)")
      (("" (generalize "pds1" "pds1")
        (("" (generalize "pds2" "pds2")
          (("" (generalize "N" "N")
            (("" (generalize "lengths" "lengths")
              (("" (induct "lengths" :name "NAT_induction")
                (("" (skeep)
                  (("" (skolem 1 ("N_" "pds2_" "pds1_"))
                    (("" (flatten)
                      (("" (expand "append_ol")
                        (("" (expand "append" 1 1)
                          (("" (lift-if)
                            (("" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (expand "eval_pd_noise")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (use "eval_pd_noise_rec_pds_def")
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (expand "null_ol?")
                                      (("2"
                                        (expand "cdr_ol")
                                        (("2"
                                          (expand "car_ol")
                                          (("2"
                                            (inst -1 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -1
                                                 "N_"
                                                 "pds2_"
                                                 "cdr_ol(pds1_)")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (expand "cdr_ol")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (case
                                                         "eval_pd_noise(cdr(pds1_), N_) + eval_pd_noise(pds2_, N_) + get_noise_by_idx(car(pds1_)`1, N_) * car(pds1_)`2 = eval_pd_noise(cdr(pds1_), N_) + get_noise_by_idx(car(pds1_)`1, N_) * car(pds1_)`2+ eval_pd_noise(pds2_, N_)")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (lemma
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "N_"
                                                               "pds1_")
                                                              (("1"
                                                                (expand
                                                                 "null_ol?")
                                                                (("1"
                                                                  (expand
                                                                   "cdr_ol")
                                                                  (("1"
                                                                    (expand
                                                                     "car_ol")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       :dir
                                                                       RL)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (last_ol def-decl "T" ordered_list nil)
    (pds1_ skolem-const-decl "ErrorTerms" affine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (append_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (eval_ac_partial_ext 0
  (eval_ac_partial_ext-1 nil 3628362410
   ("" (skeep)
    (("" (expand "eval_ac_noise")
      (("" (expand "idxs_ac")
        (("" (generalize "pd(Xa)" "pds")
          (("" (induct "pds")
            (("1" (typepred "pds!1") (("1" (propax) nil nil)) nil)
             ("2" (flatten)
              (("2" (expand "eval_pd_noise")
                (("2" (expand "null_ol?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("3" (skolem 1 ("pdsh" "pdst"))
              (("3" (flatten)
                (("3" (use "eval_pd_noise_rec_pds_def")
                  (("3" (expand "null_ol?")
                    (("3" (replaces -1)
                      (("3" (expand "cdr_ol")
                        (("3" (expand "car_ol")
                          (("3"
                            (use "eval_pd_noise_rec_pds_def"
                                 ("N" "N2" "pds" "cons(pdsh, pdst)"))
                            (("3" (replaces -1)
                              (("3"
                                (expand "null_ol?")
                                (("3"
                                  (expand "cdr_ol")
                                  (("3"
                                    (expand "car_ol")
                                    (("3"
                                      (expand "ordered_list?" -2)
                                      (("3"
                                        (split -2)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "eval_pd_noise(pdst, N1) = eval_pd_noise(pdst, N2)")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -3 "pdsh`1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst? -4)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_ac_noise const-decl "real" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AffineCombination type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (idxs_ac const-decl "list[nat]" affine nil))
   shostak))
 (eval_upd_no_idxs_ac 0
  (eval_upd_no_idxs_ac-1 nil 3628517071
   ("" (skeep)
    (("" (expand "eval_ac_noise")
      (("" (expand "idxs_ac")
        (("" (generalize "pd(Xa)" "pds")
          (("" (induct "pds")
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (expand "eval_pd_noise")
                (("2" (expand "null_ol?") (("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("3" (skolem 1 ("hpds" "tpds"))
              (("3" (flatten)
                (("3" (use "eval_pd_noise_rec_pds_def")
                  (("3" (replaces -1)
                    (("3" (lift-if 2)
                      (("3" (expand "null_ol?")
                        (("3" (expand "cdr_ol")
                          (("3" (expand "car_ol")
                            (("3"
                              (use "eval_pd_noise_rec_pds_def"
                                   ("N" "N" "pds" "cons(hpds,tpds)"))
                              (("3"
                                (replaces -1)
                                (("3"
                                  (expand "null_ol?")
                                  (("3"
                                    (expand "cdr_ol")
                                    (("3"
                                      (expand "car_ol")
                                      (("3"
                                        (expand "idxs_pd" 1)
                                        (("3"
                                          (expand "null_ol?")
                                          (("3"
                                            (expand "car_ol")
                                            (("3"
                                              (expand "member" 1)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand "cdr_ol")
                                                  (("3"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (use
                                                           "gnbi_upd_2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_ac_noise const-decl "real" affine nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval_pd_noise def-decl "real" affine nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AffineCombination type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gnbi_upd_2 formula-decl nil affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (list_induction formula-decl nil list_adt nil)
    (idxs_ac const-decl "list[nat]" affine nil))
   shostak))
 (mergeable?_TCC1 0
  (mergeable?_TCC1-1 nil 3628272610
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand "cdr_ol")
        (("" (expand "null_ol?")
          (("" (expand "length" 3 3 :assert? none)
            (("" (lift-if 3)
              (("" (split 3)
                (("1" (flatten) nil nil)
                 ("2" (flatten)
                  (("2" (name-replace "A" "length(cdr(N1))")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (length def-decl "nat" list_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (mergeable?_TCC2 0
  (mergeable?_TCC2-1 nil 3628272610
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand "cdr_ol")
        (("" (expand "null_ol?")
          (("" (expand "length" 4 4 :assert? none)
            (("" (lift-if 4)
              (("" (split 4)
                (("1" (flatten) nil nil)
                 ("2" (flatten)
                  (("2" (name-replace "A" "length(cdr(N2))")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (length def-decl "nat" list_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (mergeable?_TCC3 0
  (mergeable?_TCC3-1 nil 3628272610
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand "null_ol?")
        (("" (expand "cdr_ol")
          (("" (expand "length" 5 (3 4) :assert? none)
            (("" (lift-if 5)
              (("" (split 5)
                (("1" (flatten) nil nil)
                 ("2" (flatten)
                  (("2" (lift-if 2)
                    (("2" (split 2)
                      (("1" (flatten) nil nil)
                       ("2" (flatten)
                        (("2" (name-replace "A" "length(cdr(N1))")
                          (("2" (name-replace "B" "length(cdr(N2))")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_ol const-decl "ordered_list" ordered_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (mergeable_wrt_pd?_TCC1 0
  (mergeable_wrt_pd?_TCC1-1 nil 3628272610
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (mergeable_wrt_pd?_nonrec_def 0
  (mergeable_wrt_pd?_nonrec_def-1 nil 3628608581
   ("" (skeep)
    (("" (iff)
      (("" (split 1)
        (("1" (generalize "pds" "pds")
          (("1" (induct "pds")
            (("1" (beta) (("1" (propax) nil nil)) nil)
             ("2" (typepred "pds!1") (("2" (propax) nil nil)) nil)
             ("3" (flatten)
              (("3" (skeep)
                (("3" (expand "idxs_pd")
                  (("3" (expand "null_ol?")
                    (("3" (expand "member") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skolem 1 ("hpds" "tpds"))
              (("4" (flatten)
                (("4" (skeep)
                  (("4" (expand "idxs_pd" -4)
                    (("4" (expand "null_ol?")
                      (("4" (expand "car_ol")
                        (("4" (expand "member" -4)
                          (("4" (split -4)
                            (("1" (expand "mergeable_wrt_pd?" -4)
                              (("1"
                                (expand "null_ol?")
                                (("1"
                                  (expand "car_ol")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "cdr_ol")
                              (("2"
                                (split -2)
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "mergeable_wrt_pd?" -3)
                                  (("2"
                                    (expand "null_ol?")
                                    (("2"
                                      (expand "car_ol")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "cdr_ol")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "ordered_list?" -2)
                                  (("3"
                                    (hide-all-but (-2 1))
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (generalize "pds" "pds")
          (("2" (induct "pds")
            (("1" (beta) (("1" (propax) nil nil)) nil)
             ("2" (typepred "pds!1") (("2" (propax) nil nil)) nil)
             ("3" (flatten)
              (("3" (expand "mergeable_wrt_pd?")
                (("3" (expand "null_ol?") (("3" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("4" (skolem 1 ("hpds" "tpds"))
              (("4" (flatten)
                (("4" (expand "mergeable_wrt_pd?" 1)
                  (("4" (expand "null_ol?")
                    (("4" (split 1)
                      (("1" (flatten)
                        (("1" (expand "car_ol")
                          (("1" (inst -3 "hpds`1")
                            (("1" (split -3)
                              (("1" (propax) nil nil)
                               ("2" (propax) nil nil)
                               ("3"
                                (expand "idxs_pd" 1)
                                (("3"
                                  (expand "null_ol?")
                                  (("3"
                                    (expand "car_ol")
                                    (("3"
                                      (expand "member" 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "cdr_ol")
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (skeep)
                              (("1"
                                (inst?)
                                (("1"
                                  (split -3)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3"
                                    (expand "idxs_pd" 1)
                                    (("3"
                                      (expand "null_ol?")
                                      (("3"
                                        (expand "car_ol")
                                        (("3"
                                          (expand "member" 1)
                                          (("3"
                                            (expand "cdr_ol")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "ordered_list?" -1)
                              (("2"
                                (hide-all-but (-1 1))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (mergeable_wrt_pd? def-decl "bool" affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member def-decl "bool" list_props nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (merge_TCC1 0
  (merge_TCC1-1 nil 3628272610 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil))
   nil))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3628272610 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil))
   nil))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3628272610
   ("" (skeep*)
    (("" (expand "cdr_ol")
      (("" (expand "length" 3 3)
        (("" (expand "null_ol?")
          (("" (lift-if 3)
            (("" (split 3)
              (("1" (flatten) nil nil)
               ("2" (flatten)
                (("2" (replaces -5)
                  (("2" (assert)
                    (("2" (name-replace "A" "length(cdr(N2))")
                      (("2"
                        (name-replace "B"
                         "length[[nat, nzEpsilon]](N1)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3628272610
   ("" (skeep*)
    (("" (expand "lt_idx")
      (("" (typepred "v(N1,t2)")
        (("" (assert)
          (("" (split -2)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (flatten)
              (("2" (expand "car_ol")
                (("2" (replaces -1)
                  (("2" (expand "cdr_ol")
                    (("2" (replaces -6)
                      (("2" (replaces -4)
                        (("2" (replaces -2)
                          (("2" (case "car(N2)`1 < car(cdr(N2))`1")
                            (("1" (grind) nil nil)
                             ("2" (hide-all-but (1 4 2))
                              (("2"
                                (typepred "N2")
                                (("2"
                                  (expand "ordered_list?")
                                  (("2"
                                    (expand "null_ol?")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_idx const-decl "bool" indexed_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car_ol const-decl "T" ordered_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil))
   nil))
 (merge_TCC5 0
  (merge_TCC5-1 nil 3628337988 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (merge_TCC6 0
  (merge_TCC6-5 nil 3629482527
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand_ol)
        (("" (expand "length" 4 3)
          (("" (lift-if 4)
            (("" (assert)
              ((""
                (apply (try
                        (then (abstract-and-then 4 1 (assert)) (fail))
                        (skip) (abstract-and-then 4 1 (assert))))
                nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil)
  (merge_TCC6-4 nil 3629482180
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand_ol)
        (("" (expand "length" 4 3)
          (("" (lift-if 4)
            (("" (assert)
              ((""
                (apply (try (abstract-and-then 4 (assert))
                        (then (fail) (abstract-and-then 4 (assert)))
                        (skip)))
                nil))))))))))))
    nil)
   nil nil)
  (merge_TCC6-3 nil 3629482062
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand_ol)
        (("" (expand "length" 4 3)
          (("" (lift-if 4)
            (("" (assert)
              ((""
                (apply (try (abstract-and-then 4 (assert)) (fail)
                        (skip)))
                nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   nil)
  (merge_TCC6-2 nil 3629481654
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand_ol)
        (("" (expand "length" 4 3)
          (("" (lift-if 4)
            (("" (assert) (("" (abstract-and-then 4 (assert)) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   nil)
  (merge_TCC6-1 nil 3628337988
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand_ol)
        (("" (expand "length" 4 3)
          (("" (lift-if 4)
            (("" (assert) (("" (abstract-and-then 4 (assert)) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (merge_TCC7 0
  (merge_TCC7-1 nil 3628337988
   ("" (skeep*)
    (("" (expand "lt_idx")
      (("" (replaces -)
        (("" (typepred "v(cdr_ol(N1), N2)")
          (("" (expand_ol)
            (("" (assert)
              (("" (flatten)
                (("" (replaces -2)
                  (("" (case "car_ol(N1)`1 < car_ol(cdr_ol(N1))`1")
                    (("1" (expand_ol)
                      (("1" (hide-all-but (-1 -3 6))
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (typepred "N1")
                      (("2" (expand "ordered_list?" -1)
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (expand_ol) nil nil)
                     ("4" (expand_ol) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_idx const-decl "bool" indexed_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (car_ol const-decl "T" ordered_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil))
   nil))
 (merge_TCC8 0
  (merge_TCC8-1 nil 3628337988 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (merge_TCC9 0
  (merge_TCC9-1 nil 3628339943
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand_ol)
        (("" (expand "length" 5 (3 4))
          (("" (lift-if 5)
            (("" (split 5)
              (("1" (flatten) nil nil)
               ("2" (flatten)
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten) nil nil)
                     ("2" (flatten)
                      (("2"
                        (apply (try
                                (then
                                 (abstract-and-then 2 1 (assert))
                                 (fail))
                                (skip)
                                (abstract-and-then 2 1 (assert))))
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (merge_TCC10 0
  (merge_TCC10-1 nil 3628339943
   ("" (skeep*)
    (("" (expand "lt_idx")
      (("" (replaces -)
        (("" (typepred "v(cdr_ol(N1), cdr_ol(N2))")
          (("" (expand "null_ol?")
            (("" (assert)
              (("" (split -2)
                (("1" (expand_ol)
                  (("1" (flatten)
                    (("1" (replaces -2)
                      (("1" (case "car_ol(N2)`1 = car_ol(N1)`1")
                        (("1" (expand_ol)
                          (("1" (replaces -1 :dir RL)
                            (("1" (typepred "N2")
                              (("1"
                                (expand "ordered_list?")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil)
                         ("3" (expand_ol) nil nil)
                         ("4" (expand_ol) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand_ol)
                    (("2" (replaces -2)
                      (("2" (typepred "N1")
                        (("2" (expand "ordered_list?")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand_ol)
                  (("3" (flatten)
                    (("3" (replaces -1)
                      (("3"
                        (case "car_ol(N1)`1 < car_ol(cdr_ol(N2))`1")
                        (("1"
                          (case "car_ol(N1)`1 < car_ol(cdr_ol(N1))`1")
                          (("1" (grind) nil nil)
                           ("2" (expand_ol)
                            (("2" (typepred "N1")
                              (("2"
                                (expand "ordered_list?")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand_ol) nil nil))
                          nil)
                         ("2" (case "car_ol(N2)`1 = car_ol(N1)`1")
                          (("1" (expand_ol)
                            (("1" (replaces -1 :dir RL)
                              (("1"
                                (typepred "N2")
                                (("1"
                                  (expand "ordered_list?")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("3" (expand_ol) nil nil)
                         ("4" (expand_ol) nil nil)
                         ("5" (expand_ol) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_idx const-decl "bool" indexed_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (car_ol const-decl "T" ordered_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (merge_TCC11 0
  (merge_TCC11-1 nil 3628339943 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (merge_prop1 0
  (merge_prop1-2 nil 3629642538
   ("" (skeep)
    (("" (name "L" "length(N1)+length(N2)")
      (("" (generalize "N1" "N1")
        (("" (generalize "N2" "N2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "get_noise_by_idx" 1 1)
                    (("" (expand "null_ol?")
                      (("" (lift-if 1)
                        (("" (split 1)
                          (("1" (flatten)
                            (("1" (expand "merge" -1)
                              (("1"
                                (lift-if -1)
                                (("1"
                                  (expand "null_ol?")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "cons_ol")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "car_ol")
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "merge" 1)
                                    (("1"
                                      (expand "null_ol?")
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "N1!1=empty_noise")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case
                                                   "N2!1=empty_noise")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "car_ol")
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "cons_ol")
                                                        (("1"
                                                          (expand
                                                           "merge"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "car_ol")
                                                                (("1"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("1"
                                                                    (replaces
                                                                     -2
                                                                     :dir
                                                                     RL)
                                                                    (("1"
                                                                      (replaces
                                                                       -4)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "cons_ol")
                                                            (("1"
                                                              (expand
                                                               "merge"
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "null_ol?")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "car_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("1"
                                                                        (replaces
                                                                         -2
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (case
                                                             "car_ol(N2!1)`1 = car_ol(N1!1)`1")
                                                            (("1"
                                                              (expand
                                                               "cons_ol")
                                                              (("1"
                                                                (expand
                                                                 "merge"
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("1"
                                                                    (expand
                                                                     "car_ol")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "cons_ol")
                                                                        (("1"
                                                                          (replaces
                                                                           -2
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "merge" -1)
                                        (("1"
                                          (expand "null_ol?")
                                          (("1"
                                            (lift-if -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "car_ol")
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "cons_ol")
                                                            (("1"
                                                              (expand
                                                               ">")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "cons_ol")
                                                                (("1"
                                                                  (expand
                                                                   ">")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "cons_ol")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "cdr_ol")
                                        (("2"
                                          (expand "merge" 2)
                                          (("2"
                                            (expand "null_ol?")
                                            (("2"
                                              (lift-if 2)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "car_ol")
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "cons_ol")
                                                              (("1"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "j-1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "cdr_ol(N2!1)"
                                                                       "N1!1")
                                                                      (("1"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            -2
                                                                            3))
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "merge"
                                                                           5)
                                                                          (("3"
                                                                            (expand
                                                                             "null_ol?")
                                                                            (("3"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("3"
                                                                                (expand
                                                                                 "cons_ol")
                                                                                (("3"
                                                                                  (expand
                                                                                   "get_noise_by_idx"
                                                                                   -3
                                                                                   2)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "null_ol?")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "car_ol")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "merge"
                                                                                         6)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "null_ol?")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "car_ol")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "cons_ol")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      -2
                                                                      3))
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "j-1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "N2!1"
                                                                         "cdr_ol(N1!1)")
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "merge"
                                                                             (5
                                                                              6))
                                                                            (("1"
                                                                              (expand
                                                                               "null_ol?")
                                                                              (("1"
                                                                                (expand
                                                                                 "car_ol")
                                                                                (("1"
                                                                                  (expand
                                                                                   "cons_ol")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                -2
                                                                                5))
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -1
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (name-replace
                                                                                     "A"
                                                                                     "length(N2!1)")
                                                                                    (("2"
                                                                                      (name
                                                                                       "B"
                                                                                       "length(cdr_ol(N1!1))")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "null_ol?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-2
                                                                        1
                                                                        4))
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "j-2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "cdr_ol(N2!1)"
                                                                         "cdr_ol(N1!1)")
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "merge"
                                                                               (6
                                                                                7))
                                                                              (("1"
                                                                                (expand
                                                                                 "null_ol?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "car_ol")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cons_ol")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              -1
                                                                              5
                                                                              6))
                                                                            (("2"
                                                                              (expand
                                                                               "cdr_ol")
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -1
                                                                                 :assert?
                                                                                 none)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   -1)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         -1)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               (3
                                                                                                -1))
                                                                                              (("2"
                                                                                                (abstract-and-then
                                                                                                 1
                                                                                                 2
                                                                                                 (assert))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        -1
                                                                        5
                                                                        6))
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("2"
                                                                          (lift-if
                                                                           -1)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (lift-if
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" affine nil)
    (N2!1 skolem-const-decl "Noise" affine nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (empty_noise const-decl "Noise" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (merge def-decl "{N_: Noise |
         (null_ol?(N1) AND null_ol?(N2) AND null_ol?(N_)) OR
          (null_ol?(N1) AND
            NOT null_ol?(N2) AND
             NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N2)`1)
           OR
           (null_ol?(N2) AND
             NOT null_ol?(N1) AND
              NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N1)`1)
            OR
            (NOT null_ol?(N1) AND
              NOT null_ol?(N2) AND
               NOT null_ol?(N_) AND
                car_ol(N_)`1 = min(car_ol(N1)`1, car_ol(N2)`1))}"
           affine nil))
   nil)
  (merge_prop1-1 nil 3628614543
   ("" (skeep)
    (("" (name "L" "length(N1)+length(N2)")
      (("" (generalize "N1" "N1")
        (("" (generalize "N2" "N2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "get_noise_by_idx" 1 1)
                    (("" (expand "null_ol?")
                      (("" (lift-if 1)
                        (("" (split 1)
                          (("1" (flatten)
                            (("1" (expand "merge" -1)
                              (("1"
                                (lift-if -1)
                                (("1"
                                  (expand "null_ol?")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "cons_ol")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "car_ol")
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "merge" 1)
                                    (("1"
                                      (expand "null_ol?")
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "N1!1=null")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case "N2!1=null")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "car_ol")
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "cons_ol")
                                                        (("1"
                                                          (expand
                                                           "merge"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "car_ol")
                                                                (("1"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("1"
                                                                    (replaces
                                                                     -2
                                                                     :dir
                                                                     RL)
                                                                    (("1"
                                                                      (replaces
                                                                       -4)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "cons_ol")
                                                            (("1"
                                                              (expand
                                                               "merge"
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "null_ol?")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "car_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("1"
                                                                        (replaces
                                                                         -2
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (case
                                                             "car(N2!1)`1 = car(N1!1)`1")
                                                            (("1"
                                                              (expand
                                                               "cons_ol")
                                                              (("1"
                                                                (expand
                                                                 "merge"
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("1"
                                                                    (expand
                                                                     "car_ol")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "cons_ol")
                                                                        (("1"
                                                                          (replaces
                                                                           -2
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "merge" -1)
                                        (("1"
                                          (expand "null_ol?")
                                          (("1"
                                            (lift-if -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "car_ol")
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "cons_ol")
                                                            (("1"
                                                              (expand
                                                               ">")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "cons_ol")
                                                                (("1"
                                                                  (expand
                                                                   ">")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "cons_ol")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "cdr_ol")
                                        (("2"
                                          (expand "merge" 2)
                                          (("2"
                                            (expand "null_ol?")
                                            (("2"
                                              (lift-if 2)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "car_ol")
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "cons_ol")
                                                              (("1"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "j-1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "cdr_ol(N2!1)"
                                                                       "N1!1")
                                                                      (("1"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            -2
                                                                            3))
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "merge"
                                                                           5)
                                                                          (("3"
                                                                            (expand
                                                                             "null_ol?")
                                                                            (("3"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("3"
                                                                                (expand
                                                                                 "cons_ol")
                                                                                (("3"
                                                                                  (expand
                                                                                   "get_noise_by_idx"
                                                                                   -3
                                                                                   2)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "null_ol?")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "car_ol")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "merge"
                                                                                         6)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "null_ol?")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "car_ol")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "cons_ol")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      -2
                                                                      3))
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "j-1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "N2!1"
                                                                         "cdr_ol(N1!1)")
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "merge"
                                                                             (5
                                                                              6))
                                                                            (("1"
                                                                              (expand
                                                                               "null_ol?")
                                                                              (("1"
                                                                                (expand
                                                                                 "car_ol")
                                                                                (("1"
                                                                                  (expand
                                                                                   "cons_ol")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                -2
                                                                                5))
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -1
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (name-replace
                                                                                     "A"
                                                                                     "length(N2!1)")
                                                                                    (("2"
                                                                                      (name
                                                                                       "B"
                                                                                       "length(cdr_ol(N1!1))")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "null_ol?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-2
                                                                        1
                                                                        4))
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "j-2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "cdr_ol(N2!1)"
                                                                         "cdr_ol(N1!1)")
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "merge"
                                                                               (6
                                                                                7))
                                                                              (("1"
                                                                                (expand
                                                                                 "null_ol?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "car_ol")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cons_ol")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              -1
                                                                              5
                                                                              6))
                                                                            (("2"
                                                                              (expand
                                                                               "cdr_ol")
                                                                              (("2"
                                                                                (name
                                                                                 "B"
                                                                                 "length(cdr_ol(N2!1))")
                                                                                (("1"
                                                                                  (name
                                                                                   "A"
                                                                                   "length(cdr_ol(N1!1))")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         -3)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             -3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "null_ol?")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "null_ol?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        -1
                                                                        5
                                                                        6))
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak))
 (mergeable_wrt_null_all_idxs_zero 0
  (mergeable_wrt_null_all_idxs_zero-1 nil 3628596850
   ("" (induct "pds")
    (("1" (typepred "pds!1") (("1" (propax) nil nil)) nil)
     ("2" (expand "idxs_pd")
      (("2" (expand "null_ol?")
        (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil))
      nil)
     ("3" (skolem 1 ("hpds" "tpds"))
      (("3" (flatten)
        (("3" (skeep*)
          (("3" (expand "idxs_pd" -4 :assert? none)
            (("3" (expand_ol)
              (("3" (expand "member" -4)
                (("3" (split -1)
                  (("1" (split -4)
                    (("1" (replaces -1)
                      (("1" (hide -1)
                        (("1"
                          (expand "mergeable_wrt_pd?" :assert? none)
                          (("1" (expand_ol)
                            (("1" (flatten)
                              (("1"
                                (split -2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (replaces -1 :dir RL)
                                  (("2"
                                    (expand "get_noise_by_idx")
                                    (("2" (expand_ol) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "N")
                      (("2"
                        (expand "mergeable_wrt_pd?" -4 :assert? none)
                        (("2" (expand_ol)
                          (("2" (flatten)
                            (("2" (split -2)
                              (("1"
                                (inst? -1 :where -2)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ordered_list?" -1)
                    (("2" (split -1)
                      (("1" (expand "ordered_list?" 1)
                        (("1" (assert) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil))
    nil)
   ((cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (member def-decl "bool" list_props nil)
    (mergeable_wrt_pd? def-decl "bool" affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (mergeable_wrt_null_eval_zero 0
  (mergeable_wrt_null_eval_zero-1 nil 3628597794
   ("" (skolem 1 ("N" "_"))
    (("" (induct "pds")
      (("1" (typepred "pds!1") (("1" (propax) nil nil)) nil)
       ("2" (flatten)
        (("2" (hide-all-but (1))
          (("2" (expand "eval_pd_noise") (("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (skolem 1 ("hpds" "tpds"))
        (("3" (flatten)
          (("3" (expand "eval_pd_noise" 1)
            (("3" (expand "null_ol?")
              (("3" (lift-if 1)
                (("3" (split 1)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (expand "car_ol")
                      (("2" (expand "cdr_ol")
                        (("2" (use "mergeable_wrt_null_all_idxs_zero")
                          (("2" (assert)
                            (("2" (split -2)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case
                                     "eval_pd_noise(tpds, cdr(N))=0")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -3 "hpds`1")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 3 -2))
                                      (("2"
                                        (expand "eval_pd_noise" -1)
                                        (("2"
                                          (expand "null_ol?")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if -1)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (expand
                                                   "eval_pd_noise")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand "car_ol")
                                                    (("2"
                                                      (reveal -1)
                                                      (("2"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (reveal -3)
                                                          (("2"
                                                            (expand
                                                             "ordered_list?")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "lt_idx")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "cdr_ol")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 2)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "eval_pd_noise_rec_pds_def")
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (expand "null_ol?")
                                              (("2"
                                                (expand "cdr_ol")
                                                (("2"
                                                  (expand "car_ol")
                                                  (("2"
                                                    (case
                                                     "eval_pd_noise(tpds, cdr(N)) = 0")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "hpds`1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "eval_pd_noise"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         "null_ol?")
                                                        (("2"
                                                          (lift-if -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (hide-all-but
                                                               (1 -1))
                                                              (("1"
                                                                (expand
                                                                 "eval_pd_noise")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "car_ol")
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "mergeable_wrt_pd?" -3)
                                (("2"
                                  (expand "null_ol?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "cdr_ol")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "ordered_list?" -2)
                                (("3"
                                  (hide-all-but (-2 1))
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide-all-but (1)) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (mergeable_wrt_pd? def-decl "bool" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval_pd_noise def-decl "real" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (car_ol const-decl "T" ordered_list nil)
    (mergeable_wrt_null_all_idxs_zero formula-decl nil affine nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (member def-decl "bool" list_props nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (mergeable_noises_respect_eval 0
  (mergeable_noises_respect_eval-3 "" 3629628859
   ("" (skolem!)
    (("" (name "L" "length(N1!1)+length(N2!1)")
      (("" (generalize "N1!1" "N1")
        (("" (generalize "N2!1" "N2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep*)
                (("" (expand "merge" 1)
                  (("" (expand "null_ol?")
                    (("" (expand "car_ol")
                      (("" (expand "cdr_ol")
                        (("" (lift-if 1)
                          (("" (split 1)
                            (("1" (flatten)
                              (("1"
                                (case "N1=empty_noise")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (expand "eval_ac_noise")
                                      (("1"
                                        (expand "eval_pd_noise" 1 2)
                                        (("1"
                                          (expand_ol)
                                          (("1"
                                            (expand
                                             "mergeable_wrt_ac?")
                                            (("1"
                                              (use
                                               "mergeable_wrt_null_eval_zero")
                                              (("1"
                                                (assert)
                                                nil)))))))))))))))
                                 ("2" (grind) nil)))))
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1" (propax) nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "cons_ol")
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "eval_ac_noise")
                                          (("1"
                                            (use
                                             "eval_pd_noise_rec_N_def")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "null_ol?")
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (inst -2 "j-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "cdr_ol(N2)"
                                                         "N1")
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "mergeable_wrt_ac?")
                                                                (("1"
                                                                  (case
                                                                   "search_error_term_by_idx(pd(Xa!1), car_ol(N2)`1) /= 0")
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (use
                                                                       "setbi_nnull_member")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "mergeable_wrt_pd?_nonrec_def")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "car_ol(N2)`1")
                                                                              (("1"
                                                                                (expand_ol)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "get_noise_by_idx(car_ol(N2)`1, N2) = 0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "get_noise_by_idx"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_ol?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "car_ol")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "car_ol(N2)`2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         -1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand_ol)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "car_ol(N2)`2")
                                                                                              (("1"
                                                                                                (expand_ol)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "/=")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil)))))))
                                                                                             ("2"
                                                                                              (expand
                                                                                               "get_noise_by_idx")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "null_ol?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "car_ol")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil)))))))))))))))
                                                                                     ("3"
                                                                                      (expand_ol)
                                                                                      nil)))))))))))))))))))
                                                                   ("2"
                                                                    (expand_ol)
                                                                    (("2"
                                                                      (expand
                                                                       "/=")
                                                                      (("2"
                                                                        (abstract-and-then
                                                                         -1
                                                                         1
                                                                         (assert))
                                                                        nil)))))))))))))
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1 3))
                                                            (("2"
                                                              (expand
                                                               "mergeable_wrt_ac?")
                                                              (("2"
                                                                (use
                                                                 "mergeable_wrt_pd?_nonrec_def")
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (use
                                                                     "mergeable_wrt_pd?_nonrec_def")
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (beta)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "get_noise_by_idx"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand_ol)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         -1)
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil)))
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "get_noise_by_idx"
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand_ol)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1
                                                                                                               :dir
                                                                                                               RL)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "N2")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "ordered_list?"
                                                                                                                   :assert?
                                                                                                                   none)
                                                                                                                  (("1"
                                                                                                                    (lift-if
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "lt_idx")
                                                                                                                              (("2"
                                                                                                                                (abstract-and-then
                                                                                                                                 -1
                                                                                                                                 1
                                                                                                                                 (assert))
                                                                                                                                nil)))))))))))))))))))))
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "N2")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "ordered_list?"
                                                                                                                     :assert?
                                                                                                                     none)
                                                                                                                    (("2"
                                                                                                                      (lift-if
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "lt_idx")
                                                                                                                                (("2"
                                                                                                                                  (abstract-and-then
                                                                                                                                   -1
                                                                                                                                   1
                                                                                                                                   (assert))
                                                                                                                                  nil)))))))))))))))))))))))))))))))))))
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                nil)))))))))))))
                                                                                   ("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (case
                                                                                       "i=car_ol(N2)`1")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "get_noise_by_idx"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand_ol)
                                                                                              (("1"
                                                                                                (lift-if
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "N2")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "ordered_list?")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil)))))))))))))))))))
                                                                                       ("2"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         3
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand_ol)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lift-if
                                                                                               3)
                                                                                              (("2"
                                                                                                (split
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     ">")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "get_noise_by_idx"
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "null_ol?")
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand_ol)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "N2")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "ordered_list?"
                                                                                                                         :assert?
                                                                                                                         none)
                                                                                                                        (("1"
                                                                                                                          (lift-if
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "lt_idx")
                                                                                                                                    (("2"
                                                                                                                                      (abstract-and-then
                                                                                                                                       -1
                                                                                                                                       1
                                                                                                                                       (assert))
                                                                                                                                      nil)))))))))))))))))))
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "N2")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "ordered_list?"
                                                                                                                             :assert?
                                                                                                                             none)
                                                                                                                            (("2"
                                                                                                                              (lift-if
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "lt_idx")
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (abstract-and-then
                                                                                                                                           -1
                                                                                                                                           1
                                                                                                                                           (assert))
                                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil)))))))))))))))))))))))))))))))))))))))
                                                           ("3"
                                                            (hide-all-but
                                                             (1 -2 3))
                                                            (("3"
                                                              (expand_ol)
                                                              (("3"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 2
                                                                 :assert?
                                                                 none)
                                                                (("3"
                                                                  (lift-if
                                                                   -1)
                                                                  (("3"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))))))
                                                         ("2"
                                                          (expand_ol)
                                                          nil)))))
                                                     ("2"
                                                      (hide-all-but
                                                       (-2 1 3))
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1
                                                         2)
                                                        (("2"
                                                          (lift-if -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))))))))))))))))
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "eval_ac_noise")
                                              (("1"
                                                (use
                                                 "eval_pd_noise_rec_N_def")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand_ol)
                                                    (("1"
                                                      (inst -2 "j-1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "N2"
                                                           "cdr_ol(N1)")
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (expand_ol)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_N_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N1"
                                                                     "pd(Xa!1)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (propax)
                                                                              nil)))))))))))))))))
                                                             ("2"
                                                              (hide-all-but
                                                               (-3
                                                                1
                                                                5))
                                                              (("2"
                                                                (expand
                                                                 "mergeable_wrt_ac?")
                                                                (("2"
                                                                  (use
                                                                   "mergeable_wrt_pd?_nonrec_def")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (use
                                                                       "mergeable_wrt_pd?_nonrec_def")
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "i = car_ol(N1)`1")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         (-6
                                                                                          3))
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            1
                                                                                            2))
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil)))))))
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil)))))))))))))))))))))))))
                                                             ("3"
                                                              (hide-all-but
                                                               (1
                                                                -2
                                                                5))
                                                              (("3"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 1)
                                                                (("3"
                                                                  (grind)
                                                                  nil)))))))
                                                           ("2"
                                                            (expand_ol)
                                                            nil)))))
                                                       ("2"
                                                        (hide-all-but
                                                         (1 -2 5))
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1
                                                           1)
                                                          (("2"
                                                            (lift-if
                                                             -1)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))))))))))))))
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "eval_ac_noise")
                                              (("2"
                                                (use
                                                 "eval_pd_noise_rec_N_def")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (expand "null_ol?")
                                                    (("2"
                                                      (expand "cdr_ol")
                                                      (("2"
                                                        (inst -1 "j-2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(N2)"
                                                             "cdr(N1)")
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_N_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N1"
                                                                     "pd(Xa!1)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (propax)
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (case
                                                                 "car(N2)`1 = car(N1)`1")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -3
                                                                    1
                                                                    5
                                                                    6))
                                                                  (("1"
                                                                    (expand
                                                                     "mergeable_wrt_ac?")
                                                                    (("1"
                                                                      (use
                                                                       "mergeable_wrt_pd?_nonrec_def")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (use
                                                                           "mergeable_wrt_pd?_nonrec_def")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1
                                                                                          3))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "get_noise_by_idx"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_ol?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "car_ol")
                                                                                              (("1"
                                                                                                (lift-if
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cdr_ol")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "car(N2)`2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))))
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "get_noise_by_idx")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "null_ol?")
                                                                                                              (("1"
                                                                                                                (lift-if
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "car_ol")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "N2")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "ordered_list?")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil)))))))))
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "car_ol")
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "N2")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "ordered_list?")
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil)))))))))))))))))))))))))
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil)))))))))))))))))))))
                                                                                       ("2"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "null_ol?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "car_ol")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -3
                                                                                                         1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "get_noise_by_idx"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "null_ol?")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "car_ol")
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "N2")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ordered_list?")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil)))))))
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "N2")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "ordered_list?")
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil)))))))))))))))))))))))))))))
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "get_noise_by_idx"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "null_ol?")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "car_ol")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "N2")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "ordered_list?")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil)))))))))))
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "car_ol")
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "N2")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "ordered_list?")
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil)))))))))))))))))))))))))))
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "cdr_ol")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                                                 ("2"
                                                                  (grind)
                                                                  nil)))
                                                               ("3"
                                                                (hide-all-but
                                                                 (1
                                                                  -1
                                                                  5
                                                                  6))
                                                                (("3"
                                                                  (expand
                                                                   "length"
                                                                   -1
                                                                   :assert?
                                                                   none)
                                                                  (("3"
                                                                    (lift-if
                                                                     -1)
                                                                    (("3"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lift-if
                                                                           -1)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))))))))))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1 5 6))
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (lift-if
                                                               -1)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (lift-if
                                                                     -1)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (grind)
                                                                          nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (setbi_nnull_member formula-decl nil affine nil)
    (mergeable_wrt_pd?_nonrec_def formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (N2 skolem-const-decl "Noise" affine nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eval_pd_noise_rec_N_def formula-decl nil affine nil)
    (N1 skolem-const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (mergeable_wrt_null_eval_zero formula-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (mergeable_wrt_ac? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (merge def-decl "{N_: Noise |
         (null_ol?(N1) AND null_ol?(N2) AND null_ol?(N_)) OR
          (null_ol?(N1) AND
            NOT null_ol?(N2) AND
             NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N2)`1)
           OR
           (null_ol?(N2) AND
             NOT null_ol?(N1) AND
              NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N1)`1)
            OR
            (NOT null_ol?(N1) AND
              NOT null_ol?(N2) AND
               NOT null_ol?(N_) AND
                car_ol(N_)`1 = min(car_ol(N1)`1, car_ol(N2)`1))}"
           affine nil))
   nil)
  (mergeable_noises_respect_eval-2 "" 3629490441
   ("" (skolem!)
    (("" (name "L" "length(N1!1)+length(N2!1)")
      (("" (generalize "N1!1" "N1")
        (("" (generalize "N2!1" "N2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep*)
                (("" (expand "merge" 1)
                  (("" (expand "null_ol?")
                    (("" (expand "car_ol")
                      (("" (expand "cdr_ol")
                        (("" (lift-if 1)
                          (("" (split 1)
                            (("1" (flatten)
                              (("1"
                                (case "N1=empty_noise")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (expand "eval_ac_noise")
                                      (("1"
                                        (expand "eval_pd_noise" 1 2)
                                        (("1"
                                          (expand_ol)
                                          (("1"
                                            (expand
                                             "mergeable_wrt_ac?")
                                            (("1"
                                              (use
                                               "mergeable_wrt_null_eval_zero")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "cons_ol")
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "eval_ac_noise")
                                          (("1"
                                            (use
                                             "eval_pd_noise_rec_N_def")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "null_ol?")
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (inst -2 "j-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "cdr_ol(N2)"
                                                         "N1")
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "mergeable_wrt_ac?")
                                                                (("1"
                                                                  (case
                                                                   "search_error_term_by_idx(pd(Xa!1), car_ol(N2)`1) /= 0")
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (use
                                                                       "setbi_nnull_member")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "mergeable_wrt_pd?_nonrec_def")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "car_ol(N2)`1")
                                                                              (("1"
                                                                                (expand_ol)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "get_noise_by_idx(car_ol(N2)`1, N2) = 0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "get_noise_by_idx"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_ol?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "car_ol")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "car_ol(N2)`2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         -1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand_ol)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "car_ol(N2)`2")
                                                                                              (("1"
                                                                                                (expand_ol)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "/=")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "get_noise_by_idx")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "null_ol?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "car_ol")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand_ol)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand_ol)
                                                                    (("2"
                                                                      (expand
                                                                       "/=")
                                                                      (("2"
                                                                        (abstract-and-then
                                                                         -1
                                                                         1
                                                                         (assert))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1 3))
                                                            (("2"
                                                              (expand
                                                               "mergeable_wrt_ac?")
                                                              (("2"
                                                                (use
                                                                 "mergeable_wrt_pd?_nonrec_def")
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (use
                                                                     "mergeable_wrt_pd?_nonrec_def")
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (beta)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "get_noise_by_idx"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand_ol)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         -1)
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "get_noise_by_idx"
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand_ol)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1
                                                                                                               :dir
                                                                                                               RL)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "N2")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "ordered_list?"
                                                                                                                   :assert?
                                                                                                                   none)
                                                                                                                  (("1"
                                                                                                                    (lift-if
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "lt_idx")
                                                                                                                              (("2"
                                                                                                                                (abstract-and-then
                                                                                                                                 -1
                                                                                                                                 1
                                                                                                                                 (assert))
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "N2")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "ordered_list?"
                                                                                                                     :assert?
                                                                                                                     none)
                                                                                                                    (("2"
                                                                                                                      (lift-if
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "lt_idx")
                                                                                                                                (("2"
                                                                                                                                  (abstract-and-then
                                                                                                                                   -1
                                                                                                                                   1
                                                                                                                                   (assert))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (case
                                                                                       "i=car_ol(N2)`1")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "get_noise_by_idx"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand_ol)
                                                                                              (("1"
                                                                                                (lift-if
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "N2")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "ordered_list?")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         3
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand_ol)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lift-if
                                                                                               3)
                                                                                              (("2"
                                                                                                (split
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     ">")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "get_noise_by_idx"
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "null_ol?")
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand_ol)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "N2")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "ordered_list?"
                                                                                                                         :assert?
                                                                                                                         none)
                                                                                                                        (("1"
                                                                                                                          (lift-if
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "lt_idx")
                                                                                                                                    (("2"
                                                                                                                                      (abstract-and-then
                                                                                                                                       -1
                                                                                                                                       1
                                                                                                                                       (assert))
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "N2")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "ordered_list?"
                                                                                                                             :assert?
                                                                                                                             none)
                                                                                                                            (("2"
                                                                                                                              (lift-if
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "lt_idx")
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (abstract-and-then
                                                                                                                                           -1
                                                                                                                                           1
                                                                                                                                           (assert))
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             (1 -2 3))
                                                            (("3"
                                                              (expand_ol)
                                                              (("3"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 2
                                                                 :assert?
                                                                 none)
                                                                (("3"
                                                                  (lift-if
                                                                   -1)
                                                                  (("3"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand_ol)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-2 1 3))
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1
                                                         2)
                                                        (("2"
                                                          (lift-if -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "eval_ac_noise")
                                              (("1"
                                                (use
                                                 "eval_pd_noise_rec_N_def")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand_ol)
                                                    (("1"
                                                      (inst -2 "j-1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "N2"
                                                           "cdr_ol(N1)")
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (expand_ol)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_N_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N1"
                                                                     "pd(Xa!1)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-3
                                                                1
                                                                5))
                                                              (("2"
                                                                (expand
                                                                 "mergeable_wrt_ac?")
                                                                (("2"
                                                                  (use
                                                                   "mergeable_wrt_pd?_nonrec_def")
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (use
                                                                       "mergeable_wrt_pd?_nonrec_def")
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "i = car(N1)`1")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         (-6
                                                                                          3))
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            1
                                                                                            2))
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               (1
                                                                -2
                                                                5))
                                                              (("3"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand_ol)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 -2 5))
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1
                                                           1)
                                                          (("2"
                                                            (lift-if
                                                             -1)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "eval_ac_noise")
                                              (("2"
                                                (use
                                                 "eval_pd_noise_rec_N_def")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (expand "null_ol?")
                                                    (("2"
                                                      (expand "cdr_ol")
                                                      (("2"
                                                        (inst -1 "j-2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(N2)"
                                                             "cdr(N1)")
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_N_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N1"
                                                                     "pd(Xa!1)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "car(N2)`1 = car(N1)`1")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -3
                                                                    1
                                                                    5
                                                                    6))
                                                                  (("1"
                                                                    (expand
                                                                     "mergeable_wrt_ac?")
                                                                    (("1"
                                                                      (use
                                                                       "mergeable_wrt_pd?_nonrec_def")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (use
                                                                           "mergeable_wrt_pd?_nonrec_def")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1
                                                                                          3))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "get_noise_by_idx"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_ol?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "car_ol")
                                                                                              (("1"
                                                                                                (lift-if
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cdr_ol")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "car(N2)`2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "get_noise_by_idx")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "null_ol?")
                                                                                                              (("1"
                                                                                                                (lift-if
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "car_ol")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "N2")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "ordered_list?")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "car_ol")
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "N2")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "ordered_list?")
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "null_ol?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "car_ol")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -3
                                                                                                         1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "get_noise_by_idx"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "null_ol?")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "car_ol")
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "N2")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ordered_list?")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "N2")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "ordered_list?")
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "get_noise_by_idx"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "null_ol?")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "car_ol")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "N2")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "ordered_list?")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "car_ol")
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "N2")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "ordered_list?")
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "cdr_ol")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 (1
                                                                  -1
                                                                  5
                                                                  6))
                                                                (("3"
                                                                  (expand
                                                                   "length"
                                                                   -1
                                                                   :assert?
                                                                   none)
                                                                  (("3"
                                                                    (lift-if
                                                                     -1)
                                                                    (("3"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lift-if
                                                                           -1)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1 5 6))
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (lift-if
                                                               -1)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (lift-if
                                                                     -1)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak)
  (mergeable_noises_respect_eval-1 nil 3628593395
   ("" (skolem!)
    (("" (name "L" "length(N1!1)+length(N2!1)")
      (("" (generalize "N1!1" "N1")
        (("" (generalize "N2!1" "N2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep*)
                (("" (expand "merge" 1)
                  (("" (expand "null_ol?")
                    (("" (expand "car_ol")
                      (("" (expand "cdr_ol")
                        (("" (lift-if 1)
                          (("" (split 1)
                            (("1" (flatten)
                              (("1"
                                (case "N1=null")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (expand "eval_ac_noise")
                                      (("1"
                                        (expand "eval_pd_noise" 1 2)
                                        (("1"
                                          (expand "null_ol?")
                                          (("1"
                                            (expand
                                             "mergeable_wrt_ac?")
                                            (("1"
                                              (use
                                               "mergeable_wrt_null_eval_zero")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "cons_ol")
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "eval_ac_noise")
                                          (("1"
                                            (use
                                             "eval_pd_noise_rec_N_def")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "null_ol?")
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (inst -2 "j-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "cdr(N2)"
                                                         "N1")
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "mergeable_wrt_ac?")
                                                                (("1"
                                                                  (case
                                                                   "search_error_term_by_idx(pd(Xa!1), car(N2)`1) /= 0")
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (use
                                                                       "setbi_nnull_member")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "mergeable_wrt_pd?_nonrec_def")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "car(N2)`1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "get_noise_by_idx(car(N2)`1, N2) = 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "null_ol?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "car_ol")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "car(N2)`2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "get_noise_by_idx"
                                                                                       -1
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "null_ol?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "car_ol")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "car_ol")
                                                                    (("2"
                                                                      (expand
                                                                       "/=")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3 1 3))
                                                            (("2"
                                                              (expand
                                                               "mergeable_wrt_ac?")
                                                              (("2"
                                                                (use
                                                                 "mergeable_wrt_pd?_nonrec_def")
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (use
                                                                     "mergeable_wrt_pd?_nonrec_def")
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (beta)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "get_noise_by_idx"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "null_ol?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "car_ol")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "cdr_ol")
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             -1)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "get_noise_by_idx"
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "null_ol?")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "car_ol")
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     RL)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "N2")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "ordered_list?")
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "cdr_ol")
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "N2")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "ordered_list?")
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (case
                                                                                       "i=car(N2)`1")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "get_noise_by_idx"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "null_ol?")
                                                                                              (("1"
                                                                                                (lift-if
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "car_ol")
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "N2")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "ordered_list?")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         3
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "null_ol?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "car_ol")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "cdr_ol")
                                                                                                (("2"
                                                                                                  (lift-if
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "get_noise_by_idx"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "null_ol?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "car_ol")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "cdr_ol")
                                                                                                              (("1"
                                                                                                                (lift-if
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "N2")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "ordered_list?")
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             (1 -2 3))
                                                            (("3"
                                                              (expand
                                                               "length"
                                                               -1
                                                               2)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-2 1 3))
                                                      (("2"
                                                        (expand
                                                         "length")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "eval_ac_noise")
                                              (("1"
                                                (use
                                                 "eval_pd_noise_rec_N_def")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand "cdr_ol")
                                                      (("1"
                                                        (inst -2 "j-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "N2"
                                                             "cdr(N1)")
                                                            (("1"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_N_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N1"
                                                                     "pd(Xa!1)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-3
                                                                  1
                                                                  5))
                                                                (("2"
                                                                  (expand
                                                                   "mergeable_wrt_ac?")
                                                                  (("2"
                                                                    (use
                                                                     "mergeable_wrt_pd?_nonrec_def")
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (use
                                                                         "mergeable_wrt_pd?_nonrec_def")
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "i = car(N1)`1")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           (-6
                                                                                            3))
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              1
                                                                                              2))
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 (1
                                                                  -2
                                                                  5))
                                                                (("3"
                                                                  (expand
                                                                   "length"
                                                                   -1
                                                                   1)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 -2 5))
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "eval_ac_noise")
                                              (("2"
                                                (use
                                                 "eval_pd_noise_rec_N_def")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (expand "null_ol?")
                                                    (("2"
                                                      (expand "cdr_ol")
                                                      (("2"
                                                        (inst -1 "j-2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(N2)"
                                                             "cdr(N1)")
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_N_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N1"
                                                                     "pd(Xa!1)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "car(N2)`1 = car(N1)`1")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -3
                                                                    1
                                                                    5
                                                                    6))
                                                                  (("1"
                                                                    (expand
                                                                     "mergeable_wrt_ac?")
                                                                    (("1"
                                                                      (use
                                                                       "mergeable_wrt_pd?_nonrec_def")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (use
                                                                           "mergeable_wrt_pd?_nonrec_def")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1
                                                                                          3))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "get_noise_by_idx"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_ol?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "car_ol")
                                                                                              (("1"
                                                                                                (lift-if
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cdr_ol")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "car(N2)`2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "get_noise_by_idx")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "null_ol?")
                                                                                                              (("1"
                                                                                                                (lift-if
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "car_ol")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "N2")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "ordered_list?")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "car_ol")
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "N2")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "ordered_list?")
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "null_ol?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "car_ol")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -3
                                                                                                         1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "get_noise_by_idx"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "null_ol?")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "car_ol")
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "N2")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ordered_list?")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "N2")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "ordered_list?")
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "get_noise_by_idx"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "null_ol?")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "car_ol")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "N2")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "ordered_list?")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (split
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "car_ol")
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "N2")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "ordered_list?")
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "cdr_ol")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 (-1
                                                                  1
                                                                  5
                                                                  6))
                                                                (("3"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1 5 6))
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil))
   shostak))
 (mergeable_suff_conditions 0
  (mergeable_suff_conditions-1 nil 3628592586
   ("" (skeep)
    (("" (expand "mergeable_wrt_ac?")
      (("" (expand "mergeable_wrt_pd?")
        (("" (expand "null_ol?")
          (("" (flatten)
            (("" (expand "idxs_ac")
              (("" (generalize "pd(Xa)" "pda")
                (("1" (induct "pda")
                  (("1" (typepred "pda!1") (("1" (propax) nil nil))
                    nil)
                   ("2" (typepred "pda!1") (("2" (propax) nil nil))
                    nil)
                   ("3" (grind) nil nil)
                   ("4" (skolem 1 ("hpda" "tpda"))
                    (("4" (flatten)
                      (("4" (expand "car_ol")
                        (("4" (expand "cdr_ol")
                          (("4" (split 1)
                            (("1" (flatten)
                              (("1"
                                (inst -3 "hpda`1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but 3)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "mergeable_wrt_pd?" 1)
                              (("2"
                                (expand "null_ol?")
                                (("2"
                                  (expand "car_ol")
                                  (("2"
                                    (expand "ordered_list?" -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "cdr_ol")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (split -4)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (grind) nil nil)
                   ("6" (hide-all-but (2 3)) (("6" (grind) nil nil))
                    nil)
                   ("7" (hide-all-but (3 4)) (("7" (grind) nil nil))
                    nil)
                   ("8" (hide-all-but (3 2)) (("8" (grind) nil nil))
                    nil)
                   ("9" (hide-all-but (3 4)) (("9" (grind) nil nil))
                    nil)
                   ("10" (hide-all-but (3 2)) (("10" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil)
                 ("4" (hide 2) (("4" (grind) nil nil)) nil)
                 ("5" (hide 3) (("5" (grind) nil nil)) nil)
                 ("6" (hide 3) (("6" (grind) nil nil)) nil)
                 ("7" (hide 3) (("7" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mergeable_wrt_ac? const-decl "bool" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (N1 skolem-const-decl "Noise" affine nil)
    (N2 skolem-const-decl "Noise" affine nil)
    (list_induction formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (mergeable_wrt_pd? def-decl "bool" affine nil))
   shostak))
 (merge_commutativity 0
  (merge_commutativity-3 nil 3629647010
   ("" (skeep)
    (("" (name "L" "length(N1)+length(N2)")
      (("" (generalize "N1" "N1")
        (("" (generalize "N2" "N2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "merge" 1 1)
                    (("" (lift-if 1)
                      (("" (split 1)
                        (("1" (flatten)
                          (("1" (expand "merge" 1)
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "merge" 1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -2 "j-1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand_ol)
                                            (("1"
                                              (case
                                               "merge(N1!1, cdr(N2!1)) = merge(cdr(N2!1), N1!1)")
                                              (("1"
                                                (inst? -3 :where -1)
                                                (("1"
                                                  (split -3)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -3 3))
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1
                                                       2)
                                                      (("2"
                                                        (lift-if -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -2 :where 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split 5)
                                                    (("1"
                                                      (hide-all-but
                                                       (-2 1 4))
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1
                                                         2
                                                         :assert?
                                                         none)
                                                        (("1"
                                                          (lift-if -1)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "get_noise_by_idx(i, N2!1) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "get_noise_by_idx"
                                                                   -1)
                                                                  (("1"
                                                                    (lift-if
                                                                     -1)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "car_ol")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (expand
                                                                               ">")
                                                                              (("1"
                                                                                (typepred
                                                                                 "N2!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "ordered_list?")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "get_noise_by_idx"
                                                                 -3
                                                                 2)
                                                                (("2"
                                                                  (lift-if
                                                                   -3)
                                                                  (("2"
                                                                    (split
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -2 3))
                                          (("2"
                                            (expand "length" -1 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "merge" 1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand_ol)
                                                (("1"
                                                  (case
                                                   "merge(cdr(N1!1), N2!1) = merge(N2!1, cdr(N1!1))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (inst?
                                                       -2
                                                       :where
                                                       1)
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 -2 5))
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skeep)
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (case
                                                                 "get_noise_by_idx(i, N1!1) = 0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "get_noise_by_idx"
                                                                       -1)
                                                                      (("1"
                                                                        (lift-if
                                                                         -1)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (typepred
                                                                               "car_ol(N1!1)`2")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "get_noise_by_idx"
                                                                                 2)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       2)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "car_ol")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "N1!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "ordered_list?"
                                                                                               :assert?
                                                                                               none)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "null_ol?")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "lt_idx")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "get_noise_by_idx"
                                                                     -3
                                                                     1)
                                                                    (("2"
                                                                      (lift-if
                                                                       -3)
                                                                      (("2"
                                                                        (split
                                                                         -3)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replaces
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               "get_noise_by_idx"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (lift-if
                                                                                 2)
                                                                                (("1"
                                                                                  (split
                                                                                   2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "car_ol")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "N1!1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "ordered_list?")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -2
                                                                                                  2
                                                                                                  9))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "null_ol?")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split
                                                                                           2)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "get_noise_by_idx"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "car_ol(N1!1)`2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 -2 4))
                                              (("2"
                                                (expand "null_ol?")
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -1
                                                   2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst -1 "j-2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand_ol)
                                            (("1"
                                              (case
                                               "merge(cdr(N1!1), cdr(N2!1)) =
                                                          merge(cdr(N2!1), cdr(N1!1))")
                                              (("1"
                                                (expand
                                                 "merge"
                                                 2
                                                 2
                                                 :assert?
                                                 none)
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (case
                                                           "car_ol(N2!1)`1=car_ol(N1!1)`1")
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "car_ol(N2!1)`1")
                                                            (("1"
                                                              (split
                                                               -3)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "get_noise_by_idx"
                                                                 -1
                                                                 2)
                                                                (("3"
                                                                  (replace
                                                                   -2
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "get_noise_by_idx"
                                                                     -1
                                                                     1)
                                                                    (("3"
                                                                      (case
                                                                       "car_ol(N1!1) = car_ol(N2!1)")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          -1
                                                                          -2))
                                                                        (("2"
                                                                          (expand_ol)
                                                                          (("2"
                                                                            (apply-extensionality)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -1 :where 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split 7)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 1 6 7))
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1
                                                         :assert?
                                                         none)
                                                        (("1"
                                                          (lift-if -1)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (lift-if
                                                                 -1)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (abstract-and-then
                                                                       3
                                                                       2
                                                                       (assert))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (case
                                                           "get_noise_by_idx(i, N1!1) = 0")
                                                          (("1"
                                                            (hide -3)
                                                            (("1"
                                                              (expand
                                                               "get_noise_by_idx"
                                                               -1)
                                                              (("1"
                                                                (lift-if
                                                                 -1)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "get_noise_by_idx"
                                                                         2)
                                                                        (("1"
                                                                          (lift-if
                                                                           2)
                                                                          (("1"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "N1!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ordered_list?"
                                                                                         :assert?
                                                                                         none)
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -1)
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "lt_idx")
                                                                                                (("2"
                                                                                                  (expand_ol)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "N1!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ordered_list?"
                                                                                           -1
                                                                                           :assert?
                                                                                           none)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             -1)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand_ol)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lt_idx")
                                                                                                      (("2"
                                                                                                        (expand_ol)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand_ol)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "get_noise_by_idx(i, N2!1) = 0")
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (expand
                                                                 "get_noise_by_idx"
                                                                 -1)
                                                                (("1"
                                                                  (lift-if
                                                                   -1)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand_ol)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "get_noise_by_idx"
                                                                 -2
                                                                 1)
                                                                (("2"
                                                                  (lift-if
                                                                   -2)
                                                                  (("2"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (expand
                                                                           "get_noise_by_idx"
                                                                           3)
                                                                          (("1"
                                                                            (lift-if
                                                                             3)
                                                                            (("1"
                                                                              (split
                                                                               3)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   2)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "N1!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ordered_list?"
                                                                                         -1
                                                                                         :assert?
                                                                                         none)
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -1)
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand_ol)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "lt_idx")
                                                                                                    (("2"
                                                                                                      (expand_ol)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       2)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "N1!1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ordered_list?"
                                                                                             -1
                                                                                             :assert?
                                                                                             none)
                                                                                            (("2"
                                                                                              (lift-if
                                                                                               -1)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand_ol)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "lt_idx")
                                                                                                        (("2"
                                                                                                          (expand_ol)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "get_noise_by_idx"
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (lift-if
                                                                               -1)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "get_noise_by_idx"
                                                                                       6)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         6)
                                                                                        (("1"
                                                                                          (split
                                                                                           6)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               2)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand_ol)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -1 5 6))
                                          (("2"
                                            (expand "null_ol?")
                                            (("2"
                                              (expand "length" -1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (merge def-decl "{N_: Noise |
         (null_ol?(N1) AND null_ol?(N2) AND null_ol?(N_)) OR
          (null_ol?(N1) AND
            NOT null_ol?(N2) AND
             NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N2)`1)
           OR
           (null_ol?(N2) AND
             NOT null_ol?(N1) AND
              NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N1)`1)
            OR
            (NOT null_ol?(N1) AND
              NOT null_ol?(N2) AND
               NOT null_ol?(N_) AND
                car_ol(N_)`1 = min(car_ol(N1)`1, car_ol(N2)`1))}"
           affine nil))
   nil)
  (merge_commutativity-2 nil 3629646061
   ("" (skeep)
    (("" (name "L" "length(N1)+length(N2)")
      (("" (generalize "N1" "N1")
        (("" (generalize "N2" "N2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "merge" 1 1)
                    (("" (lift-if 1)
                      (("" (split 1)
                        (("1" (flatten)
                          (("1" (expand "merge" 1)
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "merge" 1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -2 "j-1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand_ol)
                                            (("1"
                                              (case
                                               "merge(N1!1, cdr(N2!1)) = merge(cdr(N2!1), N1!1)")
                                              (("1"
                                                (inst? -3 :where -1)
                                                (("1"
                                                  (split -3)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -3 3))
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1
                                                       2)
                                                      (("2"
                                                        (lift-if -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -2 :where 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split 5)
                                                    (("1"
                                                      (hide-all-but
                                                       (-2 1 4))
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1
                                                         2
                                                         :assert?
                                                         none)
                                                        (("1"
                                                          (lift-if -1)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "get_noise_by_idx(i, N2!1) = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "get_noise_by_idx"
                                                                   -1)
                                                                  (("1"
                                                                    (lift-if
                                                                     -1)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "car_ol")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (expand
                                                                               ">")
                                                                              (("1"
                                                                                (typepred
                                                                                 "N2!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "ordered_list?")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "get_noise_by_idx"
                                                                 -3
                                                                 2)
                                                                (("2"
                                                                  (lift-if
                                                                   -3)
                                                                  (("2"
                                                                    (split
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -2 3))
                                          (("2"
                                            (expand "length" -1 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "merge" 1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand_ol)
                                                (("1"
                                                  (case
                                                   "merge(cdr(N1!1), N2!1) = merge(N2!1, cdr(N1!1))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (inst?
                                                       -2
                                                       :where
                                                       1)
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 -2 5))
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skeep)
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (case
                                                                 "get_noise_by_idx(i, N1!1) = 0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "get_noise_by_idx"
                                                                       -1)
                                                                      (("1"
                                                                        (lift-if
                                                                         -1)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (typepred
                                                                               "car_ol(N1!1)`2")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "get_noise_by_idx"
                                                                                 2)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       2)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "car_ol")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "N1!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "ordered_list?"
                                                                                               :assert?
                                                                                               none)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "null_ol?")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "lt_idx")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "get_noise_by_idx"
                                                                     -3
                                                                     1)
                                                                    (("2"
                                                                      (lift-if
                                                                       -3)
                                                                      (("2"
                                                                        (split
                                                                         -3)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replaces
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (expand
                                                                               "get_noise_by_idx"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (lift-if
                                                                                 2)
                                                                                (("1"
                                                                                  (split
                                                                                   2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "car_ol")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "N1!1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "ordered_list?")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  -2
                                                                                                  2
                                                                                                  9))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "null_ol?")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split
                                                                                           2)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "get_noise_by_idx"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "car_ol(N1!1)`2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 -2 4))
                                              (("2"
                                                (expand "null_ol?")
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -1
                                                   2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst -1 "j-2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand_ol)
                                            (("1"
                                              (case
                                               "merge(cdr(N1!1), cdr(N2!1)) =
                        merge(cdr(N2!1), cdr(N1!1))")
                                              (("1"
                                                (expand
                                                 "merge"
                                                 2
                                                 2
                                                 :assert?
                                                 none)
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (case
                                                           "car_ol(N2!1)`1=car_ol(N1!1)`1")
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "car_ol(N2!1)`1")
                                                            (("1"
                                                              (split
                                                               -3)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "get_noise_by_idx"
                                                                 -1
                                                                 2)
                                                                (("3"
                                                                  (replace
                                                                   -2
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "get_noise_by_idx"
                                                                     -1
                                                                     1)
                                                                    (("3"
                                                                      (case
                                                                       "car_ol(N1!1) = car_ol(N2!1)")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          -1
                                                                          -2))
                                                                        (("2"
                                                                          (expand_ol)
                                                                          (("2"
                                                                            (apply-extensionality)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? -1 :where 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split 7)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 1 6 7))
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("1"
                                                          (lift-if -1)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (lift-if
                                                                 -1)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (case
                                                           "get_noise_by_idx(i, N1!1) = 0")
                                                          (("1"
                                                            (hide -3)
                                                            (("1"
                                                              (expand
                                                               "get_noise_by_idx"
                                                               -1)
                                                              (("1"
                                                                (lift-if
                                                                 -1)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "get_noise_by_idx"
                                                                         2)
                                                                        (("1"
                                                                          (lift-if
                                                                           2)
                                                                          (("1"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "N1!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ordered_list?")
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -1)
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand_ol)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "null_ol?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lt_idx")
                                                                                                      (("2"
                                                                                                        (expand_ol)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "N1!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ordered_list?"
                                                                                           -1
                                                                                           :assert?
                                                                                           none)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             -1)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand_ol)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lt_idx")
                                                                                                      (("2"
                                                                                                        (expand_ol)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand_ol)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "get_noise_by_idx(i, N2!1) = 0")
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (expand
                                                                 "get_noise_by_idx"
                                                                 -1)
                                                                (("1"
                                                                  (lift-if
                                                                   -1)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand_ol)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "get_noise_by_idx"
                                                                 -2
                                                                 1)
                                                                (("2"
                                                                  (lift-if
                                                                   -2)
                                                                  (("2"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (expand
                                                                           "get_noise_by_idx"
                                                                           3)
                                                                          (("1"
                                                                            (lift-if
                                                                             3)
                                                                            (("1"
                                                                              (split
                                                                               3)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   2)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "N1!1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ordered_list?"
                                                                                         -1
                                                                                         :assert?
                                                                                         none)
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           -1)
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand_ol)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "lt_idx")
                                                                                                    (("2"
                                                                                                      (expand_ol)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       2)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "N1!1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ordered_list?"
                                                                                             -1
                                                                                             :assert?
                                                                                             none)
                                                                                            (("2"
                                                                                              (lift-if
                                                                                               -1)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand_ol)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "lt_idx")
                                                                                                        (("2"
                                                                                                          (expand_ol)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "get_noise_by_idx"
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (lift-if
                                                                               -1)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "get_noise_by_idx"
                                                                                       6)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         6)
                                                                                        (("1"
                                                                                          (split
                                                                                           6)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               2)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand_ol)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -1 5 6))
                                          (("2"
                                            (expand "null_ol?")
                                            (("2"
                                              (expand "length" -1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   nil)
  (merge_commutativity-1 nil 3628617821
   ("" (skeep)
    (("" (name "L" "length(N1)+length(N2)")
      (("" (generalize "N1" "N1")
        (("" (generalize "N2" "N2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "merge" 1 1)
                    (("" (lift-if 1)
                      (("" (split 1)
                        (("1" (flatten)
                          (("1" (expand "merge" 1)
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "merge" 1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -2 "j-1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -2
                                             "cdr_ol(N2!1)"
                                             "N1!1")
                                            (("1"
                                              (split -2)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but (1 -2 3))
                                                (("2"
                                                  (expand "cdr_ol")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1
                                                     2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep)
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (case
                                                       "get_noise_by_idx(i, N2!1) = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -4)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (expand
                                                               "get_noise_by_idx"
                                                               -1)
                                                              (("1"
                                                                (lift-if
                                                                 -1)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (expand
                                                                           ">")
                                                                          (("1"
                                                                            (typepred
                                                                             "N2!1")
                                                                            (("1"
                                                                              (expand
                                                                               "ordered_list?")
                                                                              (("1"
                                                                                (expand
                                                                                 "null_ol?")
                                                                                (("1"
                                                                                  (lift-if
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "cons_ol")
                                                          (("2"
                                                            (expand
                                                             "car_ol")
                                                            (("2"
                                                              (expand
                                                               "cdr_ol")
                                                              (("2"
                                                                (expand
                                                                 "null_ol?")
                                                                (("2"
                                                                  (expand
                                                                   "get_noise_by_idx"
                                                                   -3
                                                                   2)
                                                                  (("2"
                                                                    (lift-if
                                                                     -3)
                                                                    (("2"
                                                                      (split
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -2 3))
                                          (("2"
                                            (expand "length" -1 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "merge" 1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "N2!1"
                                                 "cdr_ol(N1!1)")
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (replaces -1)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -2 5))
                                                    (("2"
                                                      (expand "cdr_ol")
                                                      (("2"
                                                        (expand
                                                         "null_ol?")
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (case
                                                           "get_noise_by_idx(i, N1!1) = 0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -4)
                                                              (("1"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("1"
                                                                  (expand
                                                                   "get_noise_by_idx"
                                                                   -1)
                                                                  (("1"
                                                                    (lift-if
                                                                     -1)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (typepred
                                                                           "car_ol(N1!1)`2")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "get_noise_by_idx"
                                                                             2)
                                                                            (("1"
                                                                              (lift-if
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "car_ol")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "N1!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ordered_list?")
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "null_ol?")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "lt_idx")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "get_noise_by_idx"
                                                               -3
                                                               1)
                                                              (("2"
                                                                (lift-if
                                                                 -3)
                                                                (("2"
                                                                  (split
                                                                   -3)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (expand
                                                                         "get_noise_by_idx"
                                                                         2
                                                                         1)
                                                                        (("1"
                                                                          (lift-if
                                                                           2)
                                                                          (("1"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "car_ol")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "cdr_ol")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "N1!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "ordered_list?")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -2
                                                                                              2
                                                                                              9))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "null_ol?")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "get_noise_by_idx"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "car_ol(N1!1)`2")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 -2 4))
                                              (("2"
                                                (expand "null_ol?")
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -1
                                                   2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst -1 "j-2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -1
                                             "cdr_ol(N2!1)"
                                             "cdr_ol(N1!1)")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (expand "merge" 2 2)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "car_ol(N2!1)`1=car_ol(N1!1)`1")
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "car_ol(N2!1)`1")
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "get_noise_by_idx"
                                                           -1
                                                           2)
                                                          (("3"
                                                            (replace
                                                             -2
                                                             -1)
                                                            (("3"
                                                              (expand
                                                               "get_noise_by_idx"
                                                               -1
                                                               1)
                                                              (("3"
                                                                (case
                                                                 "car_ol(N1!1) = car_ol(N2!1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    -1
                                                                    -2))
                                                                  (("2"
                                                                    (expand
                                                                     "car_ol")
                                                                    (("2"
                                                                      (apply-extensionality)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1 -1 5 6))
                                                (("2"
                                                  (expand "cdr_ol")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep)
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (case
                                                     "get_noise_by_idx(i, N1!1) = 0")
                                                    (("1"
                                                      (hide -3)
                                                      (("1"
                                                        (expand
                                                         "get_noise_by_idx"
                                                         -1)
                                                        (("1"
                                                          (lift-if -1)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "get_noise_by_idx"
                                                                   2)
                                                                  (("1"
                                                                    (lift-if
                                                                     2)
                                                                    (("1"
                                                                      (split
                                                                       2)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replaces
                                                                               -1
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (typepred
                                                                                 "N1!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "ordered_list?")
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "null_ol?")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               2)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "N1!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ordered_list?")
                                                                                    (("2"
                                                                                      (lift-if
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "null_ol?")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "get_noise_by_idx(i, N2!1) = 0")
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (expand
                                                           "get_noise_by_idx"
                                                           -1)
                                                          (("1"
                                                            (lift-if
                                                             -1)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "get_noise_by_idx"
                                                           -2
                                                           1)
                                                          (("2"
                                                            (lift-if
                                                             -2)
                                                            (("2"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     "get_noise_by_idx"
                                                                     3)
                                                                    (("1"
                                                                      (lift-if
                                                                       3)
                                                                      (("1"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (typepred
                                                                                 "N1!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "ordered_list?")
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "null_ol?")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "N1!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ordered_list?")
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "null_ol?")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "get_noise_by_idx"
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (lift-if
                                                                         -1)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replaces
                                                                               -1
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (expand
                                                                                 "get_noise_by_idx"
                                                                                 6)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   6)
                                                                                  (("1"
                                                                                    (split
                                                                                     6)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         2)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split
                                                                                             2)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -1 5 6))
                                          (("2"
                                            (expand "null_ol?")
                                            (("2"
                                              (expand "length" -1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak))
 (map_error_TCC1 0
  (map_error_TCC1-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (BaseType type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (map_error_TCC2 0
  (map_error_TCC2-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (BaseType type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (map_error_TCC3 0
  (map_error_TCC3-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (BaseType type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (map_error_TCC4 0
  (map_error_TCC4-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (BaseType type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (map_error_TCC5 0
  (map_error_TCC5-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (BaseType type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (nol_mp_1 0
  (nol_mp_1-1 nil 3622387225
   ("" (skeep)
    (("" (expand "map_error")
      (("" (assert)
        (("" (expand "null_ol")
          (("" (expand "null_ol?")
            (("" (expand "add_ET")
              (("" (lift-if)
                (("" (split -1)
                  (("1" (flatten)
                    (("1" (inst -3 "car_ol(pds2)`2")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (expand "cons_ol")
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (expand "cons_ol")
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "null_ol?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_error def-decl "ErrorTerms" affine nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (BaseType type-eq-decl nil affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (me_ordered_1 0
  (me_ordered_1-1 nil 3622463893
   ("" (skolem 1 ("op" "_"))
    ((""
      (induct "pds2" :name
       "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]")
      (("1" (grind) nil nil)
       ("2" (skeep*)
        (("2" (hide 1)
          (("2" (expand "map_error" 2 1)
            (("2" (lift-if)
              (("2" (expand "null_ol?")
                (("2" (expand "cdr_ol")
                  (("2" (split 2)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (expand "add_ET")
                        (("2" (lift-if)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (expand "car_ol")
                                    (("1"
                                      (typepred "x::[nat,nzBaseType]")
                                      (("1"
                                        (expand "ordered_list?")
                                        (("1"
                                          (expand "lt_idx")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-1 -2 2 3))
                                    (("2"
                                      (expand "map_error" 2)
                                      (("2"
                                        (expand "null_ol?")
                                        (("2"
                                          (expand "add_ET")
                                          (("2"
                                            (expand "cdr_ol")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (expand "car_ol")
                                  (("1"
                                    (expand "cons_ol")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (typepred
                                         "x::[nat,nzBaseType]")
                                        (("1"
                                          (expand "ordered_list?")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "lt_idx")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "car_ol")
                                    (("2"
                                      (expand "cons_ol")
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (typepred
                                             "x::[nat,nzBaseType]")
                                            (("1"
                                              (expand "ordered_list?")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "lt_idx")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "map_error" 6)
                                              (("2"
                                                (expand "null_ol?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (hide-all-but 3) (("3" (grind) nil nil)) nil)) nil)
       ("4" (skeep)
        (("4" (hide-all-but 2) (("4" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil)
    (op skolem-const-decl "[[BaseType, BaseType] -> BaseType]" affine
        nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil))
   shostak))
 (me_ordered_1b 0
  (me_ordered_1b-1 nil 3622468980
   ("" (skolem 1 ("op" "_"))
    ((""
      (induct "pds1" :name
       "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]")
      (("1" (grind) nil nil)
       ("2" (skeep*)
        (("2" (hide 1)
          (("2" (expand "map_error" 2 1)
            (("2" (lift-if)
              (("2" (expand "null_ol?")
                (("2" (expand "cdr_ol")
                  (("2" (split 2)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (expand "null_ol")
                        (("2" (expand "add_ET")
                          (("2" (lift-if)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (expand "car_ol")
                                      (("1"
                                        (typepred
                                         "x::[nat,nzBaseType]")
                                        (("1"
                                          (expand "ordered_list?")
                                          (("1"
                                            (expand "lt_idx")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 -2 2 3))
                                      (("2"
                                        (expand "map_error" 2)
                                        (("2"
                                          (expand "null_ol?")
                                          (("2"
                                            (expand "add_ET")
                                            (("2"
                                              (expand "cdr_ol")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (expand "car_ol")
                                    (("1"
                                      (expand "cons_ol")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (typepred
                                           "x::[nat,nzBaseType]")
                                          (("1"
                                            (expand "ordered_list?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "lt_idx")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "car_ol")
                                      (("2"
                                        (expand "cons_ol")
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (typepred
                                               "x::[nat,nzBaseType]")
                                              (("1"
                                                (expand
                                                 "ordered_list?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "lt_idx")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "map_error" 6)
                                                (("2"
                                                  (expand "null_ol?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (pred type-eq-decl nil defined_types nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (BaseType type-eq-decl nil affine nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (< const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil))
   shostak))
 (me_ordered_2 0
  (me_ordered_2-1 nil 3622469209
   ("" (skolem 1 ("op" "pds1_" "pds2_"))
    (("" (name "L" "length(pds1_)+length(pds2_)")
      (("" (generalize "pds1_" "pds1")
        (("" (generalize "pds2_" "pds2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "map_error" 3)
                    (("" (split 3)
                      (("1" (flatten)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (expand "null_ol?")
                              (("1"
                                (expand "empty_ErrorTerms")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "add_ET")
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst -3 "j-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -3 "cdr_ol(pds2)" "pds1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(pds1)`1, car_ol(cdr_ol(pds2))`1)")
                                            (("1"
                                              (expand "map_error" 5)
                                              (("1"
                                                (expand "add_ET")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 5 3))
                                              (("2"
                                                (typepred "pds2")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 -3 5 3 4))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (expand "map_error" 5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (expand "cons_ol")
                                                (("1"
                                                  (expand "car_ol")
                                                  (("1"
                                                    (hide-all-but
                                                     (5 4 2))
                                                    (("1"
                                                      (typepred "pds2")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (expand "map_error" 6)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add_ET")
                                                  (("1"
                                                    (expand "car_ol")
                                                    (("1"
                                                      (expand
                                                       "cons_ol")
                                                      (("1"
                                                        (hide-all-but
                                                         (6 3 4 5))
                                                        (("1"
                                                          (typepred
                                                           "pds2")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "cdr_ol(pds2)"
                                                 "pds1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "map_error"
                                                     8)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (case
                                                         "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(pds1)`1, car_ol(cdr_ol(pds2))`1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 7 8 6))
                                                          (("2"
                                                            (typepred
                                                             "pds2")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (1 -2 6 7 8))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (expand "add_ET")
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst -3 "j-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -3 "pds2" "cdr_ol(pds1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "map_error" 5)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (case
                                                 "min(car_ol(pds1)`1, car_ol(pds2)`1)<=min(car_ol(cdr_ol(pds1))`1, car_ol(pds2)`1)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (1 3 4 5))
                                                  (("2"
                                                    (typepred "pds1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (expand "map_error" 5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (expand "car_ol")
                                                (("1"
                                                  (expand "cons_ol")
                                                  (("1"
                                                    (hide-all-but
                                                     (5 3 4 2))
                                                    (("1"
                                                      (typepred "pds1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (expand "map_error" 6)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add_ET")
                                                  (("1"
                                                    (expand "cons_ol")
                                                    (("1"
                                                      (expand "car_ol")
                                                      (("1"
                                                        (hide-all-but
                                                         (5 3 4 6))
                                                        (("1"
                                                          (typepred
                                                           "pds1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst -2 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "pds2"
                                                 "cdr_ol(pds1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "map_error"
                                                     8)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (case
                                                         "min(car_ol(pds1)`1, car_ol(pds2)`1)<=min(car_ol(cdr_ol(pds1))`1, car_ol(pds2)`1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 6 7 8))
                                                          (("2"
                                                            (typepred
                                                             "pds1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "add_ET")
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "map_error" 6)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "add_ET")
                                            (("1"
                                              (inst -3 "j-2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "cdr_ol(pds2)"
                                                   "cdr_ol(pds1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "min(car_ol(pds1)`1, car_ol(pds2)`1) < min(car_ol(cdr_ol(pds1))`1, car_ol(cdr_ol(pds2))`1)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 3 4 5 6))
                                                        (("2"
                                                          (typepred
                                                           "pds1"
                                                           "pds2")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (expand "map_error" 6)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add_ET")
                                                  (("1"
                                                    (expand "car_ol")
                                                    (("1"
                                                      (expand
                                                       "cons_ol")
                                                      (("1"
                                                        (hide-all-but
                                                         (6 4 5 3))
                                                        (("1"
                                                          (typepred
                                                           "pds1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (expand
                                                   "map_error"
                                                   7)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (expand
                                                         "cons_ol")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (hide-all-but
                                                             (7 4 5 6))
                                                            (("1"
                                                              (typepred
                                                               "pds1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "j-2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "cdr_ol(pds2)"
                                                     "cdr_ol(pds1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "map_error"
                                                         9)
                                                        (("1"
                                                          (expand
                                                           "add_ET")
                                                          (("1"
                                                            (case
                                                             "min(car_ol(pds1)`1, car_ol(pds2)`1) < min(car_ol(cdr_ol(pds1))`1, car_ol(cdr_ol(pds2))`1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                6
                                                                7
                                                                8
                                                                9))
                                                              (("2"
                                                                (typepred
                                                                 "pds1"
                                                                 "pds2")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "add_ET")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst -3 "j-1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -3
                                                 "pds2"
                                                 "cdr_ol(pds1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "map_error"
                                                     7)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (case
                                                         "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(cdr_ol(pds1))`1, car_ol(pds2)`1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 4 5 6 7))
                                                          (("2"
                                                            (typepred
                                                             "pds1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (expand
                                                   "map_error"
                                                   7)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (expand
                                                         "car_ol")
                                                        (("1"
                                                          (expand
                                                           "cons_ol")
                                                          (("1"
                                                            (hide-all-but
                                                             (7
                                                              3
                                                              4
                                                              5
                                                              6))
                                                            (("1"
                                                              (typepred
                                                               "pds1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (expand
                                                       "map_error"
                                                       8)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "add_ET")
                                                          (("1"
                                                            (expand
                                                             "car_ol")
                                                            (("1"
                                                              (expand
                                                               "cons_ol")
                                                              (("1"
                                                                (hide-all-but
                                                                 (8
                                                                  4
                                                                  5
                                                                  6
                                                                  7))
                                                                (("1"
                                                                  (typepred
                                                                   "pds1")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "map_error"
                                                     10)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "add_ET")
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "j-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "pds2"
                                                               "cdr_ol(pds1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(cdr_ol(pds1))`1, car_ol(pds2)`1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      7
                                                                      8
                                                                      9
                                                                      10))
                                                                    (("2"
                                                                      (typepred
                                                                       "pds1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "add_ET")
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "map_error" 8)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "add_ET")
                                                (("1"
                                                  (inst -2 "j-1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "cdr_ol(pds2)"
                                                       "pds1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(pds1)`1, car_ol(cdr_ol(pds2))`1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1
                                                              5
                                                              6
                                                              7
                                                              8))
                                                            (("2"
                                                              (typepred
                                                               "pds2")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -2 5 6 7 8))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (expand
                                                   "map_error"
                                                   8)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (expand
                                                         "car_ol")
                                                        (("1"
                                                          (expand
                                                           "cons_ol")
                                                          (("1"
                                                            (hide-all-but
                                                             (8
                                                              4
                                                              5
                                                              6
                                                              7))
                                                            (("1"
                                                              (typepred
                                                               "pds2")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (expand
                                                       "map_error"
                                                       9)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "add_ET")
                                                          (("1"
                                                            (expand
                                                             "car_ol")
                                                            (("1"
                                                              (expand
                                                               "cons_ol")
                                                              (("1"
                                                                (hide-all-but
                                                                 (9
                                                                  8
                                                                  7
                                                                  6
                                                                  5))
                                                                (("1"
                                                                  (typepred
                                                                   "pds2")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "map_error"
                                                     11)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "add_ET")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "j-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "cdr_ol(pds2)"
                                                               "pds1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(pds1)`1, car_ol(cdr_ol(pds2))`1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      8
                                                                      9
                                                                      10
                                                                      11))
                                                                    (("2"
                                                                      (typepred
                                                                       "pds2")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1
                                                              -1
                                                              8
                                                              9
                                                              10
                                                              11))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (BaseType type-eq-decl nil affine nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (car_ol const-decl "T" ordered_list nil))
   shostak))
 (me_ordered_3 0
  (me_ordered_3-1 nil 3622473500
   ("" (skolem 1 ("op" "pds1_" "pds2_"))
    (("" (name "L" "length(pds1_)+length(pds2_)")
      (("" (generalize "pds1_" "pds1")
        (("" (generalize "pds2_" "pds2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep*)
                (("" (expand "map_error" 3)
                  (("" (split 3)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "add_ET")
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "map_error" 4)
                                (("1"
                                  (expand "add_ET")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -3 "j-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -3
                                           "cdr_ol(pds2)"
                                           "pds1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "NOT null_ol?(cdr_ol(pds2))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but
                                                   (4 5 1 -4 3))
                                                  (("1"
                                                    (typepred "pds2")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 -3 3 4))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide 1)
                                    (("1"
                                      (expand "map_error" 4)
                                      (("1"
                                        (expand "add_ET")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "car_ol")
                                            (("1"
                                              (expand "cons_ol")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (expand "map_error" 5)
                                          (("1"
                                            (expand "add_ET")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "car_ol")
                                                (("1"
                                                  (expand "cons_ol")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "map_error" 7)
                                        (("2"
                                          (expand "add_ET")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -2 "j-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "cdr_ol(pds2)"
                                                   "pds1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "NOT null_ol?(cdr_ol(pds2))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (6
                                                            -3
                                                            7
                                                            8
                                                            1))
                                                          (("1"
                                                            (typepred
                                                             "pds2")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1 6 7 -2))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten) nil nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (expand "add_ET")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "map_error" 6)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "add_ET")
                                          (("1"
                                            (inst -3 "j-2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -3
                                                 "cdr_ol(pds2)"
                                                 "cdr_ol(pds1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "NOT null_ol?(cdr_ol(pds2))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (5
                                                          1
                                                          4
                                                          6
                                                          7
                                                          -4
                                                          -2))
                                                        (("1"
                                                          (typepred
                                                           "pds1"
                                                           "pds2")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 4)
                                                        (("2"
                                                          (lemma
                                                           "me_ordered_1b")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "op"
                                                             "cdr_ol(pds1)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "cdr_ol(pds2) = null")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand "map_error" 6)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "add_ET")
                                                (("1"
                                                  (expand "car_ol")
                                                  (("1"
                                                    (expand "cons_ol")
                                                    (("1"
                                                      (hide-all-but
                                                       (6 4 3))
                                                      (("1"
                                                        (typepred
                                                         "pds1")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (expand "map_error" 7)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "add_ET")
                                                    (("1"
                                                      (expand "car_ol")
                                                      (("1"
                                                        (expand
                                                         "cons_ol")
                                                        (("1"
                                                          (hide-all-but
                                                           (7 5 4))
                                                          (("1"
                                                            (typepred
                                                             "pds1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "map_error" 9)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "add_ET")
                                                  (("2"
                                                    (inst -2 "j-2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "cdr_ol(pds2)"
                                                         "cdr_ol(pds1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "NOT null_ol?(cdr_ol(pds2))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide-all-but
                                                                 (8
                                                                  -1
                                                                  -3
                                                                  9
                                                                  10
                                                                  7
                                                                  1))
                                                                (("1"
                                                                  (typepred
                                                                   "pds1"
                                                                   "pds2")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "cdr_ol(pds2) = null")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "me_ordered_1b")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "op"
                                                                       "cdr_ol(pds1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "null_ol")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -2 6 7 8))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "add_ET")
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "map_error" 7)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (inst -3 "j-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "pds2"
                                                     "cdr_ol(pds1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "pds1")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (expand "map_error" 7)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "add_ET")
                                                    (("1"
                                                      (expand "car_ol")
                                                      (("1"
                                                        (expand
                                                         "cons_ol")
                                                        (("1"
                                                          (typepred
                                                           "pds1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (expand
                                                     "map_error"
                                                     8)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "add_ET")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (expand
                                                             "cons_ol")
                                                            (("1"
                                                              (typepred
                                                               "pds1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "map_error"
                                                   10)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "add_ET")
                                                      (("2"
                                                        (inst -2 "j-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "pds2"
                                                             "cdr_ol(pds1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "add_ET")
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "map_error" 8)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (inst -2 "j-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "cdr_ol(pds2)"
                                                     "pds1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "NOT null_ol?(cdr_ol(pds2))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide-all-but
                                                             (7
                                                              3
                                                              4
                                                              8
                                                              9
                                                              6
                                                              1
                                                              -3))
                                                            (("1"
                                                              (typepred
                                                               "pds1"
                                                               "pds2")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "cdr_ol(pds2) = null")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (lemma
                                                                 "me_ordered_1b")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "op"
                                                                   "pds1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "null_ol")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (expand "map_error" 8)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "add_ET")
                                                    (("1"
                                                      (expand "car_ol")
                                                      (("1"
                                                        (expand
                                                         "cons_ol")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (expand
                                                     "map_error"
                                                     9)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "add_ET")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (expand
                                                             "cons_ol")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "map_error"
                                                   11)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "add_ET")
                                                      (("2"
                                                        (inst -1 "j-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr_ol(pds2)"
                                                             "pds1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT null_ol?(cdr_ol(pds2))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (10
                                                                      6
                                                                      7
                                                                      -2
                                                                      11
                                                                      12
                                                                      9
                                                                      1))
                                                                    (("1"
                                                                      (typepred
                                                                       "pds1"
                                                                       "pds2")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "cdr_ol(pds2) = null")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "me_ordered_1b")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "op"
                                                                           "pds1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "null_ol")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (me_ordered_1b formula-decl nil affine nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (BaseType type-eq-decl nil affine nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (me_ordered_4 0
  (me_ordered_4-1 nil 3622476284
   ("" (skolem 1 ("op" "pds1_" "pds2_"))
    (("" (name "L" "length(pds1_)+length(pds2_)")
      (("" (generalize "pds1_" "pds1")
        (("" (generalize "pds2_" "pds2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep*)
                (("" (expand "map_error" 3)
                  (("" (assert)
                    (("" (split 3)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "add_ET")
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "map_error" 4)
                                  (("1"
                                    (expand "add_ET")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -3 "j-1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -3
                                             "pds2"
                                             "cdr_ol(pds1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "NOT null_ol?(cdr_ol(pds1))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (4 5 1 -4 3))
                                                    (("1"
                                                      (typepred "pds1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "cdr_ol(pds1) =null")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "me_ordered_1")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "op"
                                                           "pds2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -3 3 4))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (expand "map_error" 4)
                                        (("1"
                                          (expand "add_ET")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "car_ol")
                                              (("1"
                                                (expand "cons_ol")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand "map_error" 5)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "car_ol")
                                                  (("1"
                                                    (expand "cons_ol")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "map_error" 7)
                                          (("2"
                                            (expand "add_ET")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -2 "j-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "pds2"
                                                     "cdr_ol(pds1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "NOT null_ol?(cdr_ol(pds1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide-all-but
                                                             (6
                                                              -3
                                                              7
                                                              8
                                                              1))
                                                            (("1"
                                                              (typepred
                                                               "pds1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "cdr_ol(pds1) =null")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (lemma
                                                                 "me_ordered_1")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "op"
                                                                   "pds2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (1 6 7 -2))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (expand "add_ET")
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "map_error" 5)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "add_ET")
                                        (("1"
                                          (inst -3 "j-2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -3
                                               "cdr_ol(pds2)"
                                               "cdr_ol(pds1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "NOT null_ol?(cdr_ol(pds1))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but
                                                       (4
                                                        -2
                                                        -4
                                                        5
                                                        6
                                                        3
                                                        1))
                                                      (("1"
                                                        (typepred
                                                         "pds1"
                                                         "pds2")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "cdr_ol(pds1) =null")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "me_ordered_1")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "op"
                                                             "cdr_ol(pds2)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (expand "map_error" 5)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "car_ol")
                                                  (("1"
                                                    (expand "cons_ol")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (expand
                                                   "map_error"
                                                   6)
                                                  (("1"
                                                    (expand "add_ET")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "cons_ol")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map_error" 7)
                                              (("2"
                                                (expand "add_ET")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -2 "j-2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "cdr_ol(pds2)"
                                                         "cdr_ol(pds1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "NOT null_ol?(cdr_ol(pds1))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide-all-but
                                                                 (8
                                                                  -3
                                                                  -1
                                                                  1
                                                                  5
                                                                  7
                                                                  8
                                                                  6))
                                                                (("1"
                                                                  (typepred
                                                                   "pds1"
                                                                   "pds2")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "cdr_ol(pds1) =null")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "me_ordered_1")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "op"
                                                                       "cdr_ol(pds2)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "add_ET")
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "map_error" 6)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "add_ET")
                                            (("1"
                                              (inst -3 "j-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "pds2"
                                                   "cdr_ol(pds1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "NOT null_ol?(cdr_ol(pds1))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (5
                                                            -2
                                                            -4
                                                            1
                                                            4
                                                            6
                                                            7))
                                                          (("1"
                                                            (typepred
                                                             "pds1"
                                                             "pds2")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "cdr_ol(pds1) =null")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "me_ordered_1")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "op"
                                                                 "pds2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (expand "map_error" 6)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add_ET")
                                                  (("1"
                                                    (expand
                                                     ("cons_ol"
                                                      "car_ol"))
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (expand
                                                   "map_error"
                                                   7)
                                                  (("1"
                                                    (expand "add_ET")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         ("cons_ol"
                                                          "car_ol"))
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "map_error" 9)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "add_ET")
                                                    (("2"
                                                      (inst -2 "j-1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "pds2"
                                                           "cdr_ol(pds1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "NOT null_ol?(cdr_ol(pds1))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (8
                                                                    -1
                                                                    -3
                                                                    1
                                                                    7
                                                                    9
                                                                    10))
                                                                  (("1"
                                                                    (typepred
                                                                     "pds1"
                                                                     "pds2")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "cdr_ol(pds1) =null")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "me_ordered_1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "op"
                                                                         "pds2")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "add_ET")
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "map_error" 7)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "add_ET")
                                            (("1"
                                              (inst -2 "j-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "cdr_ol(pds2)"
                                                   "pds1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred "pds2")
                                                      (("1"
                                                        (hide-all-but
                                                         (-3 7 -1 6 4))
                                                        (("1"
                                                          (expand
                                                           "ordered_list?")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "cdr_ol")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "lt_idx")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1 -2 6 7 5))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (expand "map_error" 7)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add_ET")
                                                  (("1"
                                                    (expand
                                                     ("cons_ol"
                                                      "car_ol"))
                                                    (("1"
                                                      (typepred "pds2")
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 7 6 4))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (expand
                                                   "map_error"
                                                   8)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (expand
                                                         ("cons_ol"
                                                          "car_ol"))
                                                        (("1"
                                                          (typepred
                                                           "pds2")
                                                          (("1"
                                                            (hide-all-but
                                                             (8
                                                              7
                                                              5
                                                              -1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "map_error" 10)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "add_ET")
                                                    (("2"
                                                      (inst -1 "j-1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "cdr_ol(pds2)"
                                                           "pds1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 -1 9 10))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (me_ordered_1 formula-decl nil affine nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (BaseType type-eq-decl nil affine nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (epn_me_null_1 0
  (epn_me_null_1-1 nil 3622479053
   ("" (skolem 1 ("N" "pds1_" "pds2_" "op"))
    (("" (name "L" "length(pds1_)+length(pds2_)")
      (("" (generalize "pds1_" "pds1")
        (("" (generalize "pds2_" "pds2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep*)
                (("" (expand "map_error" -3)
                  (("" (lift-if)
                    (("" (split -3)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (expand "empty_ErrorTerms")
                            (("1" (hide -3)
                              (("1"
                                (typepred "op")
                                (("1"
                                  (case "eval_pd_noise(pds1, N)=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (case "eval_pd_noise(pds2, N)=0")
                                      (("1" (replaces -1) nil nil)
                                       ("2"
                                        (hide-all-but (1 -5))
                                        (("2"
                                          (expand "eval_pd_noise")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (1 -6))
                                    (("2"
                                      (expand "eval_pd_noise")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "add_ET")
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma
                                       "eval_pd_noise_rec_pds_def")
                                      (("1"
                                        (inst -1 "N" "pds2")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "op")
                                              (("1"
                                                (inst
                                                 -2
                                                 "car_ol(pds2)`2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "cons_ol")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "cons_ol")
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (case "pds1=null")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma
                                                     "me_ordered_1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "op"
                                                       "pds2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-2 1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (expand "add_ET")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (typepred "op")
                                      (("1"
                                        (inst -2 "car_ol(pds1)`2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (expand "cons_ol")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (expand "cons_ol")
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "null_ol?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "add_ET")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -4 "j-2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -4
                                               "cdr_ol(pds2)"
                                               "cdr_ol(pds1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "eval_pd_noise_rec_pds_def")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "N"
                                                     "pds1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (lemma
                                                           "eval_pd_noise_rec_pds_def")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "N"
                                                             "pds2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (typepred
                                                                   "op")
                                                                  (("1"
                                                                    (inst?
                                                                     -4)
                                                                    (("1"
                                                                      (replaces
                                                                       -4)
                                                                      (("1"
                                                                        (replaces
                                                                         -7)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replaces
                                                                             -6)
                                                                            (("1"
                                                                              (inst?
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "cons_ol")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "cons_ol")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (use "me_ordered_2")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "add_ET")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (typepred "op")
                                              (("1"
                                                (inst
                                                 -2
                                                 "car_ol(pds1)`2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "cons_ol")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (expand "cons_ol")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (use
                                                       "me_ordered_3")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "add_ET")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (typepred "op")
                                              (("1"
                                                (inst
                                                 -2
                                                 "car_ol(pds2)`2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "cons_ol")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (expand "cons_ol")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (use
                                                       "me_ordered_4")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (me_ordered_1 formula-decl nil affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (me_ordered_2 formula-decl nil affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (me_ordered_3 formula-decl nil affine nil)
    (me_ordered_4 formula-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (eval_pd_noise def-decl "real" affine nil))
   shostak))
 (pds_1_1_TCC1 0
  (pds_1_1_TCC1-1 nil 3619884927 ("" (tcc))
   ((/= const-decl "boolean" notequal nil)
    (every adt-def-decl "boolean" list_adt nil))
   nil))
 (pds_1_1_TCC2 0
  (pds_1_1_TCC2-1 nil 3620572108 ("" (tcc))
   ((lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (pds_1_2_TCC1 0
  (pds_1_2_TCC1-1 nil 3620572108 ("" (tcc))
   ((lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (test_map_error_1 0
  (test_map_error_1-1 nil 3621787253 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (test_map_error_2 0
  (test_map_error_2-1 nil 3621787266 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (test_map_error_3 0
  (test_map_error_3-1 nil 3621787274 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (test_map_error_4 0
  (test_map_error_4-1 nil 3621787395 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (next_idx_const_ac 0
  (next_idx_const_ac-1 nil 3628945177 ("" (grind) nil nil)
   (({\|\|} const-decl "AffineCombination" affine nil)
    (const_ac const-decl "AffineCombination" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil))
   shostak))
 (var_ac_TCC1 0
  (var_ac_TCC1-1 nil 3619884927 ("" (tcc))
   ((/= const-decl "boolean" notequal nil)
    (every adt-def-decl "boolean" list_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (var_ac_TCC2 0
  (var_ac_TCC2-1 nil 3620572108 ("" (tcc))
   ((/= const-decl "boolean" notequal nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (eval_var_ac 0
  (eval_var_ac-1 nil 3628888567
   ("" (skeep)
    (("" (expand "eval_ac_noise")
      (("" (use "eval_pd_noise_rec_pds_def")
        (("" (expand "null_ol?")
          (("" (replaces -1)
            (("" (expand "var_ac")
              (("" (assert)
                (("" (lift-if 1)
                  (("" (lift-if 1)
                    (("" (lift-if 1)
                      (("" (assert)
                        (("" (split 1)
                          (("1" (flatten)
                            (("1" (expand "cdr_ol")
                              (("1"
                                (expand "car_ol")
                                (("1"
                                  (expand "eval_pd_noise")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (eval_pd_noise def-decl "real" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (ac_proj_pd formula-decl nil affine nil)
    (ac_proj_cv formula-decl nil affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil))
   shostak))
 (eval_pd_i_TCC1 0
  (eval_pd_i_TCC1-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (ebi_var_ac 0
  (ebi_var_ac-1 nil 3629202517
   ("" (skeep)
    (("" (expand "var_ac")
      (("" (expand "eval_by_intervals")
        (("" (assert)
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (expand "eval_pd_i")
                  (("1" (expand "null_ol?")
                    (("1" (expand "car_ol")
                      (("1" (expand "cdr_ol")
                        (("1" (expand "eval_pd_i")
                          (("1" (expand "cdr_ol")
                            (("1" (expand "null_ol?")
                              (("1"
                                (expand "Mult")
                                (("1"
                                  (expand "Ge")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "Le")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if 2)
                                          (("1"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (grind)
                                                (("1"
                                                  (apply-extensionality)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (typepred "pXi")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "eval_pd_i")
                  (("2" (expand "null_ol?")
                    (("2" (expand "Add")
                      (("2" (assert)
                        (("2" (replaces -1)
                          (("2" (hide -1)
                            (("2" (expand "[||]")
                              (("2" (apply-extensionality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (eval_pd_i def-decl "Interval" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (Ge const-decl "bool" interval "interval_arith/")
    (Le const-decl "bool" interval "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Neg const-decl "Interval" interval "interval_arith/")
    (nXm const-decl "Interval" interval "interval_arith/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (pXm const-decl "Interval" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Add_0_r formula-decl nil interval "interval_arith/")
    (ub_interval formula-decl nil interval "interval_arith/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (ub_r2i formula-decl nil interval "interval_arith/")
    (lb_r2i formula-decl nil interval "interval_arith/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (Mult const-decl "Interval" interval "interval_arith/")
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_by_intervals const-decl "Interval" affine nil))
   shostak))
 (idxs_ac_var_ac 0
  (idxs_ac_var_ac-1 nil 3628514454
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (updated_noise_on_varac1 0
  (updated_noise_on_varac1-1 nil 3628516132
   ("" (skeep)
    (("" (use "eval_upd_no_idxs_ac")
      (("" (assert)
        (("" (use "idxs_ac_var_ac") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((eval_upd_no_idxs_ac formula-decl nil affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (idxs_ac_var_ac formula-decl nil affine nil))
   shostak))
 (updated_noise_on_varac2_TCC1 0
  (updated_noise_on_varac2_TCC1-1 nil 3628272610
   ("" (subtype-tcc) nil nil)
   ((empty_noise const-decl "Noise" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_is_noise name-judgement "Noise" affine nil))
   nil))
 (updated_noise_on_varac2 0
  (updated_noise_on_varac2-1 nil 3629202385
   ("" (skeep)
    (("" (use "eval_var_ac")
      (("" (replaces -1)
        (("" (use "eval_var_ac")
          (("" (replaces -1)
            (("" (assert)
              (("" (use "gnbi_upd")
                (("" (replaces -1) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_var_ac formula-decl nil affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (extend_N const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (add_N const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (gnbi_upd formula-decl nil affine nil))
   shostak))
 (updated_noise_range_on_v1 0
  (updated_noise_range_on_v1-1 nil 3630759314
   ("" (skeep :but "n")
    (("" (induct "n")
      (("1" (flatten)
        (("1" (assert)
          (("1" (expand "upd_noise_range")
            (("1" (use "updated_noise_on_varac1")
              (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "upd_noise_range" 1)
          (("2" (use "updated_noise_on_varac1")
            (("2" (split -1)
              (("1" (replaces -1)
                (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
               ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (var_ac const-decl "AffineCombination" affine nil)
    (upd_noise_range def-decl "Noise" affine nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (updated_noise_on_varac1 formula-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (updated_noise_range_on_v2_TCC1 0
  (updated_noise_range_on_v2_TCC1-1 nil 3630427738
   ("" (subtype-tcc) nil nil)
   ((empty_noise const-decl "Noise" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_is_noise name-judgement "Noise" affine nil))
   nil))
 (updated_noise_range_on_v2 0
  (updated_noise_range_on_v2-1 nil 3630760717
   ("" (skeep :but "n")
    (("" (induct "n")
      (("1" (flatten)
        (("1" (expand "upd_noise_range" 1)
          (("1" (case "i=start")
            (("1" (replaces -1 :dir RL)
              (("1" (use "updated_noise_on_varac2")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "upd_noise_range" 1)
          (("2" (case "i = start + j + 1")
            (("1" (replaces -1 :dir RL)
              (("1" (use "updated_noise_on_varac2")
                (("1" (replaces -1)
                  (("1" (reveal -3) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (replaces -1 :dir RL)
                (("2" (use "updated_noise_on_varac1")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand_ol) nil nil)
       ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (i skolem-const-decl "nat" affine nil)
    (start skolem-const-decl "nat" affine nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (empty_noise const-decl "Noise" affine nil)
    (Noise type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (var_ac const-decl "AffineCombination" affine nil)
    (upd_noise_range def-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (updated_noise_on_varac2 formula-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (updated_noise_on_varac1 formula-decl nil affine nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (containment_var 0
  (containment_var-1 nil 3622370597
   ("" (skeep)
    (("" (expand "var_ac")
      (("" (expand "eval_ac_noise")
        (("" (use "ac_proj_cv")
          (("1" (replaces -1)
            (("1" (use "ac_proj_pd")
              (("1" (replaces -1)
                (("1" (case "(ub(Xi) - lb(Xi)) / 2 /= 0")
                  (("1" (assert)
                    (("1"
                      (inst 1
                       "(x-((lb(Xi) + ub(Xi)) / 2))/((ub(Xi) - lb(Xi)) / 2)")
                      (("1" (grind)
                        (("1"
                          (name-replace "nor1" "(lb(Xi) + ub(Xi)) / 2")
                          (("1"
                            (name-replace "nor2"
                             "(ub(Xi) - lb(Xi)) / 2")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2"
                        (case "abs((x - ((lb(Xi) + ub(Xi)) / 2)) / ((ub(Xi) - lb(Xi)) / 2)) <= 1")
                        (("1" (grind) nil nil)
                         ("2" (hide 2)
                          (("2"
                            (case "abs((x - ((lb(Xi) + ub(Xi)) / 2)) / ((ub(Xi) - lb(Xi)) / 2)) = abs((x - ((lb(Xi) + ub(Xi)) / 2))) / abs(((ub(Xi) - lb(Xi)) / 2))")
                            (("1" (replaces -1)
                              (("1"
                                (lemma "both_sides_times_pos_neg_le1")
                                (("1"
                                  (inst
                                   -1
                                   "abs(((ub(Xi) - lb(Xi)) / 2))"
                                   "abs((x - ((lb(Xi) + ub(Xi)) / 2))) / abs(((ub(Xi) - lb(Xi)) / 2))"
                                   "1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (use "div_cancel2")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (use "identity_mult")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (case
                                                 "((ub(Xi) - lb(Xi)) / 2) = ((ub(Xi) + ub(Xi) - lb(Xi) - ub(Xi)) / 2)")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "((ub(Xi) + ub(Xi) - lb(Xi) - ub(Xi)) / 2) = ub(Xi) - ((lb(Xi) + ub(Xi)) / 2)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (use "abs_div") nil nil)) nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil)
               ("4" (grind) nil nil))
              nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil)
           ("4" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (ac_proj_cv formula-decl nil affine nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (BaseType type-eq-decl nil affine nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (n skolem-const-decl "nat" affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Xi skolem-const-decl "Interval" affine nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ac_proj_pd formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (x skolem-const-decl "BaseType" affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (eval_pd_noise def-decl "real" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (empty_noise const-decl "Noise" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (add_N const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (identity_mult formula-decl nil number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_neg_le1 formula-decl nil extra_real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eval_ac_noise const-decl "real" affine nil))
   shostak))
 (containment_var_single_interval 0
  (containment_var_single_interval-1 nil 3629201620
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BaseType type-eq-decl nil affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (SingInterval? const-decl "bool" affine nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_pd_noise def-decl "real" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (containment_var_simple 0
  (containment_var_simple-1 nil 3630083755
   ("" (skeep)
    (("" (expand "containment")
      (("" (use "containment_var")
        (("" (assert)
          (("" (skeep) (("" (inst? 1 :where -1) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((containment const-decl "bool" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (containment_var formula-decl nil affine nil))
   shostak))
 (containment_cnt 0
  (containment_cnt-1 nil 3621854167
   ("" (grind)
    (("" (expand "eval_pd_noise") (("" (grind) nil nil)) nil)) nil)
   ((eval_pd_noise def-decl "real" affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (const_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil))
   shostak))
 (containment_pd_interval 0
  (containment_pd_interval-1 nil 3621856388
   ("" (skolem 1 ("N" "_"))
    ((""
      (induct "pds" :name
       "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]")
      (("1" (expand "eval_pd_noise")
        (("1" (expand "eval_pd_i") (("1" (grind) nil nil)) nil)) nil)
       ("2" (skeep*)
        (("2" (use "eval_pd_noise_rec_pds_def" ("pds" "cons_ol(x,ol)"))
          (("1" (expand "cons_ol")
            (("1" (replaces -1)
              (("1" (lift-if)
                (("1" (split 1)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "eval_pd_i" 2)
                      (("2" (expand "null_ol?")
                        (("2" (lemma "Add_inclusion")
                          (("2" (expand "car_ol")
                            (("2" (expand "cdr_ol")
                              (("2"
                                (inst
                                 -1
                                 "Mult([|x`2|], [|-1, 1|])"
                                 "eval_pd_i(ol)"
                                 "get_noise_by_idx(x`1, N) * x`2"
                                 "eval_pd_noise(ol, N)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 3)
                                    (("2"
                                      (use
                                       "Mult_inclusion"
                                       ("X"
                                        "[|x`2|]"
                                        "Y"
                                        "[|-1, 1|]"
                                        "y"
                                        "get_noise_by_idx(x`1, N)"
                                        "x"
                                        "x`2"))
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "x::[nat,nzBaseType]")
            (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (pred type-eq-decl nil defined_types nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (eval_pd_i def-decl "Interval" affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (null_ol? const-decl "bool" ordered_list nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Mult_inclusion formula-decl nil interval "interval_arith/")
    (Mult const-decl "Interval" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (car_ol const-decl "T" ordered_list nil)
    (Add const-decl "Interval" interval "interval_arith/")
    (mXm const-decl "Interval" interval "interval_arith/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nXm const-decl "Interval" interval "interval_arith/")
    (Neg const-decl "Interval" interval "interval_arith/")
    (pXm const-decl "Interval" interval "interval_arith/")
    (Le const-decl "bool" interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (containment_interval 0
  (containment_interval-1 nil 3621855220
   ("" (skeep)
    (("" (expand "containment")
      (("" (skeep)
        (("" (expand "eval_by_intervals")
          (("" (expand "eval_ac_noise")
            (("" (use "Add_inclusion")
              (("" (assert)
                (("" (hide 2)
                  (("" (prop)
                    (("1" (use "r2i_inclusion") nil nil)
                     ("2" (hide -1)
                      (("2" (use "containment_pd_interval") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((containment const-decl "bool" affine nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (eval_pd_noise def-decl "real" affine nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (eval_pd_i def-decl "Interval" affine nil)
    (containment_pd_interval formula-decl nil affine nil)
    (r2i_inclusion formula-decl nil interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (eval_ac_noise const-decl "real" affine nil))
   shostak))
 (epn_app 0
  (epn_app-1 nil 3622393060
   ("" (skolem 1 ("N" "pds1_" "pds2_"))
    (("" (name "L" "length(pds1_)+length(pds2_)")
      (("" (generalize "pds1_" "pds1")
        (("" (generalize "pds2_" "pds2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "add_pd_pd")
                    (("" (expand "map_error" 1)
                      (("" (case "null_ol?(pds1)")
                        (("1" (assert)
                          (("1" (case "null_ol?(pds2)")
                            (("1" (assert)
                              (("1"
                                (hide -3)
                                (("1"
                                  (expand "eval_pd_noise")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (name
                                 "opadd"
                                 "restrict[[numfield, numfield],
                                      [BaseType, BaseType],
                                      numfield]
                                     (+)")
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (case
                                     "opadd(0, car_ol(pds2)`2)=car_ol(pds2)`2")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "add_ET")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "eval_pd_noise_rec_pds_def")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "N"
                                                   "cons_ol((car_ol(pds2)`1, car_ol(pds2)`2), empty_ErrorTerms)")
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand
                                                       "cons_ol")
                                                      (("1"
                                                        (expand
                                                         "cdr_ol")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (case
                                                               "eval_pd_noise(empty_ErrorTerms, N)=0")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "pds1=null")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "eval_pd_noise_rec_pds_def")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "N"
                                                                             "pds2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "epn_me_null_1")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N"
                                                                                       "null_ol"
                                                                                       "cdr_ol(pds2)"
                                                                                       "opadd")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "null_ol")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "cdr_ol")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "opadd")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "opadd")
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "eval_pd_noise")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "N"
                                                       "cons_ol((car_ol(pds2)`1, car_ol(pds2)`2),
                            map_error(pds1, cdr_ol(pds2), opadd))")
                                                      (("1"
                                                        (expand
                                                         "null_ol?")
                                                        (("1"
                                                          (expand
                                                           "cons_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (expand
                                                                 "car_ol")
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N"
                                                                     "pds2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j-1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "cdr_ol(pds2)"
                                                                                 "pds1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -3)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "car_ol")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (case "pds1=null")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (use
                                                           "me_ordered_1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -1))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "opadd")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "null_ol?(pds2)")
                            (("1" (assert)
                              (("1"
                                (name
                                 "opadd"
                                 "restrict[[numfield, numfield],
                                                 [BaseType, BaseType],
                                                 numfield]
                                                (+)")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (case
                                     "opadd(car_ol(pds1)`2, 0)=car_ol(pds1)`2")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "add_ET")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "eval_pd_noise_rec_pds_def")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "N"
                                                   "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2), empty_ErrorTerms)")
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand
                                                       "cons_ol")
                                                      (("1"
                                                        (expand
                                                         "cdr_ol")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (case
                                                               "eval_pd_noise(empty_ErrorTerms, N)=0")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "pds2=null")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "eval_pd_noise_rec_pds_def")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "N"
                                                                             "pds1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "epn_me_null_1")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N"
                                                                                       "cdr_ol(pds1)"
                                                                                       "null_ol"
                                                                                       "opadd")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "null_ol")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "cdr_ol")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "opadd")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "opadd")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "eval_pd_noise")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "N"
                                                       "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2),
                                        map_error(cdr_ol(pds1), pds2, opadd))")
                                                      (("1"
                                                        (expand
                                                         "null_ol?")
                                                        (("1"
                                                          (expand
                                                           "cons_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (expand
                                                                 "car_ol")
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N"
                                                                     "pds1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j-1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "pds2"
                                                                                 "cdr_ol(pds1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -3)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "car_ol")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (case "pds2=null")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (use
                                                           "me_ordered_1b")
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (expand
                                                                 "null_ol")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -1))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "opadd")
                                      (("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (name
                                   "opadd"
                                   "restrict[[numfield, numfield],
                                      [BaseType, BaseType],
                                      numfield]
                                     (+)")
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (split 3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "add_ET")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -3 "j-2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "cdr_ol(pds2)"
                                                       "cdr_ol(pds1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces -3)
                                                          (("1"
                                                            (lemma
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "N"
                                                               "pds2")
                                                              (("1"
                                                                (replaces
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N"
                                                                     "pds1")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "opadd")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -3)
                                                      (("1"
                                                        (lemma
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "N"
                                                           "cons_ol((car_ol(pds1)`1,
                             opadd(car_ol(pds1)`2, car_ol(pds2)`2)),
                            empty_ErrorTerms)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (expand
                                                                 "cons_ol")
                                                                (("1"
                                                                  (expand
                                                                   "cdr_ol")
                                                                  (("1"
                                                                    (case
                                                                     "eval_pd_noise(empty_ErrorTerms, N) = 0")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "car_ol")
                                                                          (("1"
                                                                            (lemma
                                                                             "epn_me_null_1")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "N"
                                                                               "cdr_ol(pds1)"
                                                                               "cdr_ol(pds2)"
                                                                               "opadd")
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "N"
                                                                                     "pds2")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "N"
                                                                                           "pds1")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "cdr_ol")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "eval_pd_noise(cdr(pds1), N) + eval_pd_noise(cdr(pds2), N) = 0")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "opadd")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (1
                                                                                                      -1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "opadd")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "opadd")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "eval_pd_noise")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "opadd")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "eval_pd_noise_rec_pds_def")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "N"
                                                             "cons_ol((car_ol(pds1)`1,
                             opadd(car_ol(pds1)`2, car_ol(pds2)`2)),
                            map_error(cdr_ol(pds1), cdr_ol(pds2), opadd))")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "null_ol?")
                                                                (("1"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("1"
                                                                    (expand
                                                                     "cdr_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "j-2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "cdr_ol(pds2)"
                                                                             "cdr_ol(pds1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "cdr_ol")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -3)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "eval_pd_noise_rec_pds_def")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N"
                                                                                       "pds1")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "N"
                                                                                               "pds2")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "cdr_ol")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "opadd")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "opadd")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (use
                                                           "me_ordered_2")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but -1)
                                                      (("1"
                                                        (expand
                                                         "opadd")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (lemma
                                                             "epn_me_null_1")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "N"
                                                               "cdr_ol(pds1)"
                                                               "pds2"
                                                               "opadd")
                                                              (("1"
                                                                (expand
                                                                 "null_ol?")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "eval_pd_noise_rec_pds_def")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "N"
                                                                       "cons_ol((car_ol(pds1)`1, opadd(car_ol(pds1)`2, 0)),
                                          empty_ErrorTerms)")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "null_ol?")
                                                                          (("1"
                                                                            (expand
                                                                             "cons_ol")
                                                                            (("1"
                                                                              (expand
                                                                               "cdr_ol")
                                                                              (("1"
                                                                                (expand
                                                                                 "car_ol")
                                                                                (("1"
                                                                                  (case
                                                                                   "eval_pd_noise(empty_ErrorTerms, N) = 0")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "eval_pd_noise_rec_pds_def")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "N"
                                                                                           "pds1")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "eval_pd_noise(cdr_ol(pds1), N) + eval_pd_noise(pds2, N)=0")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "opadd")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "opadd")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "empty_ErrorTerms")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "eval_pd_noise")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "opadd")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "opadd")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "N"
                                                                 "cons_ol((car_ol(pds1)`1, opadd(car_ol(pds1)`2, 0)),
                            map_error(cdr_ol(pds1), pds2, opadd))")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("1"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "cdr_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "car_ol")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j-1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "pds2"
                                                                                 "cdr_ol(pds1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -3)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "eval_pd_noise_rec_pds_def")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "N"
                                                                                           "pds1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "cdr_ol")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "car_ol")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "opadd")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "opadd")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (use
                                                               "me_ordered_3")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "add_ET")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but -1)
                                                      (("1"
                                                        (expand
                                                         "opadd")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "eval_pd_noise_rec_pds_def")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "N"
                                                             "cons_ol((car_ol(pds2)`1, opadd(0, car_ol(pds2)`2)), empty_ErrorTerms)")
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (expand
                                                                 "cons_ol")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "cdr_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (case
                                                                         "eval_pd_noise(empty_ErrorTerms, N) = 0")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "epn_me_null_1")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "N"
                                                                                 "pds1"
                                                                                 "cdr_ol(pds2)"
                                                                                 "opadd")
                                                                                (("1"
                                                                                  (expand
                                                                                   "cdr_ol")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "eval_pd_noise_rec_pds_def")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N"
                                                                                       "pds2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cdr_ol")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "opadd")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "opadd")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "eval_pd_noise")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "opadd")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "N"
                                                                 "cons_ol((car_ol(pds2)`1, opadd(0, car_ol(pds2)`2)),
                            map_error(pds1, cdr_ol(pds2), opadd))")
                                                                (("1"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (lemma
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "N"
                                                                               "pds2")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "j-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "cdr_ol(pds2)"
                                                                                           "pds1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cdr_ol")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "opadd")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "car_ol")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "opadd")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (use
                                                               "me_ordered_4")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (opadd skolem-const-decl "[[BaseType, BaseType] -> numfield]"
     affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pds1 skolem-const-decl "ErrorTerms" affine nil)
    (pds2 skolem-const-decl "ErrorTerms" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (me_ordered_2 formula-decl nil affine nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (me_ordered_3 formula-decl nil affine nil)
    (me_ordered_4 formula-decl nil affine nil)
    (me_ordered_1b formula-decl nil affine nil)
    (opadd skolem-const-decl "[[BaseType, BaseType] -> numfield]"
     affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (me_ordered_1 formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (opadd skolem-const-decl "[[BaseType, BaseType] -> numfield]"
     affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (epn_me_null_1 formula-decl nil affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (BaseType type-eq-decl nil affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (add_pd_pd const-decl "ErrorTerms" affine nil))
   shostak))
 (containment_add 0
  (containment_add-1 nil 3622374465
   ("" (skeep)
    (("" (expand "add_ac_ac")
      (("" (expand "eval_ac_noise" 1)
        (("" (assert)
          (("" (expand "eval_ac_noise")
            (("" (replaces -1 :dir RL)
              (("" (replaces -1 :dir RL)
                (("" (assert) (("" (use "epn_app") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_ac_ac const-decl "AffineCombination" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (epn_app formula-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (eval_ac_noise const-decl "real" affine nil))
   shostak))
 (next_idx_add_ac_ac 0
  (next_idx_add_ac_ac-1 nil 3628957217
   (""
    (deftactic applyih (len num ihfnum lfnum thfnum nnfnum)
     (spread (inst ihfnum len)
      ((then (assert) (expand "last_idx" ihfnum 1)
        (inst? ihfnum :where thfnum) (expand "length" lfnum num)
        (assert) (expand "last_idx" thfnum num)
        (expand "last_ol" thfnum num) (expand "last_idx" ihfnum num)
        (hide-all-but (list ihfnum thfnum nnfnum)) (lift-if 1)
        (lift-if -1) (grind))
       (let ((nlfnum (+ lfnum 1))
             (nnnfnum
              (if (listp nnfnum)
                  (mapcar (lambda (n) (+ n 1)) nnfum)
                (+ nnfnum 1))))
         (then (hide-all-but (list 1 nnnfnum nlfnum)) (grind))))))
    (("" (skeep)
      (("" (expand "add_ac_ac")
        (("" (assert)
          (("" (expand "next_idx")
            (("" (name-replace "pds1_" "pd(Xa1)")
              (("" (name-replace "pds2_" "pd(Xa2)")
                (("" (name "L" "length(pds1_)+length(pds2_)")
                  (("" (generalize "pds1_" "pds1")
                    (("" (generalize "pds2_" "pds2")
                      (("" (generalize "L" "L")
                        (("" (induct "L" :name "NAT_induction")
                          (("" (skeep)
                            (("" (skeep)
                              ((""
                                (expand "add_pd_pd")
                                ((""
                                  (expand "map_error" 1)
                                  ((""
                                    (expand_ol)
                                    ((""
                                      (lift-if 1)
                                      ((""
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "add_ET")
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (lift-if 2)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "last_idx"
                                                               1
                                                               (1 2))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "last_ol")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (1
                                                                      3))
                                                                    (("1"
                                                                      (typepred
                                                                       "pds2")
                                                                      (("1"
                                                                        (rewrite
                                                                         "max")
                                                                        (("1"
                                                                          (use
                                                                           "olidx_car_last[nzBaseType]")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "last_idx"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "last_ol"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (applyih
                                                                         "j-1"
                                                                         2
                                                                         -3
                                                                         -4
                                                                         1
                                                                         4)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "last_idx"
                                                                   2
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (applyih
                                                                       "j-1"
                                                                       2
                                                                       -2
                                                                       -3
                                                                       2
                                                                       5)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "add_ET")
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "last_idx"
                                                               1
                                                               (1 3))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "last_ol")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (1
                                                                      3))
                                                                    (("1"
                                                                      (typepred
                                                                       "pds1")
                                                                      (("1"
                                                                        (rewrite
                                                                         "max")
                                                                        (("1"
                                                                          (use
                                                                           "olidx_car_last[nzBaseType]")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "last_idx"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "last_ol"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (applyih
                                                                         "j-1"
                                                                         1
                                                                         -3
                                                                         -4
                                                                         1
                                                                         4)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "last_idx"
                                                                   2
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (applyih
                                                                       "j-1"
                                                                       1
                                                                       -2
                                                                       -3
                                                                       2
                                                                       5)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "add_ET")
                                                    (("1"
                                                      (expand_ol)
                                                      (("1"
                                                        (lift-if 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (label
                                                               "lengths"
                                                               -4)
                                                              (("1"
                                                                (label
                                                                 "ind-hyp"
                                                                 -3)
                                                                (("1"
                                                                  (label
                                                                   "thesis"
                                                                   1)
                                                                  (("1"
                                                                    (label
                                                                     "not null"
                                                                     (2
                                                                      3))
                                                                    (("1"
                                                                      (inst
                                                                       "ind-hyp"
                                                                       "j-2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?
                                                                           "ind-hyp"
                                                                           :where
                                                                           "thesis")
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             "lengths")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "cdr(pds1)=null")
                                                                                (("1"
                                                                                  (expand
                                                                                   "last_idx"
                                                                                   "thesis"
                                                                                   2)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "last_idx"
                                                                                       "ind-hyp"
                                                                                       2)
                                                                                      (("1"
                                                                                        (case
                                                                                         "cdr(pds2)=null")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "last_idx"
                                                                                             "ind-hyp"
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "max")
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       "thesis")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         thesis)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (thesis
                                                                                                              ind-hyp))
                                                                                                            (("2"
                                                                                                              (name-replace
                                                                                                               "A"
                                                                                                               "last_idx(map_error(null, cdr(pds2),
                          
                              (+)))")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "last_idx"
                                                                                   "thesis"
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "last_idx"
                                                                                     "ind-hyp"
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "cdr(pds2)=null")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "last_idx"
                                                                                               "ind-hyp"
                                                                                               2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "max")
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       thesis)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         thesis)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (thesis
                                                                                                              ind-hyp))
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "A"
                                                                                                               "last_idx(map_error(cdr(pds1), null,
                          
                              (+)))")
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "last_idx"
                                                                                             "ind-hyp"
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "last_idx"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "last_ol"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "last_idx"
                                                                       1
                                                                       (2
                                                                        1))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "olidx_car_last[nzBaseType]")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1
                                                                                3))
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "last_idx"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "last_ol"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "last_idx"
                                                                             -3
                                                                             1)
                                                                            (("1"
                                                                              (label
                                                                               "lengths"
                                                                               -4)
                                                                              (("1"
                                                                                (label
                                                                                 "ind-hyp"
                                                                                 -3)
                                                                                (("1"
                                                                                  (label
                                                                                   "thesis"
                                                                                   1)
                                                                                  (("1"
                                                                                    (label
                                                                                     "not null"
                                                                                     (4
                                                                                      5))
                                                                                    (("1"
                                                                                      (inst
                                                                                       "ind-hyp"
                                                                                       "j-2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           "ind-hyp"
                                                                                           :where
                                                                                           "thesis")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             "lengths")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "cdr(pds1)=null")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last_idx"
                                                                                                       "ind-hyp"
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "cdr(pds2)=null")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "last_idx"
                                                                                                           "thesis"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "last_idx"
                                                                                                             "ind-hyp"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "max")
                                                                                                                    (("1"
                                                                                                                      (lift-if
                                                                                                                       "thesis")
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         thesis)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             (thesis
                                                                                                                              ind-hyp))
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "A"
                                                                                                                               "last_ol(map_error(null, cdr(pds2),

                                                  (+)))")
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "last_idx"
                                                                                                     "ind-hyp"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "cdr(pds2)=null")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "last_idx"
                                                                                                           "thesis"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "last_idx"
                                                                                                               "ind-hyp"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "max")
                                                                                                                    (("1"
                                                                                                                      (lift-if
                                                                                                                       thesis)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         thesis)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (thesis
                                                                                                                              ind-hyp))
                                                                                                                            (("1"
                                                                                                                              (name-replace
                                                                                                                               "A"
                                                                                                                               "last_ol(map_error(cdr(pds1), null,

                                                  (+)))")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "last_idx"
                                                                                                           "thesis"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "last_idx"
                                                                                                             "ind-hyp"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (label
                                                                       "lengths"
                                                                       -3)
                                                                      (("2"
                                                                        (label
                                                                         "ind-hyp"
                                                                         -2)
                                                                        (("2"
                                                                          (label
                                                                           "thesis"
                                                                           2)
                                                                          (("2"
                                                                            (label
                                                                             "not null"
                                                                             (5
                                                                              6))
                                                                            (("2"
                                                                              (inst
                                                                               "ind-hyp"
                                                                               "j-2")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst?
                                                                                   "ind-hyp"
                                                                                   :where
                                                                                   "thesis")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     "lengths")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "cdr(pds1)=null")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "last_idx"
                                                                                               "ind-hyp"
                                                                                               2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "cdr(pds2)=null")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "last_idx"
                                                                                                     "ind-hyp"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "max")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               "thesis")
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 thesis)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (thesis
                                                                                                                      ind-hyp))
                                                                                                                    (("2"
                                                                                                                      (name-replace
                                                                                                                       "A"
                                                                                                                       "last_idx(map_error(null, cdr(pds2),

                                                  (+)))")
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "last_idx"
                                                                                             "ind-hyp"
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "cdr(pds2)=null")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last_idx"
                                                                                                       "ind-hyp"
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "max")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               thesis)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 thesis)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (thesis
                                                                                                                      ind-hyp))
                                                                                                                    (("1"
                                                                                                                      (name-replace
                                                                                                                       "A"
                                                                                                                       "last_idx(map_error(cdr(pds1), null,

                                                  (+)))")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "last_idx"
                                                                                                     "ind-hyp"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "add_ET")
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "last_idx"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "empty_ErrorTerms")
                                                                      (("1"
                                                                        (expand
                                                                         "last_idx"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "last_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "last_idx"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "olidx_car_last[nzBaseType]")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "last_idx"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "cons_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "last_ol"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "null_ol?")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "j-1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "last_idx"
                                                                                         -3
                                                                                         1)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -3
                                                                                           :where
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -4
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "last_idx(cdr(pds1)) <= last_idx(pds1)")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "A"
                                                                                                   "1 +
       last_ol(map_error(cdr(pds1), pds2,(+)))`1")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -4
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "B"
                                                                                                       "last_idx(cdr(pds1))")
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "C"
                                                                                                         "last_idx(pds1)")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    7))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "last_idx"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "null_ol?")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "j-1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "last_idx"
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -2
                                                                                     :where
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -3
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "last_idx(cdr(pds1)) <= last_idx(pds1)")
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "A"
                                                                                             "1 +
                           last_ol(map_error(cdr(pds1), pds2,(+)))`1")
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -3
                                                                                                2))
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "B"
                                                                                                 "last_idx(cdr(pds1))")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "C"
                                                                                                   "last_idx(pds1)")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              8))
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "add_ET")
                                                        (("2"
                                                          (lift-if 2)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?
                                                                     -2
                                                                     :where
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -3
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "last_idx(cdr(pds2)) <= last_idx(pds2)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "A"
                                                                             "1 +
                           last_idx(map_error(pds1, cdr(pds2),(+)))")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -3
                                                                                1))
                                                                              (("1"
                                                                                (name-replace
                                                                                 "B"
                                                                                 "last_idx(cdr(pds2))")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "C"
                                                                                   "last_idx(pds2)")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              5))
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "last_idx"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "last_ol"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "empty_ErrorTerms")
                                                                            (("1"
                                                                              (use
                                                                               "olidx_car_last[nzBaseType]"
                                                                               ("ol"
                                                                                "pds2"))
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1
                                                                                  5
                                                                                  6))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "cons_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "last_idx"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "last_ol"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "null_ol?")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "j-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "last_idx"
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -2
                                                                                         :where
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -3
                                                                                           2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "last_idx(cdr(pds2)) <= last_idx(pds2)")
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "A"
                                                                                                 "1 +
                           last_ol(map_error(pds1, cdr(pds2),(+)))`1")
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -3
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "B"
                                                                                                     "last_idx(cdr(pds2))")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "C"
                                                                                                       "last_idx(pds2)")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (1
                                                                                                  7))
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -2
                                                                                      7))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "j-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -1
                                                                             :where
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -2
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "last_idx(cdr(pds2)) <= last_idx(pds2)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "A"
                                                                                     "1 +
                           last_idx(map_error(pds1, cdr(pds2),(+)))")
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -2
                                                                                        2))
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "B"
                                                                                         "last_idx(cdr(pds2))")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "C"
                                                                                           "last_idx(pds2)")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      8))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_proj_pd formula-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (restrict const-decl "R" restrict nil)
    (last_ol def-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car_ol const-decl "T" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (add_pd_pd const-decl "ErrorTerms" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (next_idx const-decl "nat" affine nil)
    (add_ac_ac const-decl "AffineCombination" affine nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (idxs_ac_add_ac_ac 0
  (idxs_ac_add_ac_ac-1 nil 3628936675
   ("" (skeep)
    (("" (expand "add_ac_ac")
      (("" (expand "idxs_ac")
        (("" (assert)
          (("" (generalize "pd(Xa1)" "pds1")
            (("" (generalize "pd(Xa2)" "pds2")
              (("" (skolem 1 ("pds2_" "pds1_"))
                (("" (name "L" "length(pds1_) + length(pds2_)")
                  (("" (generalize "pds1_" "pds1")
                    (("" (generalize "pds2_" "pds2")
                      (("" (generalize "L" "L")
                        (("" (induct "L" :name "NAT_induction")
                          (("" (skeep)
                            (("" (skeep)
                              ((""
                                (expand "add_pd_pd")
                                ((""
                                  (expand "map_error" -3)
                                  ((""
                                    (expand*
                                     "null_ol?"
                                     "car_ol"
                                     "cdr_ol"
                                     "cons_ol")
                                    ((""
                                      (lift-if -3)
                                      ((""
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "add_ET" -1)
                                                (("2"
                                                  (expand*
                                                   "null_ol?"
                                                   "car_ol"
                                                   "cdr_ol"
                                                   "cons_ol")
                                                  (("2"
                                                    (lift-if -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "j-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?
                                                               -4
                                                               :where
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -5
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-4
                                                                      3
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "idxs_pd"
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "cdr_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "member"
                                                                           -2)
                                                                          (("1"
                                                                            (split
                                                                             -2)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -4
                                                                               "j-1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst?
                                                                                   -4
                                                                                   :where
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -5
                                                                                     2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-4
                                                                                          3
                                                                                          5))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "j-1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?
                                                                       -3
                                                                       :where
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -4
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-3
                                                                              4
                                                                              6))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "add_ET" -2)
                                                (("1"
                                                  (lift-if -2)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand*
                                                             "null_ol?"
                                                             "car_ol"
                                                             "cdr_ol"
                                                             "cons_ol")
                                                            (("1"
                                                              (expand
                                                               "idxs_pd"
                                                               -2)
                                                              (("1"
                                                                (expand*
                                                                 "null_ol?"
                                                                 "car_ol"
                                                                 "cdr_ol"
                                                                 "cons_ol")
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   -2)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand*
                                                                 "null_ol?"
                                                                 "car_ol"
                                                                 "cdr_ol"
                                                                 "cons_ol")
                                                                (("1"
                                                                  (expand
                                                                   "idxs_pd"
                                                                   -2)
                                                                  (("1"
                                                                    (lift-if
                                                                     -2)
                                                                    (("1"
                                                                      (split
                                                                       -2)
                                                                      (("1"
                                                                        (expand*
                                                                         "null_ol?"
                                                                         "car_ol"
                                                                         "cdr_ol"
                                                                         "cons_ol")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand*
                                                                           "null_ol?"
                                                                           "car_ol"
                                                                           "cdr_ol"
                                                                           "cons_ol")
                                                                          (("2"
                                                                            (expand
                                                                             "member"
                                                                             -1)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -4
                                                                                 "j-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -4
                                                                                     :where
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -5
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (4
                                                                                            5
                                                                                            -4))
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?
                                                                     -3
                                                                     :where
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -4
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (4
                                                                            5
                                                                            -3))
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "add_ET"
                                                     -2)
                                                    (("1"
                                                      (lift-if -2)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "j-2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?
                                                                 -4
                                                                 :where
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -5)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand*
                                                                 "null_ol?"
                                                                 "car_ol"
                                                                 "cdr_ol"
                                                                 "cons_ol")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       -2)
                                                                      (("1"
                                                                        (lift-if
                                                                         -2)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "idxs_pd"
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "null_ol?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "j-2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -4
                                                                                           :where
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "j-2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst?
                                                                         -3
                                                                         :where
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -4)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "add_ET"
                                                         -2)
                                                        (("1"
                                                          (lift-if -2)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?
                                                                     -4
                                                                     :where
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -5
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "idxs_pd"
                                                                         -2)
                                                                        (("1"
                                                                          (expand*
                                                                           "null_ol?"
                                                                           "cons_ol"
                                                                           "car_ol"
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "member"
                                                                             -2)
                                                                            (("1"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -4
                                                                                 "j-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -4
                                                                                     :where
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -5
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "j-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -3
                                                                             :where
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -4
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "add_ET"
                                                         -1)
                                                        (("2"
                                                          (lift-if -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?
                                                                     -3
                                                                     :where
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -4
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "idxs_pd"
                                                                         -2)
                                                                        (("1"
                                                                          (lift-if
                                                                           -2)
                                                                          (("1"
                                                                            (expand*
                                                                             "null_ol?"
                                                                             "cons_ol"
                                                                             "car_ol"
                                                                             "cdr_ol")
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               -2)
                                                                              (("1"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "j-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -3
                                                                                       :where
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         -4
                                                                                         2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-3
                                                                                              5
                                                                                              8))
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "j-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -2
                                                                             :where
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -3
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    6
                                                                                    9))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_ac_ac const-decl "AffineCombination" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ac_proj_pd formula-decl nil affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict const-decl "R" restrict nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (add_pd_pd const-decl "ErrorTerms" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (idxs_ac const-decl "list[nat]" affine nil))
   nil))
 (epn_spp 0
  (epn_spp-1 nil 3622483873
   ("" (skolem 1 ("N" "pds1_" "pds2_"))
    (("" (name "L" "length(pds1_)+length(pds2_)")
      (("" (generalize "pds1_" "pds1")
        (("" (generalize "pds2_" "pds2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (expand "sub_pd_pd")
                    (("" (expand "map_error" 1)
                      (("" (case "null_ol?(pds1)")
                        (("1" (assert)
                          (("1" (case "null_ol?(pds2)")
                            (("1" (assert)
                              (("1"
                                (hide -3)
                                (("1"
                                  (expand "eval_pd_noise")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (name
                                 "opsub"
                                 "restrict[[numfield, numfield],
                                                 [BaseType, BaseType],
                                                 numfield]
                                                (-)")
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (expand "add_ET")
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide-all-but -1)
                                            (("1"
                                              (expand "opsub")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "eval_pd_noise_rec_pds_def")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "N"
                                                   "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)), empty_ErrorTerms)")
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand
                                                       "cons_ol")
                                                      (("1"
                                                        (expand
                                                         "cdr_ol")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (case
                                                               "eval_pd_noise(empty_ErrorTerms, N)=0")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "pds1=null")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "eval_pd_noise_rec_pds_def")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "N"
                                                                             "pds2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "epn_me_null_1")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N"
                                                                                       "null_ol"
                                                                                       "cdr_ol(pds2)"
                                                                                       "opsub")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "null_ol")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "cdr_ol")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "opsub")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "opsub")
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "eval_pd_noise")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "opsub")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "N"
                                                       "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)),
                                        map_error(pds1, cdr_ol(pds2), opsub))")
                                                      (("1"
                                                        (expand
                                                         "null_ol?")
                                                        (("1"
                                                          (expand
                                                           "cons_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (expand
                                                                 "car_ol")
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N"
                                                                     "pds2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j-1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "cdr_ol(pds2)"
                                                                                 "pds1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -3)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "car_ol")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "opsub")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "opsub")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (case "pds1=null")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (use
                                                           "me_ordered_1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -1))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "null_ol?(pds2)")
                            (("1" (assert)
                              (("1"
                                (name
                                 "opsub"
                                 "restrict[[numfield, numfield],
                                                            [BaseType, BaseType],
                                                            numfield]
                                                           (-)")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (case
                                     "opsub(car_ol(pds1)`2, 0)=car_ol(pds1)`2")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "add_ET")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "eval_pd_noise_rec_pds_def")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "N"
                                                   "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2), empty_ErrorTerms)")
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand
                                                       "cons_ol")
                                                      (("1"
                                                        (expand
                                                         "cdr_ol")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (case
                                                               "eval_pd_noise(empty_ErrorTerms, N)=0")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "pds2=null")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "eval_pd_noise_rec_pds_def")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "N"
                                                                             "pds1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "epn_me_null_1")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N"
                                                                                       "cdr_ol(pds1)"
                                                                                       "null_ol"
                                                                                       "opsub")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "null_ol")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "cdr_ol")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "opsub")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "opsub")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "eval_pd_noise")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "N"
                                                       "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2),
                                                    map_error(cdr_ol(pds1), pds2, opsub))")
                                                      (("1"
                                                        (expand
                                                         "null_ol?")
                                                        (("1"
                                                          (expand
                                                           "cons_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (expand
                                                                 "car_ol")
                                                                (("1"
                                                                  (lemma
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N"
                                                                     "pds1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j-1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "pds2"
                                                                                 "cdr_ol(pds1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -3)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "car_ol")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (case "pds2=null")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (use
                                                           "me_ordered_1b")
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (expand
                                                                 "null_ol")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -1))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "opsub")
                                      (("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (name
                                   "opsub"
                                   "restrict[[numfield, numfield],
                                                 [BaseType, BaseType],
                                                 numfield]
                                                (-)")
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (split 3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "add_ET")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -3 "j-2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "cdr_ol(pds2)"
                                                       "cdr_ol(pds1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces -3)
                                                          (("1"
                                                            (lemma
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "N"
                                                               "pds2")
                                                              (("1"
                                                                (replaces
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "N"
                                                                     "pds1")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "opsub")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -3)
                                                      (("1"
                                                        (lemma
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "N"
                                                           "cons_ol((car_ol(pds1)`1,
                                         opsub(car_ol(pds1)`2, car_ol(pds2)`2)),
                                        empty_ErrorTerms)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (expand
                                                                 "cons_ol")
                                                                (("1"
                                                                  (expand
                                                                   "cdr_ol")
                                                                  (("1"
                                                                    (case
                                                                     "eval_pd_noise(empty_ErrorTerms, N) = 0")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "car_ol")
                                                                          (("1"
                                                                            (lemma
                                                                             "epn_me_null_1")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "N"
                                                                               "cdr_ol(pds1)"
                                                                               "cdr_ol(pds2)"
                                                                               "opsub")
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "N"
                                                                                     "pds2")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "N"
                                                                                           "pds1")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "cdr_ol")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "eval_pd_noise(cdr(pds1), N) - eval_pd_noise(cdr(pds2), N) = 0")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "eval_pd_noise(cdr(pds1), N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2
        - eval_pd_noise(cdr(pds2), N)
        - get_noise_by_idx(car_ol(pds2)`1, N) * car_ol(pds2)`2 = 
eval_pd_noise(cdr(pds1), N) - eval_pd_noise(cdr(pds2), N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2
        
        - get_noise_by_idx(car_ol(pds2)`1, N) * car_ol(pds2)`2")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "opsub")
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (1
                                                                                                      -1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "opsub")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "opsub")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "eval_pd_noise")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "opsub")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "eval_pd_noise_rec_pds_def")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "N"
                                                             "cons_ol((car_ol(pds1)`1,
                                           opsub(car_ol(pds1)`2, car_ol(pds2)`2)),
                                          map_error(cdr_ol(pds1), cdr_ol(pds2), opsub))")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "null_ol?")
                                                                (("1"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("1"
                                                                    (expand
                                                                     "cdr_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "j-2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "cdr_ol(pds2)"
                                                                             "cdr_ol(pds1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "cdr_ol")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -3)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "eval_pd_noise_rec_pds_def")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N"
                                                                                       "pds1")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "N"
                                                                                               "pds2")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "cdr_ol")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "opsub")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "opsub")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (use
                                                           "me_ordered_2")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but -1)
                                                      (("1"
                                                        (expand
                                                         "opsub")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (lemma
                                                             "epn_me_null_1")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "N"
                                                               "cdr_ol(pds1)"
                                                               "pds2"
                                                               "opsub")
                                                              (("1"
                                                                (expand
                                                                 "null_ol?")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "eval_pd_noise_rec_pds_def")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "N"
                                                                       "cons_ol((car_ol(pds1)`1, opsub(car_ol(pds1)`2, 0)),
                                                          empty_ErrorTerms)")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "null_ol?")
                                                                          (("1"
                                                                            (expand
                                                                             "cons_ol")
                                                                            (("1"
                                                                              (expand
                                                                               "cdr_ol")
                                                                              (("1"
                                                                                (expand
                                                                                 "car_ol")
                                                                                (("1"
                                                                                  (case
                                                                                   "eval_pd_noise(empty_ErrorTerms, N) = 0")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "eval_pd_noise_rec_pds_def")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "N"
                                                                                           "pds1")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "eval_pd_noise(cdr_ol(pds1), N) - eval_pd_noise(pds2, N)=0")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "eval_pd_noise(cdr_ol(pds1), N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2
        - eval_pd_noise(pds2, N) =

eval_pd_noise(cdr_ol(pds1), N) - eval_pd_noise(pds2, N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "opsub")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "opsub")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "empty_ErrorTerms")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "eval_pd_noise")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "opsub")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "opsub")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "N"
                                                                 "cons_ol((car_ol(pds1)`1, opsub(car_ol(pds1)`2, 0)),
                                            map_error(cdr_ol(pds1), pds2, opsub))")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("1"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "cdr_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "car_ol")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j-1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "pds2"
                                                                                 "cdr_ol(pds1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -3)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "eval_pd_noise_rec_pds_def")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "N"
                                                                                           "pds1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "cdr_ol")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "car_ol")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "opsub")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "opsub")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (use
                                                               "me_ordered_3")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "add_ET")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but -1)
                                                      (("1"
                                                        (expand
                                                         "opsub")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "eval_pd_noise_rec_pds_def")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "N"
                                                             "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)), empty_ErrorTerms)")
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (expand
                                                                 "cons_ol")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "cdr_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (case
                                                                         "eval_pd_noise(empty_ErrorTerms, N) = 0")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "epn_me_null_1")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "N"
                                                                                 "pds1"
                                                                                 "cdr_ol(pds2)"
                                                                                 "opsub")
                                                                                (("1"
                                                                                  (expand
                                                                                   "cdr_ol")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "eval_pd_noise_rec_pds_def")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N"
                                                                                       "pds2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cdr_ol")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "opsub")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "opsub")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "eval_pd_noise")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "opsub")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "N"
                                                                 "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)),
                                            map_error(pds1, cdr_ol(pds2), opsub))")
                                                                (("1"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (lemma
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "N"
                                                                               "pds2")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "j-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "cdr_ol(pds2)"
                                                                                           "pds1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cdr_ol")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "opsub")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "car_ol")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "opsub")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (use
                                                               "me_ordered_4")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (opsub skolem-const-decl "[[BaseType, BaseType] -> numfield]"
     affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pds1 skolem-const-decl "ErrorTerms" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (me_ordered_2 formula-decl nil affine nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (me_ordered_3 formula-decl nil affine nil)
    (me_ordered_4 formula-decl nil affine nil)
    (me_ordered_1b formula-decl nil affine nil)
    (opsub skolem-const-decl "[[BaseType, BaseType] -> numfield]"
     affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (me_ordered_1 formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (j skolem-const-decl "nat" affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pds2 skolem-const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (epn_me_null_1 formula-decl nil affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (opsub skolem-const-decl "[[BaseType, BaseType] -> numfield]"
     affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (restrict const-decl "R" restrict nil)
    (BaseType type-eq-decl nil affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (sub_pd_pd const-decl "ErrorTerms" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (containment_sub 0
  (containment_sub-1 nil 3622486764
   ("" (skeep)
    (("" (expand "sub_ac_ac")
      (("" (expand "eval_ac_noise" 1)
        (("" (assert)
          (("" (expand "eval_ac_noise")
            (("" (replaces -1 :dir RL)
              (("" (replaces -1 :dir RL)
                (("" (assert) (("" (use "epn_spp") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_ac_ac const-decl "AffineCombination" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (epn_spp formula-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (eval_ac_noise const-decl "real" affine nil))
   shostak))
 (next_idx_sub_ac_ac 0
  (next_idx_sub_ac_ac-1 nil 3629025578
   (""
    (deftactic applyih (len num ihfnum lfnum thfnum nnfnum)
     (spread (inst ihfnum len)
      ((then (assert) (expand "last_idx" ihfnum 1)
        (inst? ihfnum :where thfnum) (expand "length" lfnum num)
        (assert) (expand "last_idx" thfnum num)
        (expand "last_ol" thfnum num) (expand "last_idx" ihfnum num)
        (hide-all-but (list ihfnum thfnum nnfnum)) (lift-if 1)
        (lift-if -1) (grind))
       (let ((nlfnum (+ lfnum 1))
             (nnnfnum
              (if (listp nnfnum)
                  (mapcar (lambda (n) (+ n 1)) nnfum)
                (+ nnfnum 1))))
         (then (hide-all-but (list 1 nnnfnum nlfnum)) (grind))))))
    (("" (skeep)
      (("" (expand "sub_ac_ac")
        (("" (assert)
          (("" (expand "next_idx")
            (("" (name-replace "pds1_" "pd(Xa1)")
              (("" (name-replace "pds2_" "pd(Xa2)")
                (("" (name "L" "length(pds1_)+length(pds2_)")
                  (("" (generalize "pds1_" "pds1")
                    (("" (generalize "pds2_" "pds2")
                      (("" (generalize "L" "L")
                        (("" (induct "L" :name "NAT_induction")
                          (("" (skeep)
                            (("" (skeep)
                              ((""
                                (expand "sub_pd_pd")
                                ((""
                                  (expand "map_error" 1)
                                  ((""
                                    (expand_ol)
                                    ((""
                                      (lift-if 1)
                                      ((""
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "add_ET")
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (lift-if 2)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "last_idx"
                                                               1
                                                               (1 2))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "last_ol")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (1
                                                                      3))
                                                                    (("1"
                                                                      (typepred
                                                                       "pds2")
                                                                      (("1"
                                                                        (rewrite
                                                                         "max")
                                                                        (("1"
                                                                          (use
                                                                           "olidx_car_last[nzBaseType]")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "last_idx"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "last_ol"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (applyih
                                                                         "j-1"
                                                                         2
                                                                         -3
                                                                         -4
                                                                         1
                                                                         4)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "last_idx"
                                                                   2
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (applyih
                                                                       "j-1"
                                                                       2
                                                                       -2
                                                                       -3
                                                                       2
                                                                       5)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "add_ET")
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "last_idx"
                                                               1
                                                               (1 3))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "last_ol")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (1
                                                                      3))
                                                                    (("1"
                                                                      (typepred
                                                                       "pds1")
                                                                      (("1"
                                                                        (rewrite
                                                                         "max")
                                                                        (("1"
                                                                          (use
                                                                           "olidx_car_last[nzBaseType]")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "last_idx"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "last_ol"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (applyih
                                                                         "j-1"
                                                                         1
                                                                         -3
                                                                         -4
                                                                         1
                                                                         4)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "last_idx"
                                                                   2
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (applyih
                                                                       "j-1"
                                                                       1
                                                                       -2
                                                                       -3
                                                                       2
                                                                       5)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "add_ET")
                                                    (("1"
                                                      (expand_ol)
                                                      (("1"
                                                        (lift-if 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (label
                                                               "lengths"
                                                               -4)
                                                              (("1"
                                                                (label
                                                                 "ind-hyp"
                                                                 -3)
                                                                (("1"
                                                                  (label
                                                                   "thesis"
                                                                   1)
                                                                  (("1"
                                                                    (label
                                                                     "not null"
                                                                     (2
                                                                      3))
                                                                    (("1"
                                                                      (inst
                                                                       "ind-hyp"
                                                                       "j-2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?
                                                                           "ind-hyp"
                                                                           :where
                                                                           "thesis")
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             "lengths")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "cdr(pds1)=null")
                                                                                (("1"
                                                                                  (expand
                                                                                   "last_idx"
                                                                                   "thesis"
                                                                                   2)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "last_idx"
                                                                                       "ind-hyp"
                                                                                       2)
                                                                                      (("1"
                                                                                        (case
                                                                                         "cdr(pds2)=null")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "last_idx"
                                                                                             "ind-hyp"
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "max")
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       "thesis")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         thesis)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (thesis
                                                                                                              ind-hyp))
                                                                                                            (("2"
                                                                                                              (name-replace
                                                                                                               "A"
                                                                                                               "last_idx(map_error(null, cdr(pds2),

                                                  (-)))")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "last_idx"
                                                                                   "thesis"
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "last_idx"
                                                                                     "ind-hyp"
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "cdr(pds2)=null")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "last_idx"
                                                                                               "ind-hyp"
                                                                                               2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "max")
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       thesis)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         thesis)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (thesis
                                                                                                              ind-hyp))
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "A"
                                                                                                               "last_idx(map_error(cdr(pds1), null,

                                                  (-)))")
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "last_idx"
                                                                                             "ind-hyp"
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "last_idx"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "last_ol"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "last_idx"
                                                                       1
                                                                       (2
                                                                        1))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "olidx_car_last[nzBaseType]")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1
                                                                                3))
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "last_idx"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "last_ol"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "last_idx"
                                                                             -3
                                                                             1)
                                                                            (("1"
                                                                              (label
                                                                               "lengths"
                                                                               -4)
                                                                              (("1"
                                                                                (label
                                                                                 "ind-hyp"
                                                                                 -3)
                                                                                (("1"
                                                                                  (label
                                                                                   "thesis"
                                                                                   1)
                                                                                  (("1"
                                                                                    (label
                                                                                     "not null"
                                                                                     (4
                                                                                      5))
                                                                                    (("1"
                                                                                      (inst
                                                                                       "ind-hyp"
                                                                                       "j-2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           "ind-hyp"
                                                                                           :where
                                                                                           "thesis")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             "lengths")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "cdr(pds1)=null")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last_idx"
                                                                                                       "ind-hyp"
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "cdr(pds2)=null")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "last_idx"
                                                                                                           "thesis"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "last_idx"
                                                                                                             "ind-hyp"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "max")
                                                                                                                    (("1"
                                                                                                                      (lift-if
                                                                                                                       "thesis")
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         thesis)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             (thesis
                                                                                                                              ind-hyp))
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "A"
                                                                                                                               "last_ol(map_error(null, cdr(pds2),
                                                                          (-)))")
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "last_idx"
                                                                                                     "ind-hyp"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "cdr(pds2)=null")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "last_idx"
                                                                                                           "thesis"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "last_idx"
                                                                                                               "ind-hyp"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "max")
                                                                                                                    (("1"
                                                                                                                      (lift-if
                                                                                                                       thesis)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         thesis)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (thesis
                                                                                                                              ind-hyp))
                                                                                                                            (("1"
                                                                                                                              (name-replace
                                                                                                                               "A"
                                                                                                                               "last_ol(map_error(cdr(pds1), null,
                                                                          (-)))")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "last_idx"
                                                                                                           "thesis"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "last_idx"
                                                                                                             "ind-hyp"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (label
                                                                       "lengths"
                                                                       -3)
                                                                      (("2"
                                                                        (label
                                                                         "ind-hyp"
                                                                         -2)
                                                                        (("2"
                                                                          (label
                                                                           "thesis"
                                                                           2)
                                                                          (("2"
                                                                            (label
                                                                             "not null"
                                                                             (5
                                                                              6))
                                                                            (("2"
                                                                              (inst
                                                                               "ind-hyp"
                                                                               "j-2")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst?
                                                                                   "ind-hyp"
                                                                                   :where
                                                                                   "thesis")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     "lengths")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "cdr(pds1)=null")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "last_idx"
                                                                                               "ind-hyp"
                                                                                               2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "cdr(pds2)=null")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "last_idx"
                                                                                                     "ind-hyp"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "max")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               "thesis")
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 thesis)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (thesis
                                                                                                                      ind-hyp))
                                                                                                                    (("2"
                                                                                                                      (name-replace
                                                                                                                       "A"
                                                                                                                       "last_idx(map_error(null, cdr(pds2),
                                                                          (-)))")
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "last_idx"
                                                                                           "thesis"
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "last_idx"
                                                                                             "ind-hyp"
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "cdr(pds2)=null")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last_idx"
                                                                                                       "ind-hyp"
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "max")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               thesis)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 thesis)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (thesis
                                                                                                                      ind-hyp))
                                                                                                                    (("1"
                                                                                                                      (name-replace
                                                                                                                       "A"
                                                                                                                       "last_idx(map_error(cdr(pds1), null,
                                                                          (-)))")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "last_idx"
                                                                                                   "thesis"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "last_idx"
                                                                                                     "ind-hyp"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "add_ET")
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "last_idx"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "empty_ErrorTerms")
                                                                      (("1"
                                                                        (expand
                                                                         "last_idx"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "last_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "last_idx"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "olidx_car_last[nzBaseType]")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "last_idx"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "cons_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "last_ol"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "null_ol?")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "j-1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "last_idx"
                                                                                         -3
                                                                                         1)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -3
                                                                                           :where
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -4
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "last_idx(cdr(pds1)) <= last_idx(pds1)")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "A"
                                                                                                   "1 +
                           last_ol(map_error(cdr(pds1), pds2,(-)))`1")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -4
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "B"
                                                                                                       "last_idx(cdr(pds1))")
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "C"
                                                                                                         "last_idx(pds1)")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    7))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "last_idx"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "null_ol?")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "j-1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "last_idx"
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -2
                                                                                     :where
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -3
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "last_idx(cdr(pds1)) <= last_idx(pds1)")
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "A"
                                                                                             "1 +
                                               last_ol(map_error(cdr(pds1), pds2,(-)))`1")
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -3
                                                                                                2))
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "B"
                                                                                                 "last_idx(cdr(pds1))")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "C"
                                                                                                   "last_idx(pds1)")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              8))
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "add_ET")
                                                        (("2"
                                                          (lift-if 2)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?
                                                                     -2
                                                                     :where
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -3
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "last_idx(cdr(pds2)) <= last_idx(pds2)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "A"
                                                                             "1 +
                                           last_idx(map_error(pds1, cdr(pds2),(-)))")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -3
                                                                                1))
                                                                              (("1"
                                                                                (name-replace
                                                                                 "B"
                                                                                 "last_idx(cdr(pds2))")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "C"
                                                                                   "last_idx(pds2)")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              5))
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "last_idx"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "last_ol"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "empty_ErrorTerms")
                                                                            (("1"
                                                                              (use
                                                                               "olidx_car_last[nzBaseType]"
                                                                               ("ol"
                                                                                "pds2"))
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1
                                                                                  5
                                                                                  6))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "cons_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "last_idx"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "last_ol"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "null_ol?")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "j-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "last_idx"
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -2
                                                                                         :where
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -3
                                                                                           2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "last_idx(cdr(pds2)) <= last_idx(pds2)")
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "A"
                                                                                                 "1 +
                                               last_ol(map_error(pds1, cdr(pds2),(-)))`1")
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -3
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "B"
                                                                                                     "last_idx(cdr(pds2))")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "C"
                                                                                                       "last_idx(pds2)")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (1
                                                                                                  7))
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -2
                                                                                      7))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "j-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -1
                                                                             :where
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -2
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "last_idx(cdr(pds2)) <= last_idx(pds2)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "A"
                                                                                     "1 +
                                               last_idx(map_error(pds1, cdr(pds2),(-)))")
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -2
                                                                                        2))
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "B"
                                                                                         "last_idx(cdr(pds2))")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "C"
                                                                                           "last_idx(pds2)")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      8))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_proj_pd formula-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (restrict const-decl "R" restrict nil)
    (last_ol def-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car_ol const-decl "T" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sub_pd_pd const-decl "ErrorTerms" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (next_idx const-decl "nat" affine nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (idxs_ac_sub_ac_ac 0
  (idxs_ac_sub_ac_ac-1 nil 3628933543
   ("" (skeep)
    (("" (expand "sub_ac_ac")
      (("" (expand "idxs_ac")
        (("" (assert)
          (("" (generalize "pd(Xa1)" "pds1")
            (("" (generalize "pd(Xa2)" "pds2")
              (("" (skolem 1 ("pds2_" "pds1_"))
                (("" (name "L" "length(pds1_) + length(pds2_)")
                  (("" (generalize "pds1_" "pds1")
                    (("" (generalize "pds2_" "pds2")
                      (("" (generalize "L" "L")
                        (("" (induct "L" :name "NAT_induction")
                          (("" (skeep)
                            (("" (skeep)
                              ((""
                                (expand "sub_pd_pd")
                                ((""
                                  (expand "map_error" -3)
                                  ((""
                                    (expand*
                                     "null_ol?"
                                     "car_ol"
                                     "cdr_ol"
                                     "cons_ol")
                                    ((""
                                      (lift-if -3)
                                      ((""
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "add_ET" -1)
                                                (("2"
                                                  (expand*
                                                   "null_ol?"
                                                   "car_ol"
                                                   "cdr_ol"
                                                   "cons_ol")
                                                  (("2"
                                                    (lift-if -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "j-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?
                                                               -4
                                                               :where
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -5
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-4
                                                                      3
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "idxs_pd"
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "cdr_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "member"
                                                                           -2)
                                                                          (("1"
                                                                            (split
                                                                             -2)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -4
                                                                               "j-1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst?
                                                                                   -4
                                                                                   :where
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -5
                                                                                     2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-4
                                                                                          3
                                                                                          5))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "j-1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?
                                                                       -3
                                                                       :where
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -4
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-3
                                                                              4
                                                                              6))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "add_ET" -2)
                                                (("1"
                                                  (lift-if -2)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand*
                                                             "null_ol?"
                                                             "car_ol"
                                                             "cdr_ol"
                                                             "cons_ol")
                                                            (("1"
                                                              (expand
                                                               "idxs_pd"
                                                               -2)
                                                              (("1"
                                                                (expand*
                                                                 "null_ol?"
                                                                 "car_ol"
                                                                 "cdr_ol"
                                                                 "cons_ol")
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   -2)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand*
                                                                 "null_ol?"
                                                                 "car_ol"
                                                                 "cdr_ol"
                                                                 "cons_ol")
                                                                (("1"
                                                                  (expand
                                                                   "idxs_pd"
                                                                   -2)
                                                                  (("1"
                                                                    (lift-if
                                                                     -2)
                                                                    (("1"
                                                                      (split
                                                                       -2)
                                                                      (("1"
                                                                        (expand*
                                                                         "null_ol?"
                                                                         "car_ol"
                                                                         "cdr_ol"
                                                                         "cons_ol")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand*
                                                                           "null_ol?"
                                                                           "car_ol"
                                                                           "cdr_ol"
                                                                           "cons_ol")
                                                                          (("2"
                                                                            (expand
                                                                             "member"
                                                                             -1)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -4
                                                                                 "j-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -4
                                                                                     :where
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -5
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (4
                                                                                            5
                                                                                            -4))
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?
                                                                     -3
                                                                     :where
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -4
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (4
                                                                            5
                                                                            -3))
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "add_ET"
                                                     -2)
                                                    (("1"
                                                      (lift-if -2)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "j-2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?
                                                                 -4
                                                                 :where
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -5)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand*
                                                                 "null_ol?"
                                                                 "car_ol"
                                                                 "cdr_ol"
                                                                 "cons_ol")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       -2)
                                                                      (("1"
                                                                        (lift-if
                                                                         -2)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "idxs_pd"
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "null_ol?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "j-2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -4
                                                                                           :where
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "j-2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst?
                                                                         -3
                                                                         :where
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -4)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "add_ET"
                                                         -2)
                                                        (("1"
                                                          (lift-if -2)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?
                                                                     -4
                                                                     :where
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -5
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "idxs_pd"
                                                                         -2)
                                                                        (("1"
                                                                          (expand*
                                                                           "null_ol?"
                                                                           "cons_ol"
                                                                           "car_ol"
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "member"
                                                                             -2)
                                                                            (("1"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -4
                                                                                 "j-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -4
                                                                                     :where
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -5
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "j-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -3
                                                                             :where
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -4
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "add_ET"
                                                         -1)
                                                        (("2"
                                                          (lift-if -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?
                                                                     -3
                                                                     :where
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -4
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "idxs_pd"
                                                                         -2)
                                                                        (("1"
                                                                          (lift-if
                                                                           -2)
                                                                          (("1"
                                                                            (expand*
                                                                             "null_ol?"
                                                                             "cons_ol"
                                                                             "car_ol"
                                                                             "cdr_ol")
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               -2)
                                                                              (("1"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "j-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -3
                                                                                       :where
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         -4
                                                                                         2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-3
                                                                                              5
                                                                                              8))
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "j-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?
                                                                             -2
                                                                             :where
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -3
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    6
                                                                                    9))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_ac_ac const-decl "AffineCombination" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ac_proj_pd formula-decl nil affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (map_error def-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict const-decl "R" restrict nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (sub_pd_pd const-decl "ErrorTerms" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (idxs_ac const-decl "list[nat]" affine nil))
   shostak))
 (car_mul_s_ac_TCC1 0
  (car_mul_s_ac_TCC1-1 nil 3630083031
   ("" (expand_ol) (("" (grind) nil nil)) nil)
   ((/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mul_s_pd def-decl "ErrorTerms" affine nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (car_mul_s_ac_TCC2 0
  (car_mul_s_ac_TCC2-1 nil 3630083031 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (car_mul_s_ac 0
  (car_mul_s_ac-1 nil 3630083174
   ("" (induct "pds")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hpds" "tpds"))
      (("3" (flatten)
        (("3" (skeep)
          (("3" (expand_ol)
            (("3" (hide 2)
              (("3" (case "tpds=null")
                (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                 ("2" (split -1)
                  (("1" (inst? -1 :where 2)
                    (("1" (assert)
                      (("1" (expand "mul_s_pd" 3)
                        (("1" (expand_ol)
                          (("1" (expand "add_ET")
                            (("1" (expand_ol)
                              (("1"
                                (lift-if 3)
                                (("1"
                                  (split 3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (typepred "hpds`2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand
                                                 "ordered_list?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand "lt_idx")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ordered_list?" -1)
                    (("2" (split -1)
                      (("1" (expand "ordered_list?" 1)
                        (("1" (assert) nil nil)) nil)
                       ("2" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (BaseType type-eq-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (mul_s_pd def-decl "ErrorTerms" affine nil))
   shostak))
 (containment_mul_s 0
  (containment_mul_s-1 nil 3623140076
   ("" (skeep)
    (("" (expand "mul_s_ac")
      (("" (expand "eval_ac_noise")
        (("" (assert)
          (("" (generalize "pd(Xa)" "pds")
            (("" (generalize "cv(Xa)" "c")
              (("" (generalize "x1" "x1")
                (("" (generalize "x2" "x2")
                  (("" (induct "pds")
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (skeep)
                        (("2" (expand "mul_s_pd")
                          (("2" (expand_ol)
                            (("2" (use "eval_pd_noise_rec_pds_def")
                              (("2"
                                (replaces -1)
                                (("2"
                                  (expand_ol)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skolem 1 ("hpds" "tpds"))
                      (("3" (flatten)
                        (("3" (skeep)
                          (("3" (split -1)
                            (("1" (expand "mul_s_pd" 1)
                              (("1"
                                (expand_ol)
                                (("1"
                                  (expand "add_ET")
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "eval_pd_noise_rec_pds_def")
                                          (("1"
                                            (inst? -1 :where -5)
                                            (("1"
                                              (expand_ol)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "x2!1"
                                                   "x1!1 - get_noise_by_idx(hpds`1, N) * hpds`2"
                                                   "c")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand_ol)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case "tpds = null")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       -5)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (lemma
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (inst?
                                                               -1
                                                               :where
                                                               1)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (replaces
                                                                     -4
                                                                     :dir
                                                                     RL)
                                                                    (("1"
                                                                      (lemma
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         1)
                                                                        (("1"
                                                                          (expand_ol)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "/=")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "x2!1=0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (lemma
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (inst?
                                                               -1
                                                               :where
                                                               -5)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "x2!1"
                                                                     "x1!1 - get_noise_by_idx(hpds`1, N) * hpds`2"
                                                                     "c")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "/=")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "ordered_list?")
                                                    (("2"
                                                      (split -2)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (case
                                                           "x2!1 = 0")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "tpds = null")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "car(mul_s_pd(x2!1, tpds))`1 = car(tpds)`1")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "lt_idx")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "car_mul_s_ac")
                                                                (("2"
                                                                  (expand_ol)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "ordered_list?" -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "ordered_list?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mul_s_ac const-decl "AffineCombination" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car_mul_s_ac formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (hpds skolem-const-decl "[nat, nzBaseType]" affine nil)
    (x2!1 skolem-const-decl "BaseType" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (list_induction formula-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (mul_s_pd def-decl "ErrorTerms" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_ac_noise const-decl "real" affine nil))
   shostak))
 (containment_add_s 0
  (containment_add_s-1 nil 3623096441 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (BaseType type-eq-decl nil affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (add_s_ac const-decl "AffineCombination" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (neg_pd_TCC1 0
  (neg_pd_TCC1-1 nil 3623095639
   ("" (skeep*) (("" (typepred "pds") (("" (grind) nil nil)) nil)) nil)
   ((ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (neg_pd_TCC2 0
  (neg_pd_TCC2-1 nil 3629195921 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (neg_pd_TCC3 0
  (neg_pd_TCC3-1 nil 3629195921 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (car_ol const-decl "T" ordered_list nil))
   nil))
 (neg_pd_TCC4 0
  (neg_pd_TCC4-1 nil 3629195921
   ("" (skeep* :preds? t)
    (("" (typepred "v(t)")
      (("" (assert)
        (("" (expand "lt_idx")
          (("" (expand_ol)
            (("" (replaces -6)
              (("" (replaces -2 :dir RL)
                (("" (replaces -4)
                  (("" (expand "ordered_list?" -3)
                    (("" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil))
 (neg_pd_TCC5 0
  (neg_pd_TCC5-1 nil 3629195921 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (containment_neg 0
  (containment_neg-1 nil 3629032893
   ("" (skeep)
    (("" (expand "eval_ac_noise")
      (("" (expand "neg_ac")
        (("" (assert)
          (("" (generalize "pd(Xa)" "pds")
            (("" (generalize "x1" "x")
              (("" (induct "pds")
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (skeep)
                    (("2" (expand "neg_pd")
                      (("2" (expand_ol)
                        (("2" (expand "eval_pd_noise")
                          (("2" (expand_ol) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skolem 1 ("hpds" "tpds"))
                  (("3" (flatten)
                    (("3" (skeep)
                      (("3" (expand "neg_pd" 1)
                        (("3" (expand_ol)
                          (("3" (lemma "eval_pd_noise_rec_pds_def")
                            (("3" (inst? -1 :where 1)
                              (("3"
                                (replaces -1)
                                (("3"
                                  (expand_ol)
                                  (("3"
                                    (split -1)
                                    (("1"
                                      (lemma
                                       "eval_pd_noise_rec_pds_def")
                                      (("1"
                                        (inst? -1 :where -4)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand_ol)
                                            (("1"
                                              (inst
                                               -1
                                               "x-get_noise_by_idx(hpds`1, N) * hpds`2")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "ordered_list?" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_ac_noise const-decl "real" affine nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (list_induction formula-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (neg_pd def-decl "{rpd: ErrorTerms |
         (null?(pds) IFF null?(rpd)) AND
          (NOT null?(rpd) IMPLIES car_ol(pds)`1 = car_ol(rpd)`1)}"
            affine nil)
    (neg_ac const-decl "AffineCombination" affine nil))
   shostak))
 (next_idx_neg_ac 0
  (next_idx_neg_ac-1 nil 3628945045
   ("" (skeep)
    (("" (expand "neg_ac")
      (("" (assert)
        (("" (name-replace "pd1" "pd(Xa)")
          (("" (generalize "pd1" "pds")
            (("" (induct "pds")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_ac const-decl "AffineCombination" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list_induction formula-decl nil list_adt nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last_ol def-decl "T" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (neg_pd def-decl "{rpd: ErrorTerms |
         (null?(pds) IFF null?(rpd)) AND
          (NOT null?(rpd) IMPLIES car_ol(pds)`1 = car_ol(rpd)`1)}"
            affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (next_idx const-decl "nat" affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (idxs_ac_neg_ac 0
  (idxs_ac_neg_ac-1 nil 3628936839
   ("" (skeep)
    (("" (expand "neg_ac")
      (("" (expand "idxs_ac")
        (("" (assert)
          (("" (generalize "pd(Xa)" "pds")
            (("" (induct "pds")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (skolem 1 ("hpds" "tpds"))
                (("3" (flatten)
                  (("3" (expand "idxs_pd" 1)
                    (("3" (expand "null_ol?")
                      (("3" (expand "car_ol")
                        (("3" (expand "member" 1)
                          (("3" (flatten)
                            (("3" (expand "cdr_ol")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_ac const-decl "AffineCombination" affine nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (ac_proj_pd formula-decl nil affine nil)
    (list_induction formula-decl nil list_adt nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (neg_pd def-decl "{rpd: ErrorTerms |
         (null?(pds) IFF null?(rpd)) AND
          (NOT null?(rpd) IMPLIES car_ol(pds)`1 = car_ol(rpd)`1)}"
            affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (idxs_ac const-decl "list[nat]" affine nil))
   shostak))
 (mult_pd_pd_TCC1 0
  (mult_pd_pd_TCC1-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (mult_pd_pd_TCC2 0
  (mult_pd_pd_TCC2-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (mult_pd_pd_TCC3 0
  (mult_pd_pd_TCC3-1 nil 3619884927 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (mult_pd_pd_TCC4 0
  (mult_pd_pd_TCC4-2 "" 3621076804 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak)
  (mult_pd_pd_TCC4-1 nil 3619884927
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "v(cv1, cv2, pds1, tl2)")
          (("" (assert)
            (("" (split -3)
              (("1" (assert)
                (("1" (split -3)
                  (("1" (grind) nil nil)
                   ("2" (case "hd2`1 < car(tl2)`1")
                    (("1" (grind) nil nil)
                     ("2" (typepred "pds2") (("2" (grind) nil nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (mult_pd_pd_TCC5 0
  (mult_pd_pd_TCC5-2 "" 3621076829 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak)
  (mult_pd_pd_TCC5-1 nil 3619884927 ("" (tcc) nil nil)
   ((ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (mult_pd_pd_preserves_order_1_TCC1 0
  (mult_pd_pd_preserves_order_1_TCC1-1 nil 3621160483 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (BaseType type-eq-decl nil affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (mult_pd_pd_preserves_order_1 0
  (mult_pd_pd_preserves_order_1-1 nil 3621160527
   (""
    (induct "pds" :name
     "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]")
    (("1" (skeep)
      (("1" (expand "null_ol?") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep*)
        (("2" (inst?)
          (("2" (inst -1 "cv2")
            (("2" (hide 1)
              (("2" (expand "cdr_ol")
                (("2" (expand "null_ol?")
                  (("2" (prop)
                    (("1" (expand "car_ol")
                      (("1" (expand "mult_pd_pd" 1)
                        (("1" (lift-if)
                          (("1" (expand "null_ol?")
                            (("1" (expand "null_ol")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "add_ET")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (expand "cdr_ol")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "null_ol?")
                                          (("1"
                                            (expand "cons_ol")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "mult_pd_pd" 3)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("1"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("1"
                                                                    (typepred
                                                                     "x::[nat,nzBaseType]")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "car_ol")
                      (("2" (expand "mult_pd_pd" 1)
                        (("2" (lift-if)
                          (("2" (expand "null_ol?")
                            (("2" (expand "null_ol")
                              (("2"
                                (prop)
                                (("2"
                                  (expand "add_ET")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (expand "cdr_ol")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "null_ol?")
                                          (("2"
                                            (expand "cons_ol")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "mult_pd_pd" 3)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (typepred
                                                                 "x::[nat,nzBaseType]")
                                                                (("1"
                                                                  (expand
                                                                   "ordered_list?")
                                                                  (("1"
                                                                    (expand
                                                                     "lt_idx")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "mult_pd_pd" 3)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (expand "null_ol?")
                                                    (("2"
                                                      (expand "add_ET")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (expand
                                                           "car_ol")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "null_ol?")
                                                              (("2"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("2"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("2"
                                                                    (typepred
                                                                     "x::[nat,nzBaseType]")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "x::[nat,nzBaseType]")
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skeep)
        (("3" (expand "null_ol?") (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (expand "ordered_list?") (("4" (propax) nil nil)) nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (expand "ordered_list?") (("5" (propax) nil nil)) nil))
      nil))
    nil)
   ((null_ol const-decl "ordered_list" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (car_ol const-decl "T" ordered_list nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil))
 (mult_pd_pd_preserves_order_2_TCC1 0
  (mult_pd_pd_preserves_order_2_TCC1-1 nil 3621105899
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (BaseType type-eq-decl nil affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (mult_pd_pd_preserves_order_2 0
  (mult_pd_pd_preserves_order_2-1 nil 3621105900
   (""
    (induct "pds2" :name
     "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]")
    (("1" (skeep)
      (("1" (expand "null_ol?") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep*)
        (("2" (inst?)
          (("2" (inst -1 "cv2")
            (("2" (hide 1)
              (("2" (expand "cdr_ol")
                (("2" (expand "null_ol?")
                  (("2" (prop)
                    (("1" (expand "car_ol")
                      (("1" (expand "mult_pd_pd" 1)
                        (("1" (lift-if)
                          (("1" (expand "null_ol?")
                            (("1" (expand "null_ol")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "add_ET")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (expand "cdr_ol")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "null_ol?")
                                          (("1"
                                            (expand "cons_ol")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "mult_pd_pd" 3)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("1"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("1"
                                                                    (typepred
                                                                     "x::[nat,nzBaseType]")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "car_ol")
                      (("2" (expand "mult_pd_pd" 1)
                        (("2" (lift-if)
                          (("2" (expand "null_ol?")
                            (("2" (expand "null_ol")
                              (("2"
                                (prop)
                                (("2"
                                  (expand "add_ET")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (expand "cdr_ol")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "null_ol?")
                                          (("2"
                                            (expand "cons_ol")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "mult_pd_pd" 3)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (typepred
                                                                 "x::[nat,nzBaseType]")
                                                                (("1"
                                                                  (expand
                                                                   "ordered_list?")
                                                                  (("1"
                                                                    (expand
                                                                     "lt_idx")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "mult_pd_pd" 3)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (expand "null_ol?")
                                                    (("2"
                                                      (expand "add_ET")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (expand
                                                           "car_ol")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "null_ol?")
                                                              (("2"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("2"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("2"
                                                                    (typepred
                                                                     "x::[nat,nzBaseType]")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "x::[nat,nzBaseType]")
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skeep)
        (("3" (expand "null_ol?") (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (hide-all-but 1)
      (("4" (expand "ordered_list?") (("4" (propax) nil nil)) nil))
      nil)
     ("5" (hide-all-but 1)
      (("5" (expand "ordered_list?") (("5" (propax) nil nil)) nil))
      nil))
    nil)
   ((null_ol const-decl "ordered_list" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (car_ol const-decl "T" ordered_list nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (mult_pd_pd_preserves_order_3_TCC1 0
  (mult_pd_pd_preserves_order_3_TCC1-1 nil 3621163685 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (BaseType type-eq-decl nil affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   nil))
 (mult_pd_pd_preserves_order_3 0
  (mult_pd_pd_preserves_order_3-1 nil 3621163872
   ("" (skeep)
    (("" (name "j" "length(pds1)+length(pds2)")
      (("" (generalize "pds1" "pds1")
        (("1" (generalize "pds2" "pds2")
          (("1" (generalize "j" "j")
            (("1" (induct "j" :name "NAT_induction")
              (("1" (skeep)
                (("1" (skeep)
                  (("1" (expand "mult_pd_pd" 3)
                    (("1" (assert)
                      (("1" (expand "null_ol?")
                        (("1" (expand "cdr_ol")
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "add_ET")
                              (("2"
                                (lift-if)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -3 "j_1 -1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -3
                                           "cdr(pds2!1)"
                                           "pds1!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (case
                                                 "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(pds1!1)`1, car(cdr(pds2!1))`1)")
                                                (("1"
                                                  (expand "car_ol")
                                                  (("1"
                                                    (expand
                                                     "mult_pd_pd"
                                                     5)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "null_ol?")
                                                          (("1"
                                                            (expand
                                                             "add_ET")
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  5))
                                                                (("1"
                                                                  (name-replace
                                                                   "bla"
                                                                   "car(mult_pd_pd(cv1, cv2, cdr(pds1!1), cdr(cdr(pds2!1))))`1")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (typepred "pds2!1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-3 1 4 5))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-3 1 4 5))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "null_ol?")
                                      (("2"
                                        (expand "car_ol")
                                        (("2"
                                          (inst -2 "j_1 -1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -2
                                               "cdr(pds2!1)"
                                               "pds1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "cons_ol")
                                                      (("1"
                                                        (expand
                                                         "mult_pd_pd"
                                                         6)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (expand
                                                               "add_ET")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (expand
                                                                   "car_ol")
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("1"
                                                                      (expand
                                                                       "cdr_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "cons_ol")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           6)
                                                                          (("1"
                                                                            (typepred
                                                                             "pds2!1")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "mult_pd_pd"
                                                     6)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (expand
                                                         "null_ol?")
                                                        (("2"
                                                          (expand
                                                           "add_ET")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (expand
                                                               "car_ol")
                                                              (("2"
                                                                (expand
                                                                 "null_ol?")
                                                                (("2"
                                                                  (expand
                                                                   "cdr_ol")
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "cons_ol")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             6)
                                                                            (("1"
                                                                              (typepred
                                                                               "pds2!1")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "cons_ol")
                                                                          (("2"
                                                                            (split
                                                                             6)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "pds2!1")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  2))
                                                                                (("2"
                                                                                  (case
                                                                                   "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(pds1!1)`1, car(cdr(pds2!1))`1)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "bla"
                                                                                     "car(mult_pd_pd(cv1, cv2, cdr(pds1!1), cdr(cdr(pds2!1))))`1")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "pds2!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but
                                                     (1 -2 5 6))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -2 5 6))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "add_ET")
                              (("3"
                                (lift-if)
                                (("3"
                                  (expand "car_ol")
                                  (("3"
                                    (inst -2 "j_1-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -2
                                         "pds2!1"
                                         "cdr_ol(pds1!1)")
                                        (("1"
                                          (expand "cdr_ol")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (expand "mult_pd_pd" 5)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (expand "null_ol?")
                                                  (("1"
                                                    (expand "car_ol")
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "cdr_ol")
                                                                  (("2"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("2"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("2"
                                                                        (hide-all-but
                                                                         6)
                                                                        (("2"
                                                                          (typepred
                                                                           "pds1!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "mult_pd_pd" 5)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (expand "null_ol?")
                                                  (("2"
                                                    (expand "add_ET")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (expand
                                                         "car_ol")
                                                        (("2"
                                                          (expand
                                                           "cdr_ol")
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (5
                                                                    -2))
                                                                  (("1"
                                                                    (case
                                                                     "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(cdr(pds1!1))`1, car(pds2!1)`1)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "bla"
                                                                       "car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(pds2!1)))`1")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "pds1!1")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "cons_ol")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             6)
                                                                            (("1"
                                                                              (typepred
                                                                               "pds1!1")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "cons_ol")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   7)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "pds1!1")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (7
                                                                                -1))
                                                                              (("2"
                                                                                (case
                                                                                 "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(cdr(pds1!1))`1, car(pds2!1)`1)")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "bla"
                                                                                   "car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(pds2!1)))`1")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "pds1!1")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but (1 -2 4 5))
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 -2 4 5))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (expand "car_ol")
                              (("4"
                                (expand "add_ET")
                                (("4"
                                  (lift-if)
                                  (("4"
                                    (inst -2 "j_1 -2 ")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -2
                                         "cdr_ol(pds2!1)"
                                         "cdr_ol(pds1!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "cdr_ol")
                                            (("1"
                                              (expand "mult_pd_pd" 6)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (expand "null_ol?")
                                                  (("1"
                                                    (expand "car_ol")
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (6
                                                                    -3))
                                                                  (("1"
                                                                    (case
                                                                     "min(car(pds1!1)`1, car(pds2!1)`1) < min(car(cdr(pds1!1))`1, car(cdr(pds2!1))`1)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "dummy"
                                                                       " car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(cdr(pds2!1))))`1")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "pds1!1")
                                                                        (("2"
                                                                          (typepred
                                                                           "pds2!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "null_ol?")
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               7)
                                                                              (("1"
                                                                                (typepred
                                                                                 "pds1!1")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "cdr_ol")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "cons_ol")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     8)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "pds1!1")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (8
                                                                                  -2))
                                                                                (("2"
                                                                                  (case
                                                                                   "min(car(pds1!1)`1, car(pds2!1)`1) < min(car(cdr(pds1!1))`1, car(cdr(pds2!1))`1)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "dummy"
                                                                                     " car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(cdr(pds2!1))))`1")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "pds1!1")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "pds2!1")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1 5 6))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (expand "car_ol")
                              (("5"
                                (expand "add_ET")
                                (("5"
                                  (lift-if)
                                  (("5"
                                    (inst -2 "j_1  -1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -2
                                         "pds2!1"
                                         "cdr_ol(pds1!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "mult_pd_pd" 7)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (expand "null_ol?")
                                                (("1"
                                                  (expand "car_ol")
                                                  (("1"
                                                    (expand "add_ET")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "cdr_ol")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-3
                                                                  7))
                                                                (("1"
                                                                  (case
                                                                   "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(cdr(pds1!1))`1, car(pds2!1)`1)")
                                                                  (("1"
                                                                    (name-replace
                                                                     "bla"
                                                                     "car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(pds2!1)))`1")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "pds1!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "null_ol?")
                                                              (("2"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "cons_ol")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           8)
                                                                          (("1"
                                                                            (typepred
                                                                             "pds1!1")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "cons_ol")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   9)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "pds1!1")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "car_ol")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (9
                                                                                -2))
                                                                              (("2"
                                                                                (case
                                                                                 "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(cdr(pds1!1))`1, car(pds2!1)`1)")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "bla"
                                                                                   "car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(pds2!1)))`1")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "pds1!1")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 -2 6 7))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (expand "add_ET")
                              (("6"
                                (lift-if)
                                (("6"
                                  (expand "mult_pd_pd" 8)
                                  (("6"
                                    (lift-if)
                                    (("6"
                                      (expand "null_ol?")
                                      (("6"
                                        (assert)
                                        (("6"
                                          (expand "add_ET")
                                          (("6"
                                            (lift-if)
                                            (("6"
                                              (expand "car_ol")
                                              (("6"
                                                (expand "cdr_ol")
                                                (("6"
                                                  (expand "cons_ol")
                                                  (("6"
                                                    (inst -1 "j_1-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "cdr_ol(pds2!1)"
                                                         "pds1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (8
                                                                      -2))
                                                                    (("1"
                                                                      (case
                                                                       "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(pds1!1)`1, car(cdr(pds2!1))`1)")
                                                                      (("1"
                                                                        (name-replace
                                                                         "bla"
                                                                         "car(mult_pd_pd(cv1, cv2, cdr(pds1!1), cdr(cdr(pds2!1))))`1")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "pds2!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("2"
                                                                    (split
                                                                     8)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (typepred
                                                                           "pds2!1")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "pds2!1")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (2
                                                                                -1))
                                                                              (("2"
                                                                                (case
                                                                                 "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(pds1!1)`1, car(cdr(pds2!1))`1)")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "bla"
                                                                                   "car(mult_pd_pd(cv1, cv2, cdr(pds1!1), cdr(cdr(pds2!1))))`1")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "pds2!1")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -1 7 8))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (skeep*)
                  (("2" (expand "null_ol?") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
          nil)
         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cv1 skolem-const-decl "BaseType" affine nil)
    (cv2 skolem-const-decl "BaseType" affine nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j_1 skolem-const-decl "nat" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (BaseType type-eq-decl nil affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (car_ol const-decl "T" ordered_list nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (mult_pd_pd_last_bound__null_nnull_TCC1 0
  (mult_pd_pd_last_bound__null_nnull_TCC1-1 nil 3621276799
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (mult_pd_pd_last_bound__null_nnull_TCC2 0
  (mult_pd_pd_last_bound__null_nnull_TCC2-1 nil 3621276799
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (mult_pd_pd_last_bound__null_nnull 0
  (mult_pd_pd_last_bound__null_nnull-1 nil 3621276800
   ("" (expand "null_ol?")
    ((""
      (induct "pds" :name
       "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]")
      (("1" (grind) nil nil)
       ("2" (skolem 1 ("pds"))
        (("2" (flatten)
          (("2" (skolem 1 "x_")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (inst -1 "x2")
                  (("2" (expand "mult_pd_pd" (1 2))
                    (("2" (lift-if)
                      (("2" (expand "null_ol?")
                        (("2" (expand "empty_ErrorTerms")
                          (("2" (expand "add_ET" (1 2))
                            (("2" (lift-if)
                              (("2"
                                (expand "car_ol")
                                (("2"
                                  (expand "cdr_ol")
                                  (("2"
                                    (expand "cons_ol")
                                    (("2"
                                      (expand "empty_ErrorTerms")
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "NOT null?[[nat, nzBaseType]](pds)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (expand "null_ol?")
                                                  (("1"
                                                    (expand "last_ol")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "mult_pd_pd")
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (expand
                                                                 "null_ol?")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "add_ET")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "null_ol?")
                                                                          (("2"
                                                                            (expand
                                                                             "cons_ol")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "null_ol?(pds)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "null_ol?")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "last_ol"
                                                                 4
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "null_ol?(pds)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "null_ol?")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (pred type-eq-decl nil defined_types nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (<= const-decl "bool" reals nil)
    (last_ol def-decl "T" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (mult_pd_pd_last_bound__nnull_null_TCC1 0
  (mult_pd_pd_last_bound__nnull_null_TCC1-1 nil 3621280662 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (mult_pd_pd_last_bound__nnull_null_TCC2 0
  (mult_pd_pd_last_bound__nnull_null_TCC2-1 nil 3621280662 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (mult_pd_pd_last_bound__nnull_null 0
  (mult_pd_pd_last_bound__nnull_null-1 nil 3621350074
   ("" (expand "null_ol?")
    ((""
      (induct "pds" :name
       "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]")
      (("1" (grind) nil nil)
       ("2" (skolem 1 ("pds"))
        (("2" (flatten)
          (("2" (skolem 1 "x_")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (inst -1 "x2")
                  (("2" (expand "mult_pd_pd" (1 2))
                    (("2" (lift-if)
                      (("2" (expand "null_ol?")
                        (("2" (expand "empty_ErrorTerms")
                          (("2" (expand "add_ET" (1 2))
                            (("2" (lift-if)
                              (("2"
                                (expand "car_ol")
                                (("2"
                                  (expand "cdr_ol")
                                  (("2"
                                    (expand "cons_ol")
                                    (("2"
                                      (expand "empty_ErrorTerms")
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "NOT null?[[nat, nzBaseType]](pds)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (expand "null_ol?")
                                                  (("1"
                                                    (expand "last_ol")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "mult_pd_pd")
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (expand
                                                                 "null_ol?")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "add_ET")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "null_ol?")
                                                                          (("2"
                                                                            (expand
                                                                             "cons_ol")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "null_ol?(pds)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "null_ol?")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "last_ol"
                                                                 4
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "null_ol?(pds)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "null_ol?")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (pred type-eq-decl nil defined_types nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (<= const-decl "bool" reals nil)
    (last_ol def-decl "T" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (mult_pd_pd_last_bound_TCC1 0
  (mult_pd_pd_last_bound_TCC1-1 nil 3621274735 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (mult_pd_pd_last_bound_TCC2 0
  (mult_pd_pd_last_bound_TCC2-1 nil 3621274735 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (mult_pd_pd_last_bound_TCC3 0
  (mult_pd_pd_last_bound_TCC3-1 nil 3621275306 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (mult_pd_pd_last_bound 0
  (mult_pd_pd_last_bound-1 nil 3621275044
   ("" (skeep)
    (("" (name "L" "length(pds1)+length(pds2)")
      (("" (expand "null_ol?")
        (("" (generalize "pds1" "pds1")
          (("" (generalize "pds2" "pds2")
            (("" (generalize "L" "L")
              (("" (induct "L" :name "NAT_induction")
                (("" (skeep)
                  (("" (skolem 1 ("pds2_" "pds1_"))
                    (("" (flatten)
                      (("" (expand "mult_pd_pd" 4)
                        (("" (lift-if)
                          (("" (expand "null_ol?")
                            (("" (assert)
                              ((""
                                (expand "car_ol")
                                ((""
                                  (split 4)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "add_ET")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -3 "j-2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "cdr_ol(pds2_)"
                                                   "cdr_ol(pds1_)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "cdr_ol")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "null?[[nat, nzBaseType]](cdr(pds1_))")
                                                          (("1"
                                                            (case
                                                             "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, cdr(pds1_), cdr(pds2_)))")
                                                            (("1"
                                                              (hide -5)
                                                              (("1"
                                                                (expand
                                                                 "mult_pd_pd"
                                                                 4)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "add_ET")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "cdr(pds1_)=null")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (case
                                                                       "null?[[nat, nzBaseType]](cdr(pds2_))")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "mult_pd_pd_last_bound__null_nnull")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "cdr_ol(pds2_)"
                                                                           "x1"
                                                                           "x2")
                                                                          (("1"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("1"
                                                                              (expand
                                                                               "null_ol?")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "empty_ErrorTerms")
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -4)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "last_ol"
                                                                                       3
                                                                                       2)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "pds2_")
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -3
                                                                                                -5
                                                                                                3
                                                                                                4
                                                                                                5))
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "olidx_car_last[nzBaseType]")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "pds2_")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "car_ol")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds2_) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))")
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "dontRW"
                                                                                                               "mult_pd_pd(x1, x2, null, cdr(pds2_))")
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "null?[[nat, nzBaseType]](cdr(pds2_))")
                                                              (("1"
                                                                (case
                                                                 "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, cdr(pds1_), cdr(pds2_)))")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "cdr(pds2_) = null")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     +
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (lemma
                                                                       "mult_pd_pd_last_bound__nnull_null")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "cdr(pds1_)"
                                                                         "x1"
                                                                         "x2")
                                                                        (("1"
                                                                          (expand
                                                                           "null_ol?")
                                                                          (("1"
                                                                            (expand
                                                                             "empty_ErrorTerms")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "last_ol"
                                                                                 3
                                                                                 3)
                                                                                (("1"
                                                                                  (case
                                                                                   "max(last_ol(pds1_)`1, car(pds2_)`1) = last_ol(pds1_)`1")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (case
                                                                                       "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_))")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds2_) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "mult_pd_pd"
                                                                             6)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (expand
                                                                                 "null_ol?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "car_ol")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "add_ET")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "cdr_ol")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten 1)
                                            (("2"
                                              (expand "null_ol?")
                                              (("2"
                                                (expand "cdr_ol")
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "cons_ol")
                                                      (("1"
                                                        (expand
                                                         "last_ol"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "empty_ErrorTerms")
                                                          (("1"
                                                            (hide-all-but
                                                             (1 3 4))
                                                            (("1"
                                                              (use
                                                               "olidx_car_last[nzBaseType]")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "car_ol")
                                                      (("2"
                                                        (expand
                                                         "last_ol"
                                                         2
                                                         1)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "cons_ol")
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "j-2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "cdr_ol(pds2_)"
                                                                     "cdr_ol(pds1_)")
                                                                    (("1"
                                                                      (expand
                                                                       "cdr_ol")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "null_ol?(cdr_ol(pds1_))")
                                                                          (("1"
                                                                            (case
                                                                             "null_ol?(cdr_ol(pds2_))")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "null_ol?")
                                                                              (("2"
                                                                                (case
                                                                                 "cdr(pds1_)=null")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   +
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "cdr_ol")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "mult_pd_pd_last_bound__null_nnull")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "cdr_ol(pds2_)"
                                                                                         "x1"
                                                                                         "x2")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty_ErrorTerms")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "null_ol?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cdr_ol")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last_ol"
                                                                                                   3
                                                                                                   (2
                                                                                                    3))
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))`1=last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))`1")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "olidx_car_last[nzBaseType]")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "cdr_ol(pds2_)")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "cdr_ol")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "null_ol?(cdr_ol(pds2_))")
                                                                            (("1"
                                                                              (case
                                                                               "cdr(pds2_)=null")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 +
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "mult_pd_pd_last_bound__nnull_null")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "cdr_ol(pds1_)"
                                                                                     "x1"
                                                                                     "x2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "null_ol?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "cdr_ol")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "empty_ErrorTerms")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "last_ol"
                                                                                               3
                                                                                               (2
                                                                                                3))
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -3
                                                                                                     :dir
                                                                                                     RL)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_))=last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_)")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "olidx_car_last[nzBaseType]")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "pds1_")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "car_ol")
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "null_ol?")
                                                                              (("2"
                                                                                (expand
                                                                                 "cdr_ol")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (case
                                                                                       "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_))=last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_)")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (case
                                                                                           "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))=last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds2_)")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-2
                                                                                        1
                                                                                        7
                                                                                        8))
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -2 "j-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -2
                                               "pds2_"
                                               "cdr_ol(pds1_)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add_ET")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "null_ol?(cdr_ol(pds1_))")
                                                          (("1"
                                                            (case
                                                             "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, cdr_ol(pds1_), pds2_))")
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (expand
                                                                 "mult_pd_pd"
                                                                 5)
                                                                (("1"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("1"
                                                                    (expand
                                                                     "car_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "add_ET")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "mult_pd_pd_last_bound__null_nnull")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "pds2_"
                                                                 "x1"
                                                                 "x2")
                                                                (("2"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty_ErrorTerms")
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -5)
                                                                        (("1"
                                                                          (case
                                                                           "cdr(pds1_)=null")
                                                                          (("1"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               +
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (expand
                                                                                 "last_ol"
                                                                                 2
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "max(car(pds1_)`1, last_ol(pds2_)`1) = max(car(pds2_)`1, last_ol(pds2_)`1)")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "olidx_car_last[nzBaseType]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "pds2_")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -2
                                                                          1))
                                                                        (("2"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("2"
                                                                            (case
                                                                             "cdr(pds1_)=null")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "null_ol?")
                                                            (("2"
                                                              (expand
                                                               "cdr_ol")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, cdr(pds1_), pds2_))")
                                                                  (("1"
                                                                    (expand
                                                                     "mult_pd_pd"
                                                                     6)
                                                                    (("1"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "add_ET")
                                                                          (("1"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_)) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "null_ol?")
                                                          (("2"
                                                            (expand
                                                             "cdr_ol")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "empty_ErrorTerms")
                                                                      (("1"
                                                                        (expand
                                                                         "last_ol"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "olidx_car_last[nzBaseType]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "pds1_")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "null?[[nat, nzBaseType]](cdr(pds1_))")
                                                                      (("1"
                                                                        (hide
                                                                         -3)
                                                                        (("1"
                                                                          (expand
                                                                           "cons_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "last_ol"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (case
                                                                               "cdr(pds1_)=null")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 +
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "mult_pd_pd_last_bound__null_nnull")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "pds2_"
                                                                                     "x1"
                                                                                     "x2")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "null_ol?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "empty_ErrorTerms")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "last_ol"
                                                                           3
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "cons_ol")
                                                                            (("2"
                                                                              (case
                                                                               "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_)) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "add_ET")
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (inst -1 "j-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cdr_ol(pds2_)"
                                                   "pds1_")
                                                  (("1"
                                                    (expand "cdr_ol")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -2
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "null?[[nat, nzBaseType]](cdr(pds2_))")
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, pds1_, cdr(pds2_)))")
                                                                (("1"
                                                                  (hide
                                                                   -4)
                                                                  (("1"
                                                                    (expand
                                                                     "mult_pd_pd"
                                                                     6)
                                                                    (("1"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "add_ET")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "cdr_ol")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "cdr(pds2_)=null")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     +
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (lemma
                                                                       "mult_pd_pd_last_bound__nnull_null")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "pds1_"
                                                                         "x1"
                                                                         "x2")
                                                                        (("1"
                                                                          (expand
                                                                           "null_ol?")
                                                                          (("1"
                                                                            (expand
                                                                             "empty_ErrorTerms")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "empty_ErrorTerms")
                                                                      (("1"
                                                                        (expand
                                                                         "last_ol"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "olidx_car_last[nzBaseType]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "pds1_")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "car_ol")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("2"
                                                                    (expand
                                                                     "last_ol"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (case
                                                                               "cdr(pds2_)=null")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 +
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "mult_pd_pd_last_bound__nnull_null")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "pds1_"
                                                                                     "x1"
                                                                                     "x2")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "null_ol?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "empty_ErrorTerms")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, pds1_, cdr_ol(pds2_)))")
                                                              (("1"
                                                                (expand
                                                                 "mult_pd_pd"
                                                                 7)
                                                                (("1"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("1"
                                                                    (expand
                                                                     "car_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "add_ET")
                                                                      (("1"
                                                                        (expand
                                                                         "cdr_ol")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             3)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 8)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "cons_ol")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "empty_ErrorTerms")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "last_ol"
                                                                                         2
                                                                                         1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "olidx_car_last[nzBaseType]")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "pds1_")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("2"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("2"
                                                                        (expand
                                                                         "last_ol"
                                                                         4
                                                                         4)
                                                                        (("2"
                                                                          (case
                                                                           "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_)) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds2_)")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "null_ol?")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "null_ol?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 1 5 6))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (last_ol def-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (<= const-decl "bool" reals nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (pds2_ skolem-const-decl "ErrorTerms" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (mult_pd_pd_last_bound__null_nnull formula-decl nil affine nil)
    (mult_pd_pd_last_bound__nnull_null formula-decl nil affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pds1_ skolem-const-decl "ErrorTerms" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (search_ET_on_add_ET_TCC1 0
  (search_ET_on_add_ET_TCC1-1 nil 3621103906 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (search_ET_on_add_ET 0
  (search_ET_on_add_ET-1 nil 3621103923
   ("" (grind)
    (("" (expand "search_error_term_by_idx")
      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (search_ET_car 0
  (search_ET_car-1 nil 3621104073 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (search_ET_not_car_TCC1 0
  (search_ET_not_car_TCC1-1 nil 3621104193 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (search_ET_not_car 0
  (search_ET_not_car-1 nil 3621104193
   ("" (grind)
    (("" (expand "search_error_term_by_idx")
      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (search_ET_in_mult_pd_pd 0
  (search_ET_in_mult_pd_pd-2 "" 3621105813
   ("" (skeep)
    (("" (name "lens" "length(pds1)+length(pds2)")
      (("" (generalize "pds1" "pds1")
        (("" (generalize "pds2" "pds2")
          (("" (generalize "lens" "lens")
            (("" (induct "lens" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (case "null_ol?(pds1!1)")
                    (("1" (case "null_ol?(pds2!1)")
                      (("1" (grind) nil nil)
                       ("2" (expand "mult_pd_pd" 2 1)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (use "search_ET_on_add_ET")
                              (("2"
                                (split -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (lemma "search_ET_car")
                                            (("1"
                                              (inst -1 "pds2!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "car_ol")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (case
                                                       "search_error_term_by_idx(pds1!1, car(pds2!1)`1)=0")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 -1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst -2 "j-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -2
                                               "cdr_ol(pds2!1)"
                                               "pds1!1")
                                              (("1"
                                                (expand "cdr_ol")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (lemma
                                                       "search_ET_not_car")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "n"
                                                         "pds2!1")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (expand
                                                               "/=")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 1 -1 4))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -2 1 4))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "mult_pd_pd_preserves_order_2")
                                  (("2"
                                    (inst -1 "cv1" "cv2" "pds2!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case "pds1!1 = null")
                                        (("1" (replaces -1) nil nil)
                                         ("2"
                                          (hide-all-but (1 -2))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "null_ol?(pds2!1)")
                      (("1" (expand "mult_pd_pd" 2 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (use "search_ET_on_add_ET")
                              (("1"
                                (split -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (lemma "search_ET_car")
                                            (("1"
                                              (inst -1 "pds1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "car_ol")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (case
                                                       "search_error_term_by_idx(pds2!1, car(pds1!1)`1)=0")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 -1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (inst -2 "j-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -2
                                               "pds2!1"
                                               "cdr_ol(pds1!1)")
                                              (("1"
                                                (expand "cdr_ol")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (lemma
                                                       "search_ET_not_car")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "n"
                                                         "pds1!1")
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (expand
                                                               "/=")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 1 -1 4))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -1 -2 4))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "mult_pd_pd_preserves_order_1")
                                  (("2"
                                    (inst -1 "cv1" "cv2" "pds1!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case "pds2!1 = null")
                                        (("1" (replaces -1) nil nil)
                                         ("2"
                                          (hide-all-but (1 -2))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (case "car_ol(pds1!1)`1 = car_ol(pds2!1)`1")
                        (("1" (expand "mult_pd_pd" 3 1)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (use "search_ET_on_add_ET")
                                (("1"
                                  (split -1)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split 3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (case
                                                   "search_error_term_by_idx(pds2!1, car_ol(pds1!1)`1) = search_error_term_by_idx(pds2!1, car_ol(pds2!1)`1)")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (use
                                                       "search_ET_car")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "car_ol")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "search_ET_car")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst -2 "j-2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -2
                                                 "cdr_ol(pds2!1)"
                                                 "cdr_ol(pds1!1)")
                                                (("1"
                                                  (expand "cdr_ol")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (lemma
                                                         "search_ET_not_car")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "n"
                                                           "pds2!1")
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (expand
                                                               "/=")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "car_ol")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "search_ET_not_car")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "n"
                                                                           "pds1!1")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-2 1 4 5))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-2 1 4 5))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "mult_pd_pd_preserves_order_3")
                                    (("2"
                                      (inst
                                       -1
                                       "cv1"
                                       "cv2"
                                       "pds1!1"
                                       "pds2!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "mult_pd_pd" 4)
                          (("2" (lift-if)
                            (("2" (expand "null_ol?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "car_ol")
                                  (("2"
                                    (split 4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma "search_ET_on_add_ET")
                                        (("1"
                                          (inst
                                           -1
                                           "min(car(pds1!1)`1,car(pds2!1)`1)"
                                           "n"
                                           "mult_pd_pd
                                      (cv1, cv2, cdr_ol(pds1!1), pds2!1)"
                                           "car(pds1!1)`2 * cv2")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (case
                                               "min(car(pds1!1)`1, car(pds2!1)`1) = car(pds1!1)`1")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (use
                                                             "search_ET_car")
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "search_error_term_by_idx(pds2!1, car(pds1!1)`1) = 0")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "j-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "pds2!1"
                                                               "cdr_ol(pds1!1)")
                                                              (("1"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "search_ET_not_car")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "n"
                                                                           "pds1!1")
                                                                          (("1"
                                                                            (expand
                                                                             "null_ol?")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        -2
                                                                        5
                                                                        6))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1
                                                              -2
                                                              5
                                                              6))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "mult_pd_pd_preserves_order_3")
                                              (("2"
                                                (inst
                                                 -1
                                                 "cv1"
                                                 "cv2"
                                                 "pds1!1"
                                                 "cons_ol(car(pds1!1), pds2!1)")
                                                (("1"
                                                  (expand "null_ol?")
                                                  (("1"
                                                    (expand "cons_ol")
                                                    (("1"
                                                      (expand "cdr_ol")
                                                      (("1"
                                                        (expand
                                                         "car_ol")
                                                        (("1"
                                                          (case
                                                           "min(car(pds1!1)`1, car(pds2!1)`1) = car(pds1!1)`1")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma "search_ET_on_add_ET")
                                        (("2"
                                          (inst
                                           -1
                                           "min(car(pds1!1)`1,car(pds2!1)`1)"
                                           "n"
                                           "mult_pd_pd
                                      (cv1, cv2, pds1!1, cdr_ol(pds2!1))"
                                           "car(pds2!1)`2 * cv1")
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (case
                                               "min(car(pds1!1)`1, car(pds2!1)`1) = car(pds2!1)`1")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replaces -)
                                                          (("1"
                                                            (use
                                                             "search_ET_car")
                                                            (("1"
                                                              (expand
                                                               "null_ol?")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "search_error_term_by_idx(pds1!1, car(pds2!1)`1) = 0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "cdr_ol")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "j-1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cdr_ol(pds2!1)"
                                                                 "pds1!1")
                                                                (("1"
                                                                  (expand
                                                                   "cdr_ol")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "search_ET_not_car")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "n"
                                                                             "pds2!1")
                                                                            (("1"
                                                                              (expand
                                                                               "null_ol?")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1
                                                                1
                                                                6
                                                                7))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 2))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 3)
                                              (("2"
                                                (case
                                                 "min(car(pds1!1)`1, car(pds2!1)`1) = car(pds2!1)`1")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lemma
                                                     "mult_pd_pd_preserves_order_3")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "cv1"
                                                       "cv2"
                                                       "cons_ol(car(pds2!1), pds1!1)"
                                                       "pds2!1")
                                                      (("1"
                                                        (expand
                                                         "null_ol?")
                                                        (("1"
                                                          (expand
                                                           "cons_ol")
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (expand
                                                               "car_ol")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 3 4))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 3))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (propax) nil nil) ("4" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (mult_pd_pd_preserves_order_1 formula-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pds2!1 skolem-const-decl "ErrorTerms" affine nil)
    (pds1!1 skolem-const-decl "ErrorTerms" affine nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mult_pd_pd_preserves_order_3 formula-decl nil affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (search_ET_on_add_ET formula-decl nil affine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (mult_pd_pd_preserves_order_2 formula-decl nil affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (search_ET_car formula-decl nil affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" affine nil)
    (search_ET_not_car formula-decl nil affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak)
  (search_ET_in_mult_pd_pd-1 nil 3621089248
   ("" (skeep)
    (("" (name "lens" "length(pds1)+length(pds2)")
      (("" (generalize "pds1" "pds1")
        (("" (generalize "pds2" "pds2")
          (("" (generalize "lens" "lens")
            (("" (induct "lens")
              (("1" (skeep)
                (("1" (case "null_ol?(pds1!1) AND null_ol?(pds2!1)")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil)
               ("2" (skeep)
                (("2" (skeep)
                  (("2" (expand "mult_pd_pd" 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (grind) nil nil)
                         ("2"
                          (case "cv2 * search_error_term_by_idx(pds1!1, n) = 0")
                          (("1" (replaces -1)
                            (("1" (assert)
                              (("1"
                                (expand "add_ET")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "search_error_term_by_idx"
                                               1
                                               2)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "car_ol(pds2!1)`1 = n")
                                      (("1"
                                        (expand "cons_ol")
                                        (("1"
                                          (expand
                                           "search_error_term_by_idx"
                                           1
                                           1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (expand
                                                 "search_error_term_by_idx"
                                                 1
                                                 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "null_ol?")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -3)
                                        (("2"
                                          (case
                                           "cv1 * search_error_term_by_idx(pds2!1, n) = 0")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (case
                                               "search_error_term_by_idx(cons_ol((car_ol(pds2!1)`1,
                                                                              car_ol(pds2!1)`2 * cv1),
                                                                             empty_ErrorTerms),
                                                                     n) = 0")
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide-all-but (1 2))
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (expand "car_ol")
                                                (("3"
                                                  (expand "/=")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (5 2 -1 1))
                                            (("2"
                                              (case "cons?(pds2!1)")
                                              (("1"
                                                (generalize
                                                 "pds2!1"
                                                 "pds2_1"
                                                 :fnums
                                                 (-1 -2 2 1))
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (induct
                                                     "pds2_1"
                                                     :name
                                                     "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (skolem 1 "x_")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "null_ol?")
                                                            (("2"
                                                              (expand
                                                               "mult_pd_pd"
                                                               -2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "search_error_term_by_idx")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "car_ol")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "add_ET")
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "cdr_ol")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "null_ol?")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "search_error_term_by_idx"
                                                                                           2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "car_ol")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "search_error_term_by_idx"
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "car_ol")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "search_error_term_by_idx"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "cdr_ol")
                                                                                (("2"
                                                                                  (expand
                                                                                   "null_ol?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "car_ol")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cons_ol")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "cons_ol")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (expand
                                                         "null_ol?")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (expand
                                                           "null_ol?")
                                                          (("4"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "null_ol?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "cons_ol")
                                      (("3"
                                        (expand "car_ol")
                                        (("3"
                                          (expand "cdr_ol")
                                          (("3"
                                            (expand "null_ol?")
                                            (("3" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1))
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("3" (postpone) nil nil)
                         ("4" (postpone) nil nil)
                         ("5" (postpone) nil nil)
                         ("6" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sum_of_modules_TCC1 0
  (sum_of_modules_TCC1-1 nil 3621077069 ("" (tcc))
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (sum_of_modules_nnreal 0
  (sum_of_modules_nnreal-1 nil 3620056534
   ("" (induct "pds")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sum_of_modules_append 0
  (sum_of_modules_append-1 nil 3621186862
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("h_" "t_"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "append" 1)
            (("2" (expand "sum_of_modules" 1 1)
              (("2" (expand "sum_of_modules" 1 2)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil))
   shostak))
 (first_noises_TCC1 0
  (first_noises_TCC1-1 nil 3620579570
   ("" (skeep) (("" (use "first_is_ol[nzEpsilon]") nil nil)) nil)
   ((Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (first_is_ol formula-decl nil indexed_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil))
   shostak))
 (first_noises_upd 0
  (first_noises_upd-2 nil 3629578919
   ("" (induct "N")
    (("1" (grind) nil) ("2" (grind) nil)
     ("3" (skolem 1 ("hN" "tN"))
      (("3" (flatten)
        (("3" (skeep)
          (("3" (expand "upd_noise" 1)
            (("3" (expand "null_ol?")
              (("3" (expand "car_ol")
                (("3" (lift-if 1)
                  (("3" (split 1)
                    (("1" (grind) nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (split 1)
                            (("1" (grind) nil)
                             ("2" (flatten)
                              (("2"
                                (expand "cdr_ol")
                                (("2"
                                  (expand "first_noises" 1 2)
                                  (("2"
                                    (expand "first" 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "first_noises" 1)
                                        (("2"
                                          (expand "first" 1)
                                          (("2"
                                            (lift-if 1)
                                            (("2"
                                              (split 1)
                                              (("1" (propax) nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (replaces
                                                       -3
                                                       :dir
                                                       RL)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -4 1))
                                                        (("1"
                                                          (expand
                                                           "ordered_list?"
                                                           -2
                                                           :assert?
                                                           none)
                                                          (("1"
                                                            (lift-if
                                                             -2)
                                                            (("1"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "lt_idx")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (abstract-and-then
                                                                         -1
                                                                         1
                                                                         (assert))
                                                                        nil)))))))))))))))))))
                                                     ("2"
                                                      (propax)
                                                      nil)))))))))))))))))))))))))))))
                         ("2" (flatten)
                          (("2" (grind) nil))))))))))))))))))))))))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (add_N const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (first_noises const-decl "Noise" affine nil)
    (Noise type-eq-decl nil affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (null_is_noise name-judgement "Noise" affine nil))
   nil)
  (first_noises_upd-1 nil 3628853122
   ("" (induct "N")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hN" "tN"))
      (("3" (flatten)
        (("3" (skeep)
          (("3" (expand "upd_noise" 1)
            (("3" (expand "null_ol?")
              (("3" (expand "car_ol")
                (("3" (lift-if 1)
                  (("3" (split 1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (split 1)
                            (("1" (grind) nil nil)
                             ("2" (flatten)
                              (("2"
                                (expand "cdr_ol")
                                (("2"
                                  (expand "first_noises" 1 2)
                                  (("2"
                                    (expand "first" 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "first_noises" 1)
                                        (("2"
                                          (expand "first" 1)
                                          (("2"
                                            (lift-if 1)
                                            (("2"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak))
 (first_ET_TCC1 0
  (first_ET_TCC1-1 nil 3621012759
   ("" (skeep) (("" (use "first_is_ol[nzBaseType]") nil nil)) nil)
   ((ErrorTerms type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (first_is_ol formula-decl nil indexed_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil))
   shostak))
 (last_first_ET 0
  (last_first_ET-1 nil 3621079802
   ("" (use "last_up_to_idx[nzBaseType]") (("" (grind) nil nil)) nil)
   ((first_ET const-decl "ErrorTerms" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (last_up_to_idx formula-decl nil indexed_list nil))
   shostak))
 (last_first_noises 0
  (last_first_noises-2 "" 3620752993
   (""
    (induct "N" :name "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (grind)
        (("2" (expand "last_ol" 1)
          (("2" (lift-if)
            (("2" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (< const-decl "bool" reals nil)
    (first_noises const-decl "Noise" affine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil)
    (pred type-eq-decl nil defined_types nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil))
   shostak)
  (last_first_noises-1 nil 3620566666
   ("" (induct "N")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("n_" "N_"))
      (("3" (flatten)
        (("3" (skeep)
          (("3" (use "ol_suffix[[nat, nzEpsilon], lt_idx[nzEpsilon]]")
            (("3" (assert)
              (("3" (inst?)
                (("3" (prop)
                  (("1" (grind)
                    (("1" (expand "last_ol" 1)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep*)
        (("4" (use "Noise_as_list") (("4" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((cons_ol const-decl "ordered_list" ordered_list nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak))
 (gnbi_lt_first_idem 0
  (gnbi_lt_first_idem-1 nil 3621712240
   (""
    (induct "N" :name "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "first_noises")
        (("2" (expand "first" 1)
          (("2" (lift-if)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (expand "cons_ol")
                  (("1" (expand "get_noise_by_idx" 1)
                    (("1" (expand "null_ol?")
                      (("1" (expand "car_ol")
                        (("1" (lift-if)
                          (("1" (split 1)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "cdr_ol")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons_ol const-decl "ordered_list" ordered_list nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (first_noises const-decl "Noise" affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil)
    (pred type-eq-decl nil defined_types nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil))
   shostak))
 (first_noises_zero_prop 0
  (first_noises_zero_prop-1 nil 3620665660
   ("" (grind)
    (("" (expand "first")
      (("" (lift-if)
        (("" (assert) (("" (prop) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((first def-decl "(prefixes(l))" indexed_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (first_noises const-decl "Noise" affine nil))
   shostak))
 (first_error_terms_recursive_def_TCC1 0
  (first_error_terms_recursive_def_TCC1-1 nil 3621005252 ("" (tcc))
   ((first_ET const-decl "ErrorTerms" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (first_ol const-decl "T" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil))
   nil))
 (first_error_terms_recursive_def_TCC2 0
  (first_error_terms_recursive_def_TCC2-1 nil 3621005252 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (first_error_terms_recursive_def_TCC3 0
  (first_error_terms_recursive_def_TCC3-1 nil 3621005252 ("" (tcc))
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (lt_idx const-decl "bool" indexed_list nil))
   nil))
 (first_error_terms_recursive_def_TCC4 0
  (first_error_terms_recursive_def_TCC4-1 nil 3621005252
   ("" (skeep*)
    (("" (grind)
      (("" (use "last_first_ET") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((first_ET const-decl "ErrorTerms" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (last_first_ET formula-decl nil affine nil))
   shostak))
 (first_error_terms_recursive_def 0
  (first_error_terms_recursive_def-1 nil 3621005274
   (""
    (induct "pds" :name
     "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]")
    (("1" (grind) nil nil)
     ("2" (skolem 1 "pds_")
      (("2" (flatten)
        (("2" (skolem 1 "pd_")
          (("2" (skeep)
            (("2" (expand "first_ET" 1 1)
              (("2" (expand "first" 1 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (inst -2 "n")
                      (("1" (expand "first_ET" -2 1)
                        (("1" (replaces -2)
                          (("1"
                            (case "cons_ol(pd_,
                                                                     append_ol(first_ET(pds_, n),
                                                                               IF search_error_term_by_idx(pds_, n) = 0 THEN empty_ErrorTerms
                                                                               ELSE cons_ol((n, search_error_term_by_idx(pds_, n)),
                                                                                            empty_ErrorTerms)
                                                                               ENDIF)) =
                                                                     append_ol(cons_ol(pd_,first_ET(pds_, n)),
                                                                               IF search_error_term_by_idx(pds_, n) = 0 THEN empty_ErrorTerms
                                                                               ELSE cons_ol((n, search_error_term_by_idx(pds_, n)),
                                                                                            empty_ErrorTerms)
                                                                               ENDIF)")
                            (("1" (replaces -1)
                              (("1"
                                (typepred "pd_")
                                (("1"
                                  (case "pd_`1 = n")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "first(pds_, n) = null")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "first(cons(pd_, pds_), n) = null")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (case
                                               "search_error_term_by_idx(cons(pd_, pds_),n) = pd_`2")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (case
                                                   "search_error_term_by_idx(pds_, n) = 0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (case
                                                       "NOT pd_`2 = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (case
                                                             "pd_ = (pd_`1,pd_`2)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "pd_ = (pd_`1,pd_`2)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "search_error_term_by_idx")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "first")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "pd_`1 < n")
                                    (("1"
                                      (hide -3 1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil)
                             ("3" (hide 2)
                              (("3"
                                (case "null?(pds_)")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "pd_")
                                    (("2"
                                      (expand "appendable_ol?")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("2"
                                            (expand "lt_idx")
                                            (("2"
                                              (expand "last_ol" 5 1)
                                              (("2"
                                                (hide 3 4)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "cons_ol")
                                                      (("2"
                                                        (expand
                                                         "first_ol")
                                                        (("2"
                                                          (lemma
                                                           "last_first_ET")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil)
                             ("5" (hide 2)
                              (("5"
                                (grind)
                                (("5"
                                  (typepred "pd_")
                                  (("5"
                                    (expand "ordered_list?")
                                    (("5"
                                      (expand "lt_idx")
                                      (("5"
                                        (grind)
                                        (("5"
                                          (hide -2)
                                          (("5"
                                            (expand "first" 2)
                                            (("5"
                                              (lift-if)
                                              (("5"
                                                (case
                                                 "NOT null?(pds_)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "car(pds_)`1 < n")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (prop)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (hide 2)
                              (("6"
                                (flatten)
                                (("6"
                                  (lemma "last_first_ET")
                                  (("6"
                                    (assert)
                                    (("6"
                                      (inst?)
                                      (("6" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (grind) nil nil)
                             ("8" (grind) nil nil)
                             ("9" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (grind)
        (("3" (lemma "last_first_ET")
          (("3" (assert) (("3" (inst?) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (last_ol def-decl "T" ordered_list nil)
    (last_first_ET formula-decl nil affine nil)
    (first_ol const-decl "T" ordered_list nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (first_ET const-decl "ErrorTerms" affine nil)
    (pred type-eq-decl nil defined_types nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BaseType type-eq-decl nil affine nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (prefixes const-decl "bool" list_more_props nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (first_noises_recursive_def_TCC1 0
  (first_noises_recursive_def_TCC1-1 nil 3620558244 ("" (tcc))
   ((null_ol? const-decl "bool" ordered_list nil)
    (first_noises const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (first_ol const-decl "T" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil))
   nil))
 (first_noises_recursive_def_TCC2 0
  (first_noises_recursive_def_TCC2-1 nil 3620558244 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (first_noises_recursive_def_TCC3 0
  (first_noises_recursive_def_TCC3-1 nil 3620579570 ("" (tcc))
   ((null_ol? const-decl "bool" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (lt_idx const-decl "bool" indexed_list nil))
   nil))
 (first_noises_recursive_def_TCC4 0
  (first_noises_recursive_def_TCC4-1 nil 3620579570
   ("" (skeep)
    (("" (expand "appendable_ol?")
      (("" (flatten)
        (("" (hide 3)
          (("" (grind)
            (("" (use "last_first_noises") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((appendable_ol? const-decl "bool" ordered_list nil)
    (last_first_noises formula-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (first_noises const-decl "Noise" affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   shostak))
 (first_noises_recursive_def 0
  (first_noises_recursive_def-4 "" 3629634143
   (""
    (induct "N" :name "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]")
    (("1" (grind) nil)
     ("2" (skolem 1 "N_")
      (("2" (flatten)
        (("2" (skolem 1 "ep_")
          (("2" (skeep)
            (("2" (expand "first_noises" 1 1)
              (("2" (expand "first" 1 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (inst -2 "n")
                      (("1" (expand "first_noises" -2 1)
                        (("1" (replaces -2)
                          (("1"
                            (case "cons_ol(ep_,
                                                                     append_ol(first_noises(N_, n),
                                                                               IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                               ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                            empty_noise)
                                                                               ENDIF)) =
                                                                     append_ol(cons_ol(ep_,first_noises(N_, n)),
                                                                               IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                               ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                            empty_noise)
                                                                               ENDIF)")
                            (("1" (replaces -1)
                              (("1"
                                (typepred "ep_")
                                (("1"
                                  (case "ep_`1 = n")
                                  (("1"
                                    (expand "first_noises" 1 2)
                                    (("1"
                                      (case
                                       "first_noises(N_, n) = empty_noise")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand
                                           "first"
                                           1
                                           1
                                           :assert?
                                           none)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "get_noise_by_idx(n, cons_ol(ep_, N_)) = ep_`2")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (case
                                                   "get_noise_by_idx(n, N_) = 0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (case
                                                       "NOT ep_`2 = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (case
                                                             "ep_=(ep_`1, ep_`2)")
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil)))))))
                                                       ("2"
                                                        (case
                                                         "ep_=(ep_`1, ep_`2)")
                                                        (("1"
                                                          (grind)
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil)))))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (replaces
                                                       -2
                                                       :dir
                                                       RL)
                                                      (("2"
                                                        (expand
                                                         "get_noise_by_idx"
                                                         1
                                                         :assert?
                                                         none)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (beta)
                                                                (("2"
                                                                  (lift-if
                                                                   2)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "ordered_list?"
                                                                         -3
                                                                         :assert?
                                                                         none)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -3)
                                                                            (("1"
                                                                              (expand_ol)
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "lt_idx")
                                                                              (("2"
                                                                                (replaces
                                                                                 -2
                                                                                 :dir
                                                                                 RL)
                                                                                (("2"
                                                                                  (expand
                                                                                   "car_ol")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))))))))))
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "ordered_list?"
                                                                             -2
                                                                             :assert?
                                                                             none)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "lt_idx")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "car_ol")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil)))))))))))))))))))))))))))))))))))))))
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil)))
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (grind)
                                                  nil)))))))))))
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "first_noises")
                                          (("2"
                                            (expand "first")
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (split 1)
                                                (("1" (expand_ol) nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "ordered_list?"
                                                       -2
                                                       :assert?
                                                       none)
                                                      (("2"
                                                        (lift-if -2)
                                                        (("2"
                                                          (split -2)
                                                          (("1"
                                                            (assert)
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "lt_idx")
                                                                (("2"
                                                                  (reveal
                                                                   1)
                                                                  (("2"
                                                                    (replaces
                                                                     -2)
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (abstract-and-then
                                                                           -1
                                                                           1
                                                                           (assert))
                                                                          nil)))
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand_ol)
                                                                          nil)))))))))))))))))))))))))))))))))))))))
                                   ("2"
                                    (case "ep_`1 < n")
                                    (("1"
                                      (hide -3 1)
                                      (("1" (grind) nil)))
                                     ("2" (grind) nil)))))))))
                             ("2" (hide-all-but 1) (("2" (grind) nil)))
                             ("3" (hide 2)
                              (("3"
                                (case "null_ol?(N_)")
                                (("1" (grind) nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "ep_")
                                    (("2"
                                      (expand "appendable_ol?")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("2"
                                            (expand "lt_idx")
                                            (("2"
                                              (expand "last_ol" 5 1)
                                              (("2"
                                                (hide 3 4)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1" (grind) nil)
                                                     ("2"
                                                      (expand
                                                       "cons_ol")
                                                      (("2"
                                                        (expand
                                                         "first_ol")
                                                        (("2"
                                                          (use
                                                           "last_first_noises")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))))))))))))))))))
                             ("4" (hide-all-but 1) (("4" (grind) nil)))
                             ("5" (hide 2)
                              (("5"
                                (typepred "ep_")
                                (("5"
                                  (grind)
                                  (("5"
                                    (expand "first" 2 1)
                                    (("5"
                                      (assert)
                                      (("5"
                                        (lift-if)
                                        (("5"
                                          (assert)
                                          (("5"
                                            (prop)
                                            (("5"
                                              (assert)
                                              nil)))))))))))))))))
                             ("6" (hide 2)
                              (("6"
                                (flatten)
                                (("6"
                                  (use "last_first_noises")
                                  (("6" (grind) nil)))))))
                             ("7" (grind) nil) ("8" (grind) nil)
                             ("9" (grind) nil)))))))))
                     ("2" (grind) nil)))))))))))))))))
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (case "last_ol(first_noises(N,n))`1 < n")
          (("1" (grind) nil)
           ("2" (use "last_first_noises") (("2" (grind) nil)))
           ("3" (grind) nil)))))))
     ("4" (grind) nil) ("5" (grind) nil) ("6" (grind) nil))
    nil)
   ((last_ol def-decl "T" ordered_list nil)
    (last_first_noises formula-decl nil affine nil)
    (first_ol const-decl "T" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (append def-decl "list[T]" list_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pred type-eq-decl nil defined_types nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (first_noises const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (first_noises_recursive_def-3 "" 3629580724
   (""
    (induct "N" :name "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]")
    (("1" (grind) nil)
     ("2" (skolem 1 "N_")
      (("2" (flatten)
        (("2" (skolem 1 "ep_")
          (("2" (skeep)
            (("2" (expand "first_noises" 1 1)
              (("2" (expand "first" 1 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (inst -2 "n")
                      (("1" (expand "first_noises" -2 1)
                        (("1" (replaces -2)
                          (("1"
                            (case "cons_ol(ep_,
                                                          append_ol(first_noises(N_, n),
                                                                    IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                    ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                 empty_noise)
                                                                    ENDIF)) =
                                                          append_ol(cons_ol(ep_,first_noises(N_, n)),
                                                                    IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                    ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                 empty_noise)
                                                                    ENDIF)")
                            (("1" (replaces -1)
                              (("1"
                                (typepred "ep_")
                                (("1"
                                  (case "ep_`1 = n")
                                  (("1"
                                    (expand "first_noises" 1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "first_noises(N_, n) = empty_noise")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (case
                                             "first[nzEpsilon](cons_ol(ep_, N_), n) = null")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (case
                                                 "get_noise_by_idx(n, cons_ol(ep_, N_)) = ep_`2")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "get_noise_by_idx(n, N_) = 0")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (case
                                                         "NOT ep_`2 = 0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (case
                                                               "ep_=(ep_`1, ep_`2)")
                                                              (("1"
                                                                (grind)
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil)))))))
                                                         ("2"
                                                          (case
                                                           "ep_=(ep_`1, ep_`2)")
                                                          (("1"
                                                            (grind)
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil)))))))
                                                     ("2"
                                                      (grind)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "get_noise_by_idx")
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil)))
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil)))))))
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "first_noises")
                                            (("2"
                                              (expand "first")
                                              (("2"
                                                (lift-if 1)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (expand_ol)
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "ordered_list?"
                                                         -2
                                                         :assert?
                                                         none)
                                                        (("2"
                                                          (lift-if -2)
                                                          (("2"
                                                            (split -2)
                                                            (("1"
                                                              (assert)
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "lt_idx")
                                                                  (("2"
                                                                    (reveal
                                                                     1)
                                                                    (("2"
                                                                      (replaces
                                                                       -2)
                                                                      (("2"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (abstract-and-then
                                                                             -1
                                                                             1
                                                                             (assert))
                                                                            nil)))
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand_ol)
                                                                            nil)))))))))))))))))))))))))))))))))))))))))
                                   ("2"
                                    (case "ep_`1 < n")
                                    (("1"
                                      (hide -3 1)
                                      (("1" (grind) nil)))
                                     ("2" (grind) nil)))))))))
                             ("2" (hide-all-but 1) (("2" (grind) nil)))
                             ("3" (hide 2)
                              (("3"
                                (case "null_ol?(N_)")
                                (("1" (grind) nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "ep_")
                                    (("2"
                                      (expand "appendable_ol?")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("2"
                                            (expand "lt_idx")
                                            (("2"
                                              (expand "last_ol" 5 1)
                                              (("2"
                                                (hide 3 4)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1" (grind) nil)
                                                     ("2"
                                                      (expand
                                                       "cons_ol")
                                                      (("2"
                                                        (expand
                                                         "first_ol")
                                                        (("2"
                                                          (use
                                                           "last_first_noises")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))))))))))))))))))
                             ("4" (hide-all-but 1) (("4" (grind) nil)))
                             ("5" (hide 2)
                              (("5"
                                (typepred "ep_")
                                (("5"
                                  (grind)
                                  (("5"
                                    (expand "first" 2 1)
                                    (("5"
                                      (assert)
                                      (("5"
                                        (lift-if)
                                        (("5"
                                          (assert)
                                          (("5"
                                            (assert)
                                            (("5"
                                              (prop)
                                              (("5"
                                                (assert)
                                                nil)))))))))))))))))))
                             ("6" (hide 2)
                              (("6"
                                (flatten)
                                (("6"
                                  (use "last_first_noises")
                                  (("6" (grind) nil)))))))
                             ("7" (grind) nil) ("8" (grind) nil)
                             ("9" (grind) nil)))))))))
                     ("2" (grind) nil)))))))))))))))))
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (case "last_ol(first_noises(N,n))`1 < n")
          (("1" (grind) nil)
           ("2" (use "last_first_noises") (("2" (grind) nil)))
           ("3" (grind) nil)))))))
     ("4" (grind) nil) ("5" (grind) nil) ("6" (grind) nil))
    nil)
   ((appendable_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (last_ol def-decl "T" ordered_list nil))
   nil)
  (first_noises_recursive_def-2 "" 3620752169
   (""
    (induct "N" :name "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]")
    (("1" (grind) nil nil)
     ("2" (skolem 1 "N_")
      (("2" (flatten)
        (("2" (skolem 1 "ep_")
          (("2" (skeep)
            (("2" (expand "first_noises" 1 1)
              (("2" (expand "first" 1 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (inst -2 "n")
                      (("1" (expand "first_noises" -2 1)
                        (("1" (replaces -2)
                          (("1"
                            (case "cons_ol(ep_,
                                               append_ol(first_noises(N_, n),
                                                         IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                         ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                      empty_noise)
                                                         ENDIF)) =
                                               append_ol(cons_ol(ep_,first_noises(N_, n)),
                                                         IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                         ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                      empty_noise)
                                                         ENDIF)")
                            (("1" (replaces -1)
                              (("1"
                                (typepred "ep_")
                                (("1"
                                  (case "ep_`1 = n")
                                  (("1"
                                    (expand "first_noises" 1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "first_noises(N_, n) = null")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (case
                                             "first[nzEpsilon](cons(ep_, N_), n) = null")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (case
                                                 "get_noise_by_idx(n, cons(ep_, N_)) = ep_`2")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "get_noise_by_idx(n, N_) = 0")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (case
                                                         "NOT ep_`2 = 0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (case
                                                               "ep_=(ep_`1, ep_`2)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "ep_=(ep_`1, ep_`2)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "get_noise_by_idx")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "first_noises")
                                            (("2"
                                              (expand "first")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "ep_`1 < n")
                                    (("1"
                                      (hide -3 1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil)
                             ("3" (hide 2)
                              (("3"
                                (case "null?(N_)")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "ep_")
                                    (("2"
                                      (expand "appendable_ol?")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("2"
                                            (expand "lt_idx")
                                            (("2"
                                              (expand "last_ol" 5 1)
                                              (("2"
                                                (hide 3 4)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "cons_ol")
                                                      (("2"
                                                        (expand
                                                         "first_ol")
                                                        (("2"
                                                          (use
                                                           "last_first_noises")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil)
                             ("5" (hide 2)
                              (("5"
                                (typepred "ep_")
                                (("5"
                                  (grind)
                                  (("5"
                                    (expand "first" 2 1)
                                    (("5"
                                      (assert)
                                      (("5"
                                        (lift-if)
                                        (("5"
                                          (assert)
                                          (("5"
                                            (assert)
                                            (("5"
                                              (prop)
                                              (("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (hide 2)
                              (("6"
                                (flatten)
                                (("6"
                                  (use "last_first_noises")
                                  (("6" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (grind) nil nil)
                             ("8" (grind) nil nil)
                             ("9" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (case "last_ol(first_noises(N,n))`1 < n")
          (("1" (grind) nil nil)
           ("2" (use "last_first_noises") (("2" (grind) nil nil)) nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((last_ol def-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil))
   shostak)
  (first_noises_recursive_def-1 nil 3620558269
   (""
    (induct "N" :name "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]")
    (("1" (grind) nil nil)
     ("2" (skolem 1 "N_")
      (("2" (flatten)
        (("2" (skolem 1 "ep_")
          (("2" (skeep)
            (("2" (expand "first_noises" 1 1)
              (("2" (expand "first" 1 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (inst -2 "n")
                      (("1" (expand "first_noises" -2 1)
                        (("1" (replaces -2)
                          (("1"
                            (case "cons_ol(ep_,
                         append_ol(first_noises(N_, n),
                                   IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                   ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                empty_noise)
                                   ENDIF)) =
                         append_ol(cons_ol(ep_,first_noises(N_, n)),
                                   IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                   ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                empty_noise)
                                   ENDIF)")
                            (("1" (replaces -1)
                              (("1"
                                (typepred "ep_")
                                (("1"
                                  (case "ep_`1 = n")
                                  (("1"
                                    (expand "first_noises" 1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "first_noises(N_, n) = null")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (case
                                             "first[nzEpsilon](cons(ep_, N_), n) = null")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (case
                                                 "get_noise_by_idx(n, cons(ep_, N_)) = ep_`2")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "get_noise_by_idx(n, N_) = 0")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (case
                                                         "NOT ep_`2 = 0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (case
                                                               "ep_=(ep_`1, ep_`2)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "ep_=(ep_`1, ep_`2)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "get_noise_by_idx")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "first_noises")
                                            (("2"
                                              (expand "first")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "ep_`1 < n")
                                    (("1"
                                      (hide -3 1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil)
                             ("3" (hide 2)
                              (("3"
                                (case "null?(N_)")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "ep_")
                                    (("2"
                                      (expand "appendable_ol?")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (prop)
                                          (("2"
                                            (expand "lt_idx")
                                            (("2"
                                              (expand "last_ol" 5 1)
                                              (("2"
                                                (hide 3 4)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "cons_ol")
                                                      (("2"
                                                        (expand
                                                         "first_ol")
                                                        (("2"
                                                          (use
                                                           "last_first_noises")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil)
                             ("5" (hide 2)
                              (("5"
                                (typepred "ep_")
                                (("5"
                                  (grind)
                                  (("5"
                                    (expand "first" 2 1)
                                    (("5"
                                      (assert)
                                      (("5"
                                        (lift-if)
                                        (("5"
                                          (assert)
                                          (("5"
                                            (assert)
                                            (("5"
                                              (prop)
                                              (("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (hide 2)
                              (("6"
                                (flatten)
                                (("6"
                                  (use "last_first_noises")
                                  (("6" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (grind) nil nil)
                             ("8" (grind) nil nil)
                             ("9" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (case "last_ol(first_noises(N,n))`1 < n")
          (("1" (grind) nil nil)
           ("2"
            (case "FORALL (Noise: Noise):

                    null?[[nat, nzEpsilon]](first_noises(Noise, n)) OR last_ol(first_noises(Noise, n))`1 < n")
            (("1" (grind) nil nil)
             ("2" (hide-all-but 1)
              (("2" (induct "Noise")
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (skolem 1 ("n_" "N_"))
                  (("3" (flatten)
                    (("3"
                      (use "ol_suffix[[nat, nzEpsilon], lt_idx[nzEpsilon]]")
                      (("3" (assert)
                        (("3" (prop)
                          (("1" (grind) nil nil)
                           ("2" (grind)
                            (("2" (expand "last_ol" 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skeep)
                  (("4" (use "Noise_as_list") (("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (skeep)
                (("3" (use "Noise_as_list") (("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((last_ol def-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil))
   nil))
 (eval_pd_noise_incremental 0
  (eval_pd_noise_incremental-2 "" 3620468671
   ("" (skeep)
    (("" (rewrites "first_noises_recursive_def")
      (("" (rewrites "eval_pd_noise_noise_append")
        (("1" (assert)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (grind) nil nil)
               ("2" (generalize-skolem-constants)
                (("1" (induct "pds1_1")
                  (("1" (grind) nil nil)
                   ("2" (prop) (("2" (grind) nil nil)) nil)
                   ("3" (skeep)
                    (("3" (skolem 1 ("N1" "n1"))
                      (("3" (prop)
                        (("1" (expand "eval_pd_noise" 2)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replaces -2)
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (inst?)
                                (("3" (grind) nil nil))
                                nil)
                               ("4" (grind) nil nil)
                               ("5" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4" (grind) nil nil) ("5" (grind) nil nil))
                  nil)
                 ("2" (assert) (("2" (grind) nil nil)) nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (grind)
            (("2" (lemma "last_first_noises")
              (("2" (inst -1 "N" "n")
                (("2" (expand "first_noises") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil))
        nil))
      nil))
    nil)
   ((odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (first_noises_recursive_def formula-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (last_first_noises formula-decl nil affine nil)
    (first_ol const-decl "T" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (list_induction formula-decl nil list_adt nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eval_pd_noise_noise_append formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)
  (eval_pd_noise_incremental-1 nil 3620400909
   ("" (skeep)
    (("" (expand "eval_pd_noise" 1 1)
      (("" (lift-if)
        (("" (split 1)
          (("1" (prop)
            (("1" (lemma "first_null_prop[Epsilon]")
              (("1" (inst? -1 ("m" "n"))
                (("1" (assert)
                  (("1" (replaces -1)
                    (("1" (grind)
                      (("1" (use "first_Noise_null_prop")
                        (("1" (prop)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten 1)
            (("2" (split 2)
              (("1" (prop)
                (("1" (use "eval_pd_noise_null_prop")
                  (("1" (prop)
                    (("1" (replaces -1)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten 1)
                (("2" (split 2)
                  (("1" (prop)
                    (("1" (case "n > last_idx(N)")
                      (("1" (use "first_all_prop[Epsilon]")
                        (("1" (assert)
                          (("1" (replaces -1)
                            (("1" (use "first_all_prop[Epsilon]")
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (use "get_noise_by_idx_zero_prop")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand ">") (("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (partial_eval_pd_noise_upper_bound 0
  (partial_eval_pd_noise_upper_bound-1 nil 3620991149
   ("" (skolem 1 ("N" "_" "pds"))
    (("" (induct "n")
      (("1" (use "first_noises_zero_prop")
        (("1" (replaces -1)
          (("1" (use "first_zero_prop[nzBaseType]")
            (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (use "eval_pd_noise_incremental")
          (("2" (replaces -1)
            (("2"
              (case "abs(eval_pd_noise(pds, first_noises(N, j))) + abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N))<=
                         sum_of_modules(first(pds, j)) + abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N))")
              (("1"
                (case "abs(eval_pd_noise(pds, first_noises(N, j)) +
                             search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N)) <= abs(eval_pd_noise(pds, first_noises(N, j))) +
                             abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N))")
                (("1" (hide -3)
                  (("1"
                    (case "sum_of_modules(first(pds, j)) +
                                  abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N)) <= sum_of_modules(first(pds, j+1))")
                    (("1" (grind) nil nil)
                     ("2" (hide-all-but 1)
                      (("2" (use "first_error_terms_recursive_def")
                        (("2" (expand "first_ET")
                          (("2" (replaces -1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (grind)
                                  (("1"
                                    (use "sum_of_modules_append")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (use "first_is_ol[nzBaseType]")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "append_ol")
                                  (("2"
                                    (use "sum_of_modules_append")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (case
                                         "abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N)) <= abs(search_error_term_by_idx(pds, j))")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (use "abs_mult")
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (case
                                                 "abs(get_noise_by_idx(j, N)) <= 1")
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_pos_le1")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "abs(search_error_term_by_idx(pds, j))"
                                                     "abs(get_noise_by_idx(j, N))"
                                                     "1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   "get_noise_by_idx(j, N)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (use "first_is_ol[nzBaseType]")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (first_noises const-decl "Noise" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (prefixes const-decl "bool" list_more_props nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (first_zero_prop formula-decl nil indexed_list nil)
    (first_noises_zero_prop formula-decl nil affine nil)
    (eval_pd_noise_incremental formula-decl nil affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (first_ET const-decl "ErrorTerms" affine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (pds skolem-const-decl "ErrorTerms" affine nil)
    (j skolem-const-decl "nat" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sum_of_modules_append formula-decl nil affine nil)
    (first_error_terms_recursive_def formula-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (mult_ac_ac_TCC1 0
  (mult_ac_ac_TCC1-1 nil 3619884927
   ("" (skeep)
    (("" (expand "appendable_ol?")
      (("" (flatten)
        (("" (expand "lt_idx")
          (("" (expand "add_ET" 3)
            (("" (lift-if)
              (("" (split 3)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "null_ol?")
                    (("2" (expand "empty_ErrorTerms")
                      (("2" (expand "cons_ol")
                        (("2" (expand "first_ol")
                          (("2" (typepred "newidx")
                            (("2" (use "mult_pd_pd_last_bound")
                              (("2"
                                (expand "null_ol?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "NOT null?[[nat, nzBaseType]](pd(Xa1)) AND
       NOT null?[[nat, nzBaseType]](pd(Xa2))")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand ">=")
                                          (("1"
                                            (hide-all-but (-1 -2 4))
                                            (("1"
                                              (name-replace
                                               "stopRW"
                                               "last_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)))`1")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (mult_pd_pd_last_bound formula-decl nil affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first_ol const-decl "T" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil))
   shostak))
 (mul_noise_value_TCC1 0
  (mul_noise_value_TCC1-1 nil 3620056359 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (nnreal type-eq-decl nil real_types nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (/= const-decl "boolean" notequal nil)
    (sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil))
   nil))
 (som_inc 0
  (som_inc-1 nil 3620071050
   ("" (skolem 1 ("n" "_"))
    ((""
      (induct "pds" :name
       "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "first" 1 1)
            (("2" (case "x`1 < 1 + n")
              (("1" (assert)
                (("1" (expand "sum_of_modules" 1 1)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "cons_ol")
                          (("2" (hide 1)
                            (("2" (expand "first" 1 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "cons_ol")
                                    (("1"
                                      (expand "sum_of_modules" 1 2)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "x`1 = n")
                                    (("1"
                                      (hide -2 1)
                                      (("1"
                                        (case "first(ol, n) = null")
                                        (("1"
                                          (case
                                           "search_error_term_by_idx(ol, n) = 0")
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (hide-all-but (1 -2))
                                            (("2"
                                              (typepred
                                               "x::[nat,BaseType]")
                                              (("2"
                                                (expand
                                                 "ordered_list?")
                                                (("2"
                                                  (expand "lt_idx")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (expand
                                                       "search_error_term_by_idx")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 -1))
                                          (("2"
                                            (typepred
                                             "x::[nat,BaseType]")
                                            (("2"
                                              (grind)
                                              (("2"
                                                (expand "first")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (pred type-eq-decl nil defined_types nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BaseType type-eq-decl nil affine nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (prefixes const-decl "bool" list_more_props nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil))
   shostak))
 (eval_pd_noise_inc_TCC1 0
  (eval_pd_noise_inc_TCC1-1 nil 3620579570
   ("" (skeep) (("" (use "first_is_ol[nzEpsilon]") nil nil)) nil)
   ((Noise type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (first_is_ol formula-decl nil indexed_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil))
   shostak))
 (eval_pd_noise_inc 0
  (eval_pd_noise_inc-1 nil 3621087380
   ("" (skeep)
    (("" (lemma "eval_pd_noise_incremental")
      ((""
        (inst -1 "N" "n"
         "mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2))")
        (("" (assert)
          (("" (expand "first_noises")
            (("" (replaces -1)
              (("" (assert)
                (("" (use "search_ET_in_mult_pd_pd")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_pd_noise_incremental formula-decl nil affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (search_ET_in_mult_pd_pd formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (eval_ac_noise_inc 0
  (eval_ac_noise_inc-1 nil 3620400423
   ("" (skeep)
    (("" (expand "eval_ac_noise")
      (("" (use "eval_pd_noise_incremental") nil nil)) nil))
    nil)
   ((eval_ac_noise const-decl "real" affine nil)
    (eval_pd_noise_incremental formula-decl nil affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil))
   shostak))
 (eval_ac_noise_mult_inc 0
  (eval_ac_noise_mult_inc-1 nil 3620400368
   ("" (skeep)
    (("" (use "eval_ac_noise_inc")
      (("" (replaces -1)
        (("" (use "eval_ac_noise_inc")
          (("" (replaces -1) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((eval_ac_noise_inc formula-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (first_noises const-decl "Noise" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_of_modules_decomp 0
  (sum_of_modules_decomp-1 nil 3620400247
   ("" (skeep)
    (("" (use "som_inc")
      (("" (replaces -1)
        (("" (use "som_inc")
          (("" (replaces -1) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((som_inc formula-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (mul_ac_ac_noise_incremental_bound 0
  (mul_ac_ac_noise_incremental_bound-1 nil 3620382968
   ("" (induct "n")
    (("1" (skolem 1 ("N" "A" "B"))
      (("1" (rewrites "first_zero_prop[[nzBaseType]]")
        (("1" (rewrites "first_zero_prop[[nzBaseType]]")
          (("1" (rewrites "first_noises_zero_prop")
            (("1" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skolem 1 ("N" "A" "B"))
        (("2" (inst -1 "N" "A" "B")
          (("2" (rewrites "sum_of_modules_decomp")
            (("2"
              (case "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) - cv(A) * cv(B) -
                                                                  eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)))
                                                        + sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                               + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                               + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                       <=
                                                       sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                               sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                               + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                               + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))")
              (("1" (hide -2)
                (("1"
                  (case "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) - cv(A) * cv(B) -
                                                                              eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)))
                                                                          + sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          <=
                                                                          sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                           sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                           + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                           + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                   IMPLIES
                                                                   abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) - cv(A) * cv(B) -
                                                                              eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)))
                                                                          + sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) * abs(get_noise_by_idx(j, N))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j)) * abs(get_noise_by_idx(j, N))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) * abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N))
                                                                          <=
                                                                          sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                           sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                           + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                           + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))")
                  (("1" (assert)
                    (("1" (hide -2)
                      (("1"
                        (case "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                                             eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                                             - cv(A) * cv(B))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * sum_of_modules(first(pd(A), j)) *
                                                                          abs(search_error_term_by_idx(pd(B), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * sum_of_modules(first(pd(B), j)) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N)) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                          * abs(search_error_term_by_idx(pd(B), j))
                                                                         <=
                                                                         sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                          sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                  IMPLIES
                                                                  abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                                             eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                                             - cv(A) * cv(B))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(eval_pd_noise(pd(A),first_noises(N, j))) *
                                                                          abs(search_error_term_by_idx(pd(B), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(eval_pd_noise(pd(B),first_noises(N, j))) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N)) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                          * abs(search_error_term_by_idx(pd(B), j))
                                                                         <=
                                                                         sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                          sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))")
                        (("1" (assert)
                          (("1" (hide -2)
                            (("1"
                              (case "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                         eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                         - cv(A) * cv(B))
                                                     +
                                                     abs(eval_pd_noise(pd(A), first_noises(N, j))) * abs(get_noise_by_idx(j, N)) *
                                                      abs(search_error_term_by_idx(pd(B), j))
                                                     +
                                                     abs(eval_pd_noise(pd(B), first_noises(N, j))) * abs(get_noise_by_idx(j, N)) *
                                                      abs(search_error_term_by_idx(pd(A), j))
                                                     +
                                                     abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N)) *
                                                      abs(search_error_term_by_idx(pd(A), j))
                                                      * abs(search_error_term_by_idx(pd(B), j))
                                                     <=
                                                     abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) +
                                                      sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                      + sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j))
                                                      + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                              IMPLIES
                                              abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                         eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                         - cv(A) * cv(B)
                                                     +
                                                     eval_pd_noise(pd(A), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                      search_error_term_by_idx(pd(B), j)
                                                     +
                                                     eval_pd_noise(pd(B), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                      search_error_term_by_idx(pd(A), j)
                                                     +
                                                     get_noise_by_idx(j, N) * get_noise_by_idx(j, N) *
                                                      search_error_term_by_idx(pd(A), j)
                                                      * search_error_term_by_idx(pd(B), j))
                                                     <=
                                                     abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) +
                                                      sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                      + sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j))
                                                      + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (lemma "minus_add")
                                    (("1"
                                      (inst
                                       -1
                                       "eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j))"
                                       "           eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (lemma "identity_add")
                                          (("1"
                                            (inst
                                             -1
                                             "           -eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))")
                                            (("1"
                                              (case
                                               "0 = - (search_error_term_by_idx(pd(A), j)*cv(B)+search_error_term_by_idx(pd(B), j)*cv(A)) * get_noise_by_idx(j, N) + search_error_term_by_idx(pd(A), j)*get_noise_by_idx(j, N)*cv(B) + search_error_term_by_idx(pd(B), j)*get_noise_by_idx(j, N)*cv(A)")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1 :dir RL)
                                                  (("1"
                                                    (case
                                                     "(-eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)) +
                                                    (-(search_error_term_by_idx(pd(A), j) * cv(B) +
                                                        search_error_term_by_idx(pd(B), j) * cv(A))
                                                      * get_noise_by_idx(j, N)
                                                      + search_error_term_by_idx(pd(A), j) * get_noise_by_idx(j, N) * cv(B)
                                                      + search_error_term_by_idx(pd(B), j) * get_noise_by_idx(j, N) * cv(A))) =
                                       - eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j+1))
                                       + search_error_term_by_idx(pd(A), j) * get_noise_by_idx(j, N) * cv(B)
                                       + search_error_term_by_idx(pd(B), j) * get_noise_by_idx(j, N) * cv(A)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j))
                                           + cv(A) * get_noise_by_idx(j, N) * search_error_term_by_idx(pd(B), j)
                                           + cv(B) * get_noise_by_idx(j, N) * search_error_term_by_idx(pd(A), j)
                                                      +
                                                      eval_pd_noise(pd(A), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                       search_error_term_by_idx(pd(B), j)
                                                      +
                                                      eval_pd_noise(pd(B), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                       search_error_term_by_idx(pd(A), j)
                                                      +
                                                      get_noise_by_idx(j, N) * get_noise_by_idx(j, N) *
                                                       search_error_term_by_idx(pd(A), j)
                                                       * search_error_term_by_idx(pd(B), j)
                                           = eval_ac_noise(A, first_noises(N, 1 +j)) * eval_ac_noise(B, first_noises(N, 1+j))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (use
                                                               "eval_ac_noise_mult_inc")
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (use
                                                           "eval_pd_noise_inc")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (prop)
                                  (("2"
                                    (case
                                     "FORALL(rA,rB,rC,rD,rE,rF:real):
                                                    abs(rA)
                                                           +
                                                           abs(rB) * abs(rC) *
                                                            abs(rD)
                                                           +
                                                           abs(rF) * abs(rC) *
                                                            abs(rE)
                                                           +
                                                           abs(rC) * abs(rC) *
                                                            abs(rE)
                                                            * abs(rD) >= abs( rA + rB * rC * rD + rF * rC * rE + rC * rC * rE * rD)")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand ">=")
                                          (("2"
                                            (use "abs_mult")
                                            (("2"
                                              (lemma "abs_mult")
                                              (("2"
                                                (inst -1 "rC*rC" "rD")
                                                (("2"
                                                  (lemma "abs_mult")
                                                  (("2"
                                                    (inst -1 "rC" "rC")
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (lemma
                                                               "abs_mult")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "rC*rE"
                                                                 "rF")
                                                                (("2"
                                                                  (lemma
                                                                   "abs_mult")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "rC"
                                                                     "rE")
                                                                    (("2"
                                                                      (replaces
                                                                       -1
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (lemma
                                                                           "abs_mult")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "rB*rC"
                                                                             "rD")
                                                                            (("2"
                                                                              (lemma
                                                                               "abs_mult")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "rB"
                                                                                 "rC")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (use
                                                                                       "triangle")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (prop)
                            (("2" (assert)
                              (("2"
                                (use
                                 "partial_eval_pd_noise_upper_bound")
                                (("2"
                                  (lemma
                                   "both_sides_times_pos_le1_imp")
                                  (("2"
                                    (inst
                                     -1
                                     "abs(get_noise_by_idx(j, N)) * abs(search_error_term_by_idx(pd(B), j))"
                                     "abs(eval_pd_noise(pd(A), first_noises(N, j)))"
                                     "sum_of_modules(first(pd(A), j))")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (lemma
                                           "partial_eval_pd_noise_upper_bound")
                                          (("2"
                                            (inst? -1 ("pds" "pd(B)"))
                                            (("2"
                                              (lemma
                                               "both_sides_times_pos_le1_imp")
                                              (("2"
                                                (inst
                                                 -1
                                                 "abs(get_noise_by_idx(j, N)) * abs(search_error_term_by_idx(pd(A), j))"
                                                 "abs(eval_pd_noise(pd(B), first_noises(N, j)))"
                                                 "sum_of_modules(first(pd(B), j))")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (prop)
                      (("2" (case "abs(get_noise_by_idx(j, N)) <= 1")
                        (("1" (assert)
                          (("1" (lemma "both_sides_times_pos_le1_imp")
                            (("1"
                              (inst -1
                               "abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))"
                               "abs(get_noise_by_idx(j, N))" "1")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "both_sides_times_pos_le1_imp")
                                  (("1"
                                    (inst
                                     -1
                                     "abs(get_noise_by_idx(j, N)) *
                           (abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)))"
                                     "abs(get_noise_by_idx(j, N))"
                                     "1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (lemma
                                           "both_sides_times_pos_le1_imp")
                                          (("1"
                                            (inst
                                             -1
                                             "sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))"
                                             "abs(get_noise_by_idx(j, N))"
                                             "1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_pos_le1_imp")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))"
                                                     "abs(get_noise_by_idx(j, N))"
                                                     "1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (use
                                                         "first_is_ol[nzBaseType]")
                                                        (("2"
                                                          (lemma
                                                           "sum_of_modules_nnreal")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "first(pd(B), j)")
                                                            (("2"
                                                              (expand
                                                               ">=")
                                                              (("2"
                                                                (use
                                                                 "pos_times_le")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (lemma
                                                 "sum_of_modules_nnreal")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "first(pd(A), j)")
                                                  (("1"
                                                    (expand ">=")
                                                    (("1"
                                                      (use
                                                       "pos_times_le")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "first_is_ol[nzBaseType]")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (typepred "get_noise_by_idx(j, N)")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (rewrites "both_sides_plus_le1")
                  (("2" (rewrites "both_sides_plus_le1")
                    (("2" (rewrites "both_sides_plus_le1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (search_error_term_by_idx def-decl "BaseType" affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (partial_eval_pd_noise_upper_bound formula-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (identity_add formula-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval_pd_noise_inc formula-decl nil affine nil)
    (eval_ac_noise_mult_inc formula-decl nil affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_add formula-decl nil number_fields nil)
    (triangle formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sum_of_modules_nnreal judgement-tcc nil affine nil)
    (pos_times_le formula-decl nil real_props nil)
    (first_is_ol formula-decl nil indexed_list nil)
    (B skolem-const-decl "AffineCombination" affine nil)
    (j skolem-const-decl "nat" affine nil)
    (A skolem-const-decl "AffineCombination" affine nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (sum_of_modules_decomp formula-decl nil affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (empty_noise const-decl "Noise" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first_noises_zero_prop formula-decl nil affine nil)
    (first_zero_prop formula-decl nil indexed_list nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (prefixes const-decl "bool" list_more_props nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (mul_noise_value_is_Epsilon 0
  (mul_noise_value_is_Epsilon-3 "" 3620572796
   ("" (skeep)
    (("" (expand "mul_noise_value")
      (("" (lemma "mul_ac_ac_noise_incremental_bound")
        ((""
          (inst? -1
           ("n"
            "max(last_idx(N),max(last_idx(pd(Xa1)),last_idx(pd(Xa2))))+1"))
          (("1" (inst -1 "N" "Xa1" "Xa2")
            (("1"
              (case "first_noises(N,
                                                              max(last_idx(N),
                                                                  max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = N")
              (("1" (replaces -1)
                (("1"
                  (case "first(pd(Xa1),
                                                                      max(last_idx(N),
                                                                          max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = pd(Xa1)")
                  (("1" (replaces -1)
                    (("1"
                      (case "first(pd(Xa2),
                                                                              max(last_idx(N),
                                                                                  max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = pd(Xa2)")
                      (("1" (replaces -1)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "FORALL (x,y:real): abs(x) <= y  IMPLIES x >= -y")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (expand ">=")
                                              (("1"
                                                (use
                                                 "div_mult_pos_neg_le2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (ground)
                                  (("2"
                                    (hide 1)
                                    (("2"
                                      (case
                                       "FORALL (x,y:real): abs(x) <= y  IMPLIES x <= y")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (use
                                               "div_mult_pos_neg_le1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (use "first_all_prop[nzBaseType]")
                          (("1" (assert) nil nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (use "first_all_prop[nzBaseType]")
                      (("1" (assert) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "first_noises")
                  (("2" (use "first_all_prop[nzEpsilon]")
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mul_noise_value const-decl "real" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Xa2 skolem-const-decl "AffineCombination" affine nil)
    (Xa1 skolem-const-decl "AffineCombination" affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (N skolem-const-decl "Noise" affine nil)
    (Noise type-eq-decl nil affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (first_noises const-decl "Noise" affine nil)
    (prefixes const-decl "bool" list_more_props nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_neg_le1 formula-decl nil extra_real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_le2 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (first_all_prop formula-decl nil indexed_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (mul_ac_ac_noise_incremental_bound formula-decl nil affine nil))
   shostak)
  (mul_noise_value_is_Epsilon-2 nil 3620148486
   ("" (skeep)
    (("" (expand "mul_noise_value")
      (("" (lemma "mul_ac_ac_noise_incremental_bound")
        ((""
          (inst? -1
           ("n"
            "max(last_idx(N),max(last_idx(pd(Xa1)),last_idx(pd(Xa2))))+1"))
          (("1" (inst -1 "N" "Xa1" "Xa2")
            (("1"
              (case "first(N,
                                            max(last_idx(N),
                                                max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = N")
              (("1" (replaces -1)
                (("1"
                  (case "first(pd(Xa1),
                                                max(last_idx(N),
                                                    max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = pd(Xa1)")
                  (("1" (replaces -1)
                    (("1"
                      (case "first(pd(Xa2),
                                                    max(last_idx(N),
                                                        max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = pd(Xa2)")
                      (("1" (replaces -1)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "FORALL (x,y:real): abs(x) <= y  IMPLIES x >= -y")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (expand ">=")
                                              (("1"
                                                (use
                                                 "div_mult_pos_neg_le2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (ground)
                                  (("2"
                                    (hide 1)
                                    (("2"
                                      (case
                                       "FORALL (x,y:real): abs(x) <= y  IMPLIES x <= y")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (use
                                               "div_mult_pos_neg_le1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (use "first_all_prop[real]")
                          (("1" (assert) nil nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (use "first_all_prop[real]")
                      (("1" (assert) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (use "first_all_prop[Epsilon]")
                  (("1" (assert) nil nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil))
   nil)
  (mul_noise_value_is_Epsilon-1 nil 3620056359
   ("" (skeep)
    (("" (lemma "mul_noise_value_bounds")
      (("" (inst -1 "N" "Xa1" "Xa2")
        (("" (grind)
          (("1" (hide -2) (("1" (rewrite "div_mult_pos_le1") nil nil))
            nil)
           ("2" (hide -1)
            (("2" (expand ">=")
              (("2" (rewrite "div_mult_pos_le2") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (som_zero 0
  (som_zero-1 nil 3621350166
   (""
    (induct "pds" :name
     "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skolem 1 "x_")
        (("2" (flatten) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (pred type-eq-decl nil defined_types nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil))
   shostak))
 (epn_aET__nnull_pds_TCC1 0
  (epn_aET__nnull_pds_TCC1-1 nil 3621356082 ("" (tcc))
   ((/= const-decl "boolean" notequal nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (lt_idx const-decl "bool" indexed_list nil))
   nil))
 (epn_aET__nnull_pds 0
  (epn_aET__nnull_pds-1 nil 3621360085
   ("" (skeep)
    (("" (lift-if)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "cons_ol")
            (("1" (expand "empty_ErrorTerms")
              (("1" (expand "add_ET")
                (("1" (assert)
                  (("1" (expand "null_ol?")
                    (("1" (case "null?[[nat, nzBaseType]](pds)")
                      (("1" (hide -2)
                        (("1" (assert)
                          (("1" (expand "cons_ol")
                            (("1" (expand "empty_ErrorTerms")
                              (("1"
                                (expand "eval_pd_noise")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lift-if)
                          (("2" (split 3)
                            (("1" (flatten)
                              (("1"
                                (expand "cons_ol")
                                (("1"
                                  (lemma "eval_pd_noise_append")
                                  (("1"
                                    (inst
                                     -1
                                     "N"
                                     "cons_ol((n,x),null)"
                                     "pds")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (expand "cons_ol")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "car_ol")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_pd_noise def-decl "real" affine nil)
    (eval_pd_noise_append formula-decl nil affine nil)
    (append def-decl "list[T]" list_props nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (epn_mpp_null_pds1 0
  (epn_mpp_null_pds1-1 nil 3621345925
   ("" (skeep)
    (("" (name "L" "length(pds)+length(N)")
      (("" (generalize "N" "N")
        (("" (generalize "pds" "pds")
          (("1" (generalize "L" "L")
            (("1" (induct "L" :name "NAT_induction")
              (("1" (skeep)
                (("1" (skeep)
                  (("1" (expand "mult_pd_pd" 1)
                    (("1" (expand "null_ol")
                      (("1" (expand "null_ol?")
                        (("1" (lift-if)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (case-replace "pds!1=null")
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (expand "eval_pd_noise")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "car_ol")
                                (("2"
                                  (expand "cdr_ol")
                                  (("2"
                                    (lemma "epn_aET__nnull_pds")
                                    (("2"
                                      (inst
                                       -1
                                       "N!1"
                                       "car(pds!1)`1"
                                       "mult_pd_pd(x1, x2, null, cdr(pds!1))"
                                       "car(pds!1)`2 * x1")
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -2 "j-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "cdr_ol(pds!1)"
                                                     "N!1")
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (expand
                                                         "cdr_ol")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "cons_ol")
                                                            (("1"
                                                              (expand
                                                               "empty_ErrorTerms")
                                                              (("1"
                                                                (lemma
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N!1"
                                                                   "cons_ol((car(pds!1)`1, car(pds!1)`2 * x1), null)")
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "eval_pd_noise"
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "get_noise_by_idx(car(pds!1)`1, N!1) * (car(pds!1)`2 * x1) +
                              x1 * eval_pd_noise(cdr(pds!1), N!1) = x1 * (get_noise_by_idx(car(pds!1)`1, N!1) * car(pds!1)`2  +
                              eval_pd_noise(cdr(pds!1), N!1))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "eval_pd_noise_rec_pds_def")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N!1"
                                                                                       "cons_ol((car(pds!1)`1, car(pds!1)`2), null)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "null_ol?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "cons_ol")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cdr_ol")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "car_ol")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "eval_pd_noise"
                                                                                                 -1
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1
                                                                                                   :dir
                                                                                                   RL)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "eval_pd_noise_append")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "N!1"
                                                                                                       "cons_ol((car(pds!1)`1, car(pds!1)`2), null)"
                                                                                                       "cdr_ol(pds!1)")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "cons_ol")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "cdr_ol")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "append_ol")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "append")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "append")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "cons((car(pds!1)`1, car(pds!1)`2), cdr(pds!1)) = pds!1")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (1
                                                                                                                        4))
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "list_cons_eta[[nat,nzBaseType]]")
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "(car(pds!1)`1, car(pds!1)`2) = car(pds!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "cons_ol")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "appendable_ol?")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "cdr_ol")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "lt_idx")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "last_ol")
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "pds!1")
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (2
                                                                                                                          -1
                                                                                                                          5
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 -2 4))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (1 -2 4))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "mult_pd_pd_preserves_order_2")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "x1"
                                                       "x2"
                                                       "pds!1")
                                                      (("1"
                                                        (expand
                                                         "null_ol?")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (expand
                                                               "car_ol")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "/=")
                                                  (("2"
                                                    (inst -2 "j-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "cdr_ol(pds!1)"
                                                         "N!1")
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N!1"
                                                                   "pds!1")
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "cdr_ol")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mult_pd_pd_preserves_order_2 formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (first_ol const-decl "T" ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (eval_pd_noise_append formula-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pds!1 skolem-const-decl "ErrorTerms" affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (epn_aET__nnull_pds formula-decl nil affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval_pd_noise def-decl "real" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (epn_mpp_null_pds2 0
  (epn_mpp_null_pds2-1 nil 3621359750
   ("" (skeep)
    (("" (name "L" "length(pds)+length(N)")
      (("" (generalize "N" "N")
        (("" (generalize "pds" "pds")
          (("1" (generalize "L" "L")
            (("1" (induct "L" :name "NAT_induction")
              (("1" (skeep)
                (("1" (skeep)
                  (("1" (expand "mult_pd_pd" 1)
                    (("1" (expand "null_ol")
                      (("1" (expand "null_ol?")
                        (("1" (lift-if)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (case-replace "pds!1=null")
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (expand "eval_pd_noise")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "car_ol")
                                (("2"
                                  (expand "cdr_ol")
                                  (("2"
                                    (lemma "epn_aET__nnull_pds")
                                    (("2"
                                      (inst
                                       -1
                                       "N!1"
                                       "car(pds!1)`1"
                                       "mult_pd_pd(x1, x2,cdr(pds!1),null)"
                                       "car(pds!1)`2 * x2")
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -2 "j-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "cdr_ol(pds!1)"
                                                     "N!1")
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (expand
                                                         "cdr_ol")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "cons_ol")
                                                            (("1"
                                                              (expand
                                                               "empty_ErrorTerms")
                                                              (("1"
                                                                (lemma
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N!1"
                                                                   "cons_ol((car(pds!1)`1, car(pds!1)`2 * x2), null)")
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "eval_pd_noise"
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "get_noise_by_idx(car(pds!1)`1, N!1) * (car(pds!1)`2 * x2) +
                                                                            x2 * eval_pd_noise(cdr(pds!1), N!1) = x2 * (get_noise_by_idx(car(pds!1)`1, N!1) * car(pds!1)`2  +
                                                                            eval_pd_noise(cdr(pds!1), N!1))")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "eval_pd_noise_rec_pds_def")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "N!1"
                                                                                       "cons_ol((car(pds!1)`1, car(pds!1)`2), null)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "null_ol?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "cons_ol")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cdr_ol")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "car_ol")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "eval_pd_noise"
                                                                                                 -1
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1
                                                                                                   :dir
                                                                                                   RL)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "eval_pd_noise_append")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "N!1"
                                                                                                       "cons_ol((car(pds!1)`1, car(pds!1)`2), null)"
                                                                                                       "cdr_ol(pds!1)")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "cons_ol")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "cdr_ol")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "append_ol")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "append")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "append")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "cons((car(pds!1)`1, car(pds!1)`2), cdr(pds!1)) = pds!1")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (1
                                                                                                                        4))
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "list_cons_eta[[nat,nzBaseType]]")
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "(car(pds!1)`1, car(pds!1)`2) = car(pds!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "cons_ol")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "appendable_ol?")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "cdr_ol")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "lt_idx")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "last_ol")
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "pds!1")
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (2
                                                                                                                          -1
                                                                                                                          5
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 -2 4))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (1 -2 4))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "mult_pd_pd_preserves_order_1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "x1"
                                                       "x2"
                                                       "pds!1")
                                                      (("1"
                                                        (expand
                                                         "null_ol?")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (expand
                                                               "car_ol")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "/=")
                                                  (("2"
                                                    (inst -2 "j-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "cdr_ol(pds!1)"
                                                         "N!1")
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (expand
                                                             "cdr_ol")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N!1"
                                                                   "pds!1")
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "cdr_ol")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mult_pd_pd_preserves_order_1 formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (first_ol const-decl "T" ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (eval_pd_noise_append formula-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pds!1 skolem-const-decl "ErrorTerms" affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (epn_aET__nnull_pds formula-decl nil affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval_pd_noise def-decl "real" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil))
 (epn_over_last_is_zero_TCC1 0
  (epn_over_last_is_zero_TCC1-1 nil 3621707863
   ("" (subtype-tcc) nil nil)
   ((empty_noise const-decl "Noise" affine nil)
    (lt_idx const-decl "bool" indexed_list nil))
   nil))
 (epn_over_last_is_zero 0
  (epn_over_last_is_zero-1 nil 3621707863
   (""
    (induct "pds" :name
     "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (expand "eval_pd_noise" 1)
            (("2" (expand "null_ol?")
              (("2" (expand "cons_ol")
                (("2" (expand "car_ol")
                  (("2" (expand "cdr_ol")
                    (("2" (expand "last_idx")
                      (("2" (expand "last_ol" -2)
                        (("2" (lift-if)
                          (("2" (split -2)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (case "x`1 < n")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-1 1 2))
                                    (("2"
                                      (typepred "x::[nat,nzBaseType]")
                                      (("2"
                                        (grind)
                                        (("2"
                                          (use
                                           "olidx_car_last[nzBaseType]")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last_ol def-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (eval_pd_noise def-decl "real" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Noise type-eq-decl nil affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (epn_up_to_last_idx_pd_is_zero_TCC1 0
  (epn_up_to_last_idx_pd_is_zero_TCC1-1 nil 3621710151
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (last_idx const-decl "int" indexed_list nil))
   nil))
 (epn_up_to_last_idx_pd_is_zero 0
  (epn_up_to_last_idx_pd_is_zero-1 nil 3621710151
   (""
    (induct "pds" :name
     "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]")
    (("1" (grind)
      (("1" (expand "eval_pd_noise") (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep*)
      (("2" (use "eval_pd_noise_rec_pds_def")
        (("2" (replaces -1)
          (("2" (lift-if)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (use "eval_pd_noise_rec_pds_def")
                  (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "cdr_ol")
                  (("2" (lemma "eval_pd_noise_rec_pds_def")
                    (("2"
                      (inst -1
                       "first_noises(N, 1 + last_idx(cons(x, ol)))"
                       "cons(x, ol)")
                      (("1" (replaces -1)
                        (("1" (assert)
                          (("1" (expand "cdr_ol")
                            (("1" (case "null_ol?(ol)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "eval_pd_noise" 2 1)
                                  (("1"
                                    (expand "car_ol")
                                    (("1"
                                      (expand "eval_pd_noise" 2 1)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (lemma
                                             "gnbi_lt_first_idem")
                                            (("1"
                                              (inst
                                               -1
                                               "N"
                                               "1+x`1"
                                               "x`1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "last_idx(ol) = last_idx(cons(x, ol))")
                                (("1"
                                  (replaces -1 :dir RL)
                                  (("1"
                                    (expand "car_ol")
                                    (("1"
                                      (inst -1 "N")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred
                                             "x::[nat,nzBaseType]")
                                            (("1"
                                              (use
                                               "gnbi_lt_first_idem")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "ordered_list?")
                                                  (("1"
                                                    (expand "null_ol?")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "lt_idx")
                                                        (("1"
                                                          (use
                                                           "olidx_car_last[nzBaseType]")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "last_idx" 1 2)
                                  (("2"
                                    (hide-all-but (1 2 3))
                                    (("2"
                                      (expand "last_idx")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "last_ol" 2 2)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "null_ol?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   ((x skolem-const-decl
     "{x: [nat, nzBaseType] | ordered_list?(cons(x, ol))}" affine nil)
    (ol skolem-const-decl
     "ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (last_ol def-decl "T" ordered_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gnbi_lt_first_idem formula-decl nil affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (ol_ind_sch formula-decl nil ordered_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (first_noises const-decl "Noise" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (epn_trim_noise 0
  (epn_trim_noise-1 nil 3621769055
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "last_idx")
        (("1" (lift-if)
          (("1" (assert)
            (("1" (split -1)
              (("1" (flatten)
                (("1" (typepred "last_ol(pds)`1")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (lemma "eval_pd_noise_rec_pds_def")
                (("2" (inst? -1 :where 1)
                  (("2" (replaces -1)
                    (("2" (expand_ol)
                      (("2" (assert)
                        (("2" (use "eval_pd_noise_rec_pds_def")
                          (("2" (replaces -1)
                            (("2" (expand_ol) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "last_idx(pds) < j")
          (("1" (inst -2 "N" "pds")
            (("1" (assert)
              (("1" (hide -3)
                (("1" (use "first_noises_recursive_def")
                  (("1" (replaces -1)
                    (("1" (use "eval_pd_noise_noise_append")
                      (("1" (split -1)
                        (("1" (replaces -1)
                          (("1" (replaces -2)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "eval_pd_noise")
                                      (("1" (expand_ol) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (use "epn_over_last_is_zero")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "/=")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "appendable_ol?")
                            (("2" (flatten)
                              (("2"
                                (lift-if)
                                (("2"
                                  (expand "empty_noise")
                                  (("2"
                                    (split 2)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "lt_idx")
                                          (("2"
                                            (expand "first_ol")
                                            (("2"
                                              (expand "cons_ol")
                                              (("2"
                                                (use
                                                 "last_up_to_idx[nzEpsilon]")
                                                (("2"
                                                  (expand
                                                   "first_noises")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (expand_ol) nil nil)) nil)
                       ("3" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "last_idx(pds) = j")
            (("1" (hide -2)
              (("1" (hide-all-but (-1 2))
                (("1" (replaces -1 :dir RL)
                  (("1" (use "epn_up_to_last_idx_pd_is_zero")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (first_noises_recursive_def formula-decl nil affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eval_pd_noise_noise_append formula-decl nil affine nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (empty_noise const-decl "Noise" affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (N skolem-const-decl "Noise" affine nil)
    (j skolem-const-decl "nat" affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (last_up_to_idx formula-decl nil indexed_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (epn_over_last_is_zero formula-decl nil affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (epn_up_to_last_idx_pd_is_zero formula-decl nil affine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last_ol def-decl "T" ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (first_noises const-decl "Noise" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (last_idx const-decl "int" indexed_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (epn_mult_first 0
  (epn_mult_first-1 nil 3621713355
   ("" (skolem 1 ("_" "_" "pds1_" "pds2_" "_" "_"))
    (("" (name "L" "length(pds1_) + length(pds2_)")
      (("" (generalize "pds1_" "pds1")
        (("" (generalize "pds2_" "pds2")
          (("" (generalize "L" "L")
            (("" (induct "L" :name "NAT_induction")
              (("" (skeep)
                (("" (skeep)
                  (("" (skeep)
                    (("" (expand "mult_pd_pd" 1 1)
                      (("" (lift-if)
                        (("" (split 1)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "mult_pd_pd" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "null_ol")
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (expand "eval_pd_noise")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "add_ET")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "mult_pd_pd" 1 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "add_ET")
                                              (("1"
                                                (inst -3 "j-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "cdr_ol(pds2)"
                                                     "pds1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "N"
                                                         "n"
                                                         "x1"
                                                         "x2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide-all-but
                                                             (3 2 -5))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "mult_pd_pd" 1 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add_ET")
                                                  (("1"
                                                    (hide -3)
                                                    (("1"
                                                      (use
                                                       "epn_trim_noise")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "last_idx"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "cons_ol")
                                                            (("1"
                                                              (expand
                                                               "last_ol")
                                                              (("1"
                                                                (expand
                                                                 "empty_ErrorTerms")
                                                                (("1"
                                                                  (use
                                                                   "olidx_car_last[nzBaseType]")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (1
                                                                        -6
                                                                        4
                                                                        -1))
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "mult_pd_pd"
                                                   1
                                                   2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (expand
                                                           "cons_ol")
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("1"
                                                                  (expand
                                                                   "car_ol")
                                                                  (("1"
                                                                    (lemma
                                                                     "eval_pd_noise_rec_pds_def")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "N"
                                                                       "cons_ol((car(pds2)`1, car(pds2)`2 * x1),
                           mult_pd_pd(x1, x2, pds1, cdr(pds2)))")
                                                                      (("1"
                                                                        (expand
                                                                         "cons_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "null_ol?")
                                                                          (("1"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("1"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "j-1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -3
                                                                                         "cdr_ol(pds2)"
                                                                                         "pds1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -3
                                                                                             "N"
                                                                                             "n"
                                                                                             "x1"
                                                                                             "x2")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "cdr_ol")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "gnbi_lt_first_idem")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (1
                                                                                                              -5
                                                                                                              5))
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "olidx_car_last[nzBaseType]")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (1
                                                                                                      -5
                                                                                                      5))
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "lt_idx")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "/=")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "mult_pd_pd"
                                                   2
                                                   2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "add_ET")
                                                      (("2"
                                                        (inst -2 "j-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "cdr_ol(pds2)"
                                                             "pds1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "N"
                                                                 "n"
                                                                 "x1"
                                                                 "x2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (6
                                                                      -4
                                                                      5))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 -2 6))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "add_ET")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -3 "j-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -3
                                               "pds2"
                                               "cdr_ol(pds1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "N"
                                                   "n"
                                                   "x1"
                                                   "x2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -3)
                                                      (("1"
                                                        (expand
                                                         "mult_pd_pd"
                                                         1
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "add_ET")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "mult_pd_pd" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add_ET")
                                                  (("1"
                                                    (use
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "null_ol?")
                                                            (("1"
                                                              (expand
                                                               "cons_ol")
                                                              (("1"
                                                                (expand
                                                                 "cdr_ol")
                                                                (("1"
                                                                  (expand
                                                                   "car_ol")
                                                                  (("1"
                                                                    (expand
                                                                     "empty_ErrorTerms")
                                                                    (("1"
                                                                      (use
                                                                       "gnbi_lt_first_idem")
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "eval_pd_noise")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            -5
                                                                            4))
                                                                          (("2"
                                                                            (use
                                                                             "olidx_car_last[nzBaseType]")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "mult_pd_pd"
                                                   1
                                                   2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "cons_ol")
                                                                (("1"
                                                                  (expand
                                                                   "null_ol?")
                                                                  (("1"
                                                                    (expand
                                                                     "cdr_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "car_ol")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "j-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "pds2"
                                                                             "cdr_ol(pds1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "N"
                                                                                 "n"
                                                                                 "x1"
                                                                                 "x2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "cdr_ol")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (use
                                                                                             "gnbi_lt_first_idem")
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (1
                                                                                                  -4
                                                                                                  5))
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "olidx_car_last[nzBaseType]")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "mult_pd_pd"
                                                   2
                                                   2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "add_ET")
                                                      (("2"
                                                        (inst -2 "j-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "pds2"
                                                             "cdr_ol(pds1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "N"
                                                                 "n"
                                                                 "x1"
                                                                 "x2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "add_ET")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -3 "j-2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "cdr_ol(pds2)"
                                                   "cdr_ol(pds1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "N"
                                                       "n"
                                                       "x1"
                                                       "x2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -3)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "mult_pd_pd"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "add_ET")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "mult_pd_pd"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (use
                                                           "eval_pd_noise_rec_pds_def")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "cons_ol")
                                                                  (("1"
                                                                    (expand
                                                                     "null_ol?")
                                                                    (("1"
                                                                      (expand
                                                                       "cdr_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (use
                                                                           "gnbi_lt_first_idem")
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (grind)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "eval_pd_noise")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                -4
                                                                                5))
                                                                              (("2"
                                                                                (use
                                                                                 "olidx_car_last[nzBaseType]")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "mult_pd_pd"
                                                       1
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "add_ET")
                                                          (("1"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "cons_ol")
                                                                    (("1"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("1"
                                                                        (expand
                                                                         "car_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "j-2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "cdr_ol(pds2)"
                                                                                 "cdr_ol(pds1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "N"
                                                                                     "n"
                                                                                     "x1"
                                                                                     "x2")
                                                                                    (("1"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "cdr_ol")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (use
                                                                                               "gnbi_lt_first_idem")
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    -4
                                                                                                    6))
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "olidx_car_last[nzBaseType]")
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "mult_pd_pd"
                                                       2
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "add_ET")
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "j-2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "cdr_ol(pds2)"
                                                                 "cdr_ol(pds1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "N"
                                                                     "n"
                                                                     "x1"
                                                                     "x2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "add_ET")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "mult_pd_pd"
                                                   1
                                                   2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (inst -3 "j-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "pds2"
                                                             "cdr_ol(pds1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "N"
                                                                 "n"
                                                                 "x1"
                                                                 "x2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "mult_pd_pd"
                                                       1
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "add_ET")
                                                          (("1"
                                                            (hide -3)
                                                            (("1"
                                                              (use
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "cons_ol")
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (use
                                                                               "gnbi_lt_first_idem")
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "eval_pd_noise")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    -4
                                                                                    6))
                                                                                  (("2"
                                                                                    (use
                                                                                     "olidx_car_last[nzBaseType]")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "mult_pd_pd"
                                                           1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "add_ET")
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (use
                                                                     "eval_pd_noise_rec_pds_def")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cons_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("1"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "j-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "pds2"
                                                                                     "cdr_ol(pds1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -3
                                                                                         "N"
                                                                                         "n"
                                                                                         "x1"
                                                                                         "x2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cdr_ol")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "gnbi_lt_first_idem")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (1
                                                                                                          -4
                                                                                                          7))
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "olidx_car_last[nzBaseType]")
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "mult_pd_pd"
                                                           2
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "add_ET")
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "j-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "pds2"
                                                                     "cdr_ol(pds1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "N"
                                                                         "n"
                                                                         "x1"
                                                                         "x2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (8
                                                                              7
                                                                              -3))
                                                                            (("1"
                                                                              (use
                                                                               "olidx_car_last[nzBaseType]")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "add_ET")
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "mult_pd_pd"
                                                   1
                                                   2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "add_ET")
                                                      (("1"
                                                        (inst -2 "j-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "cdr_ol(pds2)"
                                                             "pds1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "N"
                                                                 "n"
                                                                 "x1"
                                                                 "x2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (6
                                                                      -4
                                                                      4))
                                                                    (("1"
                                                                      (use
                                                                       "olidx_car_last[nzBaseType]")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "mult_pd_pd"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "add_ET")
                                                            (("1"
                                                              (use
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "null_ol?")
                                                                      (("1"
                                                                        (expand
                                                                         "cons_ol")
                                                                        (("1"
                                                                          (expand
                                                                           "cdr_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "car_ol")
                                                                            (("1"
                                                                              (use
                                                                               "gnbi_lt_first_idem")
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty_ErrorTerms")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "eval_pd_noise")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    -4
                                                                                    6))
                                                                                  (("2"
                                                                                    (grind)
                                                                                    (("2"
                                                                                      (use
                                                                                       "olidx_car_last[nzBaseType]")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "mult_pd_pd"
                                                           1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "add_ET")
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (use
                                                                     "eval_pd_noise_rec_pds_def")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "null_ol?")
                                                                        (("1"
                                                                          (expand
                                                                           "cons_ol")
                                                                          (("1"
                                                                            (expand
                                                                             "cdr_ol")
                                                                            (("1"
                                                                              (expand
                                                                               "car_ol")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "j-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "cdr_ol(pds2)"
                                                                                     "pds1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "N"
                                                                                         "n"
                                                                                         "x1"
                                                                                         "x2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "cdr_ol")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "gnbi_lt_first_idem")
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (1
                                                                                                          -4
                                                                                                          6))
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "olidx_car_last[nzBaseType]")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                -4
                                                                                                7))
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "j-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "cdr_ol(pds2)"
                                                               "pds1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N"
                                                                   "n"
                                                                   "x1"
                                                                   "x2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "mult_pd_pd"
                                                                           2
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "add_ET")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          -3
                                                                          8))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr_ol formula-decl nil ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (j skolem-const-decl "nat" affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (epn_trim_noise formula-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pds2 skolem-const-decl "ErrorTerms" affine nil)
    (x1 skolem-const-decl "BaseType" affine nil)
    (x2 skolem-const-decl "BaseType" affine nil)
    (pds1 skolem-const-decl "ErrorTerms" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (gnbi_lt_first_idem formula-decl nil affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (< const-decl "bool" reals nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (eval_pd_noise def-decl "real" affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (first_noises const-decl "Noise" affine nil))
   shostak))
 (mpp_first_N 0
  (mpp_first_N-1 nil 3621704720
   ("" (skeep)
    (("" (expand "mul_noise_value")
      (("" (lift-if)
        (("" (split 1)
          (("1" (propax) nil nil)
           ("2" (flatten)
            (("2" (expand ">=")
              (("2" (expand "next_idx_2")
                (("2" (expand "next_idx")
                  (("2"
                    (case "last_idx(pd(Xa1))< n AND last_idx(pd(Xa2)) < n")
                    (("1" (hide -2)
                      (("1" (flatten)
                        (("1"
                          (case "eval_ac_noise(Xa1, first_noises(N, n)) = eval_ac_noise(Xa1, N)")
                          (("1" (replaces -1)
                            (("1"
                              (case "eval_ac_noise(Xa2, first_noises(N, n)) = eval_ac_noise(Xa2, N)")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "eval_pd_noise(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)),
                                                   first_noises(N, n)) = eval_pd_noise(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)),
                                                   N)")
                                    (("1" (replaces -1) nil nil)
                                     ("2"
                                      (hide-all-but (- 1))
                                      (("2"
                                        (use "epn_mult_first")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-2 1))
                                (("2"
                                  (expand "eval_ac_noise")
                                  (("2"
                                    (use "epn_trim_noise")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1))
                            (("2" (expand "eval_ac_noise")
                              (("2"
                                (use "epn_trim_noise")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mul_noise_value const-decl "real" affine nil)
    (>= const-decl "bool" reals nil)
    (next_idx const-decl "nat" affine nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (first_noises const-decl "Noise" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (epn_mult_first formula-decl nil affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (epn_trim_noise formula-decl nil affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (next_idx_2 const-decl "nat" affine nil))
   shostak))
 (containment_mul 0
  (containment_mul-3 "" 3621347197
   ("" (skeep)
    (("" (expand "mult_ac_ac" 1)
      (("" (expand "eval_ac_noise" 1)
        (("" (assert)
          (("" (rewrites "eval_pd_noise_append")
            (("1" (expand "add_ET")
              (("1" (lift-if)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1"
                      (case "sum_of_modules(pd(Xa1)) = 0 OR
                                             sum_of_modules(pd(Xa2)) = 0")
                      (("1" (hide -2)
                        (("1" (prop)
                          (("1" (use "som_zero")
                            (("1" (assert)
                              (("1"
                                (lemma "epn_mpp_null_pds1")
                                (("1"
                                  (inst
                                   -1
                                   "N"
                                   "pd(Xa2)"
                                   "cv(Xa1)"
                                   "cv(Xa2)")
                                  (("1"
                                    (case "pd(Xa1)=null")
                                    (("1"
                                      (replace -1 + :hide? t)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "empty_ErrorTerms")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "eval_pd_noise"
                                               1
                                               1)
                                              (("1"
                                                (expand
                                                 "eval_ac_noise")
                                                (("1"
                                                  (replaces -4 :dir RL)
                                                  (("1"
                                                    (replaces
                                                     -4
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (reveal -4)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         +
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "eval_pd_noise")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "som_zero")
                            (("2" (assert)
                              (("2"
                                (lemma "epn_mpp_null_pds2")
                                (("2"
                                  (inst
                                   -1
                                   "N"
                                   "pd(Xa1)"
                                   "cv(Xa1)"
                                   "cv(Xa2)")
                                  (("2"
                                    (case "pd(Xa2)=null")
                                    (("1"
                                      (replace -1 + :hide? t)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "empty_ErrorTerms")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "eval_pd_noise"
                                               1
                                               1)
                                              (("1"
                                                (expand
                                                 "eval_ac_noise")
                                                (("1"
                                                  (replaces -4 :dir RL)
                                                  (("1"
                                                    (replaces
                                                     -4
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (reveal -4)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         +
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "eval_pd_noise")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "empty_ErrorTerms")
                      (("2" (expand "null_ol?")
                        (("2" (expand "cons_ol")
                          (("2"
                            (case "eval_pd_noise(cons((n,
                                   sum_of_modules(pd(Xa1)) *
                                    sum_of_modules(pd(Xa2))),
                                  null),
                N) = mul_noise_value(Xa1, Xa2, N) * sum_of_modules(pd(Xa1)) *
                             sum_of_modules(pd(Xa2))")
                            (("1" (replaces -1)
                              (("1"
                                (hide -4)
                                (("1"
                                  (expand "mul_noise_value")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (use "eval_pd_noise_rec_pds_def")
                                (("1"
                                  (expand "null_ol?")
                                  (("1"
                                    (expand "cdr_ol")
                                    (("1"
                                      (expand "car_ol")
                                      (("1"
                                        (expand "eval_pd_noise" -1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (lemma "mpp_first_N")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "N"
                                                   "Xa1"
                                                   "Xa2"
                                                   "n")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (grind)
                                (("3"
                                  (expand "every")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (expand "/=")
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "add_ET")
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (expand "null_ol?")
                        (("2" (expand "empty_ErrorTerms")
                          (("2" (expand "cons_ol")
                            (("2" (expand "appendable_ol?")
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "first_ol")
                                  (("2"
                                    (expand "lt_idx")
                                    (("2"
                                      (use "mult_pd_pd_last_bound")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "null_ol?")
                                          (("2"
                                            (case
                                             "NOT null?[[nat, nzBaseType]](pd(Xa1)) AND
                                        NOT null?[[nat, nzBaseType]](pd(Xa2))")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "next_idx_2")
                                                  (("1"
                                                    (expand "next_idx")
                                                    (("1"
                                                      (expand
                                                       "last_idx")
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -2 5))
                                                        (("1"
                                                          (name-replace
                                                           "stopRW"
                                                           "last_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)))`1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_ac_ac const-decl "AffineCombination" affine nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mul_noise_value_is_Epsilon expr-judgement "Epsilon" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (mult_pd_pd_last_bound formula-decl nil affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (eval_pd_noise def-decl "real" affine nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (mul_noise_value const-decl "real" affine nil)
    (first_noises const-decl "Noise" affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (epn_mpp_null_pds1 formula-decl nil affine nil)
    (som_zero formula-decl nil affine nil)
    (epn_mpp_null_pds2 formula-decl nil affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (mpp_first_N formula-decl nil affine nil)
    (Xa1 skolem-const-decl "AffineCombination" affine nil)
    (Xa2 skolem-const-decl "AffineCombination" affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eval_pd_noise_append formula-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil))
   shostak)
  (containment_mul-2 "" 3621267667
   ("" (skeep)
    (("" (expand "mult_ac_ac" 1)
      (("" (expand "eval_ac_noise" 1)
        (("" (assert)
          (("" (rewrites "eval_pd_noise_append")
            (("1" (expand "add_ET")
              (("1" (lift-if)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1"
                      (case "sum_of_modules(pd(Xa1)) = 0 OR
 sum_of_modules(pd(Xa2)) = 0")
                      (("1" (hide -2)
                        (("1" (prop)
                          (("1" (use "som_zero")
                            (("1" (assert)
                              (("1"
                                (lemma "epn_mpp_null_pds1")
                                (("1"
                                  (inst
                                   -1
                                   "N"
                                   "pd(Xa2)"
                                   "cv(Xa1)"
                                   "cv(Xa2)")
                                  (("1"
                                    (case "pd(Xa1)=null")
                                    (("1"
                                      (replace -1 + :hide? t)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "empty_ErrorTerms")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "eval_pd_noise"
                                               1
                                               1)
                                              (("1"
                                                (expand
                                                 "eval_ac_noise")
                                                (("1"
                                                  (replaces -4 :dir RL)
                                                  (("1"
                                                    (replaces
                                                     -4
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (reveal -4)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         +
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "eval_pd_noise")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "som_zero")
                            (("2" (assert)
                              (("2"
                                (lemma "epn_mpp_null_pds2")
                                (("2"
                                  (inst
                                   -1
                                   "N"
                                   "pd(Xa1)"
                                   "cv(Xa1)"
                                   "cv(Xa2)")
                                  (("2"
                                    (case "pd(Xa2)=null")
                                    (("1"
                                      (replace -1 + :hide? t)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "empty_ErrorTerms")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "eval_pd_noise"
                                               1
                                               1)
                                              (("1"
                                                (expand
                                                 "eval_ac_noise")
                                                (("1"
                                                  (replaces -4 :dir RL)
                                                  (("1"
                                                    (replaces
                                                     -4
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (reveal -4)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         +
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "eval_pd_noise")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "empty_ErrorTerms")
                      (("2" (expand "null_ol?")
                        (("2" (expand "cons_ol")
                          (("2"
                            (case "eval_pd_noise(cons((n,
                                  sum_of_modules(pd(Xa1)) *
                                   sum_of_modules(pd(Xa2))),
                                 null),
                            N) = mul_noise_value(Xa1, Xa2, N) * sum_of_modules(pd(Xa1)) *
                                   sum_of_modules(pd(Xa2))")
                            (("1" (replaces -1)
                              (("1"
                                (hide -4)
                                (("1"
                                  (expand "mul_noise_value")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (use "eval_pd_noise_rec_pds_def")
                                (("1"
                                  (expand "null_ol?")
                                  (("1"
                                    (expand "cdr_ol")
                                    (("1"
                                      (expand "car_ol")
                                      (("1"
                                        (expand "eval_pd_noise" -1 2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (grind) nil nil)
                             ("4" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "add_ET")
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (expand "null_ol?")
                        (("2" (expand "empty_ErrorTerms")
                          (("2" (expand "cons_ol")
                            (("2" (expand "appendable_ol?")
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "first_ol")
                                  (("2"
                                    (expand "lt_idx")
                                    (("2"
                                      (use "mult_pd_pd_last_bound")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((appendable_ol? const-decl "bool" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   shostak)
  (containment_mul-1 nil 3619979990
   ("" (skeep)
    (("" (expand "mult_ac_ac" 1)
      (("" (expand "eval_ac_noise" 1)
        (("" (assert)
          (("" (rewrites "eval_pd_noise_append")
            ((""
              (case "eval_pd_noise(cons((n,
                           sum_of_modules(pd(Xa1)) *
                            sum_of_modules(pd(Xa2))),
                          null),
                     N) = mul_noise_value(x1, x2, Xa1, Xa2, N) * sum_of_modules(pd(Xa1)) *
                            sum_of_modules(pd(Xa2))")
              (("1" (replaces -1)
                (("1" (hide -3)
                  (("1" (expand "mul_noise_value")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1"
                          (comment "usar que si som_som es cero, todos los Xa1_i Xa2_i son cero")
                          (("1" (postpone) nil
                            ";;; usar que si som_som es cero, todos los Xa1_i Xa2_i son cero"))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_idx_mult_ac_ac_TCC1 0
  (next_idx_mult_ac_ac_TCC1-1 nil 3628272610 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (next_idx const-decl "nat" affine nil)
    (next_idx_2 const-decl "nat" affine nil))
   nil))
 (next_idx_mult_ac_ac 0
  (next_idx_mult_ac_ac-1 nil 3629025760
   ("" (skeep)
    (("" (expand "mult_ac_ac")
      (("" (assert)
        ((""
          (case "next_idx(append_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)),
                         add_ET(n, sum_of_modules(pd(Xa1)) * sum_of_modules(pd(Xa2)),
                                empty_ErrorTerms))) = max(next_idx(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2))), next_idx(add_ET(n, sum_of_modules(pd(Xa1)) * sum_of_modules(pd(Xa2)),
                                empty_ErrorTerms)))")
          (("1" (replaces -1)
            (("1" (expand "max")
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (hide 1)
                      (("2" (expand "next_idx")
                        (("2" (expand "last_idx")
                          (("2" (lift-if 1)
                            (("2" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (case "pd(Xa1) = empty_ErrorTerms")
                                  (("1"
                                    (case "pd(Xa2) = empty_ErrorTerms")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (use
                                         "mult_pd_pd_last_bound__null_nnull")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (typepred "n")
                                            (("1"
                                              (expand ">=")
                                              (("1"
                                                (expand "next_idx_2")
                                                (("1"
                                                  (expand "next_idx")
                                                  (("1"
                                                    (expand "last_idx")
                                                    (("1"
                                                      (expand
                                                       "empty_ErrorTerms")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil)
                                           ("3"
                                            (expand "null_ol?")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "pd(Xa2) = empty_ErrorTerms")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (use
                                         "mult_pd_pd_last_bound__nnull_null")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (typepred "n")
                                            (("1"
                                              (expand ">=")
                                              (("1"
                                                (expand "next_idx_2")
                                                (("1"
                                                  (expand "next_idx")
                                                  (("1"
                                                    (expand "last_idx")
                                                    (("1"
                                                      (expand_ol)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand_ol)
                                            (("2" (assert) nil nil))
                                            nil)
                                           ("3" (expand_ol) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "mult_pd_pd_last_bound")
                                      (("2"
                                        (expand_ol)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "n")
                                            (("2"
                                              (expand ">=")
                                              (("2"
                                                (expand "next_idx_2")
                                                (("2"
                                                  (expand "next_idx")
                                                  (("2"
                                                    (expand "last_idx")
                                                    (("2"
                                                      (case
                                                       "max(last_ol(Xa1`pd)`1, last_ol(Xa2`pd)`1) <= n-1")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (name-replace
                                                           "A"
                                                           "last_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)))`1")
                                                          (("1"
                                                            (name-replace
                                                             "B"
                                                             "max(last_ol(Xa1`pd)`1, last_ol(Xa2`pd)`1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "last_idx_append")
            (("2" (expand "next_idx")
              (("2" (hide 2)
                (("2"
                  (name-replace "A"
                   "last_idx(append_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)),
                          add_ET(n, sum_of_modules(pd(Xa1)) * sum_of_modules(pd(Xa2)),
                                 empty_ErrorTerms)))")
                  (("2"
                    (name-replace "B"
                     "last_idx(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)))")
                    (("2"
                      (name-replace "C"
                       "last_idx(add_ET(n, sum_of_modules(pd(Xa1)) * sum_of_modules(pd(Xa2)),
                           empty_ErrorTerms))")
                      (("2" (assert) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_ac_ac const-decl "AffineCombination" affine nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (next_idx_2 const-decl "nat" affine nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (last_ol def-decl "T" ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_pd_pd_last_bound__null_nnull formula-decl nil affine nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (mult_pd_pd_last_bound formula-decl nil affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (mult_pd_pd_last_bound__nnull_null formula-decl nil affine nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (last_idx_append formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (idxs_ac_mult_ac_ac 0
  (idxs_ac_mult_ac_ac-1 nil 3628937568
   ("" (skeep)
    (("" (expand "mult_ac_ac")
      (("" (expand "idxs_ac")
        (("" (assert)
          (("" (use "idxs_pd_append")
            (("" (replaces -1)
              (("" (use "member_append_fi[nat]")
                (("" (assert)
                  (("" (hide -2)
                    (("" (split -1)
                      (("1"
                        (name "L" "length(pd(Xa1))+length(pd(Xa2))")
                        (("1" (name-replace "pds1_" "pd(Xa1)")
                          (("1" (name-replace "pds2_" "pd(Xa2)")
                            (("1" (generalize "cv(Xa1)" "cv1")
                              (("1"
                                (generalize "cv(Xa2)" "cv2")
                                (("1"
                                  (generalize "pds1_" "pds1")
                                  (("1"
                                    (generalize "pds2_" "pds2")
                                    (("1"
                                      (generalize "L" "L")
                                      (("1"
                                        (induct
                                         "L"
                                         :name
                                         "NAT_induction")
                                        (("1"
                                          (deftactic
                                           applyih
                                           (num
                                            pdsn
                                            ih-fnum
                                            hyp-fnum
                                            len-fnum
                                            mbr-fnum
                                            nnl-fnum)
                                           (spread
                                            (inst ih-fnum num)
                                            ((then
                                              (assert)
                                              (inst?
                                               ih-fnum
                                               :where
                                               hyp-fnum)
                                              (expand
                                               "length"
                                               len-fnum
                                               pdsn)
                                              (assert)
                                              (hide-all-but
                                               (list
                                                nnl-fnum
                                                mbr-fnum
                                                ih-fnum))
                                              (grind))
                                             (then
                                              (let
                                               ((new-len
                                                 (+ len-fnum 1))
                                                (new-nnl
                                                 (if
                                                  (listp nnl-fnum)
                                                  (mapcar
                                                   (lambda (n) (+ n 1))
                                                   nnl-fnum)
                                                  (+ nnl-fnum 1))))
                                               (then
                                                (hide-all-but
                                                 (list
                                                  new-len
                                                  1
                                                  new-nnl))
                                                (grind)))))))
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand
                                                 "mult_pd_pd"
                                                 -3)
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (lift-if -3)
                                                    (("1"
                                                      (split -3)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "add_ET")
                                                              (("2"
                                                                (lift-if
                                                                 -1)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (applyih
                                                                       "j-1"
                                                                       2
                                                                       -4
                                                                       -2
                                                                       -5
                                                                       3
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand_ol)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (expand_ol)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "idxs_pd"
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (applyih
                                                                                         "j-1"
                                                                                         2
                                                                                         -4
                                                                                         -1
                                                                                         -5
                                                                                         5
                                                                                         3)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (applyih
                                                                               "j-1"
                                                                               2
                                                                               -3
                                                                               -1
                                                                               -4
                                                                               6
                                                                               4)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "add_ET")
                                                              (("1"
                                                                (lift-if
                                                                 -2)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (applyih
                                                                       "j-1"
                                                                       1
                                                                       -4
                                                                       -2
                                                                       -5
                                                                       2
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand_ol)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "idxs_pd"
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (applyih
                                                                                         "j-1"
                                                                                         1
                                                                                         -4
                                                                                         -1
                                                                                         -5
                                                                                         4
                                                                                         3)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (applyih
                                                                                 "j-1"
                                                                                 1
                                                                                 -3
                                                                                 -1
                                                                                 -4
                                                                                 5
                                                                                 4)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "add_ET")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (lift-if
                                                                       -2)
                                                                      (("1"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (applyih
                                                                             "j-2"
                                                                             (1
                                                                              2)
                                                                             -4
                                                                             -2
                                                                             -5
                                                                             (3
                                                                              4)
                                                                             (1
                                                                              2))
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_pd"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (expand_ol)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (applyih
                                                                                             "j-2"
                                                                                             (1
                                                                                              2)
                                                                                             -4
                                                                                             -1
                                                                                             -5
                                                                                             (5
                                                                                              6)
                                                                                             (3
                                                                                              4))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (applyih
                                                                                     "j-2"
                                                                                     (1
                                                                                      2)
                                                                                     -3
                                                                                     -1
                                                                                     -4
                                                                                     (6
                                                                                      7)
                                                                                     (4
                                                                                      5))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "add_ET")
                                                                      (("1"
                                                                        (lift-if
                                                                         -2)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (applyih
                                                                               "j-1"
                                                                               1
                                                                               -4
                                                                               -2
                                                                               -5
                                                                               4
                                                                               3)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand_ol)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "idxs_pd"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand_ol)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (split
                                                                                               -2)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (applyih
                                                                                                 "j-1"
                                                                                                 1
                                                                                                 -4
                                                                                                 -1
                                                                                                 -5
                                                                                                 6
                                                                                                 5)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (applyih
                                                                                         "j-1"
                                                                                         1
                                                                                         -3
                                                                                         -1
                                                                                         -4
                                                                                         7
                                                                                         6)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "add_ET")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lift-if
                                                                           -1)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (applyih
                                                                                 "j-1"
                                                                                 2
                                                                                 -3
                                                                                 -2
                                                                                 -4
                                                                                 6
                                                                                 3)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand_ol)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "idxs_pd"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand_ol)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (applyih
                                                                                                   "j-1"
                                                                                                   2
                                                                                                   -3
                                                                                                   -1
                                                                                                   -4
                                                                                                   8
                                                                                                   5)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (applyih
                                                                                           "j-1"
                                                                                           2
                                                                                           -2
                                                                                           -1
                                                                                           -3
                                                                                           9
                                                                                           6)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "add_ET")
                        (("2" (lift-if -1)
                          (("2"
                            (deftactic expand_ols nil
                             (expand* "null_ol?" "car_ol" "cdr_ol"
                              "cons_ol" "empty_ErrorTerms"))
                            (("2" (expand_ols) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_ac_ac const-decl "AffineCombination" affine nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sum_of_modules_nnreal expr-judgement "nonneg_real" affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (member_append_fi formula-decl nil list_more_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (mult_pd_pd def-decl "ErrorTerms" affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum_of_modules def-decl "BaseType" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (idxs_pd_append formula-decl nil affine nil)
    (idxs_ac const-decl "list[nat]" affine nil))
   shostak))
 (null_ol?_empty_noise 0
  (null_ol?_empty_noise-1 nil 3621852500 ("" (grind) nil nil)
   ((empty_noise const-decl "Noise" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (null_is_noise name-judgement "Noise" affine nil))
   shostak))
 (var_ac_noise_unf3_TCC1 0
  (var_ac_noise_unf3_TCC1-1 nil 3621688552 ("" (tcc))
   ((null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (null_is_noise name-judgement "Noise" affine nil))
   nil))
 (var_ac_noise_unf3 0
  (var_ac_noise_unf3-1 nil 3621691473
   ("" (skeep)
    (("" (split -2)
      (("1" (flatten)
        (("1" (case "null_ol?(N)")
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (split -2)
          (("1" (grind) nil nil)
           ("2" (grind)
            (("2" (expand "eval_pd_noise") (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Noise type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (eval_pd_noise def-decl "real" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (add_N const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (gnbi_extend_N_unf 0
  (gnbi_extend_N_unf-1 nil 3621689436
   ("" (skeep)
    (("" (split -2)
      (("1" (flatten)
        (("1" (replaces -1)
          (("1" (case "null_ol?(N)")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (assert)
              (("2" (case "e=e2")
                (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (add_N const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak))
 (gnbi_extend_N_trivial 0
  (gnbi_extend_N_trivial-1 nil 3621790164
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((null_is_noise name-judgement "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (add_N const-decl "Noise" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil))
   shostak))
 (first__extend_N_TCC1 0
  (first__extend_N_TCC1-1 nil 3621698687
   ("" (skeep)
    (("" (split -1)
      (("1" (hide-all-but (-1 2))
        (("1" (expand_ol)
          (("1" (expand "first_noises")
            (("1" (expand "first")
              (("1" (lift-if 1) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "car_up_to_idx[nzEpsilon]")
        (("2" (inst?)
          (("2" (inst -1 "n")
            (("2" (assert)
              (("2" (expand "null_ol?")
                (("2" (assert)
                  (("2" (expand "first_noises")
                    (("2" (assert)
                      (("2" (hide-all-but (-1 2))
                        (("2" (expand "first")
                          (("2" (lift-if 1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (first_noises const-decl "Noise" affine nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (car_up_to_idx formula-decl nil indexed_list nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil))
   nil))
 (first__extend_N 0
  (first__extend_N-1 nil 3621792407
   ("" (skeep)
    (("" (lift-if)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "extend_N")
            (("1" (expand "add_N")
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (case "null_ol?(N)")
                      (("1" (assert)
                        (("1" (expand "first_noises")
                          (("1" (expand "first")
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (expand_ol) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (expand_ol) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "first_noises" :assert? none)
                          (("2" (expand "first" :assert? none)
                            (("2" (lift-if 2)
                              (("2"
                                (split 2)
                                (("1" (expand_ol) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide-all-but (-1 -4 -3))
                                        (("1"
                                          (expand "car_ol")
                                          (("1"
                                            (abstract-and-then
                                             -1
                                             1
                                             (assert))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (expand_ol) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "first_noises" :assert? none)
                            (("1" (expand "first" :assert? none)
                              (("1" (expand_ol) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "first_noises" :assert? none)
                          (("2" (expand "first" :assert? none)
                            (("2" (expand_ol)
                              (("2"
                                (assert)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "extend_N" 2 1 :assert? none)
            (("2" (expand "add_N" :assert? none)
              (("2" (lift-if)
                (("2" (split 2)
                  (("1" (flatten)
                    (("1" (expand "first_noises" :assert? none)
                      (("1" (expand "first" 1 1 :assert? none)
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "first" 1 1 :assert? none)
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand
                                         "extend_N"
                                         :assert?
                                         none)
                                        (("1"
                                          (expand
                                           "add_N"
                                           :assert?
                                           none)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -3)
                                    (("1"
                                      (expand "extend_N" :assert? none)
                                      (("1"
                                        (expand "add_N" :assert? none)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "first"
                                             1
                                             2
                                             :assert?
                                             none)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "extend_N" :assert? none)
                                      (("2"
                                        (expand "add_N" :assert? none)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "first"
                                             1
                                             2
                                             :assert?
                                             none)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split -2)
                                    (("1" (expand_ol) nil nil)
                                     ("2"
                                      (expand "first" 2 :assert? none)
                                      (("2"
                                        (lift-if 2)
                                        (("2"
                                          (split 2)
                                          (("1" (flatten) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1" (flatten) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "extend_N"
                                                   :assert?
                                                   none)
                                                  (("2"
                                                    (expand
                                                     "add_N"
                                                     :assert?
                                                     none)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (hide -2)
                            (("1"
                              (case "first_noises(N, n) = empty_noise")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (expand "first_noises" :assert? none)
                                  (("1"
                                    (expand "first" :assert? none)
                                    (("1"
                                      (expand_ol)
                                      (("1"
                                        (expand
                                         "extend_N"
                                         :assert?
                                         none)
                                        (("1"
                                          (expand
                                           "add_N"
                                           :assert?
                                           none)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "first"
                                               :assert?
                                               none)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand_ol)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 1))
                                (("2"
                                  (expand "first_noises" :assert? none)
                                  (("2"
                                    (expand "first" :assert? none)
                                    (("2"
                                      (lift-if 1)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1" (expand_ol) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand_ol)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand_ol)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (assert)
                            (("2" (expand "extend_N" :assert? none)
                              (("2"
                                (expand "add_N" :assert? none)
                                (("2"
                                  (expand
                                   "first_noises"
                                   2
                                   1
                                   :assert?
                                   none)
                                  (("2"
                                    (expand "first" 2 1 :assert? none)
                                    (("2"
                                      (expand_ol)
                                      (("2"
                                        (lift-if 2)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case
                                               "first(N, n)=empty_noise")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand_ol)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "first_noises"
                                                 :assert?
                                                 none)
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "first_noises"
                                                   :assert?
                                                   none)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "first_noises"
                                                   :assert?
                                                   none)
                                                  (("2"
                                                    (expand
                                                     "first"
                                                     3
                                                     :assert?
                                                     none)
                                                    (("2"
                                                      (lift-if 3)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split 3)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "first"
                                                               2
                                                               :assert?
                                                               none)
                                                              (("1"
                                                                (lift-if
                                                                 2)
                                                                (("1"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand_ol)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_is_noise name-judgement "Noise" affine nil)
    (prefixes const-decl "bool" list_more_props nil)
    (add_N const-decl "Noise" affine nil)
    (Noise type-eq-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (first_noises const-decl "Noise" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (empty_noise const-decl "Noise" affine nil)
    (first def-decl "(prefixes(l))" indexed_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (extend_N const-decl "Noise" affine nil))
   shostak))
 (Half_pd_TCC1 0
  (Half_pd_TCC1-1 nil 3627238844
   ("" (skeep)
    (("" (expand "null_ol?")
      (("" (expand "empty_ErrorTerms") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil))
   nil))
 (Half_pd_TCC2 0
  (Half_pd_TCC2-1 nil 3628356478
   ("" (skeep*)
    (("" (expand "lt_idx")
      (("" (replaces -)
        (("" (expand "cdr_ol")
          (("" (expand "car_ol")
            (("" (expand "null_ol?")
              (("" (typepred "v(cdr(pds))")
                (("" (expand "null_ol?")
                  (("" (assert)
                    (("" (flatten)
                      (("" (expand "car_ol")
                        (("" (replaces -2)
                          (("" (typepred "pds")
                            (("" (expand "ordered_list?" -1)
                              (("" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_idx const-decl "bool" indexed_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car_ol const-decl "T" ordered_list nil))
   nil))
 (Half_pd_TCC3 0
  (Half_pd_TCC3-1 nil 3628356478
   ("" (skeep*)
    (("" (replaces -)
      (("" (expand "null_ol?")
        (("" (expand "car_ol")
          (("" (expand "cons_ol") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (test_noise_2 0
  (test_noise_20141007 "" 3621689368
   ("" (skeep)
    ((""
      (case "1 >=
                                                 next_idx_2(pd(var_ac([|0, 1|], 0)),
                                                            pd(sub_ac_ac(const_ac(1), var_ac([|0, 1|], 0))))")
      (("1"
        (name "ac_expr"
              "mult_ac_ac(var_ac([|0,1|],0),sub_ac_ac(const_ac(1), var_ac([|0,1|],0)),1)")
        (("1" (case "containment(x*(1-x),ac_expr)")
          (("1" (case "eval_by_intervals(ac_expr) << [|0,0.5|]")
            (("1" (use "containment_interval")
              (("1" (prop)
                (("1" (lemma "Member_trans")
                  (("1"
                    (inst? -1
                     ("Y" "[|0, 0.5|]" "X"
                      "eval_by_intervals(ac_expr)"))
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (eval-formula) nil nil))
            nil)
           ("2" (replaces -1 :dir RL)
            (("2" (use "containment_var")
              (("2" (prop)
                (("2" (skolem -1 "rx")
                  (("2" (hide -3)
                    (("2" (hide 2)
                      (("2" (expand "containment" :assert? none)
                        (("2"
                          (name "N_vars" "extend_N(0,rx,empty_noise)")
                          (("2"
                            (name "N_mul"
                                  "mul_noise_value(var_ac([|0, 1|], 0),sub_ac_ac(const_ac(1),var_ac([|0, 1|], 0)),N_vars)")
                            (("2"
                              (name "specific_noise"
                                    "extend_N(0::nat, rx::Epsilon, extend_N(1::nat,N_mul,empty_noise))")
                              (("2"
                                (inst 1 "specific_noise")
                                (("2"
                                  (expand
                                   "specific_noise"
                                   :assert?
                                   none)
                                  (("2"
                                    (expand "N_mul" :assert? none)
                                    (("2"
                                      (apply
                                       (repeat*
                                        (rewrites
                                         ("first__extend_N"
                                          "gnbi_extend_N_trivial"
                                          "gnbi_extend_N_unf"
                                          "containment_cnt"
                                          "var_ac_noise_unf3"
                                          "containment_sub"
                                          "containment_mul")
                                         :fnums
                                         +)))
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (eval-formula) nil nil))
      nil))
    nil)
   ((const_ac const-decl "AffineCombination" affine nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (var_ac const-decl "AffineCombination" affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (next_idx_2 const-decl "nat" affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (containment const-decl "bool" affine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (containment_interval formula-decl nil affine nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (<< const-decl "bool" interval "interval_arith/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (containment_var formula-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (extend_N const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (specific_noise skolem-const-decl "Noise" affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first__extend_N formula-decl nil affine nil)
    (gnbi_extend_N_unf formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (gnbi_extend_N_trivial formula-decl nil affine nil)
    (containment_sub formula-decl nil affine nil)
    (containment_cnt formula-decl nil affine nil)
    (var_ac_noise_unf3 formula-decl nil affine nil)
    (extend_N_prop1 formula-decl nil affine nil)
    (null_ol?_empty_noise formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (N_mul skolem-const-decl "Epsilon" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (mul_noise_value_is_Epsilon expr-judgement "Epsilon" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil))
   shostak)
  (test_noise_20141006 "After that containment_mul was proved"
   3621614716
   ("" (skeep)
    ((""
      (case "1 >=
       next_idx_2(pd(var_ac([|0, 1|], 0)),
                  pd(sub_ac_ac(const_ac(1), var_ac([|0, 1|], 0))))")
      (("1"
        (name "ac_expr"
              "mult_ac_ac(var_ac([|0,1|],0),sub_ac_ac(const_ac(1), var_ac([|0,1|],0)),1)")
        (("1" (case "containment(x*(1-x),ac_expr)")
          (("1" (case "eval_by_intervals(ac_expr) << [|0,0.5|]")
            (("1" (postpone) nil nil) ("2" (eval-formula) nil nil))
            nil)
           ("2" (replaces -1 :dir RL)
            (("2" (use "containment_var")
              (("2" (prop)
                (("2" (skolem -1 "rx")
                  (("2" (hide -3)
                    (("2" (hide 2)
                      (("2" (expand "containment" :assert? none)
                        (("2" (name "N_vars" "add_N(0,rx,empty_noise)")
                          (("2"
                            (name "N_mul"
                                  "mul_noise_value(var_ac([|0, 1|], 0),sub_ac_ac(const_ac(1),var_ac([|0, 1|], 0)),N_vars)")
                            (("2"
                              (name "specific_noise"
                                    "add_N(0::nat, rx::Epsilon, add_N(1::nat,N_mul,empty_noise))")
                              (("2"
                                (inst 1 "specific_noise")
                                (("2"
                                  (rewrites
                                   ("containment_cnt"
                                    "var_ac_noise_unf"
                                    "containment_sub"
                                    "containment_mul")
                                   :fnums
                                   +)
                                  (("1"
                                    (expand "specific_noise")
                                    (("1"
                                      (rewrites
                                       ("containment_cnt"
                                        "var_ac_noise_unf"
                                        "containment_sub"
                                        "containment_mul")
                                       :fnums
                                       +)
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "specific_noise")
                                    (("2"
                                      (rewrites
                                       ("containment_cnt"
                                        "var_ac_noise_unf"
                                        "containment_sub"
                                        "containment_mul")
                                       :fnums
                                       +)
                                      (("1"
                                        (rewrites
                                         ("containment_cnt"
                                          "var_ac_noise_unf"
                                          "containment_sub"
                                          "containment_mul")
                                         :fnums
                                         +)
                                        nil
                                        nil)
                                       ("2"
                                        (rewrites
                                         ("containment_cnt"
                                          "var_ac_noise_unf"
                                          "containment_sub"
                                          "containment_mul")
                                         :fnums
                                         +)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "specific_noise")
                                    (("3"
                                      (expand "N_mul")
                                      (("3"
                                        (rewrites "gnbi_add_N_unf")
                                        (("3"
                                          (rewrites "gnbi_add_N_unf")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (eval-formula) nil nil))
      nil))
    nil)
   nil shostak)
  (with-ordered-lists "" 3620492110
   ("" (skeep)
    ((""
      (name "ac_expr"
            "mult_ac_ac(var_ac([|0,1|],0),sub_ac_ac(const_ac(1), var_ac([|0,1|],0)),1)")
      (("" (case "containment(x*(1-x),ac_expr)")
        (("1" (case "eval_by_intervals(ac_expr) << [|0,0.5|]")
          (("1" (postpone) nil nil) ("2" (eval-formula) nil nil)) nil)
         ("2" (replaces -1 :dir RL)
          (("2" (use "containment_var")
            (("2" (prop)
              (("2" (skolem -1 "rx")
                (("2" (hide -2)
                  (("2" (hide 2)
                    (("2" (expand "containment" :assert? none)
                      (("2" (name "N_vars" "single_n(0,rx)")
                        (("2"
                          (name "N_mul"
                                "mul_noise_value(var_ac([|0, 1|], 0),sub_ac_ac(const_ac(1),var_ac([|0, 1|], 0)),N_vars)")
                          (("2"
                            (name "specific_noise"
                                  "cons((0::nat, rx::Epsilon), cons((1::nat,N_mul),null))")
                            (("2"
                              (case "ordered_list?[[nat,Epsilon],lt_idx[Epsilon]](specific_noise)")
                              (("1"
                                (inst 1 "specific_noise")
                                (("1"
                                  (rewrites
                                   ("containment_cnt"
                                    "var_ac_noise_unf"
                                    "containment_sub"
                                    "containment_mul"))
                                  (("1"
                                    (expand "specific_noise")
                                    (("1"
                                      (rewrites
                                       ("containment_cnt"
                                        "var_ac_noise_unf"
                                        "containment_sub"
                                        "containment_mul"))
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrites
                                     ("containment_cnt"
                                      "var_ac_noise_unf"
                                      "containment_sub"
                                      "containment_mul"))
                                    (("1"
                                      (rewrites
                                       ("containment_cnt"
                                        "var_ac_noise_unf"
                                        "containment_sub"
                                        "containment_mul"))
                                      nil
                                      nil)
                                     ("2"
                                      (expand "specific_noise")
                                      (("2"
                                        (rewrites
                                         ("containment_cnt"
                                          "var_ac_noise_unf"
                                          "containment_sub"
                                          "containment_mul"))
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (replaces -2 :dir RL)
                                      (("3"
                                        (replaces -2 :dir RL)
                                        (("3"
                                          (replaces -2 :dir RL)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "specific_noise")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (test_noise_2-2 "" 3620404499
   ("" (skeep)
    ((""
      (name "ac_expr"
            "mult_ac_ac(var_ac([|0,1|],0),sub_ac_ac(const_ac(1), var_ac([|0,1|],0)),1)")
      (("" (case "containment(x*(1-x),ac_expr)")
        (("1" (case "eval_by_intervals(ac_expr) << [|0,0.5|]")
          (("1" (postpone) nil nil) ("2" (eval-formula) nil nil)) nil)
         ("2" (replaces -1 :dir RL)
          (("2" (use "containment_var")
            (("2" (prop)
              (("2" (skolem -1 "rx")
                (("2" (hide -2)
                  (("2" (hide 2)
                    (("2" (expand "containment" :assert? none)
                      (("2" (name "N_vars" "single_n(0,rx)")
                        (("2"
                          (name "N_mul"
                                "mul_noise_value(var_ac([|0, 1|], 0),sub_ac_ac(const_ac(1),var_ac([|0, 1|], 0)),N_vars)")
                          (("2"
                            (inst 1
                             "cons((0::nat, rx::Epsilon), cons((1::nat,N_mul),null))")
                            (("2"
                              (rewrites ("containment_cnt"
                                         "var_ac_noise_unf"
                                         "containment_sub"
                                         "containment_mul"))
                              (("1"
                                (rewrites
                                 ("containment_cnt"
                                  "var_ac_noise_unf"
                                  "containment_sub"
                                  "containment_mul"))
                                nil
                                nil)
                               ("2"
                                (rewrites
                                 ("containment_cnt"
                                  "var_ac_noise_unf"
                                  "containment_sub"
                                  "containment_mul"))
                                (("1"
                                  (rewrites
                                   ("containment_cnt"
                                    "var_ac_noise_unf"
                                    "containment_sub"
                                    "containment_mul"))
                                  nil
                                  nil)
                                 ("2"
                                  (rewrites
                                   ("containment_cnt"
                                    "var_ac_noise_unf"
                                    "containment_sub"
                                    "containment_mul"))
                                  nil
                                  nil))
                                nil)
                               ("3"
                                (replaces -1 :dir RL)
                                (("3"
                                  (replaces -1 :dir RL)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (test_noise_2-1 nil 3619956429
   ("" (skeep)
    ((""
      (name "ac_expr"
            "mult_ac_ac(var_ac([|0,1|],0),sub_ac_ac(const_ac(1), var_ac([|0,1|],0)),1)")
      (("" (case "containment(x*(1-x),ac_expr)")
        (("1" (case "eval_by_intervals(ac_expr) << [|0,0.5|]")
          (("1" (postpone) nil nil) ("2" (eval-formula) nil nil)) nil)
         ("2" (replaces -1 :dir RL)
          (("2" (use "containment_var")
            (("2" (prop)
              (("2" (skolem -1 "rx")
                (("2" (hide -2)
                  (("2" (hide 2)
                    (("2" (expand "containment" :assert? none)
                      (("2" (name "N_vars" "single_n(0,rx)")
                        (("2"
                          (name "N_mul"
                                "mul_noise_value(x,(1-x),var_ac([|0, 1|], 0),sub_ac_ac(const_ac(1),var_ac([|0, 1|], 0)),N_vars)")
                          (("2"
                            (inst 1
                             "cons((0::nat, rx::Epsilon), cons((1::nat,N_mul),null))")
                            (("2"
                              (rewrites ("containment_cnt"
                                         "var_ac_noise_unf"
                                         "containment_sub"
                                         "containment_mul"))
                              (("1"
                                (rewrites
                                 ("containment_cnt"
                                  "var_ac_noise_unf"
                                  "containment_sub"
                                  "containment_mul"))
                                nil
                                nil)
                               ("2"
                                (rewrites
                                 ("containment_cnt"
                                  "var_ac_noise_unf"
                                  "containment_sub"
                                  "containment_mul"))
                                (("1"
                                  (rewrites
                                   ("containment_cnt"
                                    "var_ac_noise_unf"
                                    "containment_sub"
                                    "containment_mul"))
                                  nil
                                  nil)
                                 ("2"
                                  (rewrites
                                   ("containment_cnt"
                                    "var_ac_noise_unf"
                                    "containment_sub"
                                    "containment_mul"))
                                  nil
                                  nil))
                                nil)
                               ("3"
                                (replaces -1 :dir RL)
                                (("3"
                                  (replaces -1 :dir RL)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (test_noise_3 0
  (test_noise_3-1 nil 3621861213
   ("" (skeep)
    ((""
      (name "ac_expr"
            "mult_ac_ac(var_ac([|0,1|],0),sub_ac_ac(const_ac(1), var_ac([|0,1|],0)),1)")
      (("1" (case "containment(x*(1-x),ac_expr)")
        (("1" (use "containment_interval")
          (("1" (prop)
            (("1"
              (use "Member_trans"
                   ("x" "x - x * x" "X" "eval_by_intervals(ac_expr)"
                    "Y" "[|0, 1 / 2|]"))
              (("1" (eval-expr "eval_by_intervals(ac_expr)")
                (("1" (assert) (("1" (eval-formula 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replaces -1 :dir RL)
          (("2" (use "containment_var")
            (("2" (prop)
              (("2" (skolem -1 "rx")
                (("2" (hide 2)
                  (("2" (expand "containment" :assert? none)
                    (("2" (name "N_vars" "extend_N(0,rx,empty_noise)")
                      (("2"
                        (name "N_mul"
                              "mul_noise_value(var_ac([|0, 1|], 0),sub_ac_ac(const_ac(1),var_ac([|0, 1|], 0)),N_vars)")
                        (("2"
                          (name "specific_noise"
                                "extend_N(0::nat, rx::Epsilon, extend_N(1::nat,N_mul,empty_noise))")
                          (("2" (inst 1 "specific_noise")
                            (("2"
                              (expand "specific_noise" :assert? none)
                              (("2"
                                (expand "N_mul" :assert? none)
                                (("2"
                                  (apply
                                   (repeat*
                                    (rewrites
                                     ("first__extend_N"
                                      "gnbi_extend_N_trivial"
                                      "gnbi_extend_N_unf"
                                      "containment_cnt"
                                      "var_ac_noise_unf3"
                                      "containment_sub"
                                      "containment_mul")
                                     :fnums
                                     +)))
                                  (("2" (eval-formula) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (eval-formula 1) nil nil))
      nil))
    nil)
   ((const_ac const-decl "AffineCombination" affine nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (var_ac const-decl "AffineCombination" affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (extend_N const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (specific_noise skolem-const-decl "Noise" affine nil)
    (containment_mul formula-decl nil affine nil)
    (gnbi_extend_N_trivial formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (gnbi_extend_N_unf formula-decl nil affine nil)
    (first__extend_N formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_ol?_empty_noise formula-decl nil affine nil)
    (extend_N_prop1 formula-decl nil affine nil)
    (var_ac_noise_unf3 formula-decl nil affine nil)
    (containment_cnt formula-decl nil affine nil)
    (containment_sub formula-decl nil affine nil)
    (N_mul skolem-const-decl "Epsilon" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (mul_noise_value_is_Epsilon expr-judgement "Epsilon" affine nil)
    (containment_var formula-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (containment const-decl "bool" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (test_noise_3_auto 0
  (test_noise_3_auto-1 nil 3621868499
   ("" (skeep) (("" (affine) nil nil)) nil)
   ((containment const-decl "bool" affine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (eval_by_intervals const-decl "Interval" affine nil)
    (containment_interval formula-decl nil affine nil)
    (containment_var formula-decl nil affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (null_ol?_empty_noise formula-decl nil affine nil)
    (extend_N_prop1 formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mul_noise_value_is_Epsilon expr-judgement "Epsilon" affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (extend_N const-decl "Noise" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (noise_61 skolem-const-decl "Noise" affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first__extend_N formula-decl nil affine nil)
    (gnbi_extend_N_unf formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (gnbi_extend_N_trivial formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (var_ac_noise_unf3 formula-decl nil affine nil)
    (containment_sub formula-decl nil affine nil)
    (af_name__60 skolem-const-decl "AffineCombination" affine nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (var_ac const-decl "AffineCombination" affine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (test 0
       (test-2 "" 3629928343
        ("" (skeep)
         (("" (relabel (:pairing |af!:113|) (1))
           (("" (assert |af!:113|)
             ((""
               (name-label*
                ("af_name__15"
                 "sub_ac_ac(var_ac([|0,1|],0),mult_ac_ac(var_ac([|0,1|],0),var_ac([|0,1|],0),1))")
                :hide? t :label (:pairing (|wfn:115| |af_name_:114|))
                :tcc-label nil :tcc-step nil)
               (("1" (case "containment(x - x * x,af_name__15)")
                 (("1" (use "containment_interval")
                   (("1" (prop)
                     (("1"
                       (use "Member_trans"
                            ("x"
                             (typechecked "x - x * x" "number_field")
                             "X" "eval_by_intervals(af_name__15)" "Y"
                             (typechecked "[|0, 1/2|]" "Interval")))
                       (("1" (assert) (("1" (eval-formula 1) nil nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (expand "af_name__15" :assert? none)
                   (("2" (use "containment_var" ("x" "x" "n" 0))
                     (("2" (prop)
                       (("2" (skolem -1 "epsilon_x_14")
                         (("2" (expand "containment" :assert? none)
                           (("2"
                             (name-label*
                              ("noise_16"
                               "extend_N(0::nat,epsilon_x_14::Epsilon,extend_N(1::nat,mul_noise_value(var_ac([|0,1|],0),var_ac([|0,1|],0),extend_N(0::nat,epsilon_x_14::Epsilon,empty_noise))::Epsilon,empty_noise))")
                              :hide? t :label
                              (:pairing (|wfn:122| |noise:121|))
                              :tcc-label nil :tcc-step nil)
                             (("2" (inst 1 "noise_16")
                               (("2"
                                 (expand "noise_16" :assert? none)
                                 (("2"
                                   (apply
                                    (repeat*
                                     (rewrites
                                      ("first__extend_N"
                                       "gnbi_extend_N_trivial"
                                       "gnbi_extend_N_unf"
                                       "containment_cnt"
                                       "var_ac_noise_unf3"
                                       "containment_sub"
                                       "containment_add"
                                       "containment_mul"
                                       "containment_mul_s"
                                       "containment_add_s"
                                       "containment_neg")
                                      :fnums
                                      1)))
                                   (("2" (eval-formula 1) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2"
                 (touch
                  (delabel
                   (|wfn:115| |wfc-tccs:116| nil |af_name_:114|)
                   :hidden? t))
                 (("2" (eval-formula 1) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (BaseType type-eq-decl nil affine nil)
         (ErrorTerms type-eq-decl nil affine nil)
         (AffineCombination type-eq-decl nil affine nil)
         (boolean nonempty-type-decl nil booleans nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (sub_ac_ac const-decl "AffineCombination" affine nil)
         (real nonempty-type-from-decl nil reals nil)
         (Interval type-eq-decl nil interval "interval_arith/")
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (var_ac const-decl "AffineCombination" affine nil)
         ([\|\|] const-decl "Interval" interval "interval_arith/")
         (/= const-decl "boolean" notequal nil)
         (nzBaseType type-eq-decl nil affine nil)
         (list type-decl nil list_adt nil)
         (lt_idx const-decl "bool" indexed_list nil)
         (ordered_list? def-decl "bool" ordered_list nil)
         (next_idx_2 const-decl "nat" affine nil)
         (mult_ac_ac const-decl "AffineCombination" affine nil)
         (af_name__15 skolem-const-decl "AffineCombination" affine nil)
         (containment_sub formula-decl nil affine nil)
         (var_ac_noise_unf3 formula-decl nil affine nil)
         (containment_mul formula-decl nil affine nil)
         (gnbi_extend_N_trivial formula-decl nil affine nil)
         (first_noises const-decl "Noise" affine nil)
         (gnbi_extend_N_unf formula-decl nil affine nil)
         (first__extend_N formula-decl nil affine nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (noise_16 skolem-const-decl "Noise" affine nil)
         (empty_noise const-decl "Noise" affine nil)
         (mul_noise_value const-decl "real" affine nil)
         (extend_N const-decl "Noise" affine nil)
         (car_ol const-decl "T" ordered_list nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (< const-decl "bool" reals nil)
         (null_ol? const-decl "bool" ordered_list nil)
         (ordered_list type-eq-decl nil ordered_list nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (Noise type-eq-decl nil affine nil)
         (nzEpsilon type-eq-decl nil affine nil)
         (Epsilon type-eq-decl nil affine nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (<= const-decl "bool" reals nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (mul_noise_value_is_Epsilon expr-judgement "Epsilon" affine
          nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (extend_N_prop1 formula-decl nil affine nil)
         (null_ol?_empty_noise formula-decl nil affine nil)
         (minus_odd_is_odd application-judgement "odd_int" integers
          nil)
         (containment_var formula-decl nil affine nil)
         (containment_interval formula-decl nil affine nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields
            nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (eval_by_intervals const-decl "Interval" affine nil)
         (Member_trans formula-decl nil interval "interval_arith/")
         (TRUE const-decl "bool" booleans nil)
         (id const-decl "(bijective?[T, T])" identity nil)
         (bijective? const-decl "bool" functions nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields
            nil)
         (- const-decl "[numfield, numfield -> numfield]" number_fields
            nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (containment const-decl "bool" affine nil)
         (real_times_real_is_real application-judgement "real" reals
          nil)
         (real_minus_real_is_real application-judgement "real" reals
          nil)
         (posrat_div_posrat_is_posrat application-judgement "posrat"
          rationals nil))
        shostak)
       (test-1 nil 3622299451
        ("" (skeep)
         (("" (relabel (:pairing |af!:|) (1))
           (("" (assert |af!:|)
             ((""
               (name-label*
                ("af_name_"
                 "sub_ac_ac(var_ac([|0,1|],0),mult_ac_ac(var_ac([|0,1|],0),var_ac([|0,1|],0),1))")
                :hide? t :label (:pairing (|wfn:| |af_name_:|))
                :tcc-label nil :tcc-step nil)
               (("1" (case "containment(x - x * x,af_name_)")
                 (("1" (use "containment_interval")
                   (("1" (prop)
                     (("1"
                       (use "Member_trans"
                            ("x" (typechecked "x - x * x" "numfield")
                             "X" "eval_by_intervals(af_name_)" "Y"
                             (typechecked "[|0, 1 / 2|]" "Interval")))
                       (("1" (assert) (("1" (eval-formula 1) nil nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (expand "af_name_" :assert? none)
                   (("2" (use "containment_var" ("x" "x" "n" 0))
                     (("2" (prop)
                       (("2" (skolem -1 "rx")
                         (("2" (expand "containment" :assert? none)
                           (("2"
                             (name-label*
                              ("noise_1"
                               "extend_N(0::nat,rx::Epsilon,extend_N(1::nat,mul_noise_value(var_ac([|0,1|],0),var_ac([|0,1|],0),extend_N(0::nat,rx::Epsilon,empty_noise))::Epsilon,empty_noise))")
                              :hide? t :label
                              (:pairing (|wfn1:| |noise:|)) :tcc-label
                              nil :tcc-step nil)
                             (("2" (inst 1 "noise_1")
                               (("2"
                                 (expand "noise_1" :assert? none)
                                 (("2"
                                   (apply
                                    (repeat*
                                     (rewrites
                                      ("first__extend_N"
                                       "gnbi_extend_N_trivial"
                                       "gnbi_extend_N_unf"
                                       "containment_cnt"
                                       "var_ac_noise_unf3"
                                       "containment_sub"
                                       "containment_add"
                                       "containment_mul")
                                      :fnums
                                      1)))
                                   (("2" (eval-formula 1) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2"
                 (touch
                  (delabel (|wfn:| |wfc-tccs:| nil |af_name_:|)
                   :hidden? t))
                 (("2" (eval-formula 1) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((Member_trans formula-decl nil interval "interval_arith/")
         (ordered_list type-eq-decl nil ordered_list nil)
         (null_ol? const-decl "bool" ordered_list nil)
         (car_ol const-decl "T" ordered_list nil)
         (ordered_list? def-decl "bool" ordered_list nil)
         (Interval type-eq-decl nil interval "interval_arith/"))
        shostak))
 (test_leq 0
  (test_leq-2 "" 3623078635
   ("" (skeep)
    (("" (relabel (:pairing |af!:|) (1))
      (("" (assert |af!:|)
        ((""
          (name-label*
           ("af_name_"
            "sub_ac_ac(var_ac([|0,1|],0),mult_ac_ac(var_ac([|0,1|],0),var_ac([|0,1|],0),1))")
           :hide? t :label (:pairing (|wfn:| |af_name_:|)) :tcc-label
           nil :tcc-step nil)
          (("1" (case "containment(x - x * x,af_name_)")
            (("1" (use "containment_interval")
              (("1" (prop)
                (("1" (eval-expr "eval_by_intervals(af_name_)")
                  (("1" (expand "##") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "af_name_" :assert? none)
              (("2" (use "containment_var" ("x" "x" "n" 0))
                (("2" (prop)
                  (("2" (skolem -1 "rx")
                    (("2" (expand "containment" :assert? none)
                      (("2"
                        (name-label*
                         ("noise_1"
                          "extend_N(0::nat,rx::Epsilon,extend_N(1::nat,mul_noise_value(var_ac([|0,1|],0),var_ac([|0,1|],0),extend_N(0::nat,rx::Epsilon,empty_noise))::Epsilon,empty_noise))")
                         :hide? t :label (:pairing (|wfn1:| |noise:|))
                         :tcc-label nil :tcc-step nil)
                        (("2" (inst 1 "noise_1")
                          (("2" (expand "noise_1" :assert? none)
                            (("2"
                              (apply (repeat*
                                      (rewrites
                                       ("first__extend_N"
                                        "gnbi_extend_N_trivial"
                                        "gnbi_extend_N_unf"
                                        "containment_cnt"
                                        "var_ac_noise_unf3"
                                        "containment_sub"
                                        "containment_add"
                                        "containment_mul")
                                       :fnums
                                       1)))
                              (("2" (eval-formula 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (touch
             (delabel (|wfn:| |wfc-tccs:| nil |af_name_:|) :hidden? t))
            (("2" (eval-formula 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx_2 const-decl "nat" affine nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    (af_name_ skolem-const-decl "AffineCombination" affine nil)
    (containment_sub formula-decl nil affine nil)
    (var_ac_noise_unf3 formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (gnbi_extend_N_trivial formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (gnbi_extend_N_unf formula-decl nil affine nil)
    (first__extend_N formula-decl nil affine nil)
    (noise_1 skolem-const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mul_noise_value_is_Epsilon expr-judgement "Epsilon" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (extend_N_prop1 formula-decl nil affine nil)
    (null_ol?_empty_noise formula-decl nil affine nil)
    (containment_var formula-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (containment const-decl "bool" affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak)
  (test_leq-1 nil 3623076450
   ("" (skeep)
    (("" (relabel (:pairing |af!:|) (1))
      (("" (assert |af!:|)
        ((""
          (name-label*
           ("af_name_"
            "sub_ac_ac(var_ac([|0,1|],0),mult_ac_ac(var_ac([|0,1|],0),var_ac([|0,1|],0),1))")
           :hide? t :label (:pairing (|wfn:| |af_name_:|)) :tcc-label
           nil :tcc-step nil)
          (("1" (case "containment(x - x * x,af_name_)")
            (("1" (use "containment_interval")
              (("1" (prop)
                (("1" (eval-expr "eval_by_intervals(af_name_)")
                  (("1" (replaces -1)
                    (("1" (expand "##") (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "af_name_" :assert? none)
              (("2" (use "containment_var" ("x" "x" "n" 0))
                (("2" (prop)
                  (("2" (skolem -1 "rx")
                    (("2" (expand "containment" :assert? none)
                      (("2"
                        (name-label*
                         ("noise_1"
                          "extend_N(0::nat,rx::Epsilon,extend_N(1::nat,mul_noise_value(var_ac([|0,1|],0),var_ac([|0,1|],0),extend_N(0::nat,rx::Epsilon,empty_noise))::Epsilon,empty_noise))")
                         :hide? t :label (:pairing (|wfn1:| |noise:|))
                         :tcc-label nil :tcc-step nil)
                        (("2" (inst 1 "noise_1")
                          (("2" (expand "noise_1" :assert? none)
                            (("2"
                              (apply (repeat*
                                      (rewrites
                                       ("first__extend_N"
                                        "gnbi_extend_N_trivial"
                                        "gnbi_extend_N_unf"
                                        "containment_cnt"
                                        "var_ac_noise_unf3"
                                        "containment_sub"
                                        "containment_add"
                                        "containment_mul")
                                       :fnums
                                       1)))
                              (("2" (eval-formula 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (touch
             (delabel (|wfn:| |wfc-tccs:| nil |af_name_:|) :hidden? t))
            (("2" (eval-formula 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Interval type-eq-decl nil interval "interval_arith/")
    (ordered_list? def-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (|##| const-decl "bool" interval "interval_arith/"))
   shostak))
 (test_leq_1 0
  (test_leq_1-1 nil 3623079591
   ("" (skeep)
    (("" (relabel (:pairing |af!:|) (1))
      (("" (assert |af!:|)
        ((""
          (name-label*
           ("af_name_"
            "sub_ac_ac(var_ac([|0,1|],0),mult_ac_ac(var_ac([|0,1|],0),var_ac([|0,1|],0),1))")
           :hide? t :label (:pairing (|wfn:| |af_name_:|)) :tcc-label
           nil :tcc-step nil)
          (("1" (case "containment(x - x * x,af_name_)")
            (("1" (use "containment_interval")
              (("1" (prop)
                (("1" (eval-expr "eval_by_intervals(af_name_)")
                  (("1" (expand "##") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "af_name_" :assert? none)
              (("2" (use "containment_var" ("x" "x" "n" 0))
                (("2" (prop)
                  (("2" (skolem -1 "rx")
                    (("2" (expand "containment" :assert? none)
                      (("2"
                        (name-label*
                         ("noise_1"
                          "extend_N(0::nat,rx::Epsilon,extend_N(1::nat,mul_noise_value(var_ac([|0,1|],0),var_ac([|0,1|],0),extend_N(0::nat,rx::Epsilon,empty_noise))::Epsilon,empty_noise))")
                         :hide? t :label (:pairing (|wfn1:| |noise:|))
                         :tcc-label nil :tcc-step nil)
                        (("2" (inst 1 "noise_1")
                          (("2" (expand "noise_1" :assert? none)
                            (("2"
                              (apply (repeat*
                                      (rewrites
                                       ("first__extend_N"
                                        "gnbi_extend_N_trivial"
                                        "gnbi_extend_N_unf"
                                        "containment_cnt"
                                        "var_ac_noise_unf3"
                                        "containment_sub"
                                        "containment_add"
                                        "containment_mul")
                                       :fnums
                                       1)))
                              (("2" (eval-formula 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (touch
             (delabel (|wfn:| |wfc-tccs:| nil |af_name_:|) :hidden? t))
            (("2" (eval-formula 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx_2 const-decl "nat" affine nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    (af_name_ skolem-const-decl "AffineCombination" affine nil)
    (containment_sub formula-decl nil affine nil)
    (var_ac_noise_unf3 formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (gnbi_extend_N_trivial formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (gnbi_extend_N_unf formula-decl nil affine nil)
    (first__extend_N formula-decl nil affine nil)
    (noise_1 skolem-const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mul_noise_value_is_Epsilon expr-judgement "Epsilon" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (extend_N_prop1 formula-decl nil affine nil)
    (null_ol?_empty_noise formula-decl nil affine nil)
    (containment_var formula-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (containment const-decl "bool" affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (foo1 0
  (foo1-1 nil 3622299468 ("" (skeep) (("" (affine) nil nil)) nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (containment const-decl "bool" affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (eval_by_intervals const-decl "Interval" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (containment_interval formula-decl nil affine nil)
    (containment_cnt formula-decl nil affine nil)
    (noise_63 skolem-const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (af_name__62 skolem-const-decl "AffineCombination" affine nil)
    (const_ac const-decl "AffineCombination" affine nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (foo2 0
  (foo2-1 nil 3622299490
   ("" (skeep)
    (("" (relabel (:pairing |af!:|) (1))
      (("" (assert |af!:|)
        ((""
          (name-label*
           ("af_name_"
            "sub_ac_ac(var_ac([|-1,1|],0),var_ac([|-100,100|],1))")
           :hide? t :label (:pairing (|wfn:| |af_name_:|)) :tcc-label
           nil :tcc-step nil)
          (("" (case "containment(x - y,af_name_)")
            (("1" (use "containment_interval")
              (("1" (prop)
                (("1" (eval-expr "eval_by_intervals(af_name_)")
                  (("1" (expand "##") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "af_name_" :assert? none)
              (("2" (use "containment_var" ("x" "x" "n" 0))
                (("2" (prop)
                  (("1" (skolem -1 "rx")
                    (("1" (use "containment_var" ("x" "y" "n" 1))
                      (("1" (prop)
                        (("1" (skolem -1 "ry")
                          (("1" (expand "containment" :assert? none)
                            (("1"
                              (name-label*
                               ("noise_1"
                                "extend_N(0::nat,rx::Epsilon,extend_N(1::nat,ry::Epsilon,empty_noise))")
                               :hide? t :label
                               (:pairing (|wfn1:| |noise:|)) :tcc-label
                               nil :tcc-step nil)
                              (("1"
                                (inst 1 "noise_1")
                                (("1"
                                  (expand "noise_1" :assert? none)
                                  (("1"
                                    (apply
                                     (repeat*
                                      (rewrites
                                       ("first__extend_N"
                                        "gnbi_extend_N_trivial"
                                        "gnbi_extend_N_unf"
                                        "containment_cnt"
                                        "var_ac_noise_unf3"
                                        "containment_sub"
                                        "containment_add"
                                        "containment_mul")
                                       :fnums
                                       1)))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "##") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "##") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (af_name_ skolem-const-decl "AffineCombination" affine nil)
    (null_ol?_empty_noise formula-decl nil affine nil)
    (extend_N_prop1 formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (extend_N const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (noise_1 skolem-const-decl "Noise" affine nil)
    (containment_sub formula-decl nil affine nil)
    (containment_var formula-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (containment const-decl "bool" affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sandbox 0
  (sandbox-1 nil 3622305690 ("" (skeep) (("" (affine) nil nil)) nil)
   ((containment const-decl "bool" affine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (eval_by_intervals const-decl "Interval" affine nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (containment_interval formula-decl nil affine nil)
    (containment_var formula-decl nil affine nil)
    (null_ol?_empty_noise formula-decl nil affine nil)
    (extend_N_prop1 formula-decl nil affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mul_noise_value_is_Epsilon expr-judgement "Epsilon" affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (extend_N const-decl "Noise" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (noise_67 skolem-const-decl "Noise" affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first__extend_N formula-decl nil affine nil)
    (gnbi_extend_N_unf formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (gnbi_extend_N_trivial formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (var_ac_noise_unf3 formula-decl nil affine nil)
    (containment_sub formula-decl nil affine nil)
    (af_name__66 skolem-const-decl "AffineCombination" affine nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (var_ac const-decl "AffineCombination" affine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (test_noise_1 0
  (Automatic-proof "" 3622309577
   ("" (skeep) (("" (affine) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (no "" 3619890551
   ("" (skeep)
    ((""
      (name "ac_expr"
            "add_ac_ac(var_ac([|1,2|],0), sub_ac_ac(var_ac([|0,1|],1), var_ac([|1,2|],0)))")
      (("" (case "containment(x + (y - x), ac_expr)")
        (("1" (case "eval_by_intervals(ac_expr) << [|0,1|]")
          (("1" (postpone) nil nil) ("2" (eval-formula) nil nil)) nil)
         ("2" (replaces -1 :dir rl)
          (("2" (expand "containment" :assert? none)
            (("2" (use "containment_var")
              (("2" (prop)
                (("2" (hide -2)
                  (("2" (lemma "containment_var")
                    (("2" (inst? -1 :where -3)
                      (("2" (inst -1 "1")
                        (("2" (prop)
                          (("2" (hide -3)
                            (("2" (hide 2)
                              (("2"
                                (skolem -1 "ry")
                                (("2"
                                  (skolem -2 "rx")
                                  (("2"
                                    (inst
                                     1
                                     "cons((0,rx),cons((1,ry),null))")
                                    (("1"
                                      (rewrite "containment_add")
                                      (("1" (postpone) nil nil)
                                       ("2"
                                        (rewrite "containment_sub")
                                        (("1" (postpone) nil nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Interval type-eq-decl nil interval "interval_arith/")
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Member_trans formula-decl nil interval "interval_arith/"))
   shostak)
  (test_noise_1-1 nil 3619887836
   ("" (skeep)
    ((""
      (name "ac_expr"
            "add_ac_ac(var_ac([|1,2|],0), sub_ac_ac(var_ac([|0,1|],1), var_ac([|1,2|],0)))")
      (("" (case "containment(x + (y - x), ac_expr)")
        (("1" (case "eval_by_intervals(ac_expr) << [|0,1|]")
          (("1" (postpone) nil nil) ("2" (eval-formula) nil nil)) nil)
         ("2" (replaces -1 :dir rl)
          (("2" (expand "containment" :assert? none)
            (("2" (use "var_inclusion")
              (("2" (prop)
                (("2" (hide -2)
                  (("2" (lemma "var_inclusion")
                    (("2" (inst? -1 :where -3)
                      (("2" (inst -1 "1")
                        (("2" (prop)
                          (("2" (hide -3)
                            (("2" (hide 2)
                              (("2"
                                (expand "containment")
                                (("2"
                                  (skolem -1 "Ny")
                                  (("2"
                                    (skolem -2 "Nx")
                                    (("2"
                                      (inst 1 "append(Ny,Nx)")
                                      (("2"
                                        (rewrite "containment_add")
                                        (("1" (postpone) nil nil)
                                         ("2"
                                          (rewrite "containment_sub")
                                          (("1" (postpone) nil nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (test_noise_3_0_10 0
  (test_noise_3_0_10-1 nil 3622297090
   ("" (skeep)
    (("" (relabel (:pairing |af!:178|) (1))
      (("" (assert |af!:178|)
        ((""
          (name-label*
           ("af_name__22"
            "sub_ac_ac(var_ac([|0,10|],0),mult_ac_ac(var_ac([|0,10|],0),var_ac([|0,10|],0),1))")
           :hide? t :label (:pairing (|wfn:180| |af_name_:179|))
           :tcc-label nil :tcc-step nil)
          (("1" (case "containment(x - x * x,af_name__22)")
            (("1" (use "containment_interval")
              (("1" (prop)
                (("1"
                  (use "Member_trans"
                       ("x" (typechecked "x - x * x" "number_field")
                        "X" "eval_by_intervals(af_name__22)" "Y"
                        (typechecked "[|-90, 50|]" "Interval")))
                  (("1" (assert) (("1" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "af_name__22" :assert? none)
              (("2" (use "containment_var" ("x" "x" "n" 0))
                (("2" (prop)
                  (("2" (skolem -1 "epsilon_x_21")
                    (("2" (expand "containment" :assert? none)
                      (("2"
                        (name-label*
                         ("noise_23"
                          "extend_N(0::nat,epsilon_x_21::Epsilon,extend_N(1::nat,mul_noise_value(var_ac([|0,10|],0),var_ac([|0,10|],0),extend_N(0::nat,epsilon_x_21::Epsilon,empty_noise))::Epsilon,empty_noise))")
                         :hide? t :label
                         (:pairing (|wfn:187| |noise:186|)) :tcc-label
                         nil :tcc-step nil)
                        (("2" (inst 1 "noise_23")
                          (("2" (expand "noise_23" :assert? none)
                            (("2"
                              (apply (repeat*
                                      (rewrites
                                       ("first__extend_N"
                                        "gnbi_extend_N_trivial"
                                        "gnbi_extend_N_unf"
                                        "containment_cnt"
                                        "var_ac_noise_unf3"
                                        "containment_sub"
                                        "containment_add"
                                        "containment_mul"
                                        "containment_mul_s"
                                        "containment_add_s"
                                        "containment_neg")
                                       :fnums
                                       1)))
                              (("2" (eval-formula 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (touch
             (delabel (|wfn:180| |wfc-tccs:181| nil |af_name_:179|)
              :hidden? t))
            (("2" (eval-formula 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx_2 const-decl "nat" affine nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    (af_name__22 skolem-const-decl "AffineCombination" affine nil)
    (containment_sub formula-decl nil affine nil)
    (var_ac_noise_unf3 formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (gnbi_extend_N_trivial formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (gnbi_extend_N_unf formula-decl nil affine nil)
    (first__extend_N formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (noise_23 skolem-const-decl "Noise" affine nil)
    (mul_noise_value_is_Epsilon expr-judgement "Epsilon" affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (extend_N const-decl "Noise" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (extend_N_prop1 formula-decl nil affine nil)
    (null_ol?_empty_noise formula-decl nil affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (containment_var formula-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (containment const-decl "bool" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (test_07 0
  (test_07-1 nil 3622309994 ("" (skeep) (("" (affine) nil nil)) nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (containment const-decl "bool" affine nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (eval_by_intervals const-decl "Interval" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (containment_interval formula-decl nil affine nil)
    (containment_cnt formula-decl nil affine nil)
    (noise_69 skolem-const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (af_name__68 skolem-const-decl "AffineCombination" affine nil)
    (const_ac const-decl "AffineCombination" affine nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (test_08 0
  (test_08-1 nil 3622310053 ("" (skeep) (("" (affine) nil nil)) nil)
   ((containment const-decl "bool" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (eval_by_intervals const-decl "Interval" affine nil)
    (containment_interval formula-decl nil affine nil)
    (containment_var formula-decl nil affine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (extend_N const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (noise_72 skolem-const-decl "Noise" affine nil)
    (containment_mul_s formula-decl nil affine nil)
    (af_name__71 skolem-const-decl "AffineCombination" affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (var_ac const-decl "AffineCombination" affine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (mul_s_ac const-decl "AffineCombination" affine nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (test_09_TCC1 0
  (test_09_TCC1-1 nil 3622310718 ("" (subtype-tcc) nil nil)
   (([\|\|] const-decl "Interval" interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (test_09 0
  (test_09-1 nil 3622310719
   ("" (skeep)
    (("" (assert)
      (("" (expand "^")
        (("" (expand "expt")
          (("" (expand "expt")
            (("" (expand "expt") (("" (affine) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (const_ac const-decl "AffineCombination" affine nil)
    (af_name__73 skolem-const-decl "AffineCombination" affine nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (noise_74 skolem-const-decl "Noise" affine nil)
    (containment_cnt formula-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (eval_by_intervals const-decl "Interval" affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (containment const-decl "bool" affine nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (^ const-decl "real" exponentiation nil))
   shostak))
 (test_10 0
  (test_10-1 nil 3623139920
   ("" (skeep)
    (("" (relabel (:pairing |af!:|) (1))
      (("" (assert |af!:|)
        ((""
          (name-label* ("af_name_" "mul_s_ac(2,var_ac([|-2,5|],0))")
           :hide? t :label (:pairing (|wfn:| |af_name_:|)) :tcc-label
           nil :tcc-step nil)
          (("" (case "containment(2 * x,af_name_)")
            (("1" (use "containment_interval")
              (("1" (prop)
                (("1"
                  (use "Member_trans"
                       ("x" (typechecked "2 * x" "number_field") "X"
                        "eval_by_intervals(af_name_)" "Y"
                        (typechecked "[|-4, 10|]" "Interval")))
                  (("1" (assert) (("1" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "af_name_" :assert? none)
              (("2" (use "containment_var" ("x" "x" "n" 0))
                (("2" (prop)
                  (("2" (skolem -1 "epsilon_x")
                    (("2" (expand "containment" :assert? none)
                      (("2"
                        (name-label*
                         ("noise_1"
                          "extend_N(0::nat,epsilon_x::Epsilon,empty_noise)")
                         :hide? t :label (:pairing (|wfn1:| |noise:|))
                         :tcc-label nil :tcc-step nil)
                        (("2" (inst 1 "noise_1")
                          (("2" (expand "noise_1" :assert? none)
                            (("2"
                              (apply (repeat*
                                      (rewrites
                                       ("first__extend_N"
                                        "gnbi_extend_N_trivial"
                                        "gnbi_extend_N_unf"
                                        "containment_cnt"
                                        "var_ac_noise_unf3"
                                        "containment_sub"
                                        "containment_add"
                                        "containment_mul"
                                        "containment_mul_s"
                                        "containment_add_s"
                                        "containment_neg")
                                       :fnums
                                       1)))
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (mul_s_ac const-decl "AffineCombination" affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (af_name_ skolem-const-decl "AffineCombination" affine nil)
    (containment_mul_s formula-decl nil affine nil)
    (noise_1 skolem-const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (containment_var formula-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (containment const-decl "bool" affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (test_11 0
  (test_11-1 nil 3623096656
   ("" (skeep)
    (("" (relabel (:pairing |af!:|) (1))
      (("" (assert |af!:|)
        ((""
          (name-label* ("af_name_" "add_s_ac(100,var_ac([|-2,5|],0))")
           :hide? t :label (:pairing (|wfn:| |af_name_:|)) :tcc-label
           nil :tcc-step nil)
          (("" (case "containment(100 + x,af_name_)")
            (("1" (use "containment_interval")
              (("1" (prop)
                (("1"
                  (use "Member_trans"
                       ("x" (typechecked "100 + x" "number_field") "X"
                        "eval_by_intervals(af_name_)" "Y"
                        (typechecked "[|98, 105|]" "Interval")))
                  (("1" (assert) (("1" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "af_name_" :assert? none)
              (("2" (use "containment_var" ("x" "x" "n" 0))
                (("2" (prop)
                  (("2" (skolem -1 "rx")
                    (("2" (expand "containment" :assert? none)
                      (("2"
                        (name-label*
                         ("noise_1"
                          "extend_N(0::nat,rx::Epsilon,empty_noise)")
                         :hide? t :label (:pairing (|wfn1:| |noise:|))
                         :tcc-label nil :tcc-step nil)
                        (("2" (inst 1 "noise_1")
                          (("2" (expand "noise_1" :assert? none)
                            (("2"
                              (apply (repeat*
                                      (rewrites
                                       ("first__extend_N"
                                        "gnbi_extend_N_trivial"
                                        "gnbi_extend_N_unf"
                                        "containment_cnt"
                                        "var_ac_noise_unf3"
                                        "containment_sub"
                                        "containment_add"
                                        "containment_mul"
                                        "containment_mul_s"
                                        "containment_add_s")
                                       :fnums
                                       1)))
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (add_s_ac const-decl "AffineCombination" affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (af_name_ skolem-const-decl "AffineCombination" affine nil)
    (containment_add_s formula-decl nil affine nil)
    (noise_1 skolem-const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (containment_var formula-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (containment const-decl "bool" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (test_12 0
  (test_12-1 nil 3623096831
   ("" (skeep)
    (("" (relabel (:pairing |af!:|) (1))
      (("" (assert |af!:|)
        ((""
          (name-label* ("af_name_" "neg_ac(var_ac([|-20,50|],0))")
           :hide? t :label (:pairing (|wfn:| |af_name_:|)) :tcc-label
           nil :tcc-step nil)
          (("" (case "containment(-x,af_name_)")
            (("1" (use "containment_interval")
              (("1" (prop)
                (("1"
                  (use "Member_trans"
                       ("x" (typechecked "-x" "numfield") "X"
                        "eval_by_intervals(af_name_)" "Y"
                        (typechecked "[|-50, 20|]" "Interval")))
                  (("1" (assert) (("1" (eval-formula 1) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "af_name_" :assert? none)
              (("2" (use "containment_var" ("x" "x" "n" 0))
                (("2" (prop)
                  (("2" (skolem -1 "epsilon_x")
                    (("2" (expand "containment" :assert? none)
                      (("2"
                        (name-label*
                         ("noise_1"
                          "extend_N(0::nat,epsilon_x::Epsilon,empty_noise)")
                         :hide? t :label (:pairing (|wfn1:| |noise:|))
                         :tcc-label nil :tcc-step nil)
                        (("2" (inst 1 "noise_1")
                          (("2" (expand "noise_1" :assert? none)
                            (("2"
                              (apply (repeat*
                                      (rewrites
                                       ("first__extend_N"
                                        "gnbi_extend_N_trivial"
                                        "gnbi_extend_N_unf"
                                        "containment_cnt"
                                        "var_ac_noise_unf3"
                                        "containment_sub"
                                        "containment_add"
                                        "containment_mul"
                                        "containment_mul_s"
                                        "containment_add_s"
                                        "containment_neg")
                                       :fnums
                                       1)))
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (neg_ac const-decl "AffineCombination" affine nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (af_name_ skolem-const-decl "AffineCombination" affine nil)
    (containment_neg formula-decl nil affine nil)
    (noise_1 skolem-const-decl "Noise" affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (containment_var formula-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (eval_by_intervals const-decl "Interval" affine nil)
    (Member_trans formula-decl nil interval "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (containment const-decl "bool" affine nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak)))
(affine_pow
 (power_Epsilon_judg_TCC1 0
  (power_Epsilon_judg_TCC1-1 nil 3630758898 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (power_Epsilon_judg 0
  (power_Epsilon_judg-1 nil 3630758898
   ("" (skeep :preds? t)
    (("" (expand "^")
      (("" (case "n=0")
        (("1" (expand "expt") (("1" (assert) nil nil)) nil)
         ("2" (case "e=0")
          (("1" (replaces -1)
            (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil)
           ("2" (case "e=1")
            (("1" (replaces -1)
              (("1" (use "expt_1n_aux") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (case "e>0")
              (("1" (use "expt_lt1_bound1")
                (("1" (assert)
                  (("1" (lemma "nnreal_exp")
                    (("1" (inst -1 "e" "n")
                      (("1" (expand "^") (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (name "ebar" "-e")
                (("2" (case "e = (-1)*ebar")
                  (("1" (replaces -1)
                    (("1" (use "expt_of_mult")
                      (("1" (replaces -1)
                        (("1" (case "even?(n)")
                          (("1" (use "even_m1_pow")
                            (("1" (assert)
                              (("1"
                                (expand "^")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (use "one_times")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (case "ebar = 1")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (use "expt_1n_aux")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "ebar > 0")
                                          (("1"
                                            (use "expt_lt1_bound1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "nnreal_exp")
                                                (("1"
                                                  (inst -1 "ebar" "n")
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "not_even_m1_pow")
                            (("2" (assert)
                              (("2"
                                (expand "^")
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (split 6)
                                    (("1"
                                      (lemma
                                       "both_sides_times_neg_le2")
                                      (("1"
                                        (inst
                                         -1
                                         "-1"
                                         "1"
                                         "expt(ebar, n)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (case "ebar = 1")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (use "expt_1n_aux")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "ebar > 0")
                                                  (("1"
                                                    (use
                                                     "expt_lt1_bound1")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "both_sides_times_neg_le2")
                                      (("2"
                                        (inst
                                         -1
                                         "-1"
                                         "expt(ebar, n)"
                                         "1")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (case "ebar = 1")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (use "expt_1n_aux")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "ebar > 0")
                                                  (("1"
                                                    (lemma
                                                     "nnreal_exp")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "ebar"
                                                       "n")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_exp judgement-tcc nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e skolem-const-decl "Epsilon" affine_pow nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (expt_lt1_bound1 formula-decl nil exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_of_mult formula-decl nil exponentiation nil)
    (even? const-decl "bool" integers nil)
    (ebar skolem-const-decl "real" affine_pow nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (one_times formula-decl nil extra_tegies nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (both_sides_times_neg_le2 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt_1n_aux formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (pow_var_pd_TCC1 0
  (pow_var_pd_TCC1-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil))
   nil))
 (pow_var_pd_TCC2 0
  (pow_var_pd_TCC2-1 nil 3630326948 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_pd_TCC3 0
  (pow_var_pd_TCC3-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pow_var_pd_TCC4 0
  (pow_var_pd_TCC4-1 nil 3630326948 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_pd_TCC5 0
  (pow_var_pd_TCC5-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pow_var_pd_TCC6 0
  (pow_var_pd_TCC6-1 nil 3630326948 ("" (grind) nil nil)
   ((expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pow_var_pd_TCC7 0
  (pow_var_pd_TCC7-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pow_var_pd_TCC8 0
  (pow_var_pd_TCC8-1 nil 3630326948 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_pd_TCC9 0
  (pow_var_pd_TCC9-1 nil 3630326948 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_pd_TCC10 0
  (pow_var_pd_TCC10-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (pow_var_pd_TCC11 0
  (pow_var_pd_TCC11-1 nil 3630326948 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (pow_var_pd_TCC12 0
  (pow_var_pd_TCC12-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzBaseType type-eq-decl nil affine nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (^ const-decl "real" exponentiation nil)
    (C const-decl "posnat" binomial "reals/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   nil))
 (pow_var_pd_TCC13 0
  (pow_var_pd_TCC13-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (^ const-decl "real" exponentiation nil)
    (C const-decl "posnat" binomial "reals/"))
   nil))
 (pow_var_ac_TCC1 0
  (pow_var_ac_TCC1-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (pow_var_ac_TCC2 0
  (pow_var_ac_TCC2-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (pow_var_ac_TCC3 0
  (pow_var_ac_TCC3-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pow_var_ac_TCC4 0
  (pow_var_ac_TCC4-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (pow_var_ac_TCC5 0
  (pow_var_ac_TCC5-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pow_var_ac_TCC6 0
  (pow_var_ac_TCC6-1 nil 3630326948
   ("" (skeep :preds? t)
    (("" (typepred "nth(pd(Xa),0)`2")
      (("" (expand "/=")
        (("" (use "expt_nonzero")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (pow_var_ac_TCC7 0
  (pow_var_ac_TCC7-1 nil 3630326948
   ("" (skeep)
    (("" (use "zero_times3")
      (("" (assert)
        (("" (hide -2)
          (("" (use "expt_nonzero") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((zero_times3 formula-decl nil real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (represents_var? const-decl "bool" affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_nonzero formula-decl nil exponentiation nil))
   nil))
 (pow_var_ac_TCC8 0
  (pow_var_ac_TCC8-1 nil 3630326948 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (pow_var_ac_TCC9 0
  (pow_var_ac_TCC9-2 "" 3630851540 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)
  (pow_var_ac_TCC9-1 nil 3630326948
   ("" (skeep)
    (("" (expand "lt_idx")
      ((""
        (typepred
         "pow_var_pd(cv(Xa), newidx, nth[[nat, nzBaseType]](pd(Xa), 0)`2,
                     n, 2)")
        (("" (expand ">=")
          (("" (typepred "newidx")
            (("" (expand ">=")
              (("" (expand "next_idx")
                (("" (expand "nth")
                  (("" (expand "last_idx")
                    (("" (lift-if -1)
                      (("" (split -1)
                        (("1" (flatten)
                          (("1"
                            (case "car(pd(Xa))`1 <= last_ol(pd(Xa))`1")
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but (1 2))
                              (("2"
                                (use "olidx_car_last[nzBaseType]")
                                (("2"
                                  (assert)
                                  (("2" (expand_ol) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "length")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil))
   nil))
 (pow_var_ac_TCC10 0
  (pow_var_ac_TCC10-1 nil 3630326948
   ("" (skeep)
    (("" (expand "lt_idx")
      ((""
        (typepred "pow_var_pd(cv(Xa), newidx,
                       nth[[nat, nzBaseType]](pd(Xa), 0)`2, n,
                       2)")
        (("" (expand "nth")
          (("" (expand ">=")
            (("" (typepred "newidx")
              (("" (expand ">=")
                (("" (expand "next_idx")
                  (("" (expand "last_idx")
                    (("" (lift-if -1)
                      (("" (split -1)
                        (("1" (flatten)
                          (("1" (use "olidx_car_last[nzBaseType]")
                            (("1" (assert)
                              (("1"
                                (expand "car_ol")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_idx const-decl "bool" indexed_list nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (above nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= newidx + (k - 2)}"
     affine_pow nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (next_idx const-decl "nat" affine nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   nil))
 (pow_var_ac_TCC11 0
  (pow_var_ac_TCC11-1 nil 3630778483 ("" (subtype-tcc) nil nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (next_idx_pow_var_ac_TCC1 0
  (next_idx_pow_var_ac_TCC1-1 nil 3630426730 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (next_idx const-decl "nat" affine nil))
   nil))
 (next_idx_pow_var_ac 0
  (next_idx_pow_var_ac-2 nil 3630843253
   ("" (skeep)
    (("" (lift-if 1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "pow_var_ac")
            (("1" (assert)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "next_idx")
                      (("1" (expand "last_idx")
                        (("1" (expand_ol)
                          (("1" (typepred "newidx")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "next_idx")
                          (("1" (expand "last_idx")
                            (("1" (expand_ol)
                              (("1"
                                (expand "last_ol")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "next_idx")
                          (("2" (expand "last_idx")
                            (("2" (expand_ol)
                              (("2"
                                (expand "last_ol" 2)
                                (("2"
                                  (lift-if 2)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name "k" "2")
                                          (("2"
                                            (replace -1 +)
                                            (("2"
                                              (case "2 <= k AND k < n")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (name "k2" "n-k")
                                                  (("1"
                                                    (case "k= n-k2")
                                                    (("1"
                                                      (replaces
                                                       -1
                                                       (-3 1 2))
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (generalize
                                                           "k2"
                                                           "k2"
                                                           "nat")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "k2"
                                                             :name
                                                             "NAT_induction")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "pow_var_pd"
                                                                 2)
                                                                (("1"
                                                                  (lift-if
                                                                   2)
                                                                  (("1"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "last_ol"
                                                                         2)
                                                                        (("2"
                                                                          (lift-if
                                                                           2)
                                                                          (("2"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand_ol)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand_ol)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "j-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      1))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide-all-but
                                                             1)
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (case "n=0")
            (("1" (replaces -1)
              (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (case "n=1")
              (("1" (replaces -1)
                (("1" (hide 1 2)
                  (("1" (expand "pow_var_ac")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (typepred "newidx")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (typepred "newidx")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (typepred "newidx")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "next_idx" 2)
                                    (("2"
                                      (expand "last_idx" 2)
                                      (("2"
                                        (expand_ol)
                                        (("2"
                                          (expand "nth")
                                          (("2"
                                            (expand "last_ol" 2)
                                            (("2"
                                              (expand "next_idx")
                                              (("2"
                                                (use
                                                 "olidx_car_last[nzBaseType]")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_proj_pd formula-decl nil affine nil)
    (next_idx const-decl "nat" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx const-decl "int" indexed_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= newidx + (k - 2)}"
     affine_pow nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subrange type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (k2 skolem-const-decl "int" affine_pow nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "nat" affine_pow nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (newidx skolem-const-decl "upfrom(next_idx(Xa`pd))" affine_pow nil)
    (Xa skolem-const-decl "(represents_var?)" affine_pow nil)
    (n skolem-const-decl "nat" affine_pow nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil))
   nil)
  (next_idx_pow_var_ac-1 nil 3630784323
   ("" (skeep)
    (("" (lift-if 1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "pow_var_ac")
            (("1" (assert)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "next_idx")
                      (("1" (expand "last_idx")
                        (("1" (expand_ol)
                          (("1" (typepred "newidx")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "next_idx")
                          (("1" (expand "last_idx")
                            (("1" (expand_ol)
                              (("1"
                                (expand "last_ol")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "next_idx")
                          (("2" (expand "last_idx")
                            (("2" (expand_ol)
                              (("2"
                                (expand "last_ol" 2)
                                (("2"
                                  (lift-if 2)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name "k" "2")
                                          (("2"
                                            (replace -1 +)
                                            (("2"
                                              (case
                                               "2 <= k AND k <= n")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (name "k2" "n-k")
                                                  (("1"
                                                    (case "k= n-k2")
                                                    (("1"
                                                      (replaces
                                                       -1
                                                       (-3 1 2))
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (generalize
                                                           "k2"
                                                           "k2"
                                                           "nat")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "k2"
                                                             :name
                                                             "NAT_induction")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "pow_var_pd"
                                                                 2)
                                                                (("1"
                                                                  (lift-if
                                                                   2)
                                                                  (("1"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "last_ol"
                                                                         2)
                                                                        (("2"
                                                                          (lift-if
                                                                           2)
                                                                          (("2"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand_ol)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand_ol)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "j-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide-all-but
                                                             1)
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (case "n=0")
            (("1" (replaces -1)
              (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (case "n=1")
              (("1" (replaces -1)
                (("1" (hide 1 2)
                  (("1" (expand "pow_var_ac")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (typepred "newidx")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (typepred "newidx")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (typepred "newidx")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "next_idx" 2)
                                    (("2"
                                      (expand "last_idx" 2)
                                      (("2"
                                        (expand_ol)
                                        (("2"
                                          (expand "nth")
                                          (("2"
                                            (expand "last_ol" 2)
                                            (("2"
                                              (expand "next_idx")
                                              (("2"
                                                (use
                                                 "olidx_car_last[nzBaseType]")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (idxs_ac_pow_var_ac 0
  (idxs_ac_pow_var_ac-3 nil 3630845522
   ("" (skeep)
    (("" (expand "idxs_ac")
      (("" (expand "pow_var_ac")
        (("" (lift-if -1)
          (("" (split -1)
            (("1" (flatten)
              (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "idxs_pd" -2)
                              (("1"
                                (expand_ol)
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (lift-if 4)
                                          (("1"
                                            (split 4)
                                            (("1"
                                              (expand "idxs_pd")
                                              (("1"
                                                (lift-if -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "idxs_pd")
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (lift-if 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (name "k" "2")
                                      (("2"
                                        (case "2<=k AND k<n")
                                        (("1"
                                          (replace -2 -3)
                                          (("1"
                                            (name "k2" "n-k")
                                            (("1"
                                              (case "k=n-k2")
                                              (("1"
                                                (replace -1 (-3 -5))
                                                (("1"
                                                  (hide -1 -2 -4)
                                                  (("1"
                                                    (generalize
                                                     "k2"
                                                     "k2"
                                                     "nat")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (induct
                                                       "k2"
                                                       :name
                                                       "NAT_induction")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "pow_var_pd"
                                                             -4)
                                                            (("1"
                                                              (expand
                                                               "idxs_pd"
                                                               -4)
                                                              (("1"
                                                                (expand_ol)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   -4)
                                                                  (("1"
                                                                    (split
                                                                     -4)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -2
                                                                       "j-1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "n- j = n")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         2)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide-all-but 1)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "idxs_pd" -1)
                            (("2" (assert)
                              (("2"
                                (expand_ol)
                                (("2"
                                  (expand "idxs_pd" -1)
                                  (("2"
                                    (expand_ol)
                                    (("2"
                                      (expand "member" -1)
                                      (("2"
                                        (expand "member" -1)
                                        (("2"
                                          (expand "nth")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (lift-if 5)
                                              (("2"
                                                (split 5)
                                                (("1"
                                                  (expand "idxs_pd")
                                                  (("1"
                                                    (lift-if -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "idxs_pd"
                                                     2)
                                                    (("2"
                                                      (expand_ol)
                                                      (("2"
                                                        (expand
                                                         "idxs_pd"
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idxs_ac const-decl "list[nat]" affine nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (n skolem-const-decl "nat" affine_pow nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (k2 skolem-const-decl "int" affine_pow nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (above nonempty-type-eq-decl nil integers nil)
    (subrange type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= newidx + (k - 2)}"
     affine_pow nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (next_idx const-decl "nat" affine nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (ac_proj_pd formula-decl nil affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (member def-decl "bool" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil))
   nil)
  (idxs_ac_pow_var_ac-2 nil 3630845292
   ("" (skeep)
    (("" (expand "idxs_ac")
      (("" (expand "pow_var_ac")
        (("" (lift-if -1)
          (("" (split -1)
            (("1" (flatten) (("1" (replaces -1) (("1" (grind) nil)))))
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten) (("1" (grind) nil)))
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (grind) nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "idxs_pd" -2)
                              (("1"
                                (expand_ol)
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (lift-if 4)
                                          (("1"
                                            (split 4)
                                            (("1"
                                              (expand "idxs_pd")
                                              (("1"
                                                (lift-if -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1" (grind) nil)
                                                     ("2"
                                                      (propax)
                                                      nil)))))))))
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "idxs_pd")
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (lift-if 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (propax)
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil)))))))))))))))))))))
                                     ("2"
                                      (name "k" "2")
                                      (("2"
                                        (case "2<=k AND k<=n")
                                        (("1"
                                          (replace -2 -3)
                                          (("1"
                                            (name "k2" "n-k")
                                            (("1"
                                              (case "k=n-k2")
                                              (("1"
                                                (replace -1 (-3 -5))
                                                (("1"
                                                  (hide -1 -2 -4)
                                                  (("1"
                                                    (generalize
                                                     "k2"
                                                     "k2"
                                                     "nat")
                                                    (("1" (grind) nil)
                                                     ("2" (grind) nil)
                                                     ("3"
                                                      (induct
                                                       "k2"
                                                       :name
                                                       "NAT_induction")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "pow_var_pd"
                                                             -4)
                                                            (("1"
                                                              (expand
                                                               "idxs_pd"
                                                               -4)
                                                              (("1"
                                                                (expand_ol)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   -4)
                                                                  (("1"
                                                                    (split
                                                                     -4)
                                                                    (("1"
                                                                      (grind)
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -2
                                                                       "j-1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (postpone)
                                                                          nil)))))))))))))))))))
                                                       ("2"
                                                        (hide-all-but
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil)))
                                                       ("3"
                                                        (hide-all-but
                                                         2)
                                                        (("3"
                                                          (grind)
                                                          nil)))))
                                                     ("4"
                                                      (hide-all-but 1)
                                                      (("4"
                                                        (grind)
                                                        nil)))))))))
                                               ("2" (grind) nil)))))))
                                         ("2"
                                          (grind)
                                          nil)))))))))))))))))
                         ("2" (flatten)
                          (("2" (expand "idxs_pd" -1)
                            (("2" (assert)
                              (("2"
                                (expand_ol)
                                (("2"
                                  (expand "idxs_pd" -1)
                                  (("2"
                                    (expand_ol)
                                    (("2"
                                      (expand "member" -1)
                                      (("2"
                                        (expand "member" -1)
                                        (("2"
                                          (expand "nth")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (lift-if 5)
                                              (("2"
                                                (split 5)
                                                (("1"
                                                  (expand "idxs_pd")
                                                  (("1"
                                                    (lift-if -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (grind)
                                                            nil)))
                                                         ("2"
                                                          (propax)
                                                          nil)))))))))
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "idxs_pd"
                                                     2)
                                                    (("2"
                                                      (expand_ol)
                                                      (("2"
                                                        (expand
                                                         "idxs_pd"
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (propax)
                                                                nil)
                                                               ("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (assert)
                                                                  nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (idxs_ac_pow_var_ac-1 nil 3630843465
   ("" (skeep)
    (("" (expand "idxs_ac")
      (("" (expand "pow_var_ac")
        (("" (lift-if -1)
          (("" (split -1)
            (("1" (flatten)
              (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "idxs_pd" -2)
                              (("1"
                                (expand_ol)
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (lift-if 4)
                                          (("1"
                                            (split 4)
                                            (("1"
                                              (expand "idxs_pd")
                                              (("1"
                                                (lift-if -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "idxs_pd")
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (lift-if 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (name "k" "2")
                                      (("2"
                                        (case "2<=k AND k<n")
                                        (("1"
                                          (replace -2 -3)
                                          (("1"
                                            (name "k2" "n-k")
                                            (("1"
                                              (case "k=n-k2")
                                              (("1"
                                                (replace -1 (-3 -5))
                                                (("1"
                                                  (hide -1 -2 -4)
                                                  (("1"
                                                    (generalize
                                                     "k2"
                                                     "k2"
                                                     "nat")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (induct
                                                       "k2"
                                                       :name
                                                       "NAT_induction")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "pow_var_pd"
                                                             -4)
                                                            (("1"
                                                              (expand
                                                               "idxs_pd"
                                                               -4)
                                                              (("1"
                                                                (expand_ol)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   -4)
                                                                  (("1"
                                                                    (split
                                                                     -4)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -2
                                                                       "j-1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         2)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide-all-but 1)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "idxs_pd" -1)
                            (("2" (assert)
                              (("2"
                                (expand_ol)
                                (("2"
                                  (expand "idxs_pd" -1)
                                  (("2"
                                    (expand_ol)
                                    (("2"
                                      (expand "member" -1)
                                      (("2"
                                        (expand "member" -1)
                                        (("2"
                                          (expand "nth")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (lift-if 5)
                                              (("2"
                                                (split 5)
                                                (("1"
                                                  (expand "idxs_pd")
                                                  (("1"
                                                    (lift-if -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "idxs_pd"
                                                     2)
                                                    (("2"
                                                      (expand_ol)
                                                      (("2"
                                                        (expand
                                                         "idxs_pd"
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (pow_var_compatible?_TCC1 0
  (pow_var_compatible?_TCC1-1 nil 3630758898 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil))
   nil))
 (pow_var_compatible?_TCC2 0
  (pow_var_compatible?_TCC2-1 nil 3630758898 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (containment_pow_var_ac_TCC1 0
  (containment_pow_var_ac_TCC1-1 nil 3630326948
   ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (next_idx const-decl "nat" affine nil)
    (represents_var? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (containment_pow_var_ac 0
  (containment_pow_var_ac-1 nil 3630777211
   ("" (skeep)
    (("" (expand "pow_var_ac")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (replaces -1)
              (("1" (expand "eval_ac_noise")
                (("1" (assert)
                  (("1" (expand_ol)
                    (("1" (use "eval_pd_noise_rec_pds_def")
                      (("1" (expand_ol)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "eval_ac_noise" -1)
              (("2" (use "eval_pd_noise_rec_pds_def")
                (("2" (replaces -1)
                  (("2" (lift-if -1)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (replaces -2 :dir RL)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "eval_ac_noise" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "eval_pd_noise_rec_pds_def")
                                      (("1"
                                        (replaces -1)
                                        (("1" (expand_ol) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (split 3)
                              (("1"
                                (flatten)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "eval_ac_noise")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "cdr_ol(pd(Xa))=null")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma
                                               "eval_pd_noise_rec_pds_def")
                                              (("1"
                                                (inst? -1 :where -2)
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "represents_var?")
                                                                        (("1"
                                                                          (use
                                                                           "eval_pd_noise_rec_pds_def")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (lift-if
                                                                               1)
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "pow_var_compatible?")
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "n-2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (replaces
                                                                             -3)
                                                                            (("1"
                                                                              (use
                                                                               "eval_pd_noise_rec_pds_def")
                                                                              (("1"
                                                                                (expand_ol)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (use
                                                                                       "mult_expt")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "/=")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case "cdr_ol(pd(Xa))=null")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (use "eval_pd_noise_rec_pds_def")
                                      (("1"
                                        (expand_ol)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replaces -2 :dir RL)
                                                  (("1"
                                                    (use
                                                     "binomial_theorem")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand
                                                         "eval_ac_noise")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (use
                                                               "expt_x0")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "C_n")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "identity_mult")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "eval_pd_noise_rec_pds_def")
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sigma")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("1"
                                                                                          (use
                                                                                           "expt_x1")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "C_n_1")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1
                                                                                                 :where
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "get_noise_by_idx(car(pd(Xa))`1, N) *
        (cv(Xa) ^ (n - 1) * car(pd(Xa))`2 * n) = (cv(Xa) ^ (n - 1)) * get_noise_by_idx(car(pd(Xa))`1, N) *
         car(pd(Xa))`2
         * n")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (name
                                                                                                             "step"
                                                                                                             "2")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "2<=step AND step<=n")
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -2
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (name
                                                                                                                   "bstep"
                                                                                                                   "n - step")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "step = n - bstep")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1
                                                                                                                         (1
                                                                                                                          -3))
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (generalize
                                                                                                                             "bstep"
                                                                                                                             "bstep"
                                                                                                                             "nat")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (induct
                                                                                                                               "bstep"
                                                                                                                               :name
                                                                                                                               "NAT_induction")
                                                                                                                              (("1"
                                                                                                                                (skeep)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "sigma")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "pow_var_pd"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "j=0")
                                                                                                                                              (("1"
                                                                                                                                                (replaces
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "eval_pd_noise_rec_pds_def")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand_ol)
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand_ol)
                                                                                                                                                              (("1"
                                                                                                                                                                (replaces
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "pow_var_compatible?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -6
                                                                                                                                                                       "n-2")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -6)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (use
                                                                                                                                                                             "C_0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replaces
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (use
                                                                                                                                                                                 "expt_x0")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replaces
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (use
                                                                                                                                                                                     "mult_expt")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replaces
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "nth")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (use
                                                                                                                                               "eval_pd_noise_rec_pds_def")
                                                                                                                                              (("1"
                                                                                                                                                (expand_ol)
                                                                                                                                                (("1"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "get_noise_by_idx(-2 - j + n + newidx, N) *
        (C(n, n - j) * cv(Xa) ^ j * car(pd(Xa))`2 ^ (n - j)) = C(n, j) * cv(Xa) ^ j *
         (get_noise_by_idx(car(pd(Xa))`1, N) * car(pd(Xa))`2) ^
          (n - j)")
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "j-1")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replaces
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "sigma"
                                                                                                                                                                 2
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "pow_var_compatible?")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -7
                                                                                                                                                         "n - j -2")
                                                                                                                                                        (("2"
                                                                                                                                                          (replaces
                                                                                                                                                           -7)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "nth")
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "mult_expt")
                                                                                                                                                              (("1"
                                                                                                                                                                (replaces
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (use
                                                                                                                                                                   "C_symmetry")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 (1
                                                                                                                                                  4))
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "/=")
                                                                                                                                                  (("2"
                                                                                                                                                    (use
                                                                                                                                                     "zero_times3")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -2)
                                                                                                                                                        (("2"
                                                                                                                                                          (use
                                                                                                                                                           "zero_times3")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "expt_nonzero")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("3"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("4"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("3"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("4"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("4"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("5"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("5"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("6"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("6"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("7"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("7"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "/=")
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      2
                                                                                      5))
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "nth[[nat, nzBaseType]](pd(Xa), 0)`2")
                                                                                      (("2"
                                                                                        (use
                                                                                         "expt_nonzero")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "/="
                                                                                           :assert?
                                                                                           none)
                                                                                          (("2"
                                                                                            (use
                                                                                             "zero_times3")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (case "n=1")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "eval_ac_noise")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (expand_ol)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" affine_pow nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (mult_expt formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (N skolem-const-decl "Noise" affine_pow nil)
    (Xa skolem-const-decl "AffineCombination" affine_pow nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (represents_var? const-decl "bool" affine nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (identity_mult formula-decl nil number_fields nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (C_n_1 formula-decl nil binomial "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (C_0 formula-decl nil binomial "reals/")
    (j skolem-const-decl "nat" affine_pow nil)
    (C_symmetry formula-decl nil binomial "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (zero_times3 formula-decl nil real_props nil)
    (bstep skolem-const-decl "int" affine_pow nil)
    (C const-decl "posnat" binomial "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (eval_pd_noise def-decl "real" affine nil)
    (next_idx const-decl "nat" affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= newidx + (k - 2)}"
     affine_pow nil)
    (subrange type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (C_n formula-decl nil binomial "reals/")
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (binomial_theorem formula-decl nil polynomials "reals/")
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil))
   shostak))
 (pow_var_compatible_noise_TCC1 0
  (pow_var_compatible_noise_TCC1-1 nil 3630758898
   ("" (subtype-tcc) nil nil) nil nil))
 (pow_var_compatible_noise_TCC2 0
  (pow_var_compatible_noise_TCC2-1 nil 3630758898
   ("" (subtype-tcc) nil nil) nil nil))
 (pow_var_compatible_noise_TCC3 0
  (pow_var_compatible_noise_TCC3-1 nil 3630758898
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil))
 (pow_var_compatible_noise 0
  (pow_var_compatible_noise-1 nil 3630768969
   ("" (skeep)
    (("" (expand "pow_var_compatible?")
      (("" (induct "i_1")
        (("1" (flatten)
          (("1" (assert)
            (("1" (use "gnbi_updr")
              (("1" (assert)
                (("1" (replaces -1)
                  (("1" (use "gnbi_updr_2")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (typepred "newidx")
                          (("1" (expand "next_idx")
                            (("1" (flatten)
                              (("1"
                                (expand "last_idx")
                                (("1"
                                  (typepred "Xa")
                                  (("1"
                                    (lift-if -3)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (use
                                             "olidx_car_last[nzBaseType]")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skeep)
                        (("2" (use "power_Epsilon_judg")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (skeep)
                  (("2" (use "power_Epsilon_judg")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "j")
          (("2" (flatten)
            (("2" (lemma "gnbi_updr")
              (("2" (inst? -1 :where 1)
                (("1" (assert)
                  (("1" (replaces -1)
                    (("1" (lemma "gnbi_updr_2")
                      (("1" (inst? -1 :where 1)
                        (("1" (assert)
                          (("1" (hide-all-but 1)
                            (("1" (typepred "newidx")
                              (("1"
                                (expand "next_idx")
                                (("1"
                                  (expand "last_idx")
                                  (("1"
                                    (lift-if -1)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (use
                                             "olidx_car_last[nzBaseType]")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (typepred "Xa")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (skeep)
                            (("2" (use "power_Epsilon_judg")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skeep)
                    (("2" (use "power_Epsilon_judg")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1)
          (("3" (skeep)
            (("3" (use "power_Epsilon_judg") (("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pow_var_compatible? const-decl "bool" affine_pow nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (gnbi_updr formula-decl nil affine nil)
    (power_Epsilon_judg judgement-tcc nil affine_pow nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (last_idx const-decl "int" indexed_list nil)
    (gnbi_updr_2 formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (upd_noise_range def-decl "Noise" affine nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (next_idx const-decl "nat" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (n skolem-const-decl "{n | n > 1}" affine_pow nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (Xa skolem-const-decl
     "{Xa | represents_var?(Xa) AND length(pd(Xa)) > 0}" affine_pow
     nil)
    (N skolem-const-decl "Noise" affine_pow nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak)))

