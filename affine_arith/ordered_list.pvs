ordered_list[T:TYPE, <: pred[[T,T]]]: THEORY
BEGIN
  ASSUMING
	order: ASSUMPTION strict_order?(<)
  ENDASSUMING

  ordered_list?(l: list[T]): RECURSIVE  bool
  = CASES l OF
    	  null: TRUE,
	  cons(h,l): null?(l) OR (h < car(l) AND ordered_list?(l))
    ENDCASES
  MEASURE length(l)

  x: VAR T
  l,l1,l2: VAR list[T]

  ol_suffix: LEMMA
  ordered_list?(cons(x,l)) IMPLIES ordered_list?(l)
  AUTO_REWRITE+ ol_suffix

  ordered_list: TYPE 
  = { l: list[T] | ordered_list?(l) }

  ol, ol1, ol2: VAR ordered_list

  null_ol?(ol): bool = null?(ol)

  null_ol: ordered_list = null

  nnol: VAR {ol | NOT null_ol?(ol)}

  car_ol(nnol): T = car(nnol)

  cdr_ol(nnol): ordered_list = cdr(nnol)

  length_cdr_ol: LEMMA
  length(cdr_ol(nnol)) = length(nnol) - 1
  AUTO_REWRITE+ length_cdr_ol

  ol_ind_sch: LEMMA
  FORALL (P: pred[ordered_list]): 
    P(null) AND 
    (FORALL (ol: ordered_list): 
       P(ol) IMPLIES (FORALL(x: T | ordered_list?(cons(x,ol))): P(cons(x,ol))))  
    IMPLIES (FORALL (ol: ordered_list): P(ol))

  cons_ol(x, (ol|null?(ol) OR x < car(ol))): ordered_list = cons(x, ol)

  last_ol((ol|NOT null?(ol))): RECURSIVE T
  = CASES cdr(ol) OF
      null: car(ol),
      cons(h_,t_): last_ol(cdr(ol))
    ENDCASES
  MEASURE length(ol)

  first_ol(nnol): T  = car(nnol)

  appendable_ol?(ol1,ol2): bool
  = NOT null?(ol1) AND NOT null?(ol2) 
    IMPLIES last_ol(ol1) < first_ol(ol2)

  append_ol(ol1,(ol2 | appendable_ol?(ol1,ol2))): ordered_list
  = append(ol1, ol2)

  ordered_append: LEMMA
  ordered_list?(append(l1,l2)) IMPLIES ordered_list?(l1) AND ordered_list?(l2)  

  carol_lt_nth: LEMMA
  FORALL((i: below(length(nnol)) | i > 0)): car_ol(nnol) < nth(nnol, i) 

  nth_ol: LEMMA
  FORALL(i: below(length(ol1)), (j:nat|j<i)):
  nth(ol1, j) < nth(ol1, i)

  IMPORTING list_more_props

  n: VAR nat

  take_ol: LEMMA
  ordered_list?(take(ol, n))

  last_take_nth: LEMMA FORALL(n: below(length(ol))):
  last_ol(take(ol,n+1)) = nth(ol,n)
  
END ordered_list
