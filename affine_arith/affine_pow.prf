(affine_pow
 (power_Epsilon_judg_TCC1 0
  (power_Epsilon_judg_TCC1-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (power_Epsilon_judg 0
  (power_Epsilon_judg-2 nil 3630864991
   ("" (skeep :preds? t)
    (("" (expand "^")
      (("" (case "n=0")
        (("1" (expand "expt") (("1" (assert) nil nil)) nil)
         ("2" (case "e=0")
          (("1" (replaces -1)
            (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil)
           ("2" (case "e=1")
            (("1" (replaces -1)
              (("1" (use "expt_1n_aux") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (case "e>0")
              (("1" (use "expt_lt1_bound1")
                (("1" (assert)
                  (("1" (lemma "nnreal_exp")
                    (("1" (inst -1 "e" "n")
                      (("1" (expand "^") (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (name "ebar" "-e")
                (("2" (case "e = (-1)*ebar")
                  (("1" (replaces -1)
                    (("1" (use "expt_of_mult")
                      (("1" (replaces -1)
                        (("1" (case "even?(n)")
                          (("1" (use "even_m1_pow")
                            (("1" (assert)
                              (("1"
                                (expand "^")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (use "one_times")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (case "ebar = 1")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (use "expt_1n_aux")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "ebar > 0")
                                          (("1"
                                            (use "expt_lt1_bound1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "nnreal_exp")
                                                (("1"
                                                  (inst -1 "ebar" "n")
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "not_even_m1_pow")
                            (("2" (assert)
                              (("2"
                                (expand "^")
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (split 6)
                                    (("1"
                                      (lemma
                                       "both_sides_times_neg_le2")
                                      (("1"
                                        (inst
                                         -1
                                         "-1"
                                         "1"
                                         "expt(ebar, n)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (case "ebar = 1")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (use "expt_1n_aux")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "ebar > 0")
                                                  (("1"
                                                    (use
                                                     "expt_lt1_bound1")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "both_sides_times_neg_le2")
                                      (("2"
                                        (inst
                                         -1
                                         "-1"
                                         "expt(ebar, n)"
                                         "1")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (case "ebar = 1")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (use "expt_1n_aux")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "ebar > 0")
                                                  (("1"
                                                    (lemma
                                                     "nnreal_exp")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "ebar"
                                                       "n")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_exp judgement-tcc nil exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e skolem-const-decl "Epsilon" affine_pow nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (expt_lt1_bound1 formula-decl nil exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_of_mult formula-decl nil exponentiation nil)
    (even? const-decl "bool" integers nil)
    (ebar skolem-const-decl "real" affine_pow nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (one_times formula-decl nil extra_tegies nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (both_sides_times_neg_le2 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt_1n_aux formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil)
  (power_Epsilon_judg-1 nil 3630864964 ("" (judgement-tcc) nil nil) nil
   nil))
 (pow_var_pd_TCC1 0
  (pow_var_pd_TCC1-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil))
   nil))
 (pow_var_pd_TCC2 0
  (pow_var_pd_TCC2-1 nil 3630864964 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_pd_TCC3 0
  (pow_var_pd_TCC3-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pow_var_pd_TCC4 0
  (pow_var_pd_TCC4-1 nil 3630864964 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_pd_TCC5 0
  (pow_var_pd_TCC5-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pow_var_pd_TCC6 0
  (pow_var_pd_TCC6-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pow_var_pd_TCC7 0
  (pow_var_pd_TCC7-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (pow_var_pd_TCC8 0
  (pow_var_pd_TCC8-1 nil 3630864964 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_pd_TCC9 0
  (pow_var_pd_TCC9-1 nil 3630864964 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_pd_TCC10 0
  (pow_var_pd_TCC10-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (pow_var_pd_TCC11 0
  (pow_var_pd_TCC11-1 nil 3630864964 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (pow_var_pd_TCC12 0
  (pow_var_pd_TCC12-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzBaseType type-eq-decl nil affine nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (^ const-decl "real" exponentiation nil)
    (C const-decl "posnat" binomial "reals/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   nil))
 (pow_var_pd_TCC13 0
  (pow_var_pd_TCC13-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (^ const-decl "real" exponentiation nil)
    (C const-decl "posnat" binomial "reals/"))
   nil))
 (pow_var_ac_TCC1 0
  (pow_var_ac_TCC1-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (pow_var_ac_TCC2 0
  (pow_var_ac_TCC2-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (pow_var_ac_TCC3 0
  (pow_var_ac_TCC3-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pow_var_ac_TCC4 0
  (pow_var_ac_TCC4-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (pow_var_ac_TCC5 0
  (pow_var_ac_TCC5-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pow_var_ac_TCC6 0
  (pow_var_ac_TCC6-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (pow_var_ac_TCC7 0
  (pow_var_ac_TCC7-2 nil 3630865261
   ("" (skeep)
    (("" (use "zero_times3")
      (("" (assert)
        (("" (hide -2)
          (("" (use "expt_nonzero") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((zero_times3 formula-decl nil real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (nzBaseType type-eq-decl nil affine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (represents_var? const-decl "bool" affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_nonzero formula-decl nil exponentiation nil))
   nil)
  (pow_var_ac_TCC7-1 nil 3630864964 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_ac_TCC8 0
  (pow_var_ac_TCC8-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (pow_var_ac_TCC9 0
  (pow_var_ac_TCC9-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pow_var_ac_TCC10 0
  (pow_var_ac_TCC10-2 nil 3630865308
   ("" (skeep)
    (("" (expand "lt_idx")
      ((""
        (typepred "pow_var_pd(cv(Xa), newidx,
                         nth[[nat, nzBaseType]](pd(Xa), 0)`2, n,
                         2)")
        (("" (expand "nth")
          (("" (expand ">=")
            (("" (typepred "newidx")
              (("" (expand ">=")
                (("" (expand "next_idx")
                  (("" (expand "last_idx")
                    (("" (lift-if -1)
                      (("" (split -1)
                        (("1" (flatten)
                          (("1" (use "olidx_car_last[nzBaseType]")
                            (("1" (assert)
                              (("1"
                                (expand "car_ol")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_idx const-decl "bool" indexed_list nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (above nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= newidx + (k - 2)}"
     affine_pow nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (next_idx const-decl "nat" affine nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   nil)
  (pow_var_ac_TCC10-1 nil 3630864964 ("" (subtype-tcc) nil nil) nil
   nil))
 (pow_var_ac_TCC11 0
  (pow_var_ac_TCC11-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (next_idx_pow_var_ac_TCC1 0
  (next_idx_pow_var_ac_TCC1-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (next_idx const-decl "nat" affine nil))
   nil))
 (next_idx_pow_var_ac 0
  (next_idx_pow_var_ac-1 nil 3630865069
   ("" (skeep)
    (("" (lift-if 1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "pow_var_ac")
            (("1" (assert)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "next_idx")
                      (("1" (expand "last_idx")
                        (("1" (expand_ol)
                          (("1" (typepred "newidx")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "next_idx")
                          (("1" (expand "last_idx")
                            (("1" (expand_ol)
                              (("1"
                                (expand "last_ol")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "next_idx")
                          (("2" (expand "last_idx")
                            (("2" (expand_ol)
                              (("2"
                                (expand "last_ol" 2)
                                (("2"
                                  (lift-if 2)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name "k" "2")
                                          (("2"
                                            (replace -1 +)
                                            (("2"
                                              (case "2 <= k AND k < n")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (name "k2" "n-k")
                                                  (("1"
                                                    (case "k= n-k2")
                                                    (("1"
                                                      (replaces
                                                       -1
                                                       (-3 1 2))
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (generalize
                                                           "k2"
                                                           "k2"
                                                           "nat")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (induct
                                                             "k2"
                                                             :name
                                                             "NAT_induction")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "pow_var_pd"
                                                                 2)
                                                                (("1"
                                                                  (lift-if
                                                                   2)
                                                                  (("1"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "last_ol"
                                                                         2)
                                                                        (("2"
                                                                          (lift-if
                                                                           2)
                                                                          (("2"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand_ol)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand_ol)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "j-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      1))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide-all-but
                                                             1)
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (case "n=0")
            (("1" (replaces -1)
              (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (case "n=1")
              (("1" (replaces -1)
                (("1" (hide 1 2)
                  (("1" (expand "pow_var_ac")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (typepred "newidx")
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (typepred "newidx")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (typepred "newidx")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "next_idx" 2)
                                    (("2"
                                      (expand "last_idx" 2)
                                      (("2"
                                        (expand_ol)
                                        (("2"
                                          (expand "nth")
                                          (("2"
                                            (expand "last_ol" 2)
                                            (("2"
                                              (expand "next_idx")
                                              (("2"
                                                (use
                                                 "olidx_car_last[nzBaseType]")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_ol const-decl "T" ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_proj_pd formula-decl nil affine nil)
    (next_idx const-decl "nat" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx const-decl "int" indexed_list nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= newidx + (k - 2)}"
     affine_pow nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subrange type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (k2 skolem-const-decl "int" affine_pow nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "nat" affine_pow nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (newidx skolem-const-decl "upfrom(next_idx(Xa`pd))" affine_pow nil)
    (Xa skolem-const-decl "(represents_var?)" affine_pow nil)
    (n skolem-const-decl "nat" affine_pow nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil))
   nil))
 (idxs_ac_pow_var_ac 0
  (idxs_ac_pow_var_ac-1 nil 3630865100
   ("" (skeep)
    (("" (expand "idxs_ac")
      (("" (expand "pow_var_ac")
        (("" (lift-if -1)
          (("" (split -1)
            (("1" (flatten)
              (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "idxs_pd" -2)
                              (("1"
                                (expand_ol)
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (lift-if 4)
                                          (("1"
                                            (split 4)
                                            (("1"
                                              (expand "idxs_pd")
                                              (("1"
                                                (lift-if -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "idxs_pd")
                                                (("2"
                                                  (expand_ol)
                                                  (("2"
                                                    (lift-if 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (name "k" "2")
                                      (("2"
                                        (case "2<=k AND k<n")
                                        (("1"
                                          (replace -2 -3)
                                          (("1"
                                            (name "k2" "n-k")
                                            (("1"
                                              (case "k=n-k2")
                                              (("1"
                                                (replace -1 (-3 -5))
                                                (("1"
                                                  (hide -1 -2 -4)
                                                  (("1"
                                                    (generalize
                                                     "k2"
                                                     "k2"
                                                     "nat")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (induct
                                                       "k2"
                                                       :name
                                                       "NAT_induction")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "pow_var_pd"
                                                             -4)
                                                            (("1"
                                                              (expand
                                                               "idxs_pd"
                                                               -4)
                                                              (("1"
                                                                (expand_ol)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   -4)
                                                                  (("1"
                                                                    (split
                                                                     -4)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -2
                                                                       "j-1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "n- j = n")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         2)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide-all-but 1)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "idxs_pd" -1)
                            (("2" (assert)
                              (("2"
                                (expand_ol)
                                (("2"
                                  (expand "idxs_pd" -1)
                                  (("2"
                                    (expand_ol)
                                    (("2"
                                      (expand "member" -1)
                                      (("2"
                                        (expand "member" -1)
                                        (("2"
                                          (expand "nth")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (lift-if 5)
                                              (("2"
                                                (split 5)
                                                (("1"
                                                  (expand "idxs_pd")
                                                  (("1"
                                                    (lift-if -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "idxs_pd"
                                                     2)
                                                    (("2"
                                                      (expand_ol)
                                                      (("2"
                                                        (expand
                                                         "idxs_pd"
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idxs_ac const-decl "list[nat]" affine nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (n skolem-const-decl "nat" affine_pow nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (k2 skolem-const-decl "int" affine_pow nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (above nonempty-type-eq-decl nil integers nil)
    (subrange type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= newidx + (k - 2)}"
     affine_pow nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (next_idx const-decl "nat" affine nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (ac_proj_pd formula-decl nil affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (member def-decl "bool" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil))
   nil))
 (pow_var_compatible?_TCC1 0
  (pow_var_compatible?_TCC1-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil))
   nil))
 (pow_var_compatible?_TCC2 0
  (pow_var_compatible?_TCC2-1 nil 3630864964 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (containment_pow_var_ac_TCC1 0
  (containment_pow_var_ac_TCC1-1 nil 3630864964
   ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (next_idx const-decl "nat" affine nil)
    (represents_var? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (containment_pow_var_ac 0
  (containment_pow_var_ac-1 nil 3630865140
   ("" (skeep)
    (("" (expand "pow_var_ac")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten)
            (("1" (replaces -1)
              (("1" (expand "eval_ac_noise")
                (("1" (assert)
                  (("1" (expand_ol)
                    (("1" (use "eval_pd_noise_rec_pds_def")
                      (("1" (expand_ol)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "eval_ac_noise" -1)
              (("2" (use "eval_pd_noise_rec_pds_def")
                (("2" (replaces -1)
                  (("2" (lift-if -1)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (replaces -2 :dir RL)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "eval_ac_noise" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "eval_pd_noise_rec_pds_def")
                                      (("1"
                                        (replaces -1)
                                        (("1" (expand_ol) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (split 3)
                              (("1"
                                (flatten)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "eval_ac_noise")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "cdr_ol(pd(Xa))=null")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (lemma
                                               "eval_pd_noise_rec_pds_def")
                                              (("1"
                                                (inst? -1 :where -2)
                                                (("1"
                                                  (expand_ol)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "represents_var?")
                                                                        (("1"
                                                                          (use
                                                                           "eval_pd_noise_rec_pds_def")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (lift-if
                                                                               1)
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "pow_var_compatible?")
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "n-2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (replaces
                                                                             -3)
                                                                            (("1"
                                                                              (use
                                                                               "eval_pd_noise_rec_pds_def")
                                                                              (("1"
                                                                                (expand_ol)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (use
                                                                                       "mult_expt")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "/=")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case "cdr_ol(pd(Xa))=null")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (use "eval_pd_noise_rec_pds_def")
                                      (("1"
                                        (expand_ol)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replaces -2 :dir RL)
                                                  (("1"
                                                    (use
                                                     "binomial_theorem")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand
                                                         "eval_ac_noise")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (use
                                                               "expt_x0")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "C_n")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "identity_mult")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "eval_pd_noise_rec_pds_def")
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sigma")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("1"
                                                                                          (use
                                                                                           "expt_x1")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "C_n_1")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1
                                                                                                 :where
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "get_noise_by_idx(car(pd(Xa))`1, N) *
                             (cv(Xa) ^ (n - 1) * car(pd(Xa))`2 * n) = (cv(Xa) ^ (n - 1)) * get_noise_by_idx(car(pd(Xa))`1, N) *
                              car(pd(Xa))`2
                              * n")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (name
                                                                                                             "step"
                                                                                                             "2")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "2<=step AND step<=n")
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -2
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (name
                                                                                                                   "bstep"
                                                                                                                   "n - step")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "step = n - bstep")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1
                                                                                                                         (1
                                                                                                                          -3))
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (generalize
                                                                                                                             "bstep"
                                                                                                                             "bstep"
                                                                                                                             "nat")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (induct
                                                                                                                               "bstep"
                                                                                                                               :name
                                                                                                                               "NAT_induction")
                                                                                                                              (("1"
                                                                                                                                (skeep)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "sigma")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "pow_var_pd"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "j=0")
                                                                                                                                              (("1"
                                                                                                                                                (replaces
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "eval_pd_noise_rec_pds_def")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand_ol)
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand_ol)
                                                                                                                                                              (("1"
                                                                                                                                                                (replaces
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "pow_var_compatible?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -6
                                                                                                                                                                       "n-2")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -6)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (use
                                                                                                                                                                             "C_0")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replaces
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (use
                                                                                                                                                                                 "expt_x0")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replaces
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (use
                                                                                                                                                                                     "mult_expt")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replaces
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "nth")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (use
                                                                                                                                               "eval_pd_noise_rec_pds_def")
                                                                                                                                              (("1"
                                                                                                                                                (expand_ol)
                                                                                                                                                (("1"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "get_noise_by_idx(-2 - j + n + newidx, N) *
                                           (C(n, n - j) * cv(Xa) ^ j * car(pd(Xa))`2 ^ (n - j)) = C(n, j) * cv(Xa) ^ j *
                                            (get_noise_by_idx(car(pd(Xa))`1, N) * car(pd(Xa))`2) ^
                                             (n - j)")
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "j-1")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replaces
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "sigma"
                                                                                                                                                                 2
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "pow_var_compatible?")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -7
                                                                                                                                                         "n - j -2")
                                                                                                                                                        (("2"
                                                                                                                                                          (replaces
                                                                                                                                                           -7)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "nth")
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "mult_expt")
                                                                                                                                                              (("1"
                                                                                                                                                                (replaces
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (use
                                                                                                                                                                   "C_symmetry")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 (1
                                                                                                                                                  4))
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "/=")
                                                                                                                                                  (("2"
                                                                                                                                                    (use
                                                                                                                                                     "zero_times3")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -2)
                                                                                                                                                        (("2"
                                                                                                                                                          (use
                                                                                                                                                           "zero_times3")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "expt_nonzero")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("3"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("4"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("3"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("4"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("4"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("5"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("5"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("6"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("6"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("7"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("7"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "/=")
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      2
                                                                                      5))
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "nth[[nat, nzBaseType]](pd(Xa), 0)`2")
                                                                                      (("2"
                                                                                        (use
                                                                                         "expt_nonzero")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "/="
                                                                                           :assert?
                                                                                           none)
                                                                                          (("2"
                                                                                            (use
                                                                                             "zero_times3")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (case "n=1")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "eval_ac_noise")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (expand_ol)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (list type-decl nil list_adt nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" affine_pow nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (mult_expt formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (N skolem-const-decl "Noise" affine_pow nil)
    (Xa skolem-const-decl "AffineCombination" affine_pow nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (represents_var? const-decl "bool" affine nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (identity_mult formula-decl nil number_fields nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (C_n_1 formula-decl nil binomial "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (C_0 formula-decl nil binomial "reals/")
    (j skolem-const-decl "nat" affine_pow nil)
    (C_symmetry formula-decl nil binomial "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (zero_times3 formula-decl nil real_props nil)
    (bstep skolem-const-decl "int" affine_pow nil)
    (C const-decl "posnat" binomial "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (eval_pd_noise def-decl "real" affine nil)
    (next_idx const-decl "nat" affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= newidx + (k - 2)}"
     affine_pow nil)
    (subrange type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (C_n formula-decl nil binomial "reals/")
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (binomial_theorem formula-decl nil polynomials "reals/")
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (BaseType type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil))
   nil))
 (pow_var_compatible_noise_TCC1 0
  (pow_var_compatible_noise_TCC1-1 nil 3630864964
   ("" (subtype-tcc) nil nil) nil nil))
 (pow_var_compatible_noise_TCC2 0
  (pow_var_compatible_noise_TCC2-1 nil 3630864964
   ("" (subtype-tcc) nil nil) nil nil))
 (pow_var_compatible_noise_TCC3 0
  (pow_var_compatible_noise_TCC3-1 nil 3630864964
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil))
 (pow_var_compatible_noise 0
  (pow_var_compatible_noise-1 nil 3630865179
   ("" (skeep)
    (("" (expand "pow_var_compatible?")
      (("" (induct "i_1")
        (("1" (flatten)
          (("1" (assert)
            (("1" (use "gnbi_updr")
              (("1" (assert)
                (("1" (replaces -1)
                  (("1" (use "gnbi_updr_2")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (typepred "newidx")
                          (("1" (expand "next_idx")
                            (("1" (flatten)
                              (("1"
                                (expand "last_idx")
                                (("1"
                                  (typepred "Xa")
                                  (("1"
                                    (lift-if -3)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (use
                                             "olidx_car_last[nzBaseType]")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skeep)
                        (("2" (use "power_Epsilon_judg")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (skeep)
                  (("2" (use "power_Epsilon_judg")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem 1 "j")
          (("2" (flatten)
            (("2" (lemma "gnbi_updr")
              (("2" (inst? -1 :where 1)
                (("1" (assert)
                  (("1" (replaces -1)
                    (("1" (lemma "gnbi_updr_2")
                      (("1" (inst? -1 :where 1)
                        (("1" (assert)
                          (("1" (hide-all-but 1)
                            (("1" (typepred "newidx")
                              (("1"
                                (expand "next_idx")
                                (("1"
                                  (expand "last_idx")
                                  (("1"
                                    (lift-if -1)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (use
                                             "olidx_car_last[nzBaseType]")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (typepred "Xa")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (skeep)
                            (("2" (use "power_Epsilon_judg")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skeep)
                    (("2" (use "power_Epsilon_judg")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1)
          (("3" (skeep)
            (("3" (use "power_Epsilon_judg") (("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pow_var_compatible? const-decl "bool" affine_pow nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (gnbi_updr formula-decl nil affine nil)
    (power_Epsilon_judg judgement-tcc nil affine_pow nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (last_idx const-decl "int" indexed_list nil)
    (gnbi_updr_2 formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (upd_noise_range def-decl "Noise" affine nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (next_idx const-decl "nat" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (n skolem-const-decl "{n | n > 1}" affine_pow nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (Xa skolem-const-decl
     "{Xa | represents_var?(Xa) AND length(pd(Xa)) > 0}" affine_pow
     nil)
    (N skolem-const-decl "Noise" affine_pow nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil)))

