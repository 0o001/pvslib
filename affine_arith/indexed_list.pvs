indexed_list[T: TYPE]: THEORY
BEGIN

  IMPORTING list_more_props,
            ordered_list

  lt_idx(t1,t2:[nat, T]): bool = t1`1 < t2`1

  le_idx(t1,t2:[nat, T]): bool = t1`1 = t2`1 OR lt_idx(t1,t2)

  olidx_car_last: LEMMA
    FORALL(ol: ordered_list[[nat,T], lt_idx[T]]):
    NOT null?(ol) IMPLIES car_ol(ol)`1 <= last_ol(ol)`1

  last_idx(l: ordered_list[[nat,T],lt_idx[T]]): int
    = IF NOT null?(l) THEN last_ol(l)`1 ELSE -1 ENDIF

  first(l: ordered_list[[nat,T],lt_idx[T]], n: nat): RECURSIVE (prefixes(l))
    % Returns a prefix of l that contains information about the indexes 0 to n-1.
    = CASES l OF
        null: null,
        cons(h,t): IF h`1 < n THEN cons_ol[[nat,T],lt_idx[T]](h, first(t,n)) 
          		    ELSE null ENDIF 
      ENDCASES
    MEASURE length(l)

  n: VAR nat

  first_is_ol: LEMMA
    FORALL (l: ordered_list[[nat,T],lt_idx[T]]):
    ordered_list?[[nat,T],lt_idx[T]](first[T](l, n))

  last_up_to_idx: LEMMA 
    FORALL(l: ordered_list[[nat,T],lt_idx[T]]):
      NOT null?(first[T](l, n)) 
      IMPLIES last_ol[[nat,T],lt_idx[T]](first[T](l, n))`1 < n

  first_zero_prop: LEMMA
    FORALL(l: ordered_list[[nat,T],lt_idx[T]]): first(l, 0) = null

  first_all_prop: LEMMA
    FORALL(l: ordered_list[[nat,T],lt_idx[T]]): n > last_idx(l) IMPLIES  first(l, n) = l

     m: VAR nat

  car_up_to_idx: LEMMA 
    FORALL(l: ordered_list[[nat,T],lt_idx[T]]):
    NOT null?(first[T](l, n)) AND NOT null_ol?(l) AND m < car_ol(l)`1
    IMPLIES m < car_ol[[nat,T],lt_idx[T]](first(l, n))`1

END indexed_list
