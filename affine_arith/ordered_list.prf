(ordered_list
 (ordered_list?_TCC1 0
  (ordered_list?_TCC1-1 nil 3620487638 ("" (tcc)) nil nil))
 (ordered_list?_TCC2 0
  (ordered_list?_TCC2-1 nil 3620487638 ("" (tcc))
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (ol_suffix 0
  (ol_suffix-1 nil 3620556213 ("" (grind) nil nil)
   ((ordered_list? def-decl "bool" ordered_list nil)) shostak))
 (null_ol_TCC1 0
  (null_ol_TCC1-1 nil 3620647273
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((ordered_list? def-decl "bool" ordered_list nil)) nil))
 (car_ol_TCC1 0
  (car_ol_TCC1-1 nil 3620643049 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil ordered_list nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (cdr_ol_TCC1 0
  (cdr_ol_TCC1-1 nil 3620643049
   ("" (skeep)
    (("" (use "ol_suffix")
      (("" (typepred "nnol")
        (("" (inst -2 "car(nnol)") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((ol_suffix formula-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil ordered_list nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil))
 (length_cdr_ol 0
  (length_cdr_ol-2 "" 3620754840 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil ordered_list nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil))
   shostak)
  (length_cdr_ol-1 nil 3620749834
   ("" (grind)
    (("" (expand "length" 1 1)
      (("" (lift-if)
        (("" (grind)
          (("1" (case "ol!1 = cons(car(ol!1), cdr(ol!1))")
            (("1" (grind) nil nil)
             ("2" (grind)
              (("2" (hide-all-but 1)
                (("2" (use "list_cons_eta[T]") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ol_ind_sch_TCC1 0
  (ol_ind_sch_TCC1-1 nil 3620486374 ("" (tcc)) nil nil))
 (ol_ind_sch 0
  (ol_ind_sch-1 nil 3620487676
   ("" (skeep)
    (("" (induct "ol")
      (("1" (typepred "ol!1") (("1" (propax) nil nil)) nil)
       ("2" (assert) nil nil)
       ("3" (skolem 1 ("x" "ol"))
        (("3" (flatten 1)
          (("3" (inst?)
            (("1" (split -4)
              (("1" (inst?) nil nil)
               ("2" (prop)
                (("2" (hide-all-but (-1 1))
                  (("2" (use "ol_suffix") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil ordered_list nil)
    (list_induction formula-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (x skolem-const-decl "T" ordered_list nil)
    (ol_suffix formula-decl nil ordered_list nil)
    (ol skolem-const-decl "list[T]" ordered_list nil))
   shostak))
 (cons_ol_TCC1 0
  (cons_ol_TCC1-1 nil 3620502735 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil ordered_list nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil))
   nil))
 (cons_ol_TCC2 0
  (cons_ol_TCC2-1 nil 3620647273 ("" (grind) nil nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< formal-const-decl "pred[[T, T]]" ordered_list nil)
    (pred type-eq-decl nil defined_types nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   nil))
 (last_ol_TCC1 0 (last_ol_TCC1-1 nil 3620502735 ("" (tcc)) nil nil))
 (last_ol_TCC2 0
  (last_ol_TCC2-1 nil 3620502735
   ("" (skeep)
    (("" (typepred "ol")
      (("" (use "ol_suffix") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ol_suffix formula-decl nil ordered_list nil))
   shostak))
 (last_ol_TCC3 0
  (last_ol_TCC3-1 nil 3620647273 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)) nil))
 (appendable_ol?_TCC1 0
  (appendable_ol?_TCC1-1 nil 3620647273 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil ordered_list nil)
    (list type-decl nil list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil))
 (append_ol_TCC1 0
  (append_ol_TCC1-1 nil 3620502735
   ("" (induct "ol1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("ol1_h" "ol1_t"))
      (("3" (flatten)
        (("3" (skeep)
          (("3" (use "ol_suffix")
            (("3" (assert)
              (("3" (inst -2 "ol2")
                (("1" (expand "append" 1)
                  (("1" (expand "ordered_list?" 1)
                    (("1" (flatten 1)
                      (("1" (split 2)
                        (("1" (expand "append" 1)
                          (("1" (lift-if)
                            (("1" (typepred "ol2")
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten 1)
                                  (("1"
                                    (case
                                     "null?(ol1_t) AND NOT null?(append(ol1_t, ol2)) IMPLIES NOT null?(ol2)")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "ol2") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (first_ol const-decl "T" ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ol1_t skolem-const-decl "list[T]" ordered_list nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (ol1_h skolem-const-decl "T" ordered_list nil)
    (ol2 skolem-const-decl
     "{ol2 | appendable_ol?(cons(ol1_h, ol1_t), ol2)}" ordered_list
     nil)
    (ol_suffix formula-decl nil ordered_list nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil ordered_list nil)
    (append def-decl "list[T]" list_props nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (ordered_append 0
  (ordered_append-1 nil 3620742534
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("h_" "t_"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "ordered_list?" 1 1)
            (("2" (inst -1 "l2")
              (("2" (expand "append" -2)
                (("2" (use "ol_suffix")
                  (("2" (assert)
                    (("2" (prop) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ol_suffix formula-decl nil ordered_list nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil ordered_list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))

