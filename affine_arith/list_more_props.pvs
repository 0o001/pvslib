list_more_props[T: TYPE]: THEORY
BEGIN
	
  member_append_fi: LEMMA
    FORALL(i: T, l1,l2: list[T]):
    member(i, append(l1, l2)) IMPLIES (member(i, l1) OR member(i, l2))

  null_append: LEMMA
    FORALL(l1,l2: list[T]):
    null?(append(l1, l2)) IFF null?(l1) AND null?(l2)

  prefixes(l1:list[T])(l2:list[T]) : bool
    = EXISTS(l3: list[T]): append(l2,l3) = l1

  suffixes(l1:list[T])(l2:list[T]) : bool
    = EXISTS(l3: list[T]): append(l3,l2) = l1

  nnprefixes_same_head: LEMMA
    FORALL(l1: list[T], l2: (prefixes[T](l1))): 
    NOT null?(l1) AND NOT null?(l2) IMPLIES car(l1) = car(l2)

  appin(l:list[T])(i:T): bool = member(i,l)

  take(l: list[T], n: nat): RECURSIVE list[T]
    = IF length(l) < n THEN take(l, n-1)
      ELSIF n = 0 THEN null
      ELSE cons(car(l), take(cdr(l), n-1)) ENDIF
    MEASURE n

  nth_append: LEMMA
  FORALL(l1,l2: list[T], (n: nat| n >= length(l1) AND n < length(append(l1, l2)))): 
  nth(append(l1, l2), n) = nth(l2, n - length(l1))

  nth_append2: LEMMA
  FORALL(l1,l2: list[T], (n: below(length(l1)))): 
  nth(append(l1, l2), n) = nth(l1, n)

  length_take: LEMMA FORALL(l:list[T],n:nat):
  length(take(l,n)) = min(length(l), n)

  member_nth: LEMMA
  FORALL(l: list[T], t: T): 
  member(t, l) IMPLIES EXISTS(i: below(length(l))): nth(l,i) = t

  nth_take: LEMMA
  FORALL(l: list[T], i: below(length(l)+1), (j: nat | j<i)): 
  member(nth(l, j), take(l, i))

  nth_take2: LEMMA
  FORALL(l: list[T], i: nat, (j: nat | j<i and j<length(l))): 
  nth(take(l, i), j) = nth(l, j)

END list_more_props
